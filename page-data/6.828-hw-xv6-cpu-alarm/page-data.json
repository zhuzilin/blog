{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-hw-xv6-cpu-alarm/","webpackCompilationHash":"7b874fc567e065ad1396","result":{"data":{"markdownRemark":{"html":"<p>这次的作业和之前的system call那次的作业非常像，这次是加入一个叫alarm的system call。其主要的功能是每间隔若干个cpu tick就触法一次handle函数。所以这里不再赘述如何创建一个system call，而是关注于不同的地方。</p>\n<p>作业中给的测试代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// alarmtest.c</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"types.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stat.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"user.h\"</span></span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">periodic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"alarmtest starting\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">alarm</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> periodic<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">25</span><span class=\"token operator\">*</span><span class=\"token number\">500000</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">%</span> <span class=\"token number\">250000</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\".\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">periodic</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"alarm!\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意到period是调用的定义在<code class=\"language-text\">user.h</code>中的<code class=\"language-text\">printf</code>这个函数是用户函数，而不是kernel函数，也就是kernel是不能调用这个函数的，所以只能在<code class=\"language-text\">trap</code>中把<code class=\"language-text\">eip</code>指向这个函数，返回让其在用户环境中运行。所以在<code class=\"language-text\">trap.c</code>中，需要加入的代码是：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">case</span> T_IRQ0 <span class=\"token operator\">+</span> IRQ_TIMER<span class=\"token operator\">:</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>cs <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>alarmcountdown<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>alarmcountdown <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>alarmcountdown <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>alarmticks<span class=\"token punctuation\">;</span>\n        tf<span class=\"token operator\">-></span>esp <span class=\"token operator\">-=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>uint <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> tf<span class=\"token operator\">-></span>esp <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>eip<span class=\"token punctuation\">;</span>\n        tf<span class=\"token operator\">-></span>eip <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>alarmhandler<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">cpuid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tickslock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      ticks<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ticks<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>tickslock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">lapiceoi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意，只加入了中间的一部分，后面的是原来就有的。相当于是认为的为handler创建了一个frame，或者说用c实现了汇编中的<code class=\"language-text\">call</code>。为什么这么做而不是在kernel里面直接调用函数在下面有讲解。</p>\n<p>下面我们跟着lecture 8，对我们的代码进行测试，首先加入断点并运行<code class=\"language-text\">alarmtest</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span> sys_alarm</code></pre></div>\n<p>首先，我们来看syscall是怎么知道用的是哪一个system call，在</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> print myproc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span>tf-<span class=\"token operator\">></span>eax\n<span class=\"token variable\">$1</span> <span class=\"token operator\">=</span> 23</code></pre></div>\n<p>这里的<code class=\"language-text\">tf-&gt;eax</code>保存了vector number。</p>\n<p>然后我们来看看stack</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> x/4x myproc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span>tf-<span class=\"token operator\">></span>esp\n0x2fac: 0x00000034      0x00000003      0x00000080      0x00000000</code></pre></div>\n<p>结合<code class=\"language-text\">alarmtest.asm</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">...\n  28:\t68 80 00 00 00       \tpush   $0x80\n  2d:\t6a 03                \tpush   $0x3\n  2f:\te8 66 03 00 00       \tcall   39a &lt;alarm&gt;\n  34:\t83 c4 10             \tadd    $0x10,%esp\n...</code></pre></div>\n<p>可以知道<code class=\"language-text\">0x34</code>是return address，<code class=\"language-text\">0x3</code>和<code class=\"language-text\">0x80</code>都是<code class=\"language-text\">alarm</code>的参数。</p>\n<p>我们再来看<code class=\"language-text\">alarmhandler</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> print myproc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span>alarmhandler\n<span class=\"token variable\">$2</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>void <span class=\"token punctuation\">(</span>*<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">))</span> 0x80</code></pre></div>\n<p>对应的就是<code class=\"language-text\">alarmtest.asm</code>中<code class=\"language-text\">periodic</code>函数的起始位置。</p>\n<p>为什么我们不在<code class=\"language-text\">trap</code>中直接调用<code class=\"language-text\">alarmhandler</code>呢？</p>\n<ul>\n<li>不能这么做！因为这样会在kernel mode下运行user代码，让user有可能修改kernel stack，直接导致隔离失败，非常危险。</li>\n<li>\n<p>试过之后，会发现并不会crash，只会显示<code class=\"language-text\">.</code>而不会显示<code class=\"language-text\">alarm</code>。即使是在<code class=\"language-text\">sys_alarm</code>里面调用<code class=\"language-text\">alarmhandler</code>也会出现问题。如果我们在<code class=\"language-text\">sys_write</code>里面加断点可以发现：在<code class=\"language-text\">alarmhandle</code>里面调用的<code class=\"language-text\">sys_write</code>里</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> print myproc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span>tf-<span class=\"token operator\">></span>eax\n<span class=\"token variable\">$2</span> <span class=\"token operator\">=</span> 16\n<span class=\"token punctuation\">(</span>gdb<span class=\"token punctuation\">)</span> x/4x myproc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>-<span class=\"token operator\">></span>tf-<span class=\"token operator\">></span>esp\n0x495:  0x8310c483      0xb60f01c6      0xdb84ff5e      0xff857774</code></pre></div>\n<p>也就是说<code class=\"language-text\">sys_write</code>里面的<code class=\"language-text\">%esp</code>并没有保存write需要的参数，但是正确保存了<code class=\"language-text\">%eax</code>，说明trapframe还是正确地被保存了的。所以问题就在于esp。原因应该是从CPL=0到CPL=0的中断中硬件并没有切换stack，所以就没有保存<code class=\"language-text\">%esp</code>，所以<code class=\"language-text\">%esp</code>中有垃圾。详情可以见<code class=\"language-text\">x86.h</code>中<code class=\"language-text\">trapframe</code>最下面的注释：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">trapframe</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token comment\">// below here only when crossing rings, such as from user to kernel</span>\nuint esp<span class=\"token punctuation\">;</span>\nushort ss<span class=\"token punctuation\">;</span>\nushort padding6<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n</ul>\n<p>虽然不能正常运行，能够在kernel里面直接调用<code class=\"language-text\">alarmhandler</code>是一件很讨厌的事。这说明kernel可以直接跳到user instruction里去，那么user就可以更改kernel stack，而且神奇的是system call(<code class=\"language-text\">INT</code>指令)竟然可以在kernel里面运行。这些都是在设计xv6的时候不希望发生的事！</p>\n<p>出现上述现象是因为x86的硬件不提供isolation</p>\n<ul>\n<li>\n<p>x86提供的很多相互独立的feature（page table, INT, &#x26;c）之间是可能被隔离的，但这不是默认设置！</p>\n<p>（不知道可不可以这么理解，就是x86允许你这么写代码，也就是不会报错，但是设计人员应当避免这种写法。）</p>\n</li>\n</ul>\n<p>如果<code class=\"language-text\">trap</code>不检查<code class=\"language-text\">CPL==3</code>会出现什么？</p>\n<ul>\n<li>虽然lectue-note里面说seems to work，但是我这里是会卡住的</li>\n<li>对于<code class=\"language-text\">CPL == 0</code>的状态，因为是从CPL=0到CPL=0的中断，所以不会保存<code class=\"language-text\">%esp</code>，<code class=\"language-text\">esp</code>中会有垃圾，会出现奇怪的现象。</li>\n<li>不过从这个实验中我们可以得知，在kernel状态下仍然是可以有中断的。</li>\n</ul>\n<p>如果用户给的handler指向了合适的kernel 地址，就可以运行kernel中的指令。</p>\n<p>如果运行handler之时有一个time interrupt出现了该怎么办？</p>\n<ul>\n<li>可能work，但是会非常令人困惑，并且会导致user stack爆栈（这个不理解...）</li>\n<li>或许在完成handler之前，kernel应该关闭timer</li>\n</ul>\n<p>如果handler修改寄存器的话，应该在调用之前保存寄存器状态。</p>","frontmatter":{"title":"6.828 Homework xv6 CPU alarm","date":"2019-02-26T16:09:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-hw-xv6-cpu-alarm/"}}}