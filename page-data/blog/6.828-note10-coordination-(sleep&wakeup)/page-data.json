{"componentChunkName":"component---src-templates-blog-post-js","path":"/blog//6.828-note10-coordination-(sleep&wakeup)/","webpackCompilationHash":"d15a31acc5afe58c139f","result":{"data":{"markdownRemark":{"html":"<p>这里会记录阅读6.828课程lecture note的我的个人笔记。可能会中英混杂，不是很适合外人阅读，也请见谅。</p>\n<h2>Lecture 11: Coordination (sleep&#x26;wakeup)</h2>\n<h3>sequence coordination</h3>\n<p>有的时候线程需要等待某些事件，比如</p>\n<ul>\n<li>disk的读写</li>\n<li>pipe reader to make space in pipe</li>\n<li>child exit(<code class=\"language-text\">wait</code>)。</li>\n</ul>\n<p>对于这些事件，如果就是用一个spinlock显然太浪费了。更好的解决方法是用一些可以原生的coordination primitives来把CPU yield出来，这些primitives包括：</p>\n<ul>\n<li>sleep &#x26; wakeup (xv6)</li>\n<li>condition variables (homework)</li>\n<li>barriers (homework)</li>\n</ul>\n<p>等等（注意sleep &#x26; wake的condition variable实际上有异曲同工之妙）</p>\n<h3>sleep &#x26; wakeup</h3>\n<p><code class=\"language-text\">sleep</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Atomically release lock and sleep on chan.</span>\n<span class=\"token comment\">// Reacquires lock when awakened.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>chan<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">spinlock</span> <span class=\"token operator\">*</span>lk<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sleep\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lk <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sleep without lk\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Must acquire ptable.lock in order to</span>\n  <span class=\"token comment\">// change p->state and then call sched.</span>\n  <span class=\"token comment\">// Once we hold ptable.lock, we can be</span>\n  <span class=\"token comment\">// guaranteed that we won't miss any wakeup</span>\n  <span class=\"token comment\">// (wakeup runs with ptable.lock locked),</span>\n  <span class=\"token comment\">// so it's okay to release lk.</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lk <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  <span class=\"token comment\">//DOC: sleeplock0</span>\n    <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//DOC: sleeplock1</span>\n    <span class=\"token function\">release</span><span class=\"token punctuation\">(</span>lk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token comment\">// Go to sleep.</span>\n  p<span class=\"token operator\">-></span>chan <span class=\"token operator\">=</span> chan<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> SLEEPING<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">sched</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Tidy up.</span>\n  p<span class=\"token operator\">-></span>chan <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Reacquire original lock.</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>lk <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  <span class=\"token comment\">//DOC: sleeplock2</span>\n    <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span>lk<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">sleep</code>的思路很简单，就是把<code class=\"language-text\">p-&gt;state</code>设置为<code class=\"language-text\">SLEEPING</code>然后释放掉当前的锁，把<code class=\"language-text\">p-&gt;chan</code>设置为传入的channel，然后调用<code class=\"language-text\">sched</code>也就是进行context switch。在返回的时候重新<code class=\"language-text\">acquire</code>那个锁。</p>\n<p>需要注意的是，对于sleep来acquire的锁必须要只能用sleep进行acquire，也就是不能有一个函数直接就acquire了，不然的话这边锁刚一释放，那边就直接acquire肯定是不行的。如果前后运行两个sleep，第二个会因为第一个已经acquire了<code class=\"language-text\">ptable</code>而卡在那个<code class=\"language-text\">if</code>的地方。而进行wake之后，需要等第一个进程把<code class=\"language-text\">ptable.lock</code>释放才行。而且还要注意最后的<code class=\"language-text\">acquire(lk)</code>会在实际应用函数中被抵消，如下面<code class=\"language-text\">iderw</code>的最后。</p>\n<p><strong>注意</strong>，在返回的时候应当是在<code class=\"language-text\">ptable.lock</code>是被aquire的状态的，所以直到锁重新被获取前是不会有中断的。这也是实现sleep的非常重要的一点。</p>\n<p>然后是<code class=\"language-text\">wakeup</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Wake up all processes sleeping on chan.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>chan<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">wakeup1</span><span class=\"token punctuation\">(</span>chan<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Wake up all processes sleeping on chan.</span>\n<span class=\"token comment\">// The ptable lock must be held.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">wakeup1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>chan<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> SLEEPING <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token operator\">-></span>chan <span class=\"token operator\">==</span> chan<span class=\"token punctuation\">)</span>\n      p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNABLE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">wakeup</code>就更简单了，把所有的在某个channel上的sleeping的channel的状态都改为<code class=\"language-text\">RUNNABLE</code>。</p>\n<p>注意有可能一次会有多个进程被唤醒了。比如说pipe对应的好几个进程都被唤醒了，但是只有1个能继续运行，对于其他的进行来说，最好继续<code class=\"language-text\">sleep</code>，所以<code class=\"language-text\">sleep</code>往往是用一个循环来进行的，来防止这种spurious wakeup。</p>\n<p>sleep和wakeup的两个问题是</p>\n<ul>\n<li>lost wakeup</li>\n<li>termination while sleeping</li>\n</ul>\n<h3>xv6 usage example</h3>\n<p>我们来看一个xv6里面的例子，<code class=\"language-text\">iderw</code>和<code class=\"language-text\">ideintr</code>。这里IDE指Integrated Drive Electronics，可以理解成和硬盘的接口。</p>\n<p>在看这两个函数之前，需要清楚<code class=\"language-text\">ide.c</code>中最重要的一个变量是<code class=\"language-text\">idequeue</code>，其保存了当前在处理的buffer queue，就是说会先处理<code class=\"language-text\">idequeue</code>对应的buffer，之后是<code class=\"language-text\">idequeue-&gt;qnext</code>的，一次类推。在在使用这个队列的时候不许要hold <code class=\"language-text\">idelock</code>。</p>\n<p>下面我们来看这两个函数，<code class=\"language-text\">iderw</code>表示对buffer进行读写处理。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Sync buf with disk.</span>\n<span class=\"token comment\">// If B_DIRTY is set, write buf to disk, clear B_DIRTY, set B_VALID.</span>\n<span class=\"token comment\">// Else if B_VALID is not set, read buf from disk, set B_VALID.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">iderw</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pp<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">holdingsleep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iderw: buf not locked\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>B_VALID<span class=\"token operator\">|</span>B_DIRTY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> B_VALID<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iderw: nothing to do\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>dev <span class=\"token operator\">!=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>havedisk1<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iderw: ide disk 1 not present\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>idelock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//DOC:acquire-lock</span>\n\n  <span class=\"token comment\">// Append b to idequeue.</span>\n  b<span class=\"token operator\">-></span>qnext <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>pp<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span>idequeue<span class=\"token punctuation\">;</span> <span class=\"token operator\">*</span>pp<span class=\"token punctuation\">;</span> pp<span class=\"token operator\">=</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pp<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>qnext<span class=\"token punctuation\">)</span>  <span class=\"token comment\">//DOC:insert-queue</span>\n    <span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>pp <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Start disk if necessary.</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idequeue <span class=\"token operator\">==</span> b<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">idestart</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Wait for request to finish.</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>B_VALID<span class=\"token operator\">|</span>B_DIRTY<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> B_VALID<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>idelock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>idelock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就是把<code class=\"language-text\">buf *b</code>放在<code class=\"language-text\">idequeue</code>的最后面，如果不能马上处理这个buffer，就<code class=\"language-text\">sleep</code>，用的锁是<code class=\"language-text\">idelock</code>，channel是<code class=\"language-text\">b</code>。注意这里就用了前面说到的循环。</p>\n<p>当disk read完成了的时候就会调用<code class=\"language-text\">ideintr</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Interrupt handler.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">ideintr</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// First queued buffer is the active request.</span>\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>idelock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> idequeue<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>idelock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  idequeue <span class=\"token operator\">=</span> b<span class=\"token operator\">-></span>qnext<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Read data if needed.</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> B_DIRTY<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">idewait</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">insl</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1f0</span><span class=\"token punctuation\">,</span> b<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> BSIZE<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Wake process waiting for this buf.</span>\n  b<span class=\"token operator\">-></span>flags <span class=\"token operator\">|=</span> B_VALID<span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;=</span> <span class=\"token operator\">~</span>B_DIRTY<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Start disk on next buf in queue.</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>idequeue <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">idestart</span><span class=\"token punctuation\">(</span>idequeue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>idelock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就是把读写完的东西处理完之后调用<code class=\"language-text\">wakeup(b)</code>。</p>\n<h3>lost wakeup</h3>\n<p>如果<code class=\"language-text\">iderw</code>在调用<code class=\"language-text\">sleep</code>之前私自释放了<code class=\"language-text\">idelock</code>，那么在<code class=\"language-text\">sleep</code>之前，就有可能调用了<code class=\"language-text\">ideintr</code>，调用<code class=\"language-text\">sleep</code>之后就不会有<code class=\"language-text\">wakeup</code>了，这就导致了\"lost wakeup\"。</p>\n<h3>xv6 lost wakeup solution</h3>\n<p>目标：</p>\n<ul>\n<li>对于<code class=\"language-text\">sleep</code>的循环，不要在释放条件锁和<code class=\"language-text\">p-&gt;state = SLEEPING</code>之间调用<code class=\"language-text\">wakeup</code>。</li>\n<li>在<code class=\"language-text\">SLEEPING</code>状态下释放condition lock</li>\n</ul>\n<p>xv6的策略：</p>\n<ul>\n<li><code class=\"language-text\">wakeup</code>要hold <code class=\"language-text\">ptable.lock</code>和条件锁。</li>\n<li>sleeper任何时候都hold  <code class=\"language-text\">ptable.lock</code>或条件锁</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  diagram:\n    |----idelock----|\n                  |---ptable.lock---|\n                                     |----idelock----|\n                                      |-ptable.lock-|</code></pre></div>\n<p>从而让这两个东西不能同时运行。这也是为什么需要<code class=\"language-text\">sleep</code>有一个lock argument。</p>\n<p>人们还发明了不少sequence coordination primitives，它们都需要解决wakeup problem。如：</p>\n<ul>\n<li>condition variables (similar to sleep/wakeup)</li>\n<li>counting semaphores</li>\n<li>wait queue (linux kernel)</li>\n</ul>\n<h3>another xv6 usage example</h3>\n<p>除了上面IDE的例子，另外一个使用了sleep &#x26; wakeup的是<code class=\"language-text\">pipe</code>。我们在<code class=\"language-text\">shell</code>的那次作业中使用过其接口，现在来看看其内部是如何实现的。</p>\n<p>一个pipe的数据结构是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pipe</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">spinlock</span> lock<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span>PIPESIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  uint nread<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// number of bytes read</span>\n  uint nwrite<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// number of bytes written</span>\n  <span class=\"token keyword\">int</span> readopen<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// read fd is still open</span>\n  <span class=\"token keyword\">int</span> writeopen<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// write fd is still open</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>我们直接来看<code class=\"language-text\">piperead</code>和<code class=\"language-text\">pipewrite</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>\n<span class=\"token function\">pipewrite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pipe</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>nwrite <span class=\"token operator\">==</span> p<span class=\"token operator\">-></span>nread <span class=\"token operator\">+</span> PIPESIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  <span class=\"token comment\">//DOC: pipewrite-full</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>readopen <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>killed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>nread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>nwrite<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//DOC: pipewrite-sleep</span>\n    <span class=\"token punctuation\">}</span>\n    p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>p<span class=\"token operator\">-></span>nwrite<span class=\"token operator\">++</span> <span class=\"token operator\">%</span> PIPESIZE<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> addr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>nread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//DOC: pipewrite-wakeup1</span>\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> n<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">piperead</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pipe</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>nread <span class=\"token operator\">==</span> p<span class=\"token operator\">-></span>nwrite <span class=\"token operator\">&amp;&amp;</span> p<span class=\"token operator\">-></span>writeopen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  <span class=\"token comment\">//DOC: pipe-empty</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>killed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>nread<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//DOC: piperead-sleep</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>  <span class=\"token comment\">//DOC: piperead-copy</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>nread <span class=\"token operator\">==</span> p<span class=\"token operator\">-></span>nwrite<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    addr<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>p<span class=\"token operator\">-></span>nread<span class=\"token operator\">++</span> <span class=\"token operator\">%</span> PIPESIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">wakeup</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>nwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//DOC: piperead-wakeup</span>\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>感觉就是一个1 writer 1 reader的writer reader problem。通过<code class=\"language-text\">sleep</code>和<code class=\"language-text\">wakeup</code>实现需要的blocking。</p>\n<p>注意这里的<code class=\"language-text\">sleep</code>对应的channel，以及在<code class=\"language-text\">piperead</code>的最后仍然是要<code class=\"language-text\">wakeup(&amp;p-&gt;nwrite)</code>的。这是因为在读之前有可能<code class=\"language-text\">p-&gt;data</code>满了，从而write运行了<code class=\"language-text\">sleep</code>，读了一点之后就可以继续写入了，需要唤醒。</p>\n<h3>terminate sleeping thread</h3>\n<p>如果要<code class=\"language-text\">kill</code>一个sleeping的thread，用上一讲提到的给这个进程加一个<code class=\"language-text\">p-&gt;kill</code>的flag，等其唤醒之后进入中断来自己销毁是不合理的，因为进程可能要很久之后才能被唤醒。</p>\n<h3>xv6 terminate sleeping thread solution</h3>\n<p>在<code class=\"language-text\">kill</code>的时候，把所有的<code class=\"language-text\">SLEEPING</code>都标记成<code class=\"language-text\">RUNNABLE</code>，也就是把他们都唤醒。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Kill the process with the given pid.</span>\n<span class=\"token comment\">// Process won't exit until it returns</span>\n<span class=\"token comment\">// to user space (see trap in trap.c).</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">kill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pid <span class=\"token operator\">==</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      p<span class=\"token operator\">-></span>killed <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Wake process from sleep if necessary.</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> SLEEPING<span class=\"token punctuation\">)</span>\n        p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNABLE<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>但是注意<code class=\"language-text\">sleep</code>往往是在一个循环里的，有的函数在循环里面就检查了<code class=\"language-text\">p-&gt;kill</code>从而进行销毁，如<code class=\"language-text\">piperead</code>这是方便的，但是有的则不检查，如<code class=\"language-text\">iderw</code>，不检查的就会继续一段时间直到其进入中断了，如<code class=\"language-text\">iderw</code>会至少执行到system call结束。</p>\n<ul>\n<li>为什么<code class=\"language-text\">iderw</code>不检查<code class=\"language-text\">p-&gt;kill</code>？</li>\n<li>\n<p>if reading, calling FS code expects to see data in the disk buffer!</p>\n<p>if writing (or reading), might be halfway through create()</p>\n<p>quitting now leaves on-disk FS inconsistent. （这里没太明白...）</p>\n</li>\n</ul>\n<p>在xv6中，如果<code class=\"language-text\">kill</code>的进程是user space，那么下一次有system call或者time interrupt的时候就会<code class=\"language-text\">exit</code>。而如果target在kernel，就target就不会再执行user instruction但是可能会在kernel停留很久（kernel这部分没明白...）</p>\n<h3>JOS Solution</h3>\n<ul>\n<li>\n<p>lost wakeup</p>\n<p>JOS在kernel中禁止了中断，所以在condition check和sleep之间不会有wakeup</p>\n</li>\n<li>\n<p>terminate while sleeping</p>\n<p>JOS没有像create这样的blocking multi-step system call，因为既没有file system，也没有disk driver。</p>\n<p>唯一个blocking call是IPC的<code class=\"language-text\">recv()</code></p>\n<ul>\n<li>if env_destroy() is running, the target thread is not running recv() leaves env in a state where it can be safely destroyed (不明白，应该要等用到<code class=\"language-text\">recv</code>再说吧...)</li>\n</ul>\n</li>\n</ul>","frontmatter":{"title":"6.828 笔记10","date":"2019-03-25T23:20:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-note10-coordination-(sleep&wakeup)/"}}}