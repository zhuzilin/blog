{"componentChunkName":"component---src-templates-blog-post-js","path":"/about-monad/","webpackCompilationHash":"5e8a56000f330ee4e5bc","result":{"data":{"markdownRemark":{"html":"<p>实习很闲，趁着没事，学学haskell和写parser。对于这两者来说，非常重要的一个概念就是monad。看知乎的解释看得头疼，自己在网上扒了些资源，来这里来讨论一下monad。</p>\n<p>本篇的主要引用来自wikibooks中的<a href=\"https://en.wikibooks.org/wiki/Haskell\">Haskell</a>。以及不计划设计那种很玄很玄的数学知识。</p>\n<h2>Functor</h2>\n<p>monad可以理解为一个haskell的class，或者说是类似java或者C#的interface。而这个接口实际上和其他的几个接口息息相关。所以先介绍一下其他的几个更简单的，从<code class=\"language-text\">Functor</code>开始。</p>\n<p>对于函数式编程，极为常用的一个函数就是<code class=\"language-text\">map</code>，也就是对一个list的每一个元素施加某一个函数，返回一个新的list。也就是</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">map</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">a</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">b</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>同样，对于树，对于<code class=\"language-text\">Maybe</code>，我们经常需要这样类似的map操作。那么为什么不把其提为一个class呢？这样我们就不需要记忆各种不同map的名字了。根据这个简单的理由，我们有了：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">class</span> <span class=\"token constant\">Functor</span> <span class=\"token hvariable\">f</span> <span class=\"token keyword\">where</span>\n\t<span class=\"token builtin\">fmap</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">fb</span></code></pre></div>\n<p>而实现一个<code class=\"language-text\">Functor</code>就可以直接</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">instance</span> <span class=\"token constant\">Functor</span> <span class=\"token constant\">Maybe</span> <span class=\"token keyword\">where</span>\n    <span class=\"token builtin\">fmap</span> <span class=\"token hvariable\">f</span> <span class=\"token constant\">Nothing</span>  <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span>\n    <span class=\"token builtin\">fmap</span> <span class=\"token hvariable\">f</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>或者</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">instance</span> <span class=\"token constant\">Functor</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">where</span>\n\t<span class=\"token builtin\">fmap</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">map</span></code></pre></div>\n<p><code class=\"language-text\">fmap</code>有以下的一些性质：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">fmap</span> <span class=\"token builtin\">id</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">id</span>\n<span class=\"token builtin\">fmap</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">g</span><span class=\"token operator\"> . </span><span class=\"token hvariable\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">fmap</span> <span class=\"token hvariable\">g</span><span class=\"token operator\"> . </span><span class=\"token builtin\">fmap</span> <span class=\"token hvariable\">f</span></code></pre></div>\n<p>可以用<code class=\"language-text\">&lt;$&gt;</code>表示<code class=\"language-text\">fmap</code>。</p>\n<h2>Applicative Functor</h2>\n<p>上述的<code class=\"language-text\">fmap</code>的缺点在哪里呢？在于调用的函数只能是<code class=\"language-text\">a -&gt; b</code>，换句话说，只能是1个参数的。但是如果要调用超过1个函数的，就会发现，如<code class=\"language-text\">fmap (+) Maybe 3</code>的类型是<code class=\"language-text\">Mapbe (Int -&gt; Int)</code>，也就不能直接再进行<code class=\"language-text\">fmap (+) Maybe 3 Maybe 4</code>这样的计算了。</p>\n<p>所以我们需要一个新的函数，能够让<code class=\"language-text\">Maybe (a -&gt; b)</code>调用<code class=\"language-text\">Maybe a</code>得到<code class=\"language-text\">Maybe b</code>，也就是：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;*></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Maybe</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">b</span></code></pre></div>\n<p>对于<code class=\"language-text\">Maybe</code>，其具体实现是：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">instance</span> <span class=\"token constant\">Applicative</span> <span class=\"token constant\">Maybe</span> <span class=\"token keyword\">where</span>\n    <span class=\"token hvariable\">pure</span>                  <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span>\n    <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;*></span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Just</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">)</span>\n    <span class=\"token hvariable\">_</span>        <span class=\"token operator\">&lt;*></span> <span class=\"token hvariable\">_</span>        <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span></code></pre></div>\n<p>这样<code class=\"language-text\">fmap (+) (Just 3) &lt;*&gt; Just 4</code>就可以返回<code class=\"language-text\">Just 7</code>了。</p>\n<p>不过，值得注意的是，并不是所有<code class=\"language-text\">Applicative</code>类实现的<code class=\"language-text\">&lt;*&gt;</code>都是像<code class=\"language-text\">Maybe</code>这样简单。比如<code class=\"language-text\">[]</code>，就是：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">instance</span> <span class=\"token constant\">Applicative</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">where</span>\n    <span class=\"token hvariable\">pure</span> <span class=\"token hvariable\">x</span>    <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">]</span>\n    <span class=\"token hvariable\">fs</span> <span class=\"token operator\">&lt;*></span> <span class=\"token hvariable\">xs</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">f</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">fs</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p><code class=\"language-text\">&lt;*&gt;</code>以外，Applicative还实现了几个可以用<code class=\"language-text\">fmap</code>和<code class=\"language-text\">&lt;*&gt;</code>实现的常见操作。</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">u</span> <span class=\"token operator\">*></span> <span class=\"token hvariable\">v</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">\\</span><span class=\"token hvariable\">_</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;$></span> <span class=\"token hvariable\">u</span> <span class=\"token operator\">&lt;*></span> <span class=\"token hvariable\">v</span></code></pre></div>\n<p><code class=\"language-text\">*&gt;</code>是指希望执行一下u，但是u并不是需要的参数。所以比较像是前后依次运行指令。</p>\n<h2>Monad</h2>\n<p>终于到了Monad的部分了。Monad实际上就是从Applicative Functor更进一步。这个接口需要实现的两个函数为：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token builtin\">return</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span>\n<span class=\"token punctuation\">(</span><span class=\"token operator\">>>=</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">::</span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">b</span></code></pre></div>\n<p><code class=\"language-text\">return</code>和Applicative的<code class=\"language-text\">pure</code>一样，都是把别的类型，包装在这一类型中的。所以重点就是<code class=\"language-text\">&gt;&gt;=</code>。</p>\n<p><code class=\"language-text\">&gt;&gt;=</code>的目的是把第一个参数里面的<code class=\"language-text\">a</code>作为第二个参数的函数。可以理解为把第一个参数拆箱，然后穿给第二个参数（它是一个函数）。</p>\n<p>举个实际的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">instance</span> <span class=\"token constant\">Monad</span> <span class=\"token constant\">Maybe</span> <span class=\"token keyword\">where</span><span class=\"token operator\">:</span>\n    <span class=\"token builtin\">return</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span>\n    <span class=\"token builtin\">return</span> <span class=\"token hvariable\">x</span>  <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token hvariable\">x</span>\n\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">>>=</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">::</span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Maybe</span> <span class=\"token hvariable\">b</span>\n    <span class=\"token hvariable\">m</span> <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">g</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">case</span> <span class=\"token hvariable\">m</span> <span class=\"token keyword\">of</span>\n                 <span class=\"token constant\">Nothing</span> <span class=\"token operator\">-></span> <span class=\"token constant\">Nothing</span>\n                 <span class=\"token constant\">Just</span> <span class=\"token hvariable\">x</span>  <span class=\"token operator\">-></span> <span class=\"token hvariable\">g</span> <span class=\"token hvariable\">x</span>\t</code></pre></div>\n<p>或者<code class=\"language-text\">[]</code>的：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">instance</span> <span class=\"token constant\">Monad</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>  <span class=\"token keyword\">where</span>\n    <span class=\"token hvariable\">xs</span> <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">f</span>     <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">y</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">xs</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">(</span><span class=\"token operator\">>></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*></span><span class=\"token punctuation\">)</span>\n    <span class=\"token builtin\">fail</span> <span class=\"token hvariable\">_</span>       <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span></code></pre></div>\n<p>这里<code class=\"language-text\">fail</code>是为了错误处理，和Monad没什么关系，是历史遗留问题。然后<code class=\"language-text\">return</code>就是<code class=\"language-text\">pure</code>所以没有再实现，而<code class=\"language-text\">&gt;&gt;</code>的意思是：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">m</span> <span class=\"token operator\">>></span> <span class=\"token hvariable\">n</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">>>=</span> <span class=\"token operator\">\\</span><span class=\"token hvariable\">_</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">n</span></code></pre></div>\n<p>也就是执行完第一个之后，扔掉返回值，再执行第二个。和Applicative的<code class=\"language-text\">*&gt;</code>一样。</p>\n<p>因为bind（>>=）实在是很常见，所以在haskell里面有简化写法：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">let</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">foo</span> <span class=\"token keyword\">in</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token hvariable\">corresponds</span> <span class=\"token hvariable\">to</span>  <span class=\"token hvariable\">foo</span>  <span class=\"token operator\">&amp;</span>  <span class=\"token punctuation\">(</span><span class=\"token operator\">\\</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">-></span> <span class=\"token builtin\">id</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- v &amp; f = f v </span></code></pre></div>\n<p>以及</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;-</span> <span class=\"token hvariable\">foo</span><span class=\"token punctuation\">;</span> <span class=\"token builtin\">return</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>  <span class=\"token hvariable\">corresponds</span> <span class=\"token hvariable\">to</span>  <span class=\"token hvariable\">foo</span> <span class=\"token operator\">>>=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">\\</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">-></span> <span class=\"token builtin\">return</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>Monad的一些性质有：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">m</span> <span class=\"token operator\">>>=</span> <span class=\"token builtin\">return</span>     <span class=\"token operator\">=</span>  <span class=\"token hvariable\">m</span>                        <span class=\"token comment\">-- right unit</span>\n<span class=\"token builtin\">return</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">f</span>   <span class=\"token operator\">=</span>  <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span>                      <span class=\"token comment\">-- left unit</span>\n<span class=\"token punctuation\">(</span><span class=\"token hvariable\">m</span> <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">f</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">g</span>  <span class=\"token operator\">=</span>  <span class=\"token hvariable\">m</span> <span class=\"token operator\">>>=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">\\</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">g</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">-- associativity</span></code></pre></div>\n<p>Monad也有一些延申的符号：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token punctuation\">(</span><span class=\"token operator\">>=></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Monad</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">b</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">c</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">c</span>\n<span class=\"token hvariable\">f</span> <span class=\"token operator\">>=></span> <span class=\"token hvariable\">g</span> <span class=\"token operator\">=</span> <span class=\"token operator\">\\</span><span class=\"token hvariable\">x</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">g</span></code></pre></div>\n<p>也就是复合函数。</p>\n<p>就像<code class=\"language-text\">return</code>对应<code class=\"language-text\">pure</code>，<code class=\"language-text\">&gt;&gt;</code>对应<code class=\"language-text\">*&gt;</code>，Monad也有自己版本的<code class=\"language-text\">fmap</code>和<code class=\"language-text\">&lt;*&gt;</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">liftM</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Monad</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a1</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">r</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a1</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">r</span>  <span class=\"token comment\">-- fmap</span>\n<span class=\"token hvariable\">ap</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Monad</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">m</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">b</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">b</span>  <span class=\"token comment\">-- &lt;*></span></code></pre></div>\n<h2>Alternative</h2>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">class</span> <span class=\"token constant\">Applicative</span> <span class=\"token hvariable\">f</span> <span class=\"token operator\">=></span> <span class=\"token constant\">Alternative</span> <span class=\"token hvariable\">f</span> <span class=\"token keyword\">where</span>\n  <span class=\"token hvariable\">empty</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;|></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span></code></pre></div>\n<p>Alternative继承自Applicative，其中<code class=\"language-text\">empty</code>表示一个返回0的函数，<code class=\"language-text\">&lt;|&gt;</code>是用来combine 2 computation的。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">instance</span> <span class=\"token constant\">Alternative</span> <span class=\"token constant\">Maybe</span> <span class=\"token keyword\">where</span>\n  <span class=\"token hvariable\">empty</span>               <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span>\n  <span class=\"token comment\">-- Note that this could have been written more compactly.</span>\n  <span class=\"token constant\">Nothing</span> <span class=\"token operator\">&lt;|></span> <span class=\"token constant\">Nothing</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Nothing</span> <span class=\"token comment\">-- 0 results + 0 results = 0 results</span>\n  <span class=\"token constant\">Just</span> <span class=\"token hvariable\">x</span>  <span class=\"token operator\">&lt;|></span> <span class=\"token constant\">Nothing</span> <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token hvariable\">x</span>  <span class=\"token comment\">-- 1 result  + 0 results = 1 result</span>\n  <span class=\"token constant\">Nothing</span> <span class=\"token operator\">&lt;|></span> <span class=\"token constant\">Just</span> <span class=\"token hvariable\">x</span>  <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token hvariable\">x</span>  <span class=\"token comment\">-- 0 results + 1 result  = 1 result</span>\n  <span class=\"token constant\">Just</span> <span class=\"token hvariable\">x</span>  <span class=\"token operator\">&lt;|></span> <span class=\"token constant\">Just</span> <span class=\"token hvariable\">y</span>  <span class=\"token operator\">=</span> <span class=\"token constant\">Just</span> <span class=\"token hvariable\">x</span>  <span class=\"token comment\">-- 1 result  + 1 result  = 1 result:</span>\n                                <span class=\"token comment\">-- Maybe can only hold up to one result,</span>\n                                <span class=\"token comment\">-- so we discard the second one.</span>\n\n<span class=\"token keyword\">instance</span> <span class=\"token constant\">Alternative</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token keyword\">where</span>\n  <span class=\"token hvariable\">empty</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n  <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;|></span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">-- length xs + length ys = length (xs ++ ys)</span></code></pre></div>\n<p>parser经常会用<code class=\"language-text\">&lt;|&gt;</code>来进行并行的parse，相当于一个不行就另一个。</p>\n<p>Alternative的性质有：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token comment\">-- empty is a neutral element</span>\n<span class=\"token hvariable\">empty</span> <span class=\"token operator\">&lt;|></span> <span class=\"token hvariable\">u</span>  <span class=\"token operator\">=</span>  <span class=\"token hvariable\">u</span>\n<span class=\"token hvariable\">u</span> <span class=\"token operator\">&lt;|></span> <span class=\"token hvariable\">empty</span>  <span class=\"token operator\">=</span>  <span class=\"token hvariable\">u</span>\n<span class=\"token comment\">-- (&lt;|>) is associative</span>\n<span class=\"token hvariable\">u</span> <span class=\"token operator\">&lt;|></span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">v</span> <span class=\"token operator\">&lt;|></span> <span class=\"token hvariable\">w</span><span class=\"token punctuation\">)</span>  <span class=\"token operator\">=</span>  <span class=\"token punctuation\">(</span><span class=\"token hvariable\">u</span> <span class=\"token operator\">&lt;|></span> <span class=\"token hvariable\">v</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;|></span> <span class=\"token hvariable\">w</span></code></pre></div>\n<h2>MonadPlus</h2>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token keyword\">class</span> <span class=\"token constant\">Monad</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">=></span> <span class=\"token constant\">MonadPlus</span> <span class=\"token hvariable\">m</span> <span class=\"token keyword\">where</span>\n  <span class=\"token hvariable\">mzero</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span>\n  <span class=\"token hvariable\">mplus</span> <span class=\"token operator\">::</span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span></code></pre></div>\n<p>MonadPlus和Alternative完全对应。<code class=\"language-text\">mzero</code>对应<code class=\"language-text\">empty</code>，<code class=\"language-text\">mplus</code>对应<code class=\"language-text\">&lt;|&gt;</code>。</p>\n<p>而MonadPlus除了Alternative的性质意外，还有额外的性质：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">mzero</span> <span class=\"token operator\">>>=</span> <span class=\"token hvariable\">f</span>  <span class=\"token operator\">=</span>  <span class=\"token hvariable\">mzero</span> <span class=\"token comment\">-- left zero</span>\n<span class=\"token hvariable\">m</span> <span class=\"token operator\">>></span> <span class=\"token hvariable\">mzero</span>   <span class=\"token operator\">=</span>  <span class=\"token hvariable\">mzero</span> <span class=\"token comment\">-- right zero</span></code></pre></div>\n<p>Alternative或是MonadPlus的一些常用操作有：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">asum</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">Alternative</span> <span class=\"token hvariable\">f</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Foldable</span> <span class=\"token hvariable\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">t</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">f</span> <span class=\"token hvariable\">a</span>\n<span class=\"token hvariable\">asum</span> <span class=\"token operator\">=</span> <span class=\"token builtin\">foldr</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&lt;|></span><span class=\"token punctuation\">)</span> <span class=\"token hvariable\">empty</span></code></pre></div>\n<p>就是<code class=\"language-text\">concat</code>的一般版本。</p>\n<p>MonadPlus的版本是：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">msum</span> <span class=\"token operator\">::</span> <span class=\"token punctuation\">(</span><span class=\"token constant\">MonadPlus</span> <span class=\"token hvariable\">m</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">Foldable</span> <span class=\"token hvariable\">t</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token hvariable\">t</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token hvariable\">a</span></code></pre></div>\n<p>另一个常见的操作是<code class=\"language-text\">guard</code></p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">guard</span> <span class=\"token operator\">::</span> <span class=\"token constant\">Alternative</span> <span class=\"token hvariable\">m</span> <span class=\"token operator\">=></span> <span class=\"token constant\">Bool</span> <span class=\"token operator\">-></span> <span class=\"token hvariable\">m</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">guard</span> <span class=\"token constant\">True</span>  <span class=\"token operator\">=</span> <span class=\"token hvariable\">pure</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token hvariable\">guard</span> <span class=\"token hvariable\">_</span> <span class=\"token operator\">=</span> <span class=\"token hvariable\">empty</span></code></pre></div>\n<p>也就是说list comprehension中的</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">pythags</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">z</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token hvariable\">z</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token hvariable\">z</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">x</span><span class=\"token operator\">..</span><span class=\"token hvariable\">z</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">x</span><span class=\"token operator\">^</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">y</span><span class=\"token operator\">^</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">z</span><span class=\"token operator\">^</span><span class=\"token number\">2</span> <span class=\"token punctuation\">]</span></code></pre></div>\n<p>实际上是：</p>\n<div class=\"gatsby-highlight\" data-language=\"haskell\"><pre class=\"language-haskell\"><code class=\"language-haskell\"><span class=\"token hvariable\">pythags</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">do</span>\n  <span class=\"token hvariable\">z</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token punctuation\">]</span>\n  <span class=\"token hvariable\">x</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token operator\">..</span><span class=\"token hvariable\">z</span><span class=\"token punctuation\">]</span>\n  <span class=\"token hvariable\">y</span> <span class=\"token operator\">&lt;-</span> <span class=\"token punctuation\">[</span><span class=\"token hvariable\">x</span><span class=\"token operator\">..</span><span class=\"token hvariable\">z</span><span class=\"token punctuation\">]</span>\n  <span class=\"token hvariable\">guard</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token operator\">^</span><span class=\"token number\">2</span> <span class=\"token operator\">+</span> <span class=\"token hvariable\">y</span><span class=\"token operator\">^</span><span class=\"token number\">2</span> <span class=\"token operator\">==</span> <span class=\"token hvariable\">z</span><span class=\"token operator\">^</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span>\n  <span class=\"token builtin\">return</span> <span class=\"token punctuation\">(</span><span class=\"token hvariable\">x</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">y</span><span class=\"token punctuation\">,</span> <span class=\"token hvariable\">z</span><span class=\"token punctuation\">)</span></code></pre></div>","frontmatter":{"title":"About Monad","date":"2019-06-11T12:32:00.000Z","tags":["parsing","haskell"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/about-monad/"}}}