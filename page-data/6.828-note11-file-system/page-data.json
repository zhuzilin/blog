{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-note11-file-system/","webpackCompilationHash":"36b38c574f1d3c5e8b77","result":{"data":{"markdownRemark":{"html":"<p>这里会记录阅读6.828课程lecture note的我的个人笔记。可能会中英混杂，不是很适合外人阅读，也请见谅。</p>\n<h2>Lecture 12: File System</h2>\n<p>我们为什么需要file system</p>\n<ul>\n<li>durability across restart</li>\n<li>naming and organization</li>\n<li>sharing among programs and users</li>\n</ul>\n<p>file system有哪些有趣的点？</p>\n<ul>\n<li>crash memory</li>\n<li>performance</li>\n<li>sharing</li>\n<li>security</li>\n<li>各种抽象</li>\n</ul>\n<h3>xv6实现</h3>\n<p>之后我们来看一下xv6的实现。因为lecture note里头的东西太乱了，不妨我们直接看xv6 book中对应的内容。</p>\n<p><img src=\"https://i.imgur.com/BUyzPWh.png\" alt=\"xv6 file system architecture\"></p>\n<p>xv6的fs实现分为7层。从下向上其顺序和功能如下：</p>\n<ul>\n<li>disk layer: 读写IDE hard drive。</li>\n<li>buffer cache layer: 做cache存储经常访问的模块，并把并行访问处理成串行访问（感觉有点像database?）</li>\n<li>logging layer: 提供上述layer的wrapper，从而将多个block的更新分成<em>transaction</em>，并确保crash recovery</li>\n<li>inode layer: 每个individual files都被表示为一个inode，并有唯一标识符i-number，以及一些block来存储数据。</li>\n<li>directory layer: 地址，也有i-number和file name</li>\n<li>pathname layer: 提供像<code class=\"language-text\">/usr/rtm/xv6/fs.c/usr/rtm/xv6/fs.c</code>这样的地址接口</li>\n<li>file descriptor layer: 抽象一些unix资源，让他们也能使用file system interface，如pipes, devices...</li>\n</ul>\n<h4>Buffer layer</h4>\n<p>buffer layer的代码位于<code class=\"language-text\">bio.c</code>其主要接口为<code class=\"language-text\">bwrite</code>和<code class=\"language-text\">bread</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Return a locked buf with the contents of the indicated block.</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span><span class=\"token operator\">*</span>\n<span class=\"token function\">bread</span><span class=\"token punctuation\">(</span>uint dev<span class=\"token punctuation\">,</span> uint blockno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n\n  b <span class=\"token operator\">=</span> <span class=\"token function\">bget</span><span class=\"token punctuation\">(</span>dev<span class=\"token punctuation\">,</span> blockno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> B_VALID<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">iderw</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Write b's contents to disk.  Must be locked.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">bwrite</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">holdingsleep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bwrite\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">-></span>flags <span class=\"token operator\">|=</span> B_DIRTY<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">iderw</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>更深入一点的话，<code class=\"language-text\">buf</code>的结构和<code class=\"language-text\">bget</code>的实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// buf.h</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> flags<span class=\"token punctuation\">;</span>\n  uint dev<span class=\"token punctuation\">;</span>\n  uint blockno<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sleeplock</span> lock<span class=\"token punctuation\">;</span>\n  uint refcnt<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span> <span class=\"token operator\">*</span>prev<span class=\"token punctuation\">;</span> <span class=\"token comment\">// LRU cache list</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span> <span class=\"token operator\">*</span>qnext<span class=\"token punctuation\">;</span> <span class=\"token comment\">// disk queue</span>\n  uchar data<span class=\"token punctuation\">[</span>BSIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> B_VALID 0x2  </span><span class=\"token comment\">// buffer has been read from disk</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> B_DIRTY 0x4  </span><span class=\"token comment\">// buffer needs to be written to disk</span>\n\n<span class=\"token comment\">// bio.c</span>\n<span class=\"token comment\">// Look through buffer cache for block on device dev.</span>\n<span class=\"token comment\">// If not found, allocate a buffer.</span>\n<span class=\"token comment\">// In either case, return locked buffer.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span><span class=\"token operator\">*</span>\n<span class=\"token function\">bget</span><span class=\"token punctuation\">(</span>uint dev<span class=\"token punctuation\">,</span> uint blockno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>bcache<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Is the block already cached?</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> bcache<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span> b <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>bcache<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span> b <span class=\"token operator\">=</span> b<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>dev <span class=\"token operator\">==</span> dev <span class=\"token operator\">&amp;&amp;</span> b<span class=\"token operator\">-></span>blockno <span class=\"token operator\">==</span> blockno<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      b<span class=\"token operator\">-></span>refcnt<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>bcache<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">acquiresleep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Not cached; recycle an unused buffer.</span>\n  <span class=\"token comment\">// Even if refcnt==0, B_DIRTY indicates a buffer is in use</span>\n  <span class=\"token comment\">// because log.c has modified it but not yet committed it.</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>b <span class=\"token operator\">=</span> bcache<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>prev<span class=\"token punctuation\">;</span> b <span class=\"token operator\">!=</span> <span class=\"token operator\">&amp;</span>bcache<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span> b <span class=\"token operator\">=</span> b<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>refcnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>flags <span class=\"token operator\">&amp;</span> B_DIRTY<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      b<span class=\"token operator\">-></span>dev <span class=\"token operator\">=</span> dev<span class=\"token punctuation\">;</span>\n      b<span class=\"token operator\">-></span>blockno <span class=\"token operator\">=</span> blockno<span class=\"token punctuation\">;</span>\n      b<span class=\"token operator\">-></span>flags <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      b<span class=\"token operator\">-></span>refcnt <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>bcache<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">acquiresleep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> b<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bget: no buffers\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意这里<code class=\"language-text\">bget</code>就是从链表里头取一个空的，并不会做MRU (most recent used)的删除操作，如果没有空的就报错。而这个释放的操作是用<code class=\"language-text\">brelse</code>来进行的。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Release a locked buffer.</span>\n<span class=\"token comment\">// Move to the head of the MRU list.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">brelse</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">buf</span> <span class=\"token operator\">*</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">holdingsleep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"brelse\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">releasesleep</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>b<span class=\"token operator\">-></span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>bcache<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  b<span class=\"token operator\">-></span>refcnt<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>b<span class=\"token operator\">-></span>refcnt <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// no one is waiting for it.</span>\n    b<span class=\"token operator\">-></span>next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> b<span class=\"token operator\">-></span>prev<span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">-></span>prev<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> b<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> bcache<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token punctuation\">;</span>\n    b<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>bcache<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">;</span>\n    bcache<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next<span class=\"token operator\">-></span>prev <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n    bcache<span class=\"token punctuation\">.</span>head<span class=\"token punctuation\">.</span>next <span class=\"token operator\">=</span> b<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  \n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>bcache<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>大致就是把引用计数清空，并把这个buf移到链表最前面。</p>\n<h2>Lecture 13: Crash Recovery, Logging</h2>\n<p>常见的一个crash recovery的方法是写logging。我们先来看一下xv6的logging，再来了解linux的EXT3</p>","frontmatter":{"title":"6.828 笔记11 —— File System","date":"2019-03-25T23:20:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-note11-file-system/"}}}