{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-review/","webpackCompilationHash":"17d90122362c59fb634f","result":{"data":{"markdownRemark":{"html":"<h2>Boot Loader</h2>\n<p>首先当机器启动的时候，会自动加载BIOS。BIOS会检查有无bootable disk，如果有的话，会加载其boot loader（实际上就是加载boot loader）的ELF，也就是boot loader对应的二进制文件。其位于第一个IDE disk的第一个sector，之后的sector就是kernel了。</p>\n<p>然后boot loader会首先把处理器从16位的real mode转化为32位的protected mode，然后读一个page进来，也就是读进来kernel的ELF header，通过其ELF header把kernel一个sector一个sector地读进来，然后跳转到kernel ELF header里面记录的入口，从而进入kernel。</p>\n<p>值得注意的是kernel和boot loader的ELF的不同。也就是kernel的LMA和VMA是不同的，也就是加载到内存的位置和开始运行的位置是不同的。这是因为kernel额VMA是虚拟地址，其实际映射是<code class=\"language-text\">0x00000000</code>到<code class=\"language-text\">0x0fffffff</code>映射到<code class=\"language-text\">0xf0000000</code>到<code class=\"language-text\">0xffffffff</code>。所以即使VMA是高地址的<code class=\"language-text\">0xf0100000</code>实际上运行的时候对应的物理地址还是<code class=\"language-text\">0x00100000</code>，也就是LMA对应的地址。</p>\n<h2>Isolation mechanism</h2>\n<p>kernel通过硬件机制辅助来进行process isolation。硬件上的user/kernel mode flag，在x86上叫CPL，是<code class=\"language-text\">%cs</code>的后两位，CPL=0就是kernel mode，=3就是user mode。通过给几个permissible kernel entry points来跳到kernel里面去，这样就可以防止在转换的时候用户可以破坏Kernel。</p>\n<p>对内存的隔离是利用address space，其目的是可以让每个进程有内存来访问自己的code，variables，heap，stack 并不访问其他的内存。</p>\n<h2>Interrupt, System calls and Exceptions</h2>\n<p>这3类会触发<code class=\"language-text\">trap</code>。</p>\n<ul>\n<li>Exceptions (page fault, divide by zero)</li>\n<li>System calls (<code class=\"language-text\">INT</code>, intended exception)</li>\n<li>Interrupts (devices want attention)</li>\n</ul>\n<p>注意在术语上<code class=\"language-text\">trap</code>是被当前进程引发的，如system call，而interrupt是由外界device触发的。</p>\n<p><code class=\"language-text\">trap()</code>函数是如何知道哪个设备出发了中断？</p>\n<ul>\n<li>\n<p>kernel设置LAPIC/IOAPIC ，把某个类型的中断设置为对应的vector number</p>\n<ul>\n<li>page fault也有vectors</li>\n<li>LAPIC/IOAPIC是PC的常规硬件，其中每个cpu有一个LAPIC</li>\n</ul>\n</li>\n<li>\n<p>IDT (interrupt descriptor table)用vector number来联系一个instruction address</p>\n<ul>\n<li>这个table的内容是怎么设置的可以看下面的<code class=\"language-text\">SETGATE</code>函数。</li>\n<li>IDT的格式是由Intel定义的，由kernel设置的</li>\n</ul>\n</li>\n<li>每个vector都会跳到<code class=\"language-text\">alltraps</code></li>\n<li>CPU会通过IDT发送各种trap，其中lower 32 IDT entries有特殊的含义。</li>\n<li>在xv6中，system call(IRQ)被设置为<code class=\"language-text\">0x40</code>.</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">diagram:\n  IRQ or trap, IDT table, vectors, alltraps\n  IDT:\n    0: divide by zero\n    13: general protection\n    14: page fault\n    32-255: device IRQs\n    32: timer\n    33: keyboard\n    46: IDE\n    64: INT</code></pre></div>\n<p>xv6会在<code class=\"language-text\">main.c</code>中的<code class=\"language-text\">lapicinit()</code>、<code class=\"language-text\">ioapicinit()</code>与<code class=\"language-text\">tvinit()</code>来设置好interrupt vector。</p>\n<p><code class=\"language-text\">tvinit</code>中大多数都是机械性的设置，唯有<code class=\"language-text\">T_SYSCALL</code>里面设置了<code class=\"language-text\">istrap=1</code>，也就是让系统在进行system call的时候仍然<strong>保留中断</strong>，而其他的device interrupt就不保留了。</p>\n<p>思考两个问题（我现在还不明白...）</p>\n<ul>\n<li>为什么在system call的过程中允许中断？</li>\n<li>为什么在interrupt handing之中disable interrupt。</li>\n</ul>\n<p>注意因为JOS只有一个kernel stack，而xv6有多个，所以JOS不允许在kernel中进行中断。</p>\n<h3>System Call</h3>\n<p>system call的具体流程如下：</p>\n<p>在xv6中，一个像shell这样的用户应用，会include <code class=\"language-text\">user.h</code>，这里定义了用户端能够使用的所有system call的函数。而这些函数的定义都在<code class=\"language-text\">usys.S</code>中，具体如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">#define SYSCALL(name) \\\n  .globl name; \\\n  name: \\\n    movl $SYS_ ## name, %eax; \\\n    int $T_SYSCALL; \\\n    ret</code></pre></div>\n<p>所以实际上，在shell中使用write函数，就是会在汇编中调用<code class=\"language-text\">int $T_SYSCALL</code>。</p>\n<p><code class=\"language-text\">int</code>会做的事情有：</p>\n<ul>\n<li>切换为kernel stack（调整esp）</li>\n<li>保存用户的register于kernel stack</li>\n<li>设置CPL=0</li>\n<li>让eip指向kernel-supplied vector。</li>\n</ul>\n<p>也就是会进入<code class=\"language-text\">vector.S</code>，找到对应<code class=\"language-text\">$T_SYSCALL</code>的部分，也就是：</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">.globl vector64\nvector64:\n  pushl $0\n  pushl $64\n  jmp alltraps</code></pre></div>\n<p>然后进入<code class=\"language-text\">trapasm.S</code>中的<code class=\"language-text\">alltraps</code>。<code class=\"language-text\">alltraps</code>先保存<code class=\"language-text\">int</code>没有保存的寄存器，再调用<code class=\"language-text\">trap</code>函数，其中保存的trapframe指针就是当前的<code class=\"language-text\">%esp</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">trap</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">trapframe</span> <span class=\"token operator\">*</span>tf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>trapno <span class=\"token operator\">==</span> T_SYSCALL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>killed<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>tf <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>killed<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>进入trap之后，发现如果是syscall，就调用<code class=\"language-text\">syscall()</code>，里面有个<code class=\"language-text\">switch</code>会选择对应编号的syscall。注意和<code class=\"language-text\">int</code>相对应，在返回的途中有一个<code class=\"language-text\">iret</code>，相当于是做<code class=\"language-text\">int</code>的逆操作，也就是恢复寄存器之类的。</p>\n<h2>Virtual Memory</h2>\n<p>CPU会用一个叫MMU的东西来进行地址的转换。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  CPU -&gt; MMU -&gt; RAM\n      VA     PA</code></pre></div>\n<p>软件只能通过VA进行load/store，而不能通过PA。</p>\n<p>kernel告诉MMU该如何进行这个mapping</p>\n<ul>\n<li>本质上，MMU里有一个表，key是VA, value是PA，这个表也就被称为page table</li>\n</ul>\n<p>MMU还可以限制用户能够使用哪些虚拟地址。</p>\n<p>一个page table里面有2^20个entry，被称为2^20个page table entry (PTE)。PTE的前20位就是实际上PA的前20位，其实也是PA对应的page的编号，这20位被称为physical page number (PPN)。后面的12位都是flag，记录了像PTE<em>P，PTE</em>U, PTE_W这样的entry状态。</p>\n<p>page table被存在RAM中，MMU会读取或存储PTE。</p>\n<p>但是2^20太大了，所以x86选择使用两层的结构。中间加入的一层称为page directory (PD)。PD也是一个array，其中每一个元素称为PDE。PDE的前20位也是PPN，这个PPN对应的page会存储一个小的page table，这个page table会指向1024个PTE。</p>\n<p>所以PD有1024个PDE，每个PDE指向一个page table，每个page table里面有1024个PTE，所以一共2^20个PTE。</p>\n<p>在寄存器<code class=\"language-text\">%cr3</code>中存储了PD的地址，MMU就是通过读<code class=\"language-text\">%cr3</code>来开始转化。这个转化为</p>\n<ol>\n<li>通过<code class=\"language-text\">%cr3</code>找到PD的PA，从而加载PD</li>\n<li>用VA的前10位找到PDE，用PDE的PPN找到PT</li>\n<li>用VA的中间10位找到PTE</li>\n<li>用PTE的前20位加上VA的最后12位找到VA对应的PA。</li>\n</ol>\n<h3>xv6的内存mapping</h3>\n<h4>address space如下：</h4>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">  0x00000000:0x80000000 -- user addresses below KERNBASE\n  0x80000000:0x80100000 -- map low 1MB devices (for kernel)\n  0x80100000:?          -- kernel instructions/data\n  ?         :0x8E000000 -- 224 MB of DRAM mapped here\n  0xFE000000:0x00000000 -- more memory-mapped devices</code></pre></div>\n<p>对于以上的mapping，有几个注意：</p>\n<ul>\n<li>\n<p>user virtual addresses 从0开始</p>\n<ul>\n<li>注意不同user的0会map到不同的PA</li>\n</ul>\n</li>\n<li>\n<p>2GB for user heap to grow contiguously</p>\n<ul>\n<li>不过注意这2G不是连续的物理内存，所以就不会有fragmentation problem</li>\n</ul>\n</li>\n<li>\n<p>kernel和user都被map了</p>\n<ul>\n<li>为了方便进行system call或interrupt</li>\n<li>方便kernel读写用户内存</li>\n</ul>\n</li>\n<li>\n<p>kernel永远都被map在固定位置：</p>\n<ul>\n<li>方便切换进程</li>\n</ul>\n</li>\n<li>\n<p>kernel线性映射（pa x mapped at va x+0x80000000)</p>\n<ul>\n<li>方便kernel读写物理内存</li>\n</ul>\n</li>\n<li>这种情况最大的进程能有：<code class=\"language-text\">0x80000000</code>，也就是2G内存。</li>\n</ul>\n<h4>初始化</h4>\n<p>最开始<code class=\"language-text\">bootmain</code>运行之后会进入<code class=\"language-text\">entry.S</code>，这里面会先直接把<code class=\"language-text\">%cr3</code>赋值为<code class=\"language-text\">entrypgdir</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">  # Set page directory\n  movl    $(V2P_WO(entrypgdir)), %eax\n  movl    %eax, %cr3</code></pre></div>\n<p><code class=\"language-text\">entrypgdir</code>的映射如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// The boot page table used in entry.S and entryother.S.</span>\n<span class=\"token comment\">// Page directories (and page tables) must start on page boundaries,</span>\n<span class=\"token comment\">// hence the __aligned__ attribute.</span>\n<span class=\"token comment\">// PTE_PS in a page directory entry enables 4Mbyte pages.</span>\n\n<span class=\"token function\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">__aligned__</span><span class=\"token punctuation\">(</span>PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\npde_t entrypgdir<span class=\"token punctuation\">[</span>NPDENTRIES<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Map VA's [0, 4MB) to PA's [0, 4MB)</span>\n  <span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> PTE_P <span class=\"token operator\">|</span> PTE_W <span class=\"token operator\">|</span> PTE_PS<span class=\"token punctuation\">,</span>\n  <span class=\"token comment\">// Map VA's [KERNBASE, KERNBASE+4MB) to PA's [0, 4MB)</span>\n  <span class=\"token punctuation\">[</span>KERNBASE<span class=\"token operator\">>></span>PDXSHIFT<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> PTE_P <span class=\"token operator\">|</span> PTE_W <span class=\"token operator\">|</span> PTE_PS<span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>里面的注释写了，把VA的<code class=\"language-text\">0x00000000:0x00400000</code>和<code class=\"language-text\">0x80000000:0x80400000</code>都映射到PA的<code class=\"language-text\">0x00000000:0x00400000</code>。会先初始化kernel的address space，再进行user的。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token function\">kinit1</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">,</span> <span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// phys page allocator</span>\n  <span class=\"token function\">kvmalloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// kernel page table</span>\n  <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token function\">kinit2</span><span class=\"token punctuation\">(</span><span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span>PHYSTOP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// must come after startothers()</span>\n  <span class=\"token function\">userinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// first user process</span></code></pre></div>\n<p>先说kernel的一头一尾：<code class=\"language-text\">kinit1</code>和<code class=\"language-text\">kinit2</code>。这里的<code class=\"language-text\">P2V</code>就是加上<code class=\"language-text\">KERNBASE</code>，然后<code class=\"language-text\">end</code>是已经在boot阶段被载入的kernel的地址结尾（不知道是怎么获取的...），<code class=\"language-text\">PHYSTOP</code>是<code class=\"language-text\">0xE0000000</code>，物理内存最大值。</p>\n<p>对于实现细节：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Initialization happens in two phases.</span>\n<span class=\"token comment\">// 1. main() calls kinit1() while still using entrypgdir to place just</span>\n<span class=\"token comment\">// the pages mapped by entrypgdir on free list.</span>\n<span class=\"token comment\">// 2. main() calls kinit2() with the rest of the physical pages</span>\n<span class=\"token comment\">// after installing a full page table that maps them on all cores.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">kinit1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vstart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vend<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>kmem<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">,</span> <span class=\"token string\">\"kmem\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  kmem<span class=\"token punctuation\">.</span>use_lock <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">freerange</span><span class=\"token punctuation\">(</span>vstart<span class=\"token punctuation\">,</span> vend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 注意这里的freerange就是把这个范围里的physical memory free掉</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">kinit2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vstart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vend<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">freerange</span><span class=\"token punctuation\">(</span>vstart<span class=\"token punctuation\">,</span> vend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  kmem<span class=\"token punctuation\">.</span>use_lock <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其实也就是把对应部分的内存抹干净了。</p>\n<p>在第二步的<code class=\"language-text\">kvmalloc</code>中切换了page table。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// There is one page table per process, plus one that's used when</span>\n<span class=\"token comment\">// a CPU is not running any process (kpgdir). The kernel uses the</span>\n<span class=\"token comment\">// current process's page table during system calls and interrupts;</span>\n<span class=\"token comment\">// page protection bits prevent user code from using the kernel's</span>\n<span class=\"token comment\">// mappings.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// setupkvm() and exec() set up every page table like this:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//   0..KERNBASE: user memory (text+data+stack+heap), mapped to</span>\n<span class=\"token comment\">//                phys memory allocated by the kernel</span>\n<span class=\"token comment\">//   KERNBASE..KERNBASE+EXTMEM: mapped to 0..EXTMEM (for I/O space)</span>\n<span class=\"token comment\">//   KERNBASE+EXTMEM..data: mapped to EXTMEM..V2P(data)</span>\n<span class=\"token comment\">//                for the kernel's instructions and r/o data</span>\n<span class=\"token comment\">//   data..KERNBASE+PHYSTOP: mapped to V2P(data)..PHYSTOP,</span>\n<span class=\"token comment\">//                                  rw data + free physical memory</span>\n<span class=\"token comment\">//   0xfe000000..0: mapped direct (devices such as ioapic)</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The kernel allocates physical memory for its heap and for user memory</span>\n<span class=\"token comment\">// between V2P(end) and the end of physical memory (PHYSTOP)</span>\n<span class=\"token comment\">// (directly addressable from end..P2V(PHYSTOP)).</span>\n\n<span class=\"token comment\">// This table defines the kernel's mappings, which are present in</span>\n<span class=\"token comment\">// every process's page table.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">kmap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>virt<span class=\"token punctuation\">;</span>\n  uint phys_start<span class=\"token punctuation\">;</span>\n  uint phys_end<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> kmap<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>KERNBASE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>             EXTMEM<span class=\"token punctuation\">,</span>    PTE_W<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// I/O space</span>\n <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>KERNLINK<span class=\"token punctuation\">,</span> <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>KERNLINK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// kern text+rodata</span>\n <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">,</span>     <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     PHYSTOP<span class=\"token punctuation\">,</span>   PTE_W<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// kern data+memory</span>\n <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>DEVSPACE<span class=\"token punctuation\">,</span> DEVSPACE<span class=\"token punctuation\">,</span>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>         PTE_W<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// more devices</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Set up kernel part of a page table.</span>\npde_t<span class=\"token operator\">*</span>\n<span class=\"token function\">setupkvm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">kmap</span> <span class=\"token operator\">*</span>k<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pgdir <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pde_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">kalloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span>PHYSTOP<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>DEVSPACE<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PHYSTOP too high\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> kmap<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>kmap<span class=\"token punctuation\">[</span><span class=\"token function\">NELEM</span><span class=\"token punctuation\">(</span>kmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">mappages</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> k<span class=\"token operator\">-></span>virt<span class=\"token punctuation\">,</span> k<span class=\"token operator\">-></span>phys_end <span class=\"token operator\">-</span> k<span class=\"token operator\">-></span>phys_start<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>k<span class=\"token operator\">-></span>phys_start<span class=\"token punctuation\">,</span> k<span class=\"token operator\">-></span>perm<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Free a page table and all the physical memory pages</span>\n      <span class=\"token comment\">// in the user part.</span>\n      <span class=\"token function\">freevm</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> pgdir<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Allocate one page table for the machine for the kernel address</span>\n<span class=\"token comment\">// space for scheduler processes.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">kvmalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  kpgdir <span class=\"token operator\">=</span> <span class=\"token function\">setupkvm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">switchkvm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Switch h/w page table register to the kernel-only page table,</span>\n<span class=\"token comment\">// for when no process is running.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">switchkvm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>kpgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// switch to the kernel page table</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>需要好好读一下上面这段代码的最上面的注释。对于<code class=\"language-text\">kvmalloc</code>大致就是用<code class=\"language-text\">setupkvm</code>做了一个对于kernel部分映射了的page table，然后用switch把这个page table赋值给<code class=\"language-text\">%cr3</code>。这个时候就可以进行kernel部分的初始化了。</p>\n<p>做完kernel的初始化之后，进行user的部分。<code class=\"language-text\">userinit()</code>中和page table相关的部分是：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir <span class=\"token operator\">=</span> <span class=\"token function\">setupkvm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userinit: out of memory?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">inituvm</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> _binary_initcode_start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>_binary_initcode_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>刚刚说过<code class=\"language-text\">setupkvm</code>会把kernel的部分映射好。之后是<code class=\"language-text\">inituvm</code>。这个函数会把<code class=\"language-text\">initcode</code>（源码位于<code class=\"language-text\">initcode.S</code>）这个编译好的2进制文件映射到其起始位置，它是第一个process的最开始的二进制部分。而实际上，<code class=\"language-text\">initcode</code>的最开始是<code class=\"language-text\">exec(init, argv)</code>。而在<code class=\"language-text\">exec</code>的最后，有：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token function\">switchuvm</span><span class=\"token punctuation\">(</span>curproc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">freevm</span><span class=\"token punctuation\">(</span>oldpgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在<code class=\"language-text\">switchuvm</code>中有给<code class=\"language-text\">cr3</code>赋值：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">switchuvm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"switchuvm: no process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>kstack <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"switchuvm: no kstack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"switchuvm: no pgdir\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">pushcli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>gdt<span class=\"token punctuation\">[</span>SEG_TSS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">SEG16</span><span class=\"token punctuation\">(</span>STS_T32A<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">,</span>\n                                <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>gdt<span class=\"token punctuation\">[</span>SEG_TSS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">.</span>ss0 <span class=\"token operator\">=</span> SEG_KDATA <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">.</span>esp0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>p<span class=\"token operator\">-></span>kstack <span class=\"token operator\">+</span> KSTACKSIZE<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// setting IOPL=0 in eflags *and* iomb beyond the tss segment limit</span>\n  <span class=\"token comment\">// forbids I/O instructions (e.g., inb and outb) from user space</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">.</span>iomb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ushort<span class=\"token punctuation\">)</span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ltr</span><span class=\"token punctuation\">(</span>SEG_TSS <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// switch to process's address space</span>\n  <span class=\"token function\">popcli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>也就完成了user page table的初始化。</p>\n<p>说完了整个的大框架，我们来看一下每次用户代码需要进行新内存的分配的时候，比如当遇到page fault进入trap来分配新内存的时候（lazy page allocation）：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">case</span> T_PGFLT<span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// code from allocuvm</span>\n    uint newsz <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>sz<span class=\"token punctuation\">;</span>\n    uint a <span class=\"token operator\">=</span> <span class=\"token function\">PGROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token function\">rcr2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> newsz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>mem <span class=\"token operator\">=</span> <span class=\"token function\">kalloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mem <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out of memory\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">mappages</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">,</span> <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_W<span class=\"token operator\">|</span>PTE_U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>最重要的就是<code class=\"language-text\">kalloc</code>，<code class=\"language-text\">memset</code>和<code class=\"language-text\">mappages</code>了。<code class=\"language-text\">memset</code>是包装了<code class=\"language-text\">x86</code>的分配内存的函数，再次不提。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Allocate one 4096-byte page of physical memory.</span>\n<span class=\"token comment\">// Returns a pointer that the kernel can use.</span>\n<span class=\"token comment\">// Returns 0 if the memory cannot be allocated.</span>\n<span class=\"token keyword\">char</span><span class=\"token operator\">*</span>\n<span class=\"token function\">kalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">run</span> <span class=\"token operator\">*</span>r<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>kmem<span class=\"token punctuation\">.</span>use_lock<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>kmem<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  r <span class=\"token operator\">=</span> kmem<span class=\"token punctuation\">.</span>freelist<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span>\n    kmem<span class=\"token punctuation\">.</span>freelist <span class=\"token operator\">=</span> r<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 所有空内存的链表</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>kmem<span class=\"token punctuation\">.</span>use_lock<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>kmem<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>r<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">kalloc</code>得到一个空page的头部地址，<code class=\"language-text\">mappages</code>进行映射，所以归根到底所有的环境都会用同一个<code class=\"language-text\">kmem</code>链表分配内存。</p>\n<h3>内存分配的小技巧</h3>\n<ul>\n<li>\n<p>lazy page allocation</p>\n<p>前面提到过，先不分配内存，触发page fault的时候再分配。</p>\n</li>\n<li>\n<p>copy on write</p>\n<p>这个在lab4里面有实现。大致是先不复制，把对应的page仅仅map上，然后给一种新的PTE状态，在触发写的trap的时候进行复制。</p>\n</li>\n<li>\n<p>one zero-filled page</p>\n<p>因为很多page不会写入，所以最开始可以分配给一个公共的zero page，如果出问题了，就创建新的。</p>\n</li>\n<li>\n<p>share kernel page mapping</p>\n<p>共享kernel page mapping。这个不知道咋实现呢...</p>\n</li>\n<li>\n<p>demanding paging</p>\n<p>现在的exec可能会把整个文件都加载到内存中，这样会很慢，并且有可能没必要。可以先分配page，并标记为on demand，on default从file中读取对应的page。会遇到的挑战就是如果文件比物理内存还大怎么办？下一条会给出解决方案。</p>\n</li>\n<li>\n<p>用比物理内存更大的虚拟内存</p>\n<p>有的时候可能需要比物理内存还大的内存。解决方法就是把内存中不常用的部分存在硬盘上。</p>\n<p>在硬盘和内存之间\"page in\" and out数据</p>\n<ul>\n<li>使用PTE来检测什么时候需要disk access</li>\n<li>用page table来找到least recent used disk block 并把其写回硬盘（LRU）</li>\n</ul>\n<p>当同时使用的内存小于RAM的时候，非常work。</p>\n</li>\n<li>\n<p>memory-mapped files</p>\n<p>通过load, store而不是read, write, lseek来access files以轻松访问文件的某一部分</p>\n<ul>\n<li>会使用<code class=\"language-text\">mmap</code> system call</li>\n<li>用memory offset而不是seeking</li>\n</ul>\n</li>\n<li>\n<p>distributed shared memory</p>\n<p>用虚拟内存来假装物理内存 is shared between several machines on the network</p>\n<p>注意只有read only page可以复制，而能够写入的不能。</p>\n</li>\n</ul>\n<h3>The UVPD</h3>\n<p><img src=\"https://pdos.csail.mit.edu/6.828/2014/lec/vpt.png\" alt=\"UVPD\"></p>\n<p>用来让page table等访问到自己的。</p>\n<h2>Scheduling</h2>\n<p>请看<a href=\"https://zhuzilin.github.io/6.828-note9/\">note9</a>和<a href=\"https://zhuzilin.github.io/6.828-note10/\">note10</a>，感觉写的挺清楚的。</p>","frontmatter":{"title":"6.828 总结","date":"2019-03-26T14:59:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-review/"}}}