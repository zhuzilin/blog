{"componentChunkName":"component---src-templates-blog-post-js","path":"/js-basic-prototype/","webpackCompilationHash":"8e732e940c81013b8aa4","result":{"data":{"markdownRemark":{"html":"<p>最近开始做面试的复习，打算顺便把一些看过好多遍的js知识总结提炼一下。这次的内容是<code class=\"language-text\">prototype</code>。本文的内容来自于<a href=\"%5Bhttps://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes%5D(https://github.com/getify/You-Dont-Know-JS/tree/master/this%20%26%20object%20prototypes)\">You Don't Know JS: <em>this</em> &#x26; Object Prototypes</a>。非常好的一本书，非常推荐。</p>\n<h2><code class=\"language-text\">[[Prototype]]</code></h2>\n<p>首先来看一个例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> anotherObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\ta<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create an object linked to `anotherObject`</span>\n<span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> anotherObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nmyObject<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span></code></pre></div>\n<p>（后文会介绍<code class=\"language-text\">Object.create(..)</code>，现在暂时把它大会曾创建了一个和传入的对象以<code class=\"language-text\">[[Prototype]]</code>相连的对象就好）。</p>\n<p><code class=\"language-text\">myObject</code>和<code class=\"language-text\">anotherObject</code>以<code class=\"language-text\">[[Prototype]]</code>相连，虽然<code class=\"language-text\">a</code>不是<code class=\"language-text\">myObject</code>的特性，也通过prototype链访问<code class=\"language-text\">anotherObject</code>的<code class=\"language-text\">a</code>访问到了。</p>\n<p>如果<code class=\"language-text\">anotherObject</code>里面也没有<code class=\"language-text\">a</code>，那么就会一直想上找，如果始终没有，会返回<code class=\"language-text\">undefined</code>。出了直接访问，用<code class=\"language-text\">for .. in</code>这样的循环，或者是<code class=\"language-text\">in</code>这样的东西都可以进行类似的检查。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> anotherObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\ta<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// create an object linked to `anotherObject`</span>\n<span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> anotherObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> k <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"found: \"</span> <span class=\"token operator\">+</span> k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// found: a</span>\n<span class=\"token punctuation\">(</span><span class=\"token string\">\"a\"</span> <span class=\"token keyword\">in</span> myObject<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span><span class=\"token string\">'a'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<h3>Object.prototype</h3>\n<p>刚刚有提到，沿着链搜索一直到头，那么哪里是prototype链的尽头呢？</p>\n<p>所有普通的prototype链的尽头都是<code class=\"language-text\">Object.prototype</code>. 这个对象包含了很多常见的工具函数，包括<code class=\"language-text\">toString(), valueOf()</code>等等。</p>\n<h3>Setting &#x26; Shadowing Properties</h3>\n<p>我们来考虑这个赋值：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">myObject<span class=\"token punctuation\">.</span>foo <span class=\"token operator\">=</span> <span class=\"token string\">\"bar\"</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>如果：</p>\n<ul>\n<li><code class=\"language-text\">myObject</code>有<code class=\"language-text\">foo</code>这个属性的话，那么直接赋值</li>\n<li>\n<p><code class=\"language-text\">foo</code>不在<code class=\"language-text\">myObject</code>上</p>\n<ul>\n<li>而且不在prototype链上的任何一个对象上，那么就在myObject上直接创建一个<code class=\"language-text\">foo</code>属性。</li>\n<li>在<code class=\"language-text\">prototype</code>上找到了需要单独讨论。</li>\n</ul>\n</li>\n</ul>\n<p>如果<code class=\"language-text\">foo</code>既在<code class=\"language-text\">myObject</code>上，也在prototype链的上更高的一处，就会发生<em>shadow</em>。任何对<code class=\"language-text\">foo</code>的访问都会在<code class=\"language-text\">myObject.foo</code>截止。而shadow并不是那么简单的，我们来考虑一下3中情景，<code class=\"language-text\">myObject.foo = &quot;bar&quot;</code>会发生什么（<code class=\"language-text\">foo</code>不在<code class=\"language-text\">myObject</code>上）。</p>\n<ul>\n<li>如果一个普通的accessor property <code class=\"language-text\">foo</code>在链的高处被访问到了，并且其<strong>不是</strong><code class=\"language-text\">writable: false</code>，那么一个新的属性<code class=\"language-text\">foo</code>会被加到<code class=\"language-text\">myObject</code>上，形成shadow</li>\n<li>如果一个普通的accessor property <code class=\"language-text\">foo</code>在链的高处被访问到了，并且其<strong>是</strong><code class=\"language-text\">writable: false</code>，那么既不会给这个<code class=\"language-text\">foo</code>赋值，也不会给<code class=\"language-text\">myObject</code>添加属性，不会发生shadow。</li>\n<li>如果一个 <code class=\"language-text\">foo</code>在链的高处被访问到了，且它是一个setter(书ch3)，那么会调用这个setter，不会给<code class=\"language-text\">myObject</code>添加属性，也不会重设setter，不会发生shadow。</li>\n</ul>\n<p>对于第二个或者第三种情况，如果需要进行shadow，不能用<code class=\"language-text\">=</code>，而需要用<code class=\"language-text\">Object.defineProperty(..)</code>。</p>\n<p>Shadowing可能在不知不觉中发生：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> anotherObject <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n\ta<span class=\"token punctuation\">:</span> <span class=\"token number\">2</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> myObject <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> anotherObject <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nanotherObject<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nmyObject<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\n\nanotherObject<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nmyObject<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span>\n\nmyObject<span class=\"token punctuation\">.</span>a<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// oops, implicit shadowing!</span>\n\nanotherObject<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 2</span>\nmyObject<span class=\"token punctuation\">.</span>a<span class=\"token punctuation\">;</span> <span class=\"token comment\">// 3</span>\n\nmyObject<span class=\"token punctuation\">.</span><span class=\"token function\">hasOwnProperty</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<h2>\"Class\"</h2>\n<p>上面简单的提及了一下prototype链，那么问题来了，为什么需要这么一个链呢？和<code class=\"language-text\">this</code>的时候一样，要弄懂这个问题就要先弄懂prototype不是什么。</p>\n<p>javascript实际上是没有类(class)这么个东西的。然而很多年来，js都在用一种奇怪的方式去尝试实现class。</p>\n<h3>“Class” Functions</h3>\n<p>这种奇怪的方式寄托于函数的一个奇怪的属性：所有函数都会有一个叫<code class=\"language-text\">prototype</code>的属性。</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token comment\">// all objects created by new Foo() is [[Prototype]]-linked to Foo.prototype</span>\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>当<code class=\"language-text\">a</code>被创建的时候，<code class=\"language-text\">a</code>会得到一个internal <code class=\"language-text\">[[Prototype]]</code> link到<code class=\"language-text\">Foo.prototype</code>。</p>\n<p>对比class-oriented language，一个类可以创建多个实体（instance）。但在js中，没有复制的过程，只有link。</p>\n<p><a href=\"https://github.com/getify/You-Dont-Know-JS/blob/master/this%20%26%20object%20prototypes/fig3.png\"><img src=\"https://github.com/getify/You-Dont-Know-JS/raw/master/this%20%26%20object%20prototypes/fig3.png\" alt=\"img\"></a></p>\n<h3>\"Constructors\"</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// ...</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true (shadow)</span></code></pre></div>\n<p>实际上面的两个判断，第一个是<code class=\"language-text\">Foo.prototype</code>的默认特性，第二个是利用了shadowing。为了更好的理解，我们可以看如下的实例：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* .. */</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* .. */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// create a new prototype object</span>\n\n<span class=\"token keyword\">var</span> a1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\na1<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Foo<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false!</span>\na1<span class=\"token punctuation\">.</span>constructor <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true!</span></code></pre></div>\n<p>因为<code class=\"language-text\">Foo.prototype</code>不再和<code class=\"language-text\">Foo</code>有关系了，所以<code class=\"language-text\">a1.constuctor</code>也自然不是<code class=\"language-text\">Foo</code>了。</p>\n<p>当然，还可以加回来，虽然有点麻烦：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* .. */</span> <span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span> <span class=\"token comment\">/* .. */</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// create a new prototype object</span>\n\n<span class=\"token comment\">// Need to properly \"fix\" the missing `.constructor`</span>\n<span class=\"token comment\">// property on the new object serving as `Foo.prototype`.</span>\n<span class=\"token comment\">// See Chapter 3 for `defineProperty(..)`.</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token string\">\"constructor\"</span> <span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n\tenumerable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span>\n\twritable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\tconfigurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">,</span>\n\tvalue<span class=\"token punctuation\">:</span> Foo    <span class=\"token comment\">// point `.constructor` at `Foo`</span>\n<span class=\"token punctuation\">}</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Mechanics</h3>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token function\">myName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a\"</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">myName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"b\"</span></code></pre></div>\n<p>这里实际上是通过shadow来达到类似于class的效果的。</p>\n<h2>\"(Prototypal) Inheritance\"</h2>\n<p>用上述的方式也可以进行类似继承的机制，首先来看下面的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">function</span> <span class=\"token function\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myName</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">function</span> <span class=\"token function\">Bar</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">name<span class=\"token punctuation\">,</span>label</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">Foo</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> name <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>label <span class=\"token operator\">=</span> label<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// here, we make a new `Bar.prototype`</span>\n<span class=\"token comment\">// linked to `Foo.prototype`</span>\n<span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Beware! Now `Bar.prototype.constructor` is gone,</span>\n<span class=\"token comment\">// and might need to be manually \"fixed\" if you're</span>\n<span class=\"token comment\">// in the habit of relying on such properties!</span>\n\n<span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">myLabel</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>label<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"a\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"obj a\"</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na<span class=\"token punctuation\">.</span><span class=\"token function\">myName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"a\"</span>\na<span class=\"token punctuation\">.</span><span class=\"token function\">myLabel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"obj a\"</span></code></pre></div>\n<p>这里的关键是<code class=\"language-text\">Bar.prototype = Object.create( Foo.prototype )</code>。</p>\n<p>注意不能用<code class=\"language-text\">Bar.prototype = Foo.prototype</code>，那样的话，<code class=\"language-text\">Foo</code>和<code class=\"language-text\">Bar</code>创造出来的东西就基本一样了（除了函数里的初始化内容）。</p>\n<p>在浏览器中有一种非标准的<code class=\"language-text\">.__proto__</code>可以用来设置link。ES6也添加了一种方法：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// pre-ES6</span>\n<span class=\"token comment\">// throws away default existing `Bar.prototype`</span>\n<span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// ES6+</span>\n<span class=\"token comment\">// modifies existing `Bar.prototype`</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">setPrototypeOf</span><span class=\"token punctuation\">(</span> <span class=\"token class-name\">Bar</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">,</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Inspecting \"Class\" Relationships</h3>\n<p>如果要查看一个变量的构造函数，可以用<code class=\"language-text\">instanceof</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\na <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\na <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>如果要看两个对象是不是连着的，可以这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// helper utility to see if `o1` is</span>\n<span class=\"token comment\">// related to (delegates to) `o2`</span>\n<span class=\"token keyword\">function</span> <span class=\"token function\">isRelatedTo</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o1<span class=\"token punctuation\">,</span> o2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t<span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o2<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> o1 <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> a <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">var</span> b <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token function\">isRelatedTo</span><span class=\"token punctuation\">(</span> b<span class=\"token punctuation\">,</span> a <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>或者更简单的，ES5中有：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token comment\">// Simply: does `b` appear anywhere in</span>\n<span class=\"token comment\">// `c`s [[Prototype]] chain?</span>\nb<span class=\"token punctuation\">.</span><span class=\"token function\">isPrototypeOf</span><span class=\"token punctuation\">(</span> c <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>也可以直接获取<code class=\"language-text\">[[Prototype]]</code></p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span>\nObject<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span> a <span class=\"token punctuation\">)</span> <span class=\"token operator\">===</span> <span class=\"token class-name\">Object</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// false</span></code></pre></div>\n<p>大多数浏览器还支持：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\">a<span class=\"token punctuation\">.</span>__proto__ <span class=\"token operator\">===</span> <span class=\"token class-name\">Foo</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">;</span> <span class=\"token comment\">// true</span></code></pre></div>\n<p>这个<code class=\"language-text\">__proto__</code>也是shadow导致的。</p>\n<h2>Object Links</h2>\n<p>除了<code class=\"language-text\">new</code>这种相当间接的方法，还可以用<code class=\"language-text\">create</code>来创建链接。</p>\n<h4><code class=\"language-text\">Object.create()</code> Polyfilled</h4>\n<p>到了ES5我们才有<code class=\"language-text\">Object.create(..)</code> 。这里给一个polyfilled</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>Object<span class=\"token punctuation\">.</span>create<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tObject<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">create</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">o</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">function</span> <span class=\"token constant\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\t\t<span class=\"token class-name\">F</span><span class=\"token punctuation\">.</span>prototype <span class=\"token operator\">=</span> o<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">F</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h2>ES6 <code class=\"language-text\">class</code></h2>\n<p>ES6的<code class=\"language-text\">class</code>只是披着狼皮的🐏，只是语法糖。所以实际上还是<code class=\"language-text\">prototype</code>这一套：</p>\n<div class=\"gatsby-highlight\" data-language=\"js\"><pre class=\"language-js\"><code class=\"language-js\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">C</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">constructor</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">=</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">random</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Random: \"</span> <span class=\"token operator\">+</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">var</span> c1 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Random: 0.4324299...\"</span>\n\n<span class=\"token class-name\">C</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">rand</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tconsole<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span> <span class=\"token string\">\"Random: \"</span> <span class=\"token operator\">+</span> Math<span class=\"token punctuation\">.</span><span class=\"token function\">round</span><span class=\"token punctuation\">(</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>num <span class=\"token operator\">*</span> <span class=\"token number\">1000</span> <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">var</span> c2 <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">C</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nc2<span class=\"token punctuation\">.</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Random: 867\"</span>\n\nc1<span class=\"token punctuation\">.</span><span class=\"token function\">rand</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// \"Random: 432\" -- oops!!!</span></code></pre></div>\n<blockquote>\n<p>What a sad commentary on JavaScript: <strong>dynamic is too hard, let's pretend to be (but not actually be!) static</strong>.</p>\n</blockquote>","frontmatter":{"title":"Javascript Basics -- prototype","date":"2019-07-23T13:59:53.000Z","tags":["js"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/js-basic-prototype/"}}}