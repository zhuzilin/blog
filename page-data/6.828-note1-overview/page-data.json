{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-note1-overview/","webpackCompilationHash":"8e732e940c81013b8aa4","result":{"data":{"markdownRemark":{"html":"<p>这里会记录阅读6.828课程lecture note的我的个人笔记。可能会中英混杂，不是很适合外人阅读，也请见谅。</p>\n<h2>Lecture 1: O/S overview</h2>\n<p>操作系统的主要目的是：</p>\n<ul>\n<li>支持应用</li>\n<li>为了便捷对硬件进行抽象</li>\n<li>为多种应用multiplexing the hardware</li>\n<li>为避免bug对各个应用进行隔离</li>\n<li>提供高性能</li>\n</ul>\n<p>设计方式是：</p>\n<ul>\n<li>微观看，一个管理硬件的library</li>\n<li>宏观看，将物理机虚拟为一个有着更好性质的虚拟机</li>\n</ul>\n<p>整体组织，层状结构：硬件 -> kernel -> 用户应用</p>\n<p>OS提供的主要服务：</p>\n<ul>\n<li>process</li>\n<li>memory allocation</li>\n<li>file contents</li>\n<li>directories and file names</li>\n<li>security</li>\n<li>many others: users, IPC, network, time, terminal...</li>\n</ul>\n<p>所谓抽象，即为应用只能通过system call来使用某种功能。</p>\n<p>OS的抽象是什么样的呢？</p>\n<ul>\n<li>应用只通过system call来和OS进行交互</li>\n</ul>\n<h3>Introduction to system calls</h3>\n<p>6.828 is largely about design and implementation of system call interface.</p>\n<p>对于<code class=\"language-text\">ls</code>，我们可以使用如下命令来看它使用了哪些命令：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">strace /bin/ls</code></pre></div>\n<p>会显示其一步一步都调用了哪些system call。</p>\n<p>example <code class=\"language-text\">copy.c</code></p>\n<p>没有找到代码，所以只好自己写了一个：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;sys/types.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">128</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  size_t len <span class=\"token operator\">=</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">write</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行的结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">strace</span> ./copy\n<span class=\"token punctuation\">..</span>.\nread<span class=\"token punctuation\">(</span>0, <span class=\"token string\">\"123\\n\"</span>, 128<span class=\"token punctuation\">)</span>                   <span class=\"token operator\">=</span> 4\nwrite<span class=\"token punctuation\">(</span>1, <span class=\"token string\">\"123\\n\"</span>, 4<span class=\"token punctuation\">)</span>                    <span class=\"token operator\">=</span> 4\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>注意因为需要输入变量，所以这里是整理过的输出。</p>\n<p>example: <code class=\"language-text\">open.c</code></p>\n<p>还是自己写了一个：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;fcntl.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;unistd.h></span></span>\n\n<span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n  mode_t mode <span class=\"token operator\">=</span> S_IRUSR <span class=\"token operator\">|</span> S_IWUSR <span class=\"token operator\">|</span> S_IRGRP <span class=\"token operator\">|</span> S_IROTH<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>filename <span class=\"token operator\">=</span> <span class=\"token string\">\"output.txt\"</span><span class=\"token punctuation\">;</span>\n  fd <span class=\"token operator\">=</span> <span class=\"token function\">creat</span><span class=\"token punctuation\">(</span>filename<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// notice, there is no 'e'</span>\n  <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token number\">13</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"hello world\\n\"</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>fd<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行的结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">strace</span> ./open\n<span class=\"token punctuation\">..</span>.\ncreat<span class=\"token punctuation\">(</span><span class=\"token string\">\"output.txt\"</span>, 0644<span class=\"token punctuation\">)</span>               <span class=\"token operator\">=</span> 3\nwrite<span class=\"token punctuation\">(</span>3, <span class=\"token string\">\"hello world\\n\\0\"</span>, 13<span class=\"token punctuation\">)</span>         <span class=\"token operator\">=</span> 13\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>注意这里fd就是3</p>\n<p>example: <code class=\"language-text\">redirect.c</code></p>\n<p>不知道要写什么样的代码。。。</p>\n<p>Unix shell</p>\n<p>因为<code class=\"language-text\">sh.c</code>在之后的作业里要用，就不在这里细说了。</p>\n<p>example: <code class=\"language-text\">pipe1.c</code>, <code class=\"language-text\">pipe2.c</code> 都不知道是什么样的代码。。。</p>","frontmatter":{"title":"6.828 笔记1","date":"2019-02-12T11:51:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-note1-overview/"}}}