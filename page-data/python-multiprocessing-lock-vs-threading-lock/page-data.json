{"componentChunkName":"component---src-templates-blog-post-js","path":"/python-multiprocessing-lock-vs-threading-lock/","webpackCompilationHash":"cf10bc6a65d943d15347","result":{"data":{"markdownRemark":{"html":"<p>昨天帮舍友debug的时候发现了一个有趣的问题，这里来讨论一下。</p>\n<p>舍友写出的问题主要是要做这样一件事。他在用<a href=\"https://gunicorn.org/\">gunicorn</a>加flask做一个可视化项目。gunicorn是一个基于<code class=\"language-text\">fork</code>的WSGI server。大致的用法就和官网一样：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  $ pip <span class=\"token function\">install</span> gunicorn\n  $ <span class=\"token function\">cat</span> myapp.py\n    def app<span class=\"token punctuation\">(</span>environ, start_response<span class=\"token punctuation\">)</span>:\n        data <span class=\"token operator\">=</span> b<span class=\"token string\">\"Hello, World!\\n\"</span>\n        start_response<span class=\"token punctuation\">(</span><span class=\"token string\">\"200 OK\"</span>, <span class=\"token punctuation\">[</span>\n            <span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span>, <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span>,\n            <span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Length\"</span>, str<span class=\"token punctuation\">(</span>len<span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">))</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> iter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n  $ gunicorn -w 4 myapp:app\n  <span class=\"token punctuation\">[</span>2014-09-10 10:22:28 +0000<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>30869<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>INFO<span class=\"token punctuation\">]</span> Listening at: http://127.0.0.1:8000 <span class=\"token punctuation\">(</span>30869<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">[</span>2014-09-10 10:22:28 +0000<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>30869<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>INFO<span class=\"token punctuation\">]</span> Using worker: <span class=\"token function\">sync</span>\n  <span class=\"token punctuation\">[</span>2014-09-10 10:22:28 +0000<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>30874<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>INFO<span class=\"token punctuation\">]</span> Booting worker with pid: 30874\n  <span class=\"token punctuation\">[</span>2014-09-10 10:22:28 +0000<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>30875<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>INFO<span class=\"token punctuation\">]</span> Booting worker with pid: 30875\n  <span class=\"token punctuation\">[</span>2014-09-10 10:22:28 +0000<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>30876<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>INFO<span class=\"token punctuation\">]</span> Booting worker with pid: 30876\n  <span class=\"token punctuation\">[</span>2014-09-10 10:22:28 +0000<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>30877<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">[</span>INFO<span class=\"token punctuation\">]</span> Booting worker with pid: 30877</code></pre></div>\n<p>通过设置<code class=\"language-text\">-w</code>会设置fork的次数，也就是worker的个数，每个worker都会运行对应的而函数，例子里就是<code class=\"language-text\">myapp.app</code>。然后出现了一个需求，这些wroker需要读同一个文件，所以需要一个锁。</p>\n<p>解决方法很简单，gunicorn有一个<code class=\"language-text\">--preload</code>，先运行脚本之后再fork，而不是默认的先fork再运行（之所以默认的是那样是为了更好的重启之类的）。所以只需要这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># myapp.py</span>\n<span class=\"token keyword\">from</span> multiprocessing <span class=\"token keyword\">import</span> Lock\n<span class=\"token keyword\">from</span> time <span class=\"token keyword\">import</span> sleep\n\nlock <span class=\"token operator\">=</span> Lock<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">app</span><span class=\"token punctuation\">(</span>environ<span class=\"token punctuation\">,</span> start_response<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> lock<span class=\"token punctuation\">.</span>acquire<span class=\"token punctuation\">(</span><span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"lock\"</span><span class=\"token punctuation\">)</span>\n        sleep<span class=\"token punctuation\">(</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\"># here is the file processing</span>\n        lock<span class=\"token punctuation\">.</span>release<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"unlock\"</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">print</span><span class=\"token punctuation\">(</span>getpid<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"cannot acquire at the moment\"</span><span class=\"token punctuation\">)</span>\n    data <span class=\"token operator\">=</span> <span class=\"token string\">b\"Hello, World!\\n\"</span>\n    start_response<span class=\"token punctuation\">(</span><span class=\"token string\">\"200 OK\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">[</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Type\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"text/plain\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n        <span class=\"token punctuation\">(</span><span class=\"token string\">\"Content-Length\"</span><span class=\"token punctuation\">,</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token builtin\">iter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>data<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>然后运行：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">  $ gunicorn -w 4 --preload myapp:app</code></pre></div>\n<p>就可以了。</p>\n<p>这里插一句，因为有的时候会晕。fork的时候是会<strong>复制</strong>整个page table的（注意不是复制引用）。这也是为什么赋值之前的变量会被访问到。但是之后再定义新的变量的时候，因为大家用的都是一个page table和一个物理地址的page link list，所以fork之后分配内存就不会范文到同一个地址了。</p>\n<p>在进行如上的实验的时候，我错误的把<code class=\"language-text\">multiprocessing.Lock</code>写成了<code class=\"language-text\">threading.Lock</code>了，所以即使传入的是一个锁，仍然不能在多个进程之间加锁。所以问题就来了，这两者时间的区别是什么呢？</p>\n<p>所以我就看了一下CPython的实现，下面是摘出来的代码。为了简洁，我们只考虑unix系统下的情况，并把所有timeout的地方都去掉了。可以理解为都是non-blocking的。</p>\n<h2>mutiprocessing.Lock</h2>\n<p>首先是<code class=\"language-text\">multiprocessing.Lock</code>，这个东西定义在<code class=\"language-text\">CPython/Lib/multiprocessing/synchronize.py</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\nsynchronize.py\n\"\"\"</span>\n<span class=\"token comment\"># Base class for semaphores and mutexes; wraps `_multiprocessing.SemLock`</span>\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">SemLock</span><span class=\"token punctuation\">(</span><span class=\"token builtin\">object</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    _rand <span class=\"token operator\">=</span> tempfile<span class=\"token punctuation\">.</span>_RandomNameSequence<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> maxvalue<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">for</span> i <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                sl <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_semlock <span class=\"token operator\">=</span> _multiprocessing<span class=\"token punctuation\">.</span>SemLock<span class=\"token punctuation\">(</span>\n                    kind<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> maxvalue<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>_make_name<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                    unlink_now<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">except</span> FileExistsError<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">pass</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">break</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">Lock</span><span class=\"token punctuation\">(</span>SemLock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> ctx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        SemLock<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> SEMAPHORE<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> ctx<span class=\"token operator\">=</span>ctx<span class=\"token punctuation\">)</span></code></pre></div>\n<p>可以看到这里的<code class=\"language-text\">Lock</code>是<code class=\"language-text\">SemLock</code>的一个派生类。那么我们来考虑一下基类中重要的<code class=\"language-text\">_multiprocessing.SemLock</code>。除去一些python, C相互交互的代码，下面是和<code class=\"language-text\">SemLock</code>相关的C代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\n_multiprocessing.h\n*/</span>\n<span class=\"token keyword\">typedef</span> sem_t <span class=\"token operator\">*</span>SEM_HANDLE<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/*\nsemaphore.c\n*/</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    PyObject_HEAD\n    SEM_HANDLE handle<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> last_tid<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// thread id</span>\n    <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> maxvalue<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> kind<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> SemLockObject<span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SEM_CREATE(name, val, max) sem_open(name, O_CREAT | O_EXCL, 0600, val)</span>\n\n<span class=\"token keyword\">static</span> PyObject <span class=\"token operator\">*</span>\n<span class=\"token function\">semlock_new</span><span class=\"token punctuation\">(</span>PyTypeObject <span class=\"token operator\">*</span>type<span class=\"token punctuation\">,</span> PyObject <span class=\"token operator\">*</span>args<span class=\"token punctuation\">,</span> PyObject <span class=\"token operator\">*</span>kwds<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    handle <span class=\"token operator\">=</span> <span class=\"token function\">SEM_CREATE</span><span class=\"token punctuation\">(</span>name<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> maxvalue<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    result <span class=\"token operator\">=</span> <span class=\"token function\">newsemlockobject</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">,</span> handle<span class=\"token punctuation\">,</span> kind<span class=\"token punctuation\">,</span> maxvalue<span class=\"token punctuation\">,</span> name_copy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> PyObject <span class=\"token operator\">*</span>\n<span class=\"token function\">newsemlockobject</span><span class=\"token punctuation\">(</span>PyTypeObject <span class=\"token operator\">*</span>type<span class=\"token punctuation\">,</span> SEM_HANDLE handle<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> kind<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> maxvalue<span class=\"token punctuation\">,</span>\n                 <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>name<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    SemLockObject <span class=\"token operator\">*</span>self<span class=\"token punctuation\">;</span>\n\n    self <span class=\"token operator\">=</span> <span class=\"token function\">PyObject_New</span><span class=\"token punctuation\">(</span>SemLockObject<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>self<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    self<span class=\"token operator\">-></span>handle <span class=\"token operator\">=</span> handle<span class=\"token punctuation\">;</span>\n    self<span class=\"token operator\">-></span>kind <span class=\"token operator\">=</span> kind<span class=\"token punctuation\">;</span>\n    self<span class=\"token operator\">-></span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    self<span class=\"token operator\">-></span>last_tid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    self<span class=\"token operator\">-></span>maxvalue <span class=\"token operator\">=</span> maxvalue<span class=\"token punctuation\">;</span>\n    self<span class=\"token operator\">-></span>name <span class=\"token operator\">=</span> name<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>PyObject<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>self<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可以看到，这里面最核心的部分实际上就是<code class=\"language-text\">sem_open(name, O_CREAT | O_EXCL, 0600, val)</code>。</p>\n<h2>threading.Lock</h2>\n<p>然后我们来看看<code class=\"language-text\">threading.Lock</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token triple-quoted-string string\">\"\"\"\nthreading.py\n\"\"\"</span>\n_allocate_lock <span class=\"token operator\">=</span> _thread<span class=\"token punctuation\">.</span>allocate_lock\nLock <span class=\"token operator\">=</span> _allocate_lock</code></pre></div>\n<p>这里的<code class=\"language-text\">Lock</code>直接就是一个函数。这个函数相关的代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\n_threadmodule.c\n*/</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token punctuation\">{</span>\n    PyObject_HEAD\n    PyThread_type_lock lock_lock<span class=\"token punctuation\">;</span>\n    PyObject <span class=\"token operator\">*</span>in_weakreflist<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> locked<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* for sanity checking */</span>\n<span class=\"token punctuation\">}</span> lockobject<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// this is the _allocate_lock in the above python file</span>\n<span class=\"token keyword\">static</span> PyObject <span class=\"token operator\">*</span>\n<span class=\"token function\">thread_PyThread_allocate_lock</span><span class=\"token punctuation\">(</span>PyObject <span class=\"token operator\">*</span>self<span class=\"token punctuation\">,</span> PyObject <span class=\"token operator\">*</span><span class=\"token function\">Py_UNUSED</span><span class=\"token punctuation\">(</span>ignored<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>PyObject <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token function\">newlockobject</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> lockobject <span class=\"token operator\">*</span>\n<span class=\"token function\">newlockobject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    lockobject <span class=\"token operator\">*</span>self<span class=\"token punctuation\">;</span>\n    self <span class=\"token operator\">=</span> <span class=\"token function\">PyObject_New</span><span class=\"token punctuation\">(</span>lockobject<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>Locktype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    self<span class=\"token operator\">-></span>lock_lock <span class=\"token operator\">=</span> <span class=\"token function\">PyThread_allocate_lock</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    self<span class=\"token operator\">-></span>locked <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    self<span class=\"token operator\">-></span>in_weakreflist <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>self<span class=\"token operator\">-></span>lock_lock <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">Py_DECREF</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">PyErr_SetString</span><span class=\"token punctuation\">(</span>ThreadError<span class=\"token punctuation\">,</span> <span class=\"token string\">\"can't allocate lock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/*\nthread_pthread.h\n*/</span>\nPyThread_type_lock\n<span class=\"token function\">PyThread_allocate_lock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    sem_t <span class=\"token operator\">*</span>lock<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">,</span> error <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    lock <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sem_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">PyMem_RawMalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sem_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        status <span class=\"token operator\">=</span> <span class=\"token function\">sem_init</span><span class=\"token punctuation\">(</span>lock<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">dprintf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PyThread_allocate_lock() -> %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>PyThread_type_lock<span class=\"token punctuation\">)</span>lock<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里核心的就是<code class=\"language-text\">sem_init(lock,0,1)</code>。这里的第2个参数是表示不在进程之间共享。</p>\n<p>所以对比出来了，其实能不能用多进程就是用<code class=\"language-text\">sem_open</code>和<code class=\"language-text\">sem_init</code>的区别。用虽然用<code class=\"language-text\">sem_init</code>也是可以进行进程间共享的，但是用<code class=\"language-text\">sem_open</code>也就是named semaphore更方便。<a href=\"https://stackoverflow.com/questions/32205396/share-posix-semaphore-among-multiple-processes\">reference</a>。</p>\n<p>对于named semaphore和unnamed之间的区别可以看<a href=\"http://man7.org/linux/man-pages/man7/sem_overview.7.html\">man</a>。主要区别是named是存在virtual filesystem里的，unnamed存在shared memory中。</p>","frontmatter":{"title":"Python multiprocessing lock vs threading lock","date":"2019-07-30T11:45:00.000Z","tags":["python","OS"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/python-multiprocessing-lock-vs-threading-lock/"}}}