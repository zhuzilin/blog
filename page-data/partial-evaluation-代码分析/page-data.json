{"componentChunkName":"component---src-templates-blog-post-js","path":"/partial-evaluation-代码分析/","webpackCompilationHash":"4caac2cf7443445fbc35","result":{"data":{"markdownRemark":{"html":"<p>在学习 JAX 和 TVM 代码的时候经常会遇到 partial evalutation 这个名词。它的主要功能应该是在编译期对程序进行局部估值，类似于 constant folding，只不过对于函数，也会把已知的参数都 fold 起来，并转化为新的函数。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> <span class=\"token punctuation\">(</span><span class=\"token car\">add</span> x y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">+</span> x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">add</span> <span class=\"token number\">1</span> a<span class=\"token punctuation\">)</span></code></pre></div>\n<p>会被转化为：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> <span class=\"token punctuation\">(</span><span class=\"token car\">add1</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">+</span> <span class=\"token number\">1</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">add1</span> a<span class=\"token punctuation\">)</span></code></pre></div>\n<p>在学习的过程中，又看到<a href=\"%E6%80%8E%E6%A0%B7%E7%90%86%E8%A7%A3%20Partial%20Evaluation%EF%BC%9F%20-%20Guannan%20Wei%E7%9A%84%E5%9B%9E%E7%AD%94%20-%20%E7%9F%A5%E4%B9%8E%20https://www.zhihu.com/question/29266193/answer/140701226\">知乎的 Guannan Wei 大大发的关于 partial evaluation 的解释</a>。非常清晰。其中为了阐述如何对函数进行 partial evaluation，直接列出了如下的 racket 代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">#lang racket\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">struct</span> FDef <span class=\"token punctuation\">(</span><span class=\"token car\">args</span> body<span class=\"token punctuation\">)</span> #<span class=\"token lisp-property property\">:transparent</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">struct</span> None <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> #<span class=\"token lisp-property property\">:transparent</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> <span class=\"token punctuation\">(</span><span class=\"token car\">lookup</span> key env<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token car\">null</span>? env<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token car\">equal</span>? key <span class=\"token punctuation\">(</span><span class=\"token car\">first</span> <span class=\"token punctuation\">(</span><span class=\"token car\">first</span> env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">second</span> <span class=\"token punctuation\">(</span><span class=\"token car\">first</span> env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span>else <span class=\"token punctuation\">(</span><span class=\"token car\">lookup</span> key <span class=\"token punctuation\">(</span><span class=\"token car\">rest</span> env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> <span class=\"token punctuation\">(</span><span class=\"token car\">update</span> key val env<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token car\">null</span>? env<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">list</span> key val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token car\">equal</span>? key <span class=\"token punctuation\">(</span><span class=\"token car\">first</span> <span class=\"token punctuation\">(</span><span class=\"token car\">first</span> env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n         <span class=\"token punctuation\">(</span><span class=\"token keyword\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token car\">list</span> key val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">rest</span> env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n        <span class=\"token punctuation\">[</span>else <span class=\"token punctuation\">(</span><span class=\"token keyword\">cons</span> <span class=\"token punctuation\">(</span><span class=\"token car\">first</span> env<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">update</span> key val <span class=\"token punctuation\">(</span><span class=\"token car\">rest</span> env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> <span class=\"token punctuation\">(</span><span class=\"token car\">op</span>? op<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token car\">symbol=</span>? op <span class=\"token quoted-symbol variable symbol\">'==</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">symbol=</span>? op <span class=\"token quoted-symbol variable symbol\">'+</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">symbol=</span>? op <span class=\"token quoted-symbol variable symbol\">'-</span><span class=\"token punctuation\">)</span>  <span class=\"token punctuation\">(</span><span class=\"token car\">symbol=</span>? op <span class=\"token quoted-symbol variable symbol\">'*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> <span class=\"token punctuation\">(</span><span class=\"token car\">is-value</span>? v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span><span class=\"token car\">number</span>? v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">boolean</span>? v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> <span class=\"token punctuation\">(</span><span class=\"token car\">aexp</span> op l r<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token car\">match</span> op\n    <span class=\"token punctuation\">[</span><span class=\"token quoted-symbol variable symbol\">'+</span> <span class=\"token punctuation\">(</span><span class=\"token car\">+</span> l r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token quoted-symbol variable symbol\">'*</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> l r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token quoted-symbol variable symbol\">'-</span> <span class=\"token punctuation\">(</span><span class=\"token car\">-</span> l r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n    <span class=\"token punctuation\">[</span><span class=\"token quoted-symbol variable symbol\">'==</span> <span class=\"token punctuation\">(</span><span class=\"token car\">eq</span>? l r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> <span class=\"token punctuation\">(</span><span class=\"token car\">new-function-name</span> old-name args<span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token car\">string->symbol</span> <span class=\"token punctuation\">(</span><span class=\"token car\">string-append</span> <span class=\"token punctuation\">(</span><span class=\"token car\">symbol->string</span> old-name<span class=\"token punctuation\">)</span>\n                                 <span class=\"token punctuation\">(</span><span class=\"token car\">number->string</span> <span class=\"token punctuation\">(</span><span class=\"token car\">equal-hash-code</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">; peval: [(symbol, FDef)] SExpr -> ([(symbol, FDef)], SExpr)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> <span class=\"token punctuation\">(</span><span class=\"token car\">peval</span> fdefs expr<span class=\"token punctuation\">)</span>\n  <span class=\"token comment\">; pe: SExpr [(symbol, FDef)] -> SExpr</span>\n  <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> expr env<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">match</span> expr\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>? number?<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>? boolean?<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> expr<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>? symbol?<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> val <span class=\"token punctuation\">(</span><span class=\"token car\">lookup</span> expr env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">None</span>? val<span class=\"token punctuation\">)</span> expr val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">`(</span><span class=\"token punctuation\">,(</span>? op? op<span class=\"token punctuation\">)</span> <span class=\"token splice symbol variable\">,l</span> <span class=\"token splice symbol variable\">,r</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> lv <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> l env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> rv <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> r env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token car\">is-value</span>? lv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">is-value</span>? rv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">(</span><span class=\"token car\">aexp</span> op lv rv<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">`(</span><span class=\"token splice symbol variable\">,op</span> <span class=\"token splice symbol variable\">,lv</span> <span class=\"token splice symbol variable\">,rv</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">`(</span><span class=\"token keyword\">if</span> <span class=\"token splice symbol variable\">,cnd</span> <span class=\"token splice symbol variable\">,thn</span> <span class=\"token splice symbol variable\">,els</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> cnd-v <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> cnd env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">is-value</span>? cnd-v<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> cnd-v <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> thn env<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> els env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">`(</span><span class=\"token keyword\">if</span> <span class=\"token splice symbol variable\">,cnd</span> <span class=\"token punctuation\">,(</span><span class=\"token car\">pe</span> thn env<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,(</span><span class=\"token car\">pe</span> els env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">`(</span><span class=\"token splice symbol variable\">,fname</span> <span class=\"token splice symbol variable\">,args</span> ...<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fun <span class=\"token punctuation\">(</span><span class=\"token car\">lookup</span> fname fdefs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> args-v <span class=\"token punctuation\">(</span><span class=\"token car\">map</span> <span class=\"token punctuation\">(</span>λ <span class=\"token punctuation\">(</span><span class=\"token car\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> v env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> new-env <span class=\"token punctuation\">(</span><span class=\"token car\">map</span> list <span class=\"token punctuation\">(</span><span class=\"token car\">FDef-args</span> fun<span class=\"token punctuation\">)</span> args-v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define-values</span> <span class=\"token punctuation\">(</span><span class=\"token car\">statics</span> dyns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">partition</span> <span class=\"token punctuation\">(</span><span class=\"token car\">compose</span> is-value? second<span class=\"token punctuation\">)</span> new-env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">empty</span>? dyns<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> <span class=\"token punctuation\">(</span><span class=\"token car\">FDef-body</span> fun<span class=\"token punctuation\">)</span> statics<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>new-fname <span class=\"token punctuation\">(</span><span class=\"token car\">new-function-name</span> fname statics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">(</span><span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span><span class=\"token car\">None</span>? <span class=\"token punctuation\">(</span><span class=\"token car\">lookup</span> new-fname fdefs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token car\">set!</span> fdefs <span class=\"token punctuation\">`(</span><span class=\"token punctuation\">(</span><span class=\"token splice symbol variable\">,new-fname</span> <span class=\"token quoted-symbol variable symbol\">'placeholder</span><span class=\"token punctuation\">)</span> <span class=\"token splice symbol variable\">,@fdefs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token car\">set!</span> fdefs <span class=\"token punctuation\">(</span><span class=\"token car\">update</span> new-fname\n                                   <span class=\"token punctuation\">(</span><span class=\"token car\">FDef</span> <span class=\"token punctuation\">(</span><span class=\"token car\">map</span> first dyns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> <span class=\"token punctuation\">(</span><span class=\"token car\">FDef-body</span> fun<span class=\"token punctuation\">)</span> statics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                   fdefs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">`(</span><span class=\"token splice symbol variable\">,new-fname</span> <span class=\"token splice symbol variable\">,@</span><span class=\"token punctuation\">(</span><span class=\"token car\">map</span> second dyns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token car\">reverse</span> <span class=\"token punctuation\">`(</span><span class=\"token punctuation\">,(</span><span class=\"token car\">pe</span> expr <span class=\"token punctuation\">'(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token splice symbol variable\">,fdefs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">module*</span> test #f\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> add <span class=\"token punctuation\">(</span><span class=\"token car\">list</span> <span class=\"token quoted-symbol variable symbol\">'add</span> <span class=\"token punctuation\">(</span><span class=\"token car\">FDef</span> <span class=\"token punctuation\">'(</span><span class=\"token car\">x</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'(</span><span class=\"token car\">+</span> x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; (add 1 2) 直接被解释为3</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">check-equal</span>? <span class=\"token punctuation\">(</span><span class=\"token car\">second</span> <span class=\"token punctuation\">(</span><span class=\"token car\">peval</span> <span class=\"token punctuation\">(</span><span class=\"token car\">list</span> add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'(</span><span class=\"token car\">add</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; (add 1 a) 则解释为(add467865875966180528 a)</span>\n<span class=\"token comment\">; 同时生成了一个特化的函数 'add467865875966180528, 也就是(λ (y) (+ 1 y))</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">check-equal</span>? <span class=\"token punctuation\">(</span><span class=\"token car\">peval</span> <span class=\"token punctuation\">(</span><span class=\"token car\">list</span> add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'(</span><span class=\"token car\">add</span> <span class=\"token number\">1</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token punctuation\">(</span><span class=\"token car\">list</span>\n                 <span class=\"token punctuation\">(</span><span class=\"token car\">list</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token car\">list</span> <span class=\"token quoted-symbol variable symbol\">'add467865875966180528</span> <span class=\"token punctuation\">(</span><span class=\"token car\">FDef</span> <span class=\"token punctuation\">'(</span><span class=\"token car\">y</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'(</span><span class=\"token car\">+</span> <span class=\"token number\">1</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token car\">list</span> <span class=\"token quoted-symbol variable symbol\">'add</span> <span class=\"token punctuation\">(</span><span class=\"token car\">FDef</span> <span class=\"token punctuation\">'(</span><span class=\"token car\">x</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'(</span><span class=\"token car\">+</span> x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                 <span class=\"token punctuation\">'(</span><span class=\"token car\">add467865875966180528</span> a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>在这里对这端代码的内容进行一下解读，顺便补一补 racket 语法。</p>\n<p>这段代码实现了一个很简单的 lambda calculus 语言。除去用 <code class=\"language-text\">FDef</code> 定义函数，还可以进行表达式的 <code class=\"language-text\">+</code>, <code class=\"language-text\">-</code> 和 <code class=\"language-text\">*</code>。</p>\n<p>Partial evaluation 则是用 <code class=\"language-text\">peval</code> 这个函数来表示的。<code class=\"language-text\">peval</code> 会传入 2 个参数，第一个参数 <code class=\"language-text\">fdefs</code> 是一个 <code class=\"language-text\">FDef</code> 的 list，表示当前环境中保存的所有函数；第二个参数则是转化到现在这一步，表达式被转换成什么样了。例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> add <span class=\"token punctuation\">(</span><span class=\"token car\">list</span> <span class=\"token quoted-symbol variable symbol\">'add</span> <span class=\"token punctuation\">(</span><span class=\"token car\">FDef</span> <span class=\"token punctuation\">'(</span><span class=\"token car\">x</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'(</span><span class=\"token car\">+</span> x y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">peval</span> <span class=\"token punctuation\">(</span><span class=\"token car\">list</span> add<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">'(</span><span class=\"token car\">add</span> <span class=\"token number\">1</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里传入的函数列表就是 <code class=\"language-text\">(list add)</code>，需要进行 peval 的表达式是 <code class=\"language-text\">&#39;(add 1 2)&#39;</code>。</p>\n<p><code class=\"language-text\">peval</code> 里面则是定义了一个内部的函数 <code class=\"language-text\">pe</code>，这个函数也有 2 个参数，第一个就是当前的表达式，第二个则是目前环境中变量的值。这里要注意，因为我们的语言没有赋值或者是 <code class=\"language-text\">let</code> 语句，所以这里的变量只可能是函数，同时也只有在 partial evaluate 函数调用的时候才会扩张 <code class=\"language-text\">env</code>。</p>\n<p>有了 <code class=\"language-text\">pe</code>，我们就可以把 <code class=\"language-text\">peval</code> 转化为了：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">reverse</span> <span class=\"token punctuation\">`(</span><span class=\"token punctuation\">,(</span><span class=\"token car\">pe</span> expr <span class=\"token punctuation\">'(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token splice symbol variable\">,fdefs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里有一点需要补充，就是 <code class=\"language-text\">,</code> 在 racket 里面表示 unquote，就是这部分是进行实际计算的，而不是单纯的 symbol。后面会出现的 <code class=\"language-text\">,@</code> 则是不仅 unquote，还要展开里面的 list。</p>\n<p>对于 <code class=\"language-text\">pe</code> 来说，如果表达式并不是 <code class=\"language-text\">(func args)</code> 这个形式的函数调用，就比较 trivial，分别估值每个部分就好，例如：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">  <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> expr env<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">match</span> expr\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">or</span> <span class=\"token punctuation\">(</span>? number?<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>? boolean?<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> expr<span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>? symbol?<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> val <span class=\"token punctuation\">(</span><span class=\"token car\">lookup</span> expr env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">None</span>? val<span class=\"token punctuation\">)</span> expr val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">`(</span><span class=\"token punctuation\">,(</span>? op? op<span class=\"token punctuation\">)</span> <span class=\"token splice symbol variable\">,l</span> <span class=\"token splice symbol variable\">,r</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> lv <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> l env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> rv <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> r env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">and</span> <span class=\"token punctuation\">(</span><span class=\"token car\">is-value</span>? lv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">is-value</span>? rv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">(</span><span class=\"token car\">aexp</span> op lv rv<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">`(</span><span class=\"token splice symbol variable\">,op</span> <span class=\"token splice symbol variable\">,lv</span> <span class=\"token splice symbol variable\">,rv</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">`(</span><span class=\"token keyword\">if</span> <span class=\"token splice symbol variable\">,cnd</span> <span class=\"token splice symbol variable\">,thn</span> <span class=\"token splice symbol variable\">,els</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> cnd-v <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> cnd env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">is-value</span>? cnd-v<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> cnd-v <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> thn env<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> els env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">`(</span><span class=\"token keyword\">if</span> <span class=\"token splice symbol variable\">,cnd</span> <span class=\"token punctuation\">,(</span><span class=\"token car\">pe</span> thn env<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">,(</span><span class=\"token car\">pe</span> els env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n      ...</code></pre></div>\n<p>所以我们关键来研究一下 <code class=\"language-text\">(func args)</code> 这个形式：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">  <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> expr env<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">match</span> expr\n      ...\n      <span class=\"token punctuation\">[</span><span class=\"token punctuation\">`(</span><span class=\"token splice symbol variable\">,fname</span> <span class=\"token splice symbol variable\">,args</span> ...<span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fun <span class=\"token punctuation\">(</span><span class=\"token car\">lookup</span> fname fdefs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> args-v <span class=\"token punctuation\">(</span><span class=\"token car\">map</span> <span class=\"token punctuation\">(</span>λ <span class=\"token punctuation\">(</span><span class=\"token car\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> v env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define</span> new-env <span class=\"token punctuation\">(</span><span class=\"token car\">map</span> list <span class=\"token punctuation\">(</span><span class=\"token car\">FDef-args</span> fun<span class=\"token punctuation\">)</span> args-v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token car\">define-values</span> <span class=\"token punctuation\">(</span><span class=\"token car\">statics</span> dyns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">partition</span> <span class=\"token punctuation\">(</span><span class=\"token car\">compose</span> is-value? second<span class=\"token punctuation\">)</span> new-env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n       <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">empty</span>? dyns<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> <span class=\"token punctuation\">(</span><span class=\"token car\">FDef-body</span> fun<span class=\"token punctuation\">)</span> statics<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>new-fname <span class=\"token punctuation\">(</span><span class=\"token car\">new-function-name</span> fname statics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">(</span><span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span><span class=\"token car\">None</span>? <span class=\"token punctuation\">(</span><span class=\"token car\">lookup</span> new-fname fdefs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token car\">set!</span> fdefs <span class=\"token punctuation\">`(</span><span class=\"token punctuation\">(</span><span class=\"token splice symbol variable\">,new-fname</span> <span class=\"token quoted-symbol variable symbol\">'placeholder</span><span class=\"token punctuation\">)</span> <span class=\"token splice symbol variable\">,@fdefs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token car\">set!</span> fdefs <span class=\"token punctuation\">(</span><span class=\"token car\">update</span> new-fname\n                                   <span class=\"token punctuation\">(</span><span class=\"token car\">FDef</span> <span class=\"token punctuation\">(</span><span class=\"token car\">map</span> first dyns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> <span class=\"token punctuation\">(</span><span class=\"token car\">FDef-body</span> fun<span class=\"token punctuation\">)</span> statics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                   fdefs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">`(</span><span class=\"token splice symbol variable\">,new-fname</span> <span class=\"token splice symbol variable\">,@</span><span class=\"token punctuation\">(</span><span class=\"token car\">map</span> second dyns<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<ul>\n<li>\n<p>首先，查看 <code class=\"language-text\">fdefs</code> 里面是不是已经有 <code class=\"language-text\">fname</code> 了，把它的实际表达式称为 <code class=\"language-text\">fun</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fun <span class=\"token punctuation\">(</span><span class=\"token car\">lookup</span> fname fdefs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>其次，对所有参数进行 <code class=\"language-text\">pe</code> 操作，这里参数的环境仍然是 <code class=\"language-text\">env</code></p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> args-v <span class=\"token punctuation\">(</span><span class=\"token car\">map</span> <span class=\"token punctuation\">(</span>λ <span class=\"token punctuation\">(</span><span class=\"token car\">v</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> v env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>然后 fun 的参数和注意和 pe 后的 args 相对应，并将这个对应关系称为 <code class=\"language-text\">new-env</code></p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> new-env <span class=\"token punctuation\">(</span><span class=\"token car\">map</span> list <span class=\"token punctuation\">(</span><span class=\"token car\">FDef-args</span> fun<span class=\"token punctuation\">)</span> args-v<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n<li>\n<p>把所有的 args 分为 static 和 dynamic 的，static 是指在编译的时候确定的，dynamic 则是不确定的</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define-values</span> <span class=\"token punctuation\">(</span><span class=\"token car\">statics</span> dyns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">partition</span> <span class=\"token punctuation\">(</span><span class=\"token car\">compose</span> is-value? second<span class=\"token punctuation\">)</span> new-env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里的 <code class=\"language-text\">compose</code> 就是复合函数，会先执行后一个函数再执行前一个。</p>\n</li>\n<li>\n<p>做好准备工作后，开始正式的 partial evaluation</p>\n<p>如果 <code class=\"language-text\">dyns</code> 是空的，也就是说所有的参数都已知，那就拿这些已知的参数去计算值就好了。这里我觉得应该是大佬写错了，应该是 <code class=\"language-text\">(cons statics env)</code> 而不是单纯的 <code class=\"language-text\">statics</code>  作为新的环境。</p>\n<p>如果 <code class=\"language-text\">dyns</code> 非空，那说明只能 fold 一部分参数，先用 static 参数们算出来一个新的函数名，这个新函数只需要以  <code class=\"language-text\">(cons statics env)</code> 为环境去 pe body 就好（这里我还是觉得大佬是写错了）。</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">       <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">empty</span>? dyns<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> <span class=\"token punctuation\">(</span><span class=\"token car\">FDef-body</span> fun<span class=\"token punctuation\">)</span> statics<span class=\"token punctuation\">)</span>\n           <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>new-fname <span class=\"token punctuation\">(</span><span class=\"token car\">new-function-name</span> fname statics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n             <span class=\"token punctuation\">(</span><span class=\"token keyword\">when</span> <span class=\"token punctuation\">(</span><span class=\"token car\">None</span>? <span class=\"token punctuation\">(</span><span class=\"token car\">lookup</span> new-fname fdefs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token car\">set!</span> fdefs <span class=\"token punctuation\">`(</span><span class=\"token punctuation\">(</span><span class=\"token splice symbol variable\">,new-fname</span> <span class=\"token quoted-symbol variable symbol\">'placeholder</span><span class=\"token punctuation\">)</span> <span class=\"token splice symbol variable\">,@fdefs</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n               <span class=\"token punctuation\">(</span><span class=\"token car\">set!</span> fdefs <span class=\"token punctuation\">(</span><span class=\"token car\">update</span> new-fname\n                                   <span class=\"token punctuation\">(</span><span class=\"token car\">FDef</span> <span class=\"token punctuation\">(</span><span class=\"token car\">map</span> first dyns<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">pe</span> <span class=\"token punctuation\">(</span><span class=\"token car\">FDef-body</span> fun<span class=\"token punctuation\">)</span> statics<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                                   fdefs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n</li>\n</ul>","frontmatter":{"title":"Partial Evaluation 代码分析","date":"2021-05-30T21:30:00.000Z","tags":["PL"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/partial-evaluation-代码分析/"}}}