{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-hw-threads-and-locking/","webpackCompilationHash":"d3c4e6ec70b03f15d22e","result":{"data":{"markdownRemark":{"html":"<p>这次的作业应该是这几次中最简单的一次了。主要就是进行了一个有外链的哈希表的多线程插入和取值。</p>\n<p>取值部分不会进行修改，所以不用加锁。只是在插入的部分注意到：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> \n<span class=\"token function\">insert</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">entry</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">entry</span> <span class=\"token operator\">*</span>n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">entry</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">entry</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  e<span class=\"token operator\">-></span>key <span class=\"token operator\">=</span> key<span class=\"token punctuation\">;</span>\n  e<span class=\"token operator\">-></span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n  e<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意到这里的<code class=\"language-text\">p</code>是每个哈希值对应的链表的结尾，所以需要加锁，不然两个线程同时往一个相同的结尾插入，就会丢东西了。所以在<code class=\"language-text\">main</code>中初始化：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> NBUCKET<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">pthread_mutex_init</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在<code class=\"language-text\">put</code>函数中<code class=\"language-text\">insert</code>的两侧加锁：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> \n<span class=\"token keyword\">void</span> <span class=\"token function\">put</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> value<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> key <span class=\"token operator\">%</span> NBUCKET<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">pthread_mutex_lock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span> value<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>lock<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就大功告成了。</p>\n<p>测试一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./ph 1\n0: put <span class=\"token function\">time</span> <span class=\"token operator\">=</span> 0.006135\n0: get <span class=\"token function\">time</span> <span class=\"token operator\">=</span> 7.487561\n0: 0 keys missing\ncompletion <span class=\"token function\">time</span> <span class=\"token operator\">=</span> 7.493947\n$ ./ph 2\n1: put <span class=\"token function\">time</span> <span class=\"token operator\">=</span> 0.010365\n0: put <span class=\"token function\">time</span> <span class=\"token operator\">=</span> 0.010435\n1: get <span class=\"token function\">time</span> <span class=\"token operator\">=</span> 7.301592\n1: 0 keys missing\n0: get <span class=\"token function\">time</span> <span class=\"token operator\">=</span> 7.313720\n0: 0 keys missing\ncompletion <span class=\"token function\">time</span> <span class=\"token operator\">=</span> 7.324801</code></pre></div>","frontmatter":{"title":"6.828 Homework Threads and Locking","date":"2019-03-01T11:25:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-hw-threads-and-locking/"}}}