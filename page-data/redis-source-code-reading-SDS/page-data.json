{"componentChunkName":"component---src-templates-blog-post-js","path":"/redis-source-code-reading-SDS/","webpackCompilationHash":"f06ec16250d3012c8cc2","result":{"data":{"markdownRemark":{"html":"<p>今天开始开一个大坑，开始读redis的源码。因为网上大家都说redis的代码非常漂亮~然后读的过程和顺序会按照《Redis 设计与实现》（<a href=\"http://redisbook.com/\">试读链接</a>）。现在的版本号是5.0.5，希望我能顺利把它读完，也希望读完的那天不要已经跳个大版本，升到6了之类的。</p>\n<p>按刚刚提到的那本书的顺序，我们先来看一下redis里面基本的数据结构。最最基本的也就是SDS (simple dynamic string)了，大致就是把C的字符串包了一下。</p>\n<h2>SDS</h2>\n<p>对应的头文件非常好找，就是<code class=\"language-text\">sds.h</code>和<code class=\"language-text\">sds.c</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sds<span class=\"token punctuation\">;</span></code></pre></div>\n<p>sds就是一个<code class=\"language-text\">char *</code>。</p>\n<p>然后我们看一下non-static function，也就是会暴露给linker用的那部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// sds.h</span>\nsds <span class=\"token function\">sdsnewlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>init<span class=\"token punctuation\">,</span> size_t initlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdsnew</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdsempty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdsdup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sds s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sdsfree</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdsgrowzero</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdscatlen</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdscat</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdscatsds</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> sds t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdscpylen</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdscpy</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nsds <span class=\"token function\">sdscatvprintf</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fmt<span class=\"token punctuation\">,</span> va_list ap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> __GNUC__</span>\nsds <span class=\"token function\">sdscatprintf</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">format</span><span class=\"token punctuation\">(</span>printf<span class=\"token punctuation\">,</span> <span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\nsds <span class=\"token function\">sdscatprintf</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n\nsds <span class=\"token function\">sdscatfmt</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdstrim</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sdsrange</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> ssize_t start<span class=\"token punctuation\">,</span> ssize_t end<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sdsupdatelen</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sdsclear</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">sdscmp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sds s1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> sds s2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token operator\">*</span><span class=\"token function\">sdssplitlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> ssize_t len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> seplen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sdsfreesplitres</span><span class=\"token punctuation\">(</span>sds <span class=\"token operator\">*</span>tokens<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sdstolower</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sdstoupper</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdsfromlonglong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdscatrepr</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token operator\">*</span><span class=\"token function\">sdssplitargs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>line<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>argc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdsmapchars</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>from<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>to<span class=\"token punctuation\">,</span> size_t setlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdsjoin</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdsjoinsds</span><span class=\"token punctuation\">(</span>sds <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sep<span class=\"token punctuation\">,</span> size_t seplen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* Low level functions exposed to the user API */</span>\nsds <span class=\"token function\">sdsMakeRoomFor</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> size_t addlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sdsIncrLen</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> ssize_t incr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsds <span class=\"token function\">sdsRemoveFreeSpace</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsize_t <span class=\"token function\">sdsAllocSize</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">sdsAllocPtr</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">/* Export the allocator used by SDS to the program using SDS.\n * Sometimes the program SDS is linked to, may use a different set of\n * allocators, but may want to allocate or free things that SDS will\n * respectively free or allocate. */</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">sds_malloc</span><span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">sds_realloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sds_free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">ifdef</span> REDIS_TEST</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">sdsTest</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span></code></pre></div>\n<p>那下面，沉下心，一个一个来看吧。</p>\n<h3><code class=\"language-text\">sdsnewlen</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// sds.c</span>\n<span class=\"token comment\">/* 用'init'指针中对应的内容和'initlen'的长度来创建一个新的sds string\n * 如果'init'是NULL，那么string会被初始化为zero bytes.\n * 如果使用了SDS_NOINIT, 将不会初始化buffer;\n *\n * string最后总会以'\\0'结尾(all the sds strings are, always)。所以如果你创建了：\n *\n * mystring = sdsnewlen(\"abc\",3);\n *\n * 你仍然可以printf()。 不过注意，sds是binary safe的所以中间也可能包含\\0。 */</span>\nsds <span class=\"token function\">sdsnewlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>init<span class=\"token punctuation\">,</span> size_t initlen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>sh<span class=\"token punctuation\">;</span>\n    sds s<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> type <span class=\"token operator\">=</span> <span class=\"token function\">sdsReqType</span><span class=\"token punctuation\">(</span>initlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">/* Empty strings are usually created in order to append. Use type 8\n     * since type 5 is not good at this. */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> SDS_TYPE_5 <span class=\"token operator\">&amp;&amp;</span> initlen <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> type <span class=\"token operator\">=</span> SDS_TYPE_8<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> hdrlen <span class=\"token operator\">=</span> <span class=\"token function\">sdsHdrSize</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fp<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* flags pointer. */</span>\n\n    sh <span class=\"token operator\">=</span> <span class=\"token function\">s_malloc</span><span class=\"token punctuation\">(</span>hdrlen<span class=\"token operator\">+</span>initlen<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>init<span class=\"token operator\">==</span>SDS_NOINIT<span class=\"token punctuation\">)</span>\n        init <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>init<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> hdrlen<span class=\"token operator\">+</span>initlen<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>sh <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>sh<span class=\"token operator\">+</span>hdrlen<span class=\"token punctuation\">;</span>\n    fp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> SDS_TYPE_5<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> type <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>initlen <span class=\"token operator\">&lt;&lt;</span> SDS_TYPE_BITS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> SDS_TYPE_8<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SDS_HDR_VAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sh<span class=\"token operator\">-></span>len <span class=\"token operator\">=</span> initlen<span class=\"token punctuation\">;</span>\n            sh<span class=\"token operator\">-></span>alloc <span class=\"token operator\">=</span> initlen<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> SDS_TYPE_16<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SDS_HDR_VAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">16</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sh<span class=\"token operator\">-></span>len <span class=\"token operator\">=</span> initlen<span class=\"token punctuation\">;</span>\n            sh<span class=\"token operator\">-></span>alloc <span class=\"token operator\">=</span> initlen<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> SDS_TYPE_32<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SDS_HDR_VAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">32</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sh<span class=\"token operator\">-></span>len <span class=\"token operator\">=</span> initlen<span class=\"token punctuation\">;</span>\n            sh<span class=\"token operator\">-></span>alloc <span class=\"token operator\">=</span> initlen<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">case</span> SDS_TYPE_64<span class=\"token operator\">:</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">SDS_HDR_VAR</span><span class=\"token punctuation\">(</span><span class=\"token number\">64</span><span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            sh<span class=\"token operator\">-></span>len <span class=\"token operator\">=</span> initlen<span class=\"token punctuation\">;</span>\n            sh<span class=\"token operator\">-></span>alloc <span class=\"token operator\">=</span> initlen<span class=\"token punctuation\">;</span>\n            <span class=\"token operator\">*</span>fp <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>initlen <span class=\"token operator\">&amp;&amp;</span> init<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> init<span class=\"token punctuation\">,</span> initlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>initlen<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>进入函数，我们发现sds有一个很重要的特性就是type。所以需要先看一下<code class=\"language-text\">sdsReqType(initlen)</code>这个函数。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// sds.c</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">char</span> <span class=\"token function\">sdsReqType</span><span class=\"token punctuation\">(</span>size_t string_size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>string_size <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">5</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 32</span>\n        <span class=\"token keyword\">return</span> SDS_TYPE_5<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>string_size <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 256</span>\n        <span class=\"token keyword\">return</span> SDS_TYPE_8<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>string_size <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">16</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 65536</span>\n        <span class=\"token keyword\">return</span> SDS_TYPE_16<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> (LONG_MAX == LLONG_MAX)  </span><span class=\"token comment\">// 32位返回32或64，64位都返回32</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>string_size <span class=\"token operator\">&lt;</span> <span class=\"token number\">1ll</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">32</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> SDS_TYPE_32<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> SDS_TYPE_64<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n    <span class=\"token keyword\">return</span> SDS_TYPE_32<span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span></span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个type指的就是string size的不同大小，因为存的是char，所以也就是字符串的大小。</p>\n<p>确定了字符串的类型之后，就会用<code class=\"language-text\">sdsHdrSize</code>来表示字符串的header。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// sds.c</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">sdsHdrSize</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>type<span class=\"token operator\">&amp;</span>SDS_TYPE_MASK<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> SDS_TYPE_5<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sdshdr5</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> SDS_TYPE_8<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sdshdr8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> SDS_TYPE_16<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sdshdr16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> SDS_TYPE_32<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sdshdr32</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> SDS_TYPE_64<span class=\"token operator\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sdshdr64</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>而这几种字符串的header struct在这里：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// sds.h</span>\n<span class=\"token comment\">/* 注意: sdshdr5从未被使用过, 我们会直接访问flags\n * 这里只是用来记录一下 type 5 SDS strings的layout. */</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__packed__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> sdshdr5 <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> flags<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 3 lsb of type, and 5 msb of string length */</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__packed__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> sdshdr8 <span class=\"token punctuation\">{</span>\n    uint8_t len<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* used */</span>\n    uint8_t alloc<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* excluding the header and null terminator */</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> flags<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 3 lsb of type, 5 unused bits */</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__packed__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> sdshdr16 <span class=\"token punctuation\">{</span>\n    uint16_t len<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* used */</span>\n    uint16_t alloc<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* excluding the header and null terminator */</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> flags<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 3 lsb of type, 5 unused bits */</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__packed__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> sdshdr32 <span class=\"token punctuation\">{</span>\n    uint32_t len<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* used */</span>\n    uint32_t alloc<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* excluding the header and null terminator */</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> flags<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 3 lsb of type, 5 unused bits */</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">__attribute__</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>__packed__<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> sdshdr64 <span class=\"token punctuation\">{</span>\n    uint64_t len<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* used */</span>\n    uint64_t alloc<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* excluding the header and null terminator */</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> flags<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* 3 lsb of type, 5 unused bits */</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里不同的类型的最大区别是他们的长度的数字类型不同然后type5是不记录还有多少空余的。我们来看一下c的特性<code class=\"language-text\">__attribute__ ((__packed__))</code>。</p>\n<blockquote>\n<p>The keyword <code class=\"language-text\">__attribute__</code> allows you to specify special attributes of <code class=\"language-text\">struct</code> and <code class=\"language-text\">union</code> types when you define such types. This keyword is followed by an attribute specification inside double parentheses.</p>\n<p>...</p>\n<p><code class=\"language-text\">packed</code></p>\n<p>This attribute, attached to an <code class=\"language-text\">enum</code>, <code class=\"language-text\">struct</code>, or <code class=\"language-text\">union</code> type definition, specified that the minimum required memory be used to represent the type.</p>\n<p><a href=\"https://gcc.gnu.org/onlinedocs/gcc/Attribute-Syntax.html\">gcc doc</a></p>\n</blockquote>\n<p>也就是让struct中的内容紧密排布。</p>\n<p>然后就是分配内存了，使用了一个叫<code class=\"language-text\">s_malloc</code>的函数</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// sdsalloc.c</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> s_malloc zmalloc</span>\n\n<span class=\"token comment\">// zmalloc.c</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> PREFIX_SIZE (sizeof(size_t))</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">zmalloc</span><span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr <span class=\"token operator\">=</span> <span class=\"token function\">malloc</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">+</span>PREFIX_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token function\">zmalloc_oom_handler</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// OOM 错误处理</span>\n\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">update_zmalloc_stat_alloc</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">+</span>PREFIX_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr<span class=\"token operator\">+</span>PREFIX_SIZE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里面有<code class=\"language-text\">HAVE_MALLOC_SIZE</code>是用来跨平台的，所以默认是进<code class=\"language-text\">#else</code>，我们就暂且关注<code class=\"language-text\">else</code>，所以为了篇幅，把<code class=\"language-text\">HAVE_MALLOC_SIZE</code>的部分删去了。</p>\n<p>注意在<code class=\"language-text\">malloc</code>里面，加了个<code class=\"language-text\">size_t</code>，用来记录这个指针的大小。返回的时候，返回不带<code class=\"language-text\">size</code>的指针。然后唯一需要关注的就是<code class=\"language-text\">update_zmalloc_stat_alloc</code>这个函数了。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// zmalloc.c</span>\n<span class=\"token keyword\">static</span> size_t used_memory <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\npthread_mutex_t used_memory_mutex <span class=\"token operator\">=</span> PTHREAD_MUTEX_INITIALIZER<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 为了兼容性，所以这么写</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> update_zmalloc_stat_alloc(__n) do { \\\n    size_t _n = (__n); \\\n    if (_n&amp;(sizeof(long)-1)) _n += sizeof(long)-(_n&amp;(sizeof(long)-1)); \\\n    atomicIncr(used_memory,__n); \\\n} while(0)</span>\n\n<span class=\"token comment\">// atomicvar.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> atomicIncr(var,count) do { \\\n    pthread_mutex_lock(&amp;var ## _mutex); \\  </span><span class=\"token comment\">// ##是为了找一个变量名位var_mutex的锁</span>\n    var <span class=\"token operator\">+=</span> <span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \\\n    <span class=\"token function\">pthread_mutex_unlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>var ## _mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \\\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里的<code class=\"language-text\">do {...} while(0)</code>也是挺灵性的哈...是为了能够把<code class=\"language-text\">update_zmalloc_stat_alloc</code>当成个函数用，见<a href=\"https://stackoverflow.com/questions/257418/do-while-0-what-is-it-good-for\">这里</a>。这个宏的意义大致就是补全成<code class=\"language-text\">long</code>的整数倍，也就是4 bytes的整数倍。</p>\n<p>说完<code class=\"language-text\">zmalloc</code>或者说<code class=\"language-text\">s_malloc</code>，<code class=\"language-text\">sdsnewlen</code>剩下的事情就是对header进行一下初始化，不过有趣的是为啥<code class=\"language-text\">((unsigned char *)s)-1</code>是<code class=\"language-text\">flags</code>呀，不应该是<code class=\"language-text\">buf</code>吗？注意返回的是<code class=\"language-text\">buf</code>。</p>\n<h3><code class=\"language-text\">sdsnew</code>、<code class=\"language-text\">sdsempty</code>、<code class=\"language-text\">sdsdup</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* Create an empty (zero length) sds string. Even in this case the string\n * always has an implicit null term. */</span>\nsds <span class=\"token function\">sdsempty</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sdsnewlen</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\"</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Create a new sds string starting from a null terminated C string. */</span>\nsds <span class=\"token function\">sdsnew</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>init<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    size_t initlen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>init <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sdsnewlen</span><span class=\"token punctuation\">(</span>init<span class=\"token punctuation\">,</span> initlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Duplicate an sds string. */</span>\nsds <span class=\"token function\">sdsdup</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> sds s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sdsnewlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> <span class=\"token function\">sdslen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>没啥可说的，包了一下<code class=\"language-text\">sdsnewlen</code></p>\n<h3><code class=\"language-text\">sdsfree</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// sds.c</span>\n<span class=\"token comment\">/* Free an sds string. No operation is performed if 's' is NULL. */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">sdsfree</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">s_free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">-</span><span class=\"token function\">sdsHdrSize</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// sdsakkic,h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> s_free zfree</span>\n\n<span class=\"token comment\">// zmalloc.c</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> update_zmalloc_stat_free(__n) do { \\\n    size_t _n = (__n); \\\n    if (_n&amp;(sizeof(long)-1)) _n += sizeof(long)-(_n&amp;(sizeof(long)-1)); \\\n    atomicDecr(used_memory,__n); \\\n} while(0)</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">zfree</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\n    realptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr<span class=\"token operator\">-</span>PREFIX_SIZE<span class=\"token punctuation\">;</span>\n    oldsize <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>realptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">update_zmalloc_stat_free</span><span class=\"token punctuation\">(</span>oldsize<span class=\"token operator\">+</span>PREFIX_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">free</span><span class=\"token punctuation\">(</span>realptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个函数是释放，和<code class=\"language-text\">sdsnewlen</code>一样，也要跑回<code class=\"language-text\">zmalloc.c</code>看<code class=\"language-text\">zfree</code>。就是反向操作一下，没啥特别的。</p>\n<h3><code class=\"language-text\">sdsgrowzero</code>、<code class=\"language-text\">sdsMakeRoomFor</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// sds.c</span>\n<span class=\"token comment\">/* 让sds增长为指定长度。 不在原长范围内的byte会被设置为0\n *\n * 如果指定长度小于现在的长度，直接返回 */</span>\nsds <span class=\"token function\">sdsgrowzero</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    size_t curlen <span class=\"token operator\">=</span> <span class=\"token function\">sdslen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 查看header中的len</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;=</span> curlen<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n    s <span class=\"token operator\">=</span> <span class=\"token function\">sdsMakeRoomFor</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>len<span class=\"token operator\">-</span>curlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 保证添加的部分没有垃圾 */</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>curlen<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">-</span>curlen<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* also set trailing \\0 byte */</span>\n    <span class=\"token function\">sdssetlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先是读取原长，其实就是直接从header里面读出来。然后关键是如何增加空间</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* 在sds string后扩充free space，从而让caller能放心overwrite原字符串尾的额外addlen\n * 这么多bytes，以及1个'\\0'\n *\n * 注意: 这个函数不改变sdslen()返回的*length* of the sds string */</span>\nsds <span class=\"token function\">sdsMakeRoomFor</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> size_t addlen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>sh<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>newsh<span class=\"token punctuation\">;</span>\n    size_t avail <span class=\"token operator\">=</span> <span class=\"token function\">sdsavail</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 就是alloc - len</span>\n    size_t len<span class=\"token punctuation\">,</span> newlen<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> type<span class=\"token punctuation\">,</span> oldtype <span class=\"token operator\">=</span> s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> SDS_TYPE_MASK<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> hdrlen<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 如果还有足够的空间直接返回. */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>avail <span class=\"token operator\">>=</span> addlen<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n\n    len <span class=\"token operator\">=</span> <span class=\"token function\">sdslen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    sh <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>s<span class=\"token operator\">-</span><span class=\"token function\">sdsHdrSize</span><span class=\"token punctuation\">(</span>oldtype<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    newlen <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">+</span>addlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newlen <span class=\"token operator\">&lt;</span> SDS_MAX_PREALLOC<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// 临界点是1M</span>\n        newlen <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        newlen <span class=\"token operator\">+=</span> SDS_MAX_PREALLOC<span class=\"token punctuation\">;</span>\n\n    type <span class=\"token operator\">=</span> <span class=\"token function\">sdsReqType</span><span class=\"token punctuation\">(</span>newlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 不要用type 5: type5不记录剩余空间，\n     * 会导致每次append都要用sdsMakeRoomFor() */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">==</span> SDS_TYPE_5<span class=\"token punctuation\">)</span> type <span class=\"token operator\">=</span> SDS_TYPE_8<span class=\"token punctuation\">;</span>\n\n    hdrlen <span class=\"token operator\">=</span> <span class=\"token function\">sdsHdrSize</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>oldtype<span class=\"token operator\">==</span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        newsh <span class=\"token operator\">=</span> <span class=\"token function\">s_realloc</span><span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">,</span> hdrlen<span class=\"token operator\">+</span>newlen<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newsh <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>newsh<span class=\"token operator\">+</span>hdrlen<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 因为header大小改了, 需要向前移动string, 所以不能用realloc */</span>\n        newsh <span class=\"token operator\">=</span> <span class=\"token function\">s_malloc</span><span class=\"token punctuation\">(</span>hdrlen<span class=\"token operator\">+</span>newlen<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newsh <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>newsh<span class=\"token operator\">+</span>hdrlen<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">s_free</span><span class=\"token punctuation\">(</span>sh<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        s <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>newsh<span class=\"token operator\">+</span>hdrlen<span class=\"token punctuation\">;</span>\n        s<span class=\"token punctuation\">[</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">sdssetlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">sdssetalloc</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> newlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>大致就是如果就字符串长度小于1M，就翻倍长度，不然就加1M。然后检查是否导致type变化了，如果没变就调用<code class=\"language-text\">s_realloc</code>，反之就<code class=\"language-text\">s_free</code>+<code class=\"language-text\">s_malloc</code>。</p>\n<p>来看一下<code class=\"language-text\">s_realloc</code>的部分</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// sdsalloc.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> s_realloc zrealloc</span>\n\n<span class=\"token comment\">// zmalloc.c</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token function\">zrealloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    size_t oldsize<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>newptr<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> ptr <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">zfree</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token function\">zmalloc</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    realptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ptr<span class=\"token operator\">-</span>PREFIX_SIZE<span class=\"token punctuation\">;</span>\n    oldsize <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>realptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    newptr <span class=\"token operator\">=</span> <span class=\"token function\">realloc</span><span class=\"token punctuation\">(</span>realptr<span class=\"token punctuation\">,</span>size<span class=\"token operator\">+</span>PREFIX_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>newptr<span class=\"token punctuation\">)</span> <span class=\"token function\">zmalloc_oom_handler</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>newptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">update_zmalloc_stat_free</span><span class=\"token punctuation\">(</span>oldsize<span class=\"token operator\">+</span>PREFIX_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">update_zmalloc_stat_alloc</span><span class=\"token punctuation\">(</span>size<span class=\"token operator\">+</span>PREFIX_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>newptr<span class=\"token operator\">+</span>PREFIX_SIZE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>和<code class=\"language-text\">zmalloc</code>基本一样，处理了一下<code class=\"language-text\">size</code>，然后调用<code class=\"language-text\">realloc</code>，<code class=\"language-text\">realloc</code>在需要保持之前的数据的时候比<code class=\"language-text\">malloc</code>+<code class=\"language-text\">memcpy</code>+<code class=\"language-text\">free</code>要快。</p>\n<p>然后type改变的情况就需要重新搞一个。然后注意需要<code class=\"language-text\">sdssetlen</code>来设置一下现在的字符串长度。</p>\n<p>最后在外面都需要用<code class=\"language-text\">sdssetalloc</code>来设置一下header里头的<code class=\"language-text\">alloc</code>大小。</p>\n<h3><code class=\"language-text\">sdscatlen</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* 在s后面append长度为'len'的数据't'.\n *\n * 调用后原来的字符串也会改变了 */</span>\nsds <span class=\"token function\">sdscatlen</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    size_t curlen <span class=\"token operator\">=</span> <span class=\"token function\">sdslen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    s <span class=\"token operator\">=</span> <span class=\"token function\">sdsMakeRoomFor</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>curlen<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sdssetlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> curlen<span class=\"token operator\">+</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>curlen<span class=\"token operator\">+</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就是<code class=\"language-text\">memcpy</code>注意还要把最后的1位设置为<code class=\"language-text\">&#39;\\0&#39;</code>。</p>\n<h3><code class=\"language-text\">sdscat</code>、<code class=\"language-text\">sdscatsds</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">sds <span class=\"token function\">sdscat</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sdscatlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nsds <span class=\"token function\">sdscatsds</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> sds t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sdscatlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> <span class=\"token function\">sdslen</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就是包了一下<code class=\"language-text\">sdscatlen</code></p>\n<h3><code class=\"language-text\">sdscpylen</code>、<code class=\"language-text\">sdscpy</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* Destructively修改's'来装长为'len'的‘t'。 */</span>\nsds <span class=\"token function\">sdscpylen</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>t<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sdsalloc</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        s <span class=\"token operator\">=</span> <span class=\"token function\">sdsMakeRoomFor</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>len<span class=\"token operator\">-</span><span class=\"token function\">sdslen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sdssetlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nsds <span class=\"token function\">sdscpy</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">sdscpylen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> t<span class=\"token punctuation\">,</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>没啥可说的，和<code class=\"language-text\">stdcatlen</code>差不多。</p>\n<h3><code class=\"language-text\">sdscatvprintf</code>、<code class=\"language-text\">sdscatprintf</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* Like sdscatprintf() but gets va_list instead of being variadic. */</span>\nsds <span class=\"token function\">sdscatvprintf</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fmt<span class=\"token punctuation\">,</span> va_list ap<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    va_list cpy<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> staticbuf<span class=\"token punctuation\">[</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>buf <span class=\"token operator\">=</span> staticbuf<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>t<span class=\"token punctuation\">;</span>\n    size_t buflen <span class=\"token operator\">=</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>fmt<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span><span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 试着用static buffer来加速，如果不行就回到heap allocation */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buflen <span class=\"token operator\">></span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>staticbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        buf <span class=\"token operator\">=</span> <span class=\"token function\">s_malloc</span><span class=\"token punctuation\">(</span>buflen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buf <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        buflen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>staticbuf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* 试着把fmt放进去，如果不够大，就把buf增大1倍 */</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        buf<span class=\"token punctuation\">[</span>buflen<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">va_copy</span><span class=\"token punctuation\">(</span>cpy<span class=\"token punctuation\">,</span>ap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">vsnprintf</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span> buflen<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">,</span> cpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>cpy<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">[</span>buflen<span class=\"token operator\">-</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buf <span class=\"token operator\">!=</span> staticbuf<span class=\"token punctuation\">)</span> <span class=\"token function\">s_free</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            buflen <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            buf <span class=\"token operator\">=</span> <span class=\"token function\">s_malloc</span><span class=\"token punctuation\">(</span>buflen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buf <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* Finally concat the obtained string to the SDS string and return it. */</span>\n    t <span class=\"token operator\">=</span> <span class=\"token function\">sdscat</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>buf <span class=\"token operator\">!=</span> staticbuf<span class=\"token punctuation\">)</span> <span class=\"token function\">s_free</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 在's'后面append一个printf-alike format specifier.\n *\n * Example:\n * s = sdsnew(\"Sum is: \");\n * s = sdscatprintf(s,\"%d+%d = %d\",a,b,a+b).\n *\n * 如果需要直接创建一个那么只需要：\n * s = sdscatprintf(sdsempty(), \"... your format ...\", args);\n */</span>\nsds <span class=\"token function\">sdscatprintf</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    va_list ap<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>t<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span> fmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    t <span class=\"token operator\">=</span> <span class=\"token function\">sdscatvprintf</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>fmt<span class=\"token punctuation\">,</span>ap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> t<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>大致就是用<code class=\"language-text\">vsnprintf</code>，然后又一个<code class=\"language-text\">buf</code>用来存字符串。不知道为啥要检查<code class=\"language-text\">buf[buflen-2]</code>而不是看返回值。</p>\n<h3><code class=\"language-text\">sdscatfmt</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* 比sdscatprintf快很多，但是只实现了一部分功能，包括\n *\n * %s - C String\n * %S - SDS string\n * %i - signed int\n * %I - 64 bit signed integer (long long, int64_t)\n * %u - unsigned int\n * %U - 64 bit unsigned integer (unsigned long long, uint64_t)\n * %% - Verbatim \"%\" character.\n */</span>\nsds <span class=\"token function\">sdscatfmt</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token keyword\">const</span> <span class=\"token operator\">*</span>fmt<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    size_t initlen <span class=\"token operator\">=</span> <span class=\"token function\">sdslen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>f <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> i<span class=\"token punctuation\">;</span>\n    va_list ap<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">va_start</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span>fmt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    f <span class=\"token operator\">=</span> fmt<span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* Next format specifier byte to process. */</span>\n    i <span class=\"token operator\">=</span> initlen<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Position of the next byte to write to dest str. */</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">char</span> next<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>str<span class=\"token punctuation\">;</span>\n        size_t l<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> num<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> unum<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* Make sure there is always space for at least 1 char. */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sdsavail</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">==</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            s <span class=\"token operator\">=</span> <span class=\"token function\">sdsMakeRoomFor</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>f<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> <span class=\"token string\">'%'</span><span class=\"token operator\">:</span>\n            next <span class=\"token operator\">=</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>f<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            f<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'s'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'S'</span><span class=\"token operator\">:</span>\n                str <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                l <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token string\">'s'</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token function\">strlen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">sdslen</span><span class=\"token punctuation\">(</span>str<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sdsavail</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    s <span class=\"token operator\">=</span> <span class=\"token function\">sdsMakeRoomFor</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>str<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">sdsinclen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                i <span class=\"token operator\">+=</span> l<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'i'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'I'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token string\">'i'</span><span class=\"token punctuation\">)</span>\n                    num <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    num <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>SDS_LLSTR_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    l <span class=\"token operator\">=</span> <span class=\"token function\">sdsll2str</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sdsavail</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        s <span class=\"token operator\">=</span> <span class=\"token function\">sdsMakeRoomFor</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">sdsinclen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    i <span class=\"token operator\">+=</span> l<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'u'</span><span class=\"token operator\">:</span>\n            <span class=\"token keyword\">case</span> <span class=\"token string\">'U'</span><span class=\"token operator\">:</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next <span class=\"token operator\">==</span> <span class=\"token string\">'u'</span><span class=\"token punctuation\">)</span>\n                    unum <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    unum <span class=\"token operator\">=</span> <span class=\"token function\">va_arg</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">,</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">{</span>\n                    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>SDS_LLSTR_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n                    l <span class=\"token operator\">=</span> <span class=\"token function\">sdsull2str</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span>unum<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">sdsavail</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> l<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                        s <span class=\"token operator\">=</span> <span class=\"token function\">sdsMakeRoomFor</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>buf<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">sdsinclen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    i <span class=\"token operator\">+=</span> l<span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token comment\">/* Handle %% and generally %&lt;unknown>. */</span>\n                s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n                <span class=\"token function\">sdsinclen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n            s<span class=\"token punctuation\">[</span>i<span class=\"token operator\">++</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>f<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">sdsinclen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        f<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">va_end</span><span class=\"token punctuation\">(</span>ap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Add null-term */</span>\n    s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3><code class=\"language-text\">sdstrim</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* 移除字符串两端在'cset'中出现的字符们\n * Example:\n *\n * s = sdsnew(\"AA...AA.a.aa.aHelloWorld     :::\");\n * s = sdstrim(s,\"Aa. :\");\n * printf(\"%s\\n\", s);\n *\n * Output will be just \"HelloWorld\".\n */</span>\nsds <span class=\"token function\">sdstrim</span><span class=\"token punctuation\">(</span>sds s<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>cset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>start<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>end<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>sp<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ep<span class=\"token punctuation\">;</span>\n    size_t len<span class=\"token punctuation\">;</span>\n\n    sp <span class=\"token operator\">=</span> start <span class=\"token operator\">=</span> s<span class=\"token punctuation\">;</span>\n    ep <span class=\"token operator\">=</span> end <span class=\"token operator\">=</span> s<span class=\"token operator\">+</span><span class=\"token function\">sdslen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>sp <span class=\"token operator\">&lt;=</span> end <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>cset<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>sp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> sp<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>ep <span class=\"token operator\">></span> sp <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">strchr</span><span class=\"token punctuation\">(</span>cset<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>ep<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> ep<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    len <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>sp <span class=\"token operator\">></span> ep<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token number\">0</span> <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>ep<span class=\"token operator\">-</span>sp<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>s <span class=\"token operator\">!=</span> sp<span class=\"token punctuation\">)</span> <span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span> sp<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    s<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">sdssetlen</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> s<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>其实就是用了<code class=\"language-text\">memmove</code>和<code class=\"language-text\">strchr</code>。</p>\n<h3><code class=\"language-text\">sdsrange</code></h3>\n<p>把string截为从start到end (inclusive, inplace)</p>\n<p>Example:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">s <span class=\"token operator\">=</span> <span class=\"token function\">sdsnew</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Hello World\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">sdsrange</span><span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">//=> \"ello World\"</span></code></pre></div>\n<p>没啥可说的，<code class=\"language-text\">memmove</code></p>\n<h3><code class=\"language-text\">sdsupdatelen</code>、<code class=\"language-text\">sdsclear</code></h3>\n<p><code class=\"language-text\">sdsupdatelen</code>：更新长度，如果出现了手动修改<code class=\"language-text\">s[2]=&#39;\\0&#39;</code>就需要更新长度</p>\n<p><code class=\"language-text\">sdsclear</code>：清空为长度为0</p>\n<h3><code class=\"language-text\">sdscmp</code></h3>\n<p>比较，用<code class=\"language-text\">memcmp</code>。</p>\n<h3><code class=\"language-text\">sdssplitlen</code>、<code class=\"language-text\">sdsfreesplitres</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* 用'sep'中拆分's'. 返回sds的数组， *count会被设为返回值大小\n *\n * 如果OOM, zero length string, zero length separator, NULL is returned.\n *\n * Note that 'sep' is able to split a string using\n * a multi-character separator. For example\n * sdssplit(\"foo_-_bar\",\"_-_\"); will return two\n * elements \"foo\" and \"bar\".\n *\n * 这个函数是binary-safe。sdssplit()是对于text的\n */</span>\nsds <span class=\"token operator\">*</span><span class=\"token function\">sdssplitlen</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> ssize_t len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>sep<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> seplen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> elements <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> slots <span class=\"token operator\">=</span> <span class=\"token number\">5</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">long</span> start <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">;</span>\n    sds <span class=\"token operator\">*</span>tokens<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>seplen <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span> <span class=\"token operator\">||</span> len <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    tokens <span class=\"token operator\">=</span> <span class=\"token function\">s_malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sds<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>slots<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tokens <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">*</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> tokens<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>len<span class=\"token operator\">-</span><span class=\"token punctuation\">(</span>seplen<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* make sure there is room for the next element and the final one */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>slots <span class=\"token operator\">&lt;</span> elements<span class=\"token operator\">+</span><span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            sds <span class=\"token operator\">*</span>newtokens<span class=\"token punctuation\">;</span>\n\n            slots <span class=\"token operator\">*=</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n            newtokens <span class=\"token operator\">=</span> <span class=\"token function\">s_realloc</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>sds<span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>slots<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newtokens <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">goto</span> cleanup<span class=\"token punctuation\">;</span>\n            tokens <span class=\"token operator\">=</span> newtokens<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token comment\">/* search the separator */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>seplen <span class=\"token operator\">==</span> <span class=\"token number\">1</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>j<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> sep<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token function\">memcmp</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>j<span class=\"token punctuation\">,</span>sep<span class=\"token punctuation\">,</span>seplen<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            tokens<span class=\"token punctuation\">[</span>elements<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">sdsnewlen</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>start<span class=\"token punctuation\">,</span>j<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>elements<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">goto</span> cleanup<span class=\"token punctuation\">;</span>\n            elements<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            start <span class=\"token operator\">=</span> j<span class=\"token operator\">+</span>seplen<span class=\"token punctuation\">;</span>\n            j <span class=\"token operator\">=</span> j<span class=\"token operator\">+</span>seplen<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* skip the separator */</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* Add the final element. We are sure there is room in the tokens array. */</span>\n    tokens<span class=\"token punctuation\">[</span>elements<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">sdsnewlen</span><span class=\"token punctuation\">(</span>s<span class=\"token operator\">+</span>start<span class=\"token punctuation\">,</span>len<span class=\"token operator\">-</span>start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>elements<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">goto</span> cleanup<span class=\"token punctuation\">;</span>\n    elements<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>count <span class=\"token operator\">=</span> elements<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> tokens<span class=\"token punctuation\">;</span>\n\ncleanup<span class=\"token operator\">:</span>\n    <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> elements<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token function\">sdsfree</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">s_free</span><span class=\"token punctuation\">(</span>tokens<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">*</span>count <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>用<code class=\"language-text\">memcmp</code>进行string的比较。最开始分配和字符串长度一样的<code class=\"language-text\">tokens</code>作为缓存，这样就可以躲开C里面没有vector这个问题了。</p>\n<p><code class=\"language-text\">sdsfreesplitres</code>：逐个释放。</p>\n<h3><code class=\"language-text\">sdstolower</code>、<code class=\"language-text\">sdstoupper</code></h3>\n<p>顾名思义。</p>\n<h3><code class=\"language-text\">sdsfromlonglong</code></h3>\n<p>存long long比<code class=\"language-text\">%lld</code>快很多，是指就是除10，模10的遍历。</p>\n<h3><code class=\"language-text\">sdscatrepr</code></h3>\n<p>在s后面append一个escape code，如加入<code class=\"language-text\">\\n</code>等价于<code class=\"language-text\">\\&quot;\\\\n\\&quot;</code></p>\n<h3><code class=\"language-text\">sdssplitargs</code></h3>\n<p>把line分成arguments的样子，应该是REPL用的。</p>\n<h3><code class=\"language-text\">sdsmapchars</code></h3>\n<p>把在<code class=\"language-text\">from</code>里面的字符串映射到对应的<code class=\"language-text\">to</code></p>\n<h3><code class=\"language-text\">sdsjoin</code>，<code class=\"language-text\">sdsjoinsds</code></h3>\n<p>顾名思义。</p>","frontmatter":{"title":"Redis源码阅读 —— SDS","date":"2019-08-14T10:54:00.000Z","tags":["redis","C"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/redis-source-code-reading-SDS/"}}}