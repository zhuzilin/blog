{"componentChunkName":"component---src-templates-blog-post-js","path":"/15-745-assignment2/","result":{"data":{"markdownRemark":{"html":"<h2>1 Introduction</h2>\n<p>讲作业应该怎么交的，跳过</p>\n<h2>2 Dataflow Analysis</h2>\n<p>就是需要写一个一般性的dataflow的分析代码。主要要用llvm中的<code class=\"language-text\">BitVector</code>和<code class=\"language-text\">DenseMap</code>，前者就是用来快速做集合位运算的，后者相当于<code class=\"language-text\">unordered_map</code>。需要注意的是，llvm 5.0把所有类似于<code class=\"language-text\">Function F = func</code>，<code class=\"language-text\">Instruction I = inst</code>这样的指令都去掉了，所以只能用<code class=\"language-text\">Function* F = &amp;func</code>。</p>\n<p>下面就是代码了，首先是framework。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// dataflow.h</span>\n<span class=\"token keyword\">namespace</span> llvm <span class=\"token punctuation\">{</span>\n\n<span class=\"token comment\">// Add definitions (and code, depending on your strategy) for your dataflow</span>\n<span class=\"token comment\">// abstraction here.</span>\n  <span class=\"token keyword\">enum</span> <span class=\"token class-name\">Direction</span> <span class=\"token punctuation\">{</span>\n    FORWARD <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n    BACKWARD\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">DataflowBlock</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">DataflowBlock</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> BasicBlock<span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">in</span><span class=\"token punctuation\">(</span><span class=\"token function\">BitVector</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">out</span><span class=\"token punctuation\">(</span><span class=\"token function\">BitVector</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">block</span><span class=\"token punctuation\">(</span>b<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    BitVector in<span class=\"token punctuation\">;</span>\n    BitVector out<span class=\"token punctuation\">;</span>\n    BasicBlock<span class=\"token operator\">*</span> block<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Dataflow</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">Dataflow</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> n<span class=\"token punctuation\">,</span> Direction d<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">n</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">direction</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">run</span><span class=\"token punctuation\">(</span>Function<span class=\"token operator\">&amp;</span> F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">virtual</span> BitVector <span class=\"token function\">meet</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>BitVector<span class=\"token operator\">></span> vectors<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> BitVector <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>BitVector in<span class=\"token punctuation\">,</span> BasicBlock <span class=\"token operator\">&amp;</span>B<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span>Function<span class=\"token operator\">&amp;</span> F<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    \n    <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n    Direction direction<span class=\"token punctuation\">;</span>\n    DenseMap<span class=\"token operator\">&lt;</span>BasicBlock<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> DataflowBlock<span class=\"token operator\">*</span><span class=\"token operator\">></span> BB2dataflowB<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// dataflow.c</span>\n<span class=\"token keyword\">namespace</span> llvm <span class=\"token punctuation\">{</span>\n\n  <span class=\"token comment\">// Add code for your dataflow abstraction here.</span>\n  <span class=\"token keyword\">void</span> <span class=\"token class-name\">Dataflow</span><span class=\"token double-colon punctuation\">::</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>Function<span class=\"token operator\">&amp;</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 因为不知道该怎么初始化Function（所有的构造函数都被删除了...）</span>\n    <span class=\"token comment\">// 所以只能在run的时候再初始化了...</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock <span class=\"token operator\">&amp;</span>BB <span class=\"token operator\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      DataflowBlock <span class=\"token operator\">*</span>dataflowB <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">DataflowBlock</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>BB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      BB2dataflowB<span class=\"token punctuation\">.</span><span class=\"token function\">try_emplace</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>BB<span class=\"token punctuation\">,</span> dataflowB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">bool</span> converged <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>direction <span class=\"token operator\">==</span> FORWARD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// forward</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>converged<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock <span class=\"token operator\">&amp;</span>BB <span class=\"token operator\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          DataflowBlock<span class=\"token operator\">*</span> dataflowB <span class=\"token operator\">=</span> BB2dataflowB<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>BB<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span>\n          dataflowB<span class=\"token operator\">-></span>out <span class=\"token operator\">=</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>dataflowB<span class=\"token operator\">-></span>in<span class=\"token punctuation\">,</span> BB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        converged <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock <span class=\"token operator\">&amp;</span>BB <span class=\"token operator\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>BitVector<span class=\"token operator\">></span> vectors<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock <span class=\"token operator\">*</span>pred <span class=\"token operator\">:</span> <span class=\"token function\">predecessors</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>BB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            DataflowBlock<span class=\"token operator\">*</span> predDataflowB <span class=\"token operator\">=</span> BB2dataflowB<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>pred<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span>\n            vectors<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>predDataflowB<span class=\"token operator\">-></span>out<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          \n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            DataflowBlock<span class=\"token operator\">*</span> dataflowB <span class=\"token operator\">=</span> BB2dataflowB<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>BB<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span>\n            BitVector in <span class=\"token operator\">=</span> <span class=\"token function\">meet</span><span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataflowB<span class=\"token operator\">-></span>in <span class=\"token operator\">!=</span> in<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              converged <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n              dataflowB<span class=\"token operator\">-></span>in <span class=\"token operator\">=</span> in<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// backward</span>\n      <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>converged<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock <span class=\"token operator\">&amp;</span>BB <span class=\"token operator\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          DataflowBlock<span class=\"token operator\">*</span> dataflowB <span class=\"token operator\">=</span> BB2dataflowB<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>BB<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span>\n          dataflowB<span class=\"token operator\">-></span>in <span class=\"token operator\">=</span> <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>dataflowB<span class=\"token operator\">-></span>out<span class=\"token punctuation\">,</span> BB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        converged <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock <span class=\"token operator\">&amp;</span>BB <span class=\"token operator\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>BitVector<span class=\"token operator\">></span> vectors<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock <span class=\"token operator\">*</span>succ <span class=\"token operator\">:</span> <span class=\"token function\">successors</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>BB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            DataflowBlock<span class=\"token operator\">*</span> succDataflowB <span class=\"token operator\">=</span> BB2dataflowB<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>succ<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span>\n            vectors<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>succDataflowB<span class=\"token operator\">-></span>in<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          \n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            DataflowBlock<span class=\"token operator\">*</span> dataflowB <span class=\"token operator\">=</span> BB2dataflowB<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>BB<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span>\n            BitVector out <span class=\"token operator\">=</span> <span class=\"token function\">meet</span><span class=\"token punctuation\">(</span>vectors<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataflowB<span class=\"token operator\">-></span>out <span class=\"token operator\">!=</span> out<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n              converged <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n              dataflowB<span class=\"token operator\">-></span>out <span class=\"token operator\">=</span> out<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// print result</span>\n    <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后是available expression：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">//available.cpp</span>\n<span class=\"token keyword\">namespace</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">AvailableDataflow</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Dataflow</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">AvailableDataflow</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Expression<span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>domain<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Dataflow</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FORWARD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">domain</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Expression expr <span class=\"token operator\">=</span> domain<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">isa</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Instruction<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val2is<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> val2is<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            val2is<span class=\"token punctuation\">.</span><span class=\"token function\">try_emplace</span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          val2is<span class=\"token punctuation\">[</span>expr<span class=\"token punctuation\">.</span>v1<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">isa</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Instruction<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">.</span>v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>val2is<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">.</span>v2<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> val2is<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            val2is<span class=\"token punctuation\">.</span><span class=\"token function\">try_emplace</span><span class=\"token punctuation\">(</span>expr<span class=\"token punctuation\">.</span>v2<span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span><span class=\"token generic-function\"><span class=\"token function\">vector</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n          val2is<span class=\"token punctuation\">[</span>expr<span class=\"token punctuation\">.</span>v2<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    BitVector <span class=\"token function\">meet</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>BitVector<span class=\"token operator\">></span> vectors<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">{</span>\n      BitVector <span class=\"token function\">result</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> vector <span class=\"token operator\">:</span> vectors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">&amp;=</span> vector<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    BitVector <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>BitVector in<span class=\"token punctuation\">,</span> BasicBlock <span class=\"token operator\">&amp;</span>B<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Instruction <span class=\"token operator\">&amp;</span>I <span class=\"token operator\">:</span> B<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BinaryOperator <span class=\"token operator\">*</span>BI <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dyn_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>BinaryOperator<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>I<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          Expression <span class=\"token function\">expr</span><span class=\"token punctuation\">(</span>BI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>expr <span class=\"token operator\">==</span> domain<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n              <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n\n          in<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">:</span> val2is<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>Value<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>BI<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            in<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> in<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Expression<span class=\"token operator\">></span> domain<span class=\"token punctuation\">;</span>\n    DenseMap<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span><span class=\"token keyword\">int</span><span class=\"token operator\">>></span> val2is<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span>Function<span class=\"token operator\">&amp;</span> F<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*********************available result**************************\\n\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock <span class=\"token operator\">&amp;</span>BB <span class=\"token operator\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"block: \\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> BB <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        DataflowBlock<span class=\"token operator\">*</span> dataflowB <span class=\"token operator\">=</span> BB2dataflowB<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>BB<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"in: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataflowB<span class=\"token operator\">-></span>in<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span> <span class=\"token operator\">&lt;&lt;</span> domain<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"out: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataflowB<span class=\"token operator\">-></span>out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span> <span class=\"token operator\">&lt;&lt;</span> domain<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">AvailableExpressions</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">FunctionPass</span></span> <span class=\"token punctuation\">{</span>\n    \n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> ID<span class=\"token punctuation\">;</span>\n    \n    <span class=\"token function\">AvailableExpressions</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">FunctionPass</span><span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">runOnFunction</span><span class=\"token punctuation\">(</span>Function<span class=\"token operator\">&amp;</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      \n      <span class=\"token comment\">// Here's some code to familarize you with the Expression</span>\n      <span class=\"token comment\">// class and pretty printing code we've provided:</span>\n      \n      std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Expression<span class=\"token operator\">></span> expressions<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Function<span class=\"token double-colon punctuation\">::</span>iterator FI <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> FE <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> FI <span class=\"token operator\">!=</span> FE<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>FI<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        BasicBlock<span class=\"token operator\">*</span> block <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">*</span>FI<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock<span class=\"token double-colon punctuation\">::</span>iterator i <span class=\"token operator\">=</span> block<span class=\"token operator\">-></span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> e <span class=\"token operator\">=</span> block<span class=\"token operator\">-></span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">!=</span>e<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          Instruction<span class=\"token operator\">*</span> I <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token operator\">*</span>i<span class=\"token punctuation\">;</span>\n          <span class=\"token comment\">// We only care about available expressions for BinaryOperators</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BinaryOperator <span class=\"token operator\">*</span>BI <span class=\"token operator\">=</span> <span class=\"token generic-function\"><span class=\"token function\">dyn_cast</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>BinaryOperator<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>I<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">// Create a new Expression to capture the RHS of the BinaryOperator</span>\n            expressions<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token function\">Expression</span><span class=\"token punctuation\">(</span>BI<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      \n      <span class=\"token comment\">// Print out the expressions used in the function</span>\n      <span class=\"token function\">outs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Expressions used by this function:\\n\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">printSet</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>expressions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      \n      <span class=\"token comment\">// delete the replicated expressions</span>\n      <span class=\"token function\">sort</span><span class=\"token punctuation\">(</span>expressions<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> expressions<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      expressions<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span><span class=\"token function\">unique</span><span class=\"token punctuation\">(</span>expressions<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> expressions<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> expressions<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      AvailableDataflow <span class=\"token function\">dataflow</span><span class=\"token punctuation\">(</span>expressions<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      dataflow<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Did not modify the incoming Function.</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getAnalysisUsage</span><span class=\"token punctuation\">(</span>AnalysisUsage<span class=\"token operator\">&amp;</span> AU<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n      AU<span class=\"token punctuation\">.</span><span class=\"token function\">setPreservesAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    \n  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">char</span> AvailableExpressions<span class=\"token double-colon punctuation\">::</span>ID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  RegisterPass<span class=\"token operator\">&lt;</span>AvailableExpressions<span class=\"token operator\">></span> <span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"available\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"15745 Available Expressions\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>对于liveness，代码是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">namespace</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">class</span> <span class=\"token class-name\">LivenessDataflow</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">Dataflow</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token function\">LivenessDataflow</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">*</span><span class=\"token operator\">></span> <span class=\"token operator\">&amp;</span>domain<span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">Dataflow</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> BACKWARD<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">domain</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        val2i<span class=\"token punctuation\">.</span><span class=\"token function\">try_emplace</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">protected</span><span class=\"token operator\">:</span>\n    BitVector <span class=\"token function\">meet</span><span class=\"token punctuation\">(</span>std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>BitVector<span class=\"token operator\">></span> vectors<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">{</span>\n      BitVector <span class=\"token function\">result</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">auto</span> vector <span class=\"token operator\">:</span> vectors<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        result <span class=\"token operator\">|=</span> vector<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    BitVector <span class=\"token function\">transfer</span><span class=\"token punctuation\">(</span>BitVector out<span class=\"token punctuation\">,</span> BasicBlock <span class=\"token operator\">&amp;</span>B<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock<span class=\"token double-colon punctuation\">::</span>reverse_iterator iter <span class=\"token operator\">=</span> B<span class=\"token punctuation\">.</span><span class=\"token function\">rbegin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> B<span class=\"token punctuation\">.</span><span class=\"token function\">rend</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        Instruction<span class=\"token operator\">*</span> I <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        out<span class=\"token punctuation\">[</span>val2i<span class=\"token punctuation\">[</span>I<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>User<span class=\"token double-colon punctuation\">::</span>op_iterator OI <span class=\"token operator\">=</span> I<span class=\"token operator\">-></span><span class=\"token function\">op_begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> OI <span class=\"token operator\">!=</span> I<span class=\"token operator\">-></span><span class=\"token function\">op_end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>OI<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          Value <span class=\"token operator\">*</span>val <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>OI<span class=\"token punctuation\">;</span>\n          <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token generic-function\"><span class=\"token function\">isa</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Instruction<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token generic-function\"><span class=\"token function\">isa</span><span class=\"token generic class-name\"><span class=\"token operator\">&lt;</span>Argument<span class=\"token operator\">></span></span></span><span class=\"token punctuation\">(</span>val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            out<span class=\"token punctuation\">[</span>val2i<span class=\"token punctuation\">[</span>val<span class=\"token punctuation\">]</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> out<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">void</span> <span class=\"token function\">printResult</span><span class=\"token punctuation\">(</span>Function<span class=\"token operator\">&amp;</span> F<span class=\"token punctuation\">)</span> <span class=\"token keyword\">override</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"*********************available result**************************\\n\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock <span class=\"token operator\">&amp;</span>BB <span class=\"token operator\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"block: \\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> BB <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        DataflowBlock<span class=\"token operator\">*</span> dataflowB <span class=\"token operator\">=</span> BB2dataflowB<span class=\"token punctuation\">.</span><span class=\"token function\">find</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>BB<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>second<span class=\"token punctuation\">;</span>\n\n        <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"in: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataflowB<span class=\"token operator\">-></span>in<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getShortValueName</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"out: \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>n<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>dataflowB<span class=\"token operator\">-></span>out<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  \"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token function\">getShortValueName</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">*</span><span class=\"token operator\">></span> domain<span class=\"token punctuation\">;</span>\n    DenseMap<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">></span> val2i<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">Liveness</span> <span class=\"token operator\">:</span> <span class=\"token base-clause\"><span class=\"token keyword\">public</span> <span class=\"token class-name\">FunctionPass</span></span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> ID<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">Liveness</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">FunctionPass</span><span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">runOnFunction</span><span class=\"token punctuation\">(</span>Function<span class=\"token operator\">&amp;</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      std<span class=\"token double-colon punctuation\">::</span>vector<span class=\"token operator\">&lt;</span>Value<span class=\"token operator\">*</span><span class=\"token operator\">></span> domain<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// all the arguments are variables</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Function<span class=\"token double-colon punctuation\">::</span>arg_iterator arg <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span><span class=\"token function\">arg_begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> arg <span class=\"token operator\">!=</span> F<span class=\"token punctuation\">.</span><span class=\"token function\">arg_end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>arg<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        domain<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span>arg<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock <span class=\"token operator\">&amp;</span>BB <span class=\"token operator\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>Instruction <span class=\"token operator\">&amp;</span>I <span class=\"token operator\">:</span> BB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          domain<span class=\"token punctuation\">.</span><span class=\"token function\">push_back</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>I<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      LivenessDataflow <span class=\"token function\">dataflow</span><span class=\"token punctuation\">(</span>domain<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      dataflow<span class=\"token punctuation\">.</span><span class=\"token function\">run</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Did not modify the incoming Function.</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">virtual</span> <span class=\"token keyword\">void</span> <span class=\"token function\">getAnalysisUsage</span><span class=\"token punctuation\">(</span>AnalysisUsage<span class=\"token operator\">&amp;</span> AU<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span>\n      AU<span class=\"token punctuation\">.</span><span class=\"token function\">setPreservesAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">private</span><span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">char</span> Liveness<span class=\"token double-colon punctuation\">::</span>ID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  RegisterPass<span class=\"token operator\">&lt;</span>Liveness<span class=\"token operator\">></span> <span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"liveness\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"15745 Liveness\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"15-745 spring 2019 assigment2","date":"2019-10-23T20:02:00.000Z","tags":["compiler","llvm","15-745"]}}},"pageContext":{"slug":"/15-745-assignment2/"}},"staticQueryHashes":["3159585216"],"slicesMap":{}}