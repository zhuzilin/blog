{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-hw-xv6-lazy-page-allocation/","webpackCompilationHash":"cb894d9b8b35d24cbcd1","result":{"data":{"markdownRemark":{"html":"<h2>Part One: Eliminate allocation from sbrk()</h2>\n<p>首先是要在<code class=\"language-text\">sbrk</code>中去掉分配内存的部分。<code class=\"language-text\">sbrk</code>函数原来的版本是：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_sbrk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> addr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">argint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  addr <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>sz<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">growproc</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>可想而知，分配内存的主要方式来源于<code class=\"language-text\">growproc</code>（在<code class=\"language-text\">proc.c</code>），<code class=\"language-text\">growpoc</code>就是会给当前进程的page table加n的内存，并把<code class=\"language-text\">proc-&gt;sz</code>加<code class=\"language-text\">n</code>。注意，阅读<code class=\"language-text\">allocuvm</code>函数可以得知，在分配的时候不会对n或者之后的<code class=\"language-text\">sz+n</code>，round到page size的整数倍。所以按照题目要求，我们不分配内存，只增加sz，那么就是：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_sbrk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> addr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">argint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  addr <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>sz<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>sz <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后，如果启动xv6，就会得到需要的结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">init: starting <span class=\"token function\">sh</span>\n$ <span class=\"token builtin class-name\">echo</span> hi\npid <span class=\"token number\">3</span> sh: <span class=\"token builtin class-name\">trap</span> <span class=\"token number\">14</span> err <span class=\"token number\">6</span> on cpu <span class=\"token number\">0</span> eip 0x112c addr 0x4004--kill proc\n$ </code></pre></div>\n<p>这里输出的是位于<code class=\"language-text\">trap.c</code>中的<code class=\"language-text\">page fault</code>，对应的是在<code class=\"language-text\">trap.c</code>中跳入<code class=\"language-text\">trap</code>函数。</p>\n<h3>Part Two: Lazy allocation</h3>\n<p>按照题目要求，在trap中加入</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">case</span> T_PGFLT<span class=\"token operator\">:</span>\n  <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// code from allocuvm</span>\n    uint newsz <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>sz<span class=\"token punctuation\">;</span>\n    uint a <span class=\"token operator\">=</span> <span class=\"token function\">PGROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token function\">rcr2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">&lt;</span> newsz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>mem <span class=\"token operator\">=</span> <span class=\"token function\">kalloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>mem <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"out of memory\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">mappages</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">,</span> <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>mem<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_W<span class=\"token operator\">|</span>PTE_U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>中间的代码都是由<code class=\"language-text\">allocuvm</code>学来的，注意因为是lazy allocation所以只需要分配一个pagesize就可以了，同时a要<code class=\"language-text\">PGROUNDDOWN</code>，而不是<code class=\"language-text\">PGROUNDUP</code>。应该是因为在<code class=\"language-text\">allocuvm</code>里面，传入的量是<code class=\"language-text\">myproc()-&gt;sz</code>，是4096的倍数，而通过<code class=\"language-text\">rcr2</code>得到的是第一个没有被分配的地址。可以共下面的这个我加了两行<code class=\"language-text\">cprintf</code>的输出中看出来。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token builtin class-name\">echo</span> hi\naddr: <span class=\"token number\">16384</span>\nrcr2<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>: <span class=\"token number\">16388</span>\nhi</code></pre></div>\n<p>所以，如果在<code class=\"language-text\">trap</code>中仍然用<code class=\"language-text\">PGROUNDUP</code>就会跳过去一个page了。但是为什么如果写错了触发的错误是<code class=\"language-text\">mappages</code>中的<code class=\"language-text\">panic(remap)</code>我就不明白了。</p>\n<p>然后为了能访问<code class=\"language-text\">mappages</code>，在<code class=\"language-text\">trap.c</code>的最上面声明了</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">extern</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mappages</span><span class=\"token punctuation\">(</span><span class=\"token class-name\">pde_t</span> <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> uint size<span class=\"token punctuation\">,</span> uint pa<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>同时把其定义处的<code class=\"language-text\">static</code>去掉。</p>\n<p>然后为了实现Optional Challenges，把<code class=\"language-text\">sbrk</code>改为：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_sbrk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> addr<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">argint</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  addr <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>sz<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// when n &lt; 0, there is no lazy allocation</span>\n    <span class=\"token comment\">// 注意，growproc在释放没有被分配的内存的时候会直接跳过去，不会报错</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">growproc</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>sz <span class=\"token operator\">+</span> n <span class=\"token operator\">>=</span> KERNBASE<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>sz <span class=\"token operator\">+=</span> n<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> addr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>从而实现了负数和大数的限制。没有写测试...所以不能确定对。</p>\n<p>这里顺便记录一下xv6是如何调用<code class=\"language-text\">trap</code>的。之前在讲system call的时候，说过是因为调用了<code class=\"language-text\">int</code>指令。而<code class=\"language-text\">page fault</code>这样的中断呢？</p>\n<p>x86有一个特殊的table称为interrupt descriptot table(IDT)，其为一个function handler的数组。这个数组里面调用的函数都在<code class=\"language-text\">vector.S</code>中定义了。（注意<code class=\"language-text\">vector.S</code>是由<code class=\"language-text\">vector.pl</code>这个perl文件生成的。）每个function handler都调用了<code class=\"language-text\">alltrap</code>从而调用<code class=\"language-text\">trap</code>。在调用之前，会把trapframe推进栈中，对于page fault这样需要特殊寄存器的中断，会多推进去一些需要的东西。</p>","frontmatter":{"title":"6.828 Homework xv6 lazy page allocation","date":"2019-02-20T23:12:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-hw-xv6-lazy-page-allocation/"}}}