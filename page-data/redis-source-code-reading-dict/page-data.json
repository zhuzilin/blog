{"componentChunkName":"component---src-templates-blog-post-js","path":"/redis-source-code-reading-dict/","webpackCompilationHash":"09b93770b50e348782f7","result":{"data":{"markdownRemark":{"html":"<p>今天来做源码阅读的第二部分。看一下字典结构的实现。这个结构主要位于<code class=\"language-text\">dict.h</code>和<code class=\"language-text\">dict.c</code>中。</p>\n<h2>字典</h2>\n<p>字典肯定就不能和SDS依附于<code class=\"language-text\">const char *</code>一样依附于一个C的原生类型了。所以最开始需要先定义其结构。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// dict.h</span>\n<span class=\"token comment\">/* This is our hash table structure. Every dictionary has two of this as we\n * implement incremental rehashing, for the old to the new table. */</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dictht</span> <span class=\"token punctuation\">{</span>\n    dictEntry <span class=\"token operator\">*</span><span class=\"token operator\">*</span>table<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> size<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// hash table size， always 2^n</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> sizemask<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// always equal to size-1</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> used<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// number of contained nodes</span>\n<span class=\"token punctuation\">}</span> dictht<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dict</span> <span class=\"token punctuation\">{</span>\n    dictType <span class=\"token operator\">*</span>type<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>privdata<span class=\"token punctuation\">;</span>\n    dictht ht<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// hash tables</span>\n    <span class=\"token keyword\">long</span> rehashidx<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* rehashing not in progress if rehashidx == -1 */</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> iterators<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* number of iterators currently running */</span>\n<span class=\"token punctuation\">}</span> dict<span class=\"token punctuation\">;</span></code></pre></div>\n<p>可以看到，这里面有2个类型，<code class=\"language-text\">dictht</code>(hash table)和<code class=\"language-text\">dict</code>，一个<code class=\"language-text\">dict</code>中有两个<code class=\"language-text\">dictht</code>。<code class=\"language-text\">dictht</code>的逻辑是很好理解的：</p>\n<p><img src=\"\" alt=\"插图\"></p>\n<p>然后哈希表中的<code class=\"language-text\">dictEntry</code>也就是其节点的数据结构是：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// dict.h</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dictEntry</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">union</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>val<span class=\"token punctuation\">;</span>\n        uint64_t u64<span class=\"token punctuation\">;</span>\n        int64_t s64<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">double</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> v<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dictEntry</span> <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> dictEntry<span class=\"token punctuation\">;</span></code></pre></div>\n<p>很好理解，就是一个单链表。</p>\n<p><img src=\"\" alt=\"插图\"></p>\n<p>那么回到<code class=\"language-text\">dict</code>结构。首先有一个<code class=\"language-text\">dictType *type</code>。其类型定义为：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// dict.h</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">dictType</span> <span class=\"token punctuation\">{</span>\n    uint64_t <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>hashFunction<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>keyDup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>privdata<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>valDup<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>privdata<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>keyCompare<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>privdata<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key1<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>keyDestructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>privdata<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>valDestructor<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>privdata<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>obj<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> dictType<span class=\"token punctuation\">;</span></code></pre></div>\n<p>其实也就是定义了用于操作特定键值对的函数，而<code class=\"language-text\">privdata</code>也是保存了</p>\n<p>这些函数需要的可选参数。</p>\n<p>然后是两个<code class=\"language-text\">dictht ht[2]</code>。大多数时候都只需要1个也就是<code class=\"language-text\">ht[0]</code>，只有在需要进行rehash的时候才会是使用<code class=\"language-text\">ht[1]</code>。<code class=\"language-text\">rehashidx</code>也与其有关，如果在进行rehash，其值为<code class=\"language-text\">-1</code>。</p>\n<h3>哈希算法</h3>\n<p>我们接下来来看一下默认的hash function。入口应该是<code class=\"language-text\">dictGetHash</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// dict.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> dictHashKey(d, key) (d)->type->hashFunction(key)</span>\n\n<span class=\"token comment\">// dict.c</span>\nuint64_t <span class=\"token function\">dictGetHash</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">dictHashKey</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>默认的hash算法是：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// dict.c</span>\n<span class=\"token comment\">/* The default hashing function uses SipHash implementation\n * in siphash.c. */</span>\nuint64_t <span class=\"token function\">siphash</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> uint8_t <span class=\"token operator\">*</span>in<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t inlen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> uint8_t <span class=\"token operator\">*</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nuint64_t <span class=\"token function\">siphash_nocase</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> uint8_t <span class=\"token operator\">*</span>in<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> size_t inlen<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> uint8_t <span class=\"token operator\">*</span>k<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nuint64_t <span class=\"token function\">dictGenHashFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">siphash</span><span class=\"token punctuation\">(</span>key<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">,</span>dict_hash_function_seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nuint64_t <span class=\"token function\">dictGenCaseHashFunction</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>buf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">siphash_nocase</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">,</span>dict_hash_function_seed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这个算法的实现在<code class=\"language-text\">siphash.c</code>，其特点是可以预防hash flooding attach，其论文在<a href=\"https://131002.net/siphash/\">这里</a>。</p>\n<h3>rehash和渐进rehash</h3>\n<p>为了保证哈希表的负载因子(<code class=\"language-text\">ht[0].used / ht[0].size</code>)，当其保存的键值对太多或者太少的时候，需要对其进行相应的收缩或扩展，这也就是rehash。</p>\n<p>步骤如下：</p>\n<ul>\n<li>\n<p>为<code class=\"language-text\">ht[1]</code>分配空间。</p>\n<p>如果是扩展，那么<code class=\"language-text\">ht[1]</code>的大小为第一个大于<code class=\"language-text\">ht[0].used*2</code>的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>。</p>\n<p>如果是收缩，其大小为第一个大于<code class=\"language-text\">ht[0].used</code>的<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mn>2</mn><mi>n</mi></msup></mrow><annotation encoding=\"application/x-tex\">2^n</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.664392em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord\">2</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.664392em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mathdefault mtight\">n</span></span></span></span></span></span></span></span></span></span></span>。</p>\n</li>\n<li>将<code class=\"language-text\">ht[0]</code>中的所有键值对rehash到<code class=\"language-text\">ht[1]</code>上。rehash是重新计算哈希值和索引值。</li>\n<li>当全部迁移完毕，删除<code class=\"language-text\">ht[0]</code>，把<code class=\"language-text\">ht[1]</code>设为<code class=\"language-text\">ht[0]</code>。</li>\n</ul>\n<p>对于扩展操作，当不在进行<code class=\"language-text\">BGSAVE</code>或者<code class=\"language-text\">BGREWRITEAOF</code>的时候，负载因子大于1，则进行；进行上述两个操作的时候，负载因子大于5再进行。这里的原因没看懂，应该需要需要等看完持久化那部分才明白，不过大致理由是因为COW(写时复制)。</p>\n<p>resize部分的代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// dict.c</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">dictResize</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> minimal<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>dict_can_resize <span class=\"token operator\">||</span> <span class=\"token function\">dictIsRehashing</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> DICT_ERR<span class=\"token punctuation\">;</span>\n    minimal <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>minimal <span class=\"token operator\">&lt;</span> DICT_HT_INITIAL_SIZE<span class=\"token punctuation\">)</span>\n        minimal <span class=\"token operator\">=</span> DICT_HT_INITIAL_SIZE<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">dictExpand</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> minimal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Expand or create the hash table */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">dictExpand</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* 如何size比used还小，报错 */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">dictIsRehashing</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used <span class=\"token operator\">></span> size<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> DICT_ERR<span class=\"token punctuation\">;</span>\n\n    dictht n<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* the new hash table */</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> realsize <span class=\"token operator\">=</span> <span class=\"token function\">_dictNextPower</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Rehashing to the same table size is not useful. */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>realsize <span class=\"token operator\">==</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> DICT_ERR<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 初始化新hash table */</span>\n    n<span class=\"token punctuation\">.</span>size <span class=\"token operator\">=</span> realsize<span class=\"token punctuation\">;</span>\n    n<span class=\"token punctuation\">.</span>sizemask <span class=\"token operator\">=</span> realsize<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    n<span class=\"token punctuation\">.</span>table <span class=\"token operator\">=</span> <span class=\"token function\">zcalloc</span><span class=\"token punctuation\">(</span>realsize<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>dictEntry<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    n<span class=\"token punctuation\">.</span>used <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 如果ht[0]为空，说明是初始化，把新ht赋给ht[0] */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>table <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> DICT_OK<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* 不然就准备给ht[1] */</span>\n    d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> n<span class=\"token punctuation\">;</span>\n    d<span class=\"token operator\">-></span>rehashidx <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> DICT_OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>收缩操作的临界值是负载因子0.1。</p>\n<p>因为字典里面存储的东西可能很多，所以会进行渐进rehash，也就是不一下子进行复制。而是在每次插入、删除、查找和更新步骤的时候，每次复制一些。具体步骤为：</p>\n<ul>\n<li>开始rehash的时候，把<code class=\"language-text\">rehashidx</code>设置为0</li>\n<li>在rehash期间，每次进行插入、删除、查找和更新步骤的时候，都会把<code class=\"language-text\">ht[0]</code>中<code class=\"language-text\">rehashidx</code>对应的所有键值对rehash到<code class=\"language-text\">ht[1]</code>，<code class=\"language-text\">rehashidx++</code>。</li>\n<li>完成全部迁移之后，把<code class=\"language-text\">rehashidx</code>设置为<code class=\"language-text\">-1</code>。</li>\n</ul>\n<p>下面是rehash的主要代码，内容很简单。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// dict.c</span>\n<span class=\"token comment\">/* 当没有safe iterator绑定于哈希表的时候，这个函数进行1步\n * 当在rehashing中有iterator的时候，我们不能随便搞乱2个哈希表，不然可能出出现missing or duplicated。\n *\n * 这个函数在字典的common lookup or update operations，从而让哈希表自动从ht[0]迁移到ht[1] */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token function\">_dictRehashStep</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>iterators <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">dictRehash</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 进行N步渐进rehashing. 如果仍有尚未迁移的键返回1，反之返回0\n *\n * 这个函数会查看最多N*10个空桶，然后就返回了，所以有可能1个都没有迁移。这么做是为了不让这个函数block掉，或者说花太多时间 */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">dictRehash</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> n<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">int</span> empty_visits <span class=\"token operator\">=</span> n<span class=\"token operator\">*</span><span class=\"token number\">10</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Max number of empty buckets to visit. */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">dictIsRehashing</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>n<span class=\"token operator\">--</span> <span class=\"token operator\">&amp;&amp;</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        dictEntry <span class=\"token operator\">*</span>de<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>nextde<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* Note that rehashidx can't overflow as we are sure there are more\n         * elements because ht[0].used != 0 */</span>\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>size <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>d<span class=\"token operator\">-></span>rehashidx<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>d<span class=\"token operator\">-></span>rehashidx<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            d<span class=\"token operator\">-></span>rehashidx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">--</span>empty_visits <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        de <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>d<span class=\"token operator\">-></span>rehashidx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* Move all the keys in this bucket from the old to the new hash HT */</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>de<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            uint64_t h<span class=\"token punctuation\">;</span>\n\n            nextde <span class=\"token operator\">=</span> de<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n            <span class=\"token comment\">/* Get the index in the new hash table */</span>\n            h <span class=\"token operator\">=</span> <span class=\"token function\">dictHashKey</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> de<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sizemask<span class=\"token punctuation\">;</span>\n            de<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n            d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>h<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> de<span class=\"token punctuation\">;</span>\n            d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n            d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n            de <span class=\"token operator\">=</span> nextde<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>d<span class=\"token operator\">-></span>rehashidx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        d<span class=\"token operator\">-></span>rehashidx<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">/* Check if we already rehashed the whole table... */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">zfree</span><span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_dictReset</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        d<span class=\"token operator\">-></span>rehashidx <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* More to rehash... */</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>下面就来依次看一下插入、删除、查找和更新。</p>\n<h3><code class=\"language-text\">dictAdd</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// dict.c</span>\n<span class=\"token comment\">/* Add an element to the target hash table */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">dictAdd</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dictEntry <span class=\"token operator\">*</span>entry <span class=\"token operator\">=</span> <span class=\"token function\">dictAddRaw</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>entry<span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> DICT_ERR<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dictSetVal</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> DICT_OK<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Low level add or find:\n * 这个函数的作用是添加entry。不过其会返回对应的entry，让用户自己输入值。\n *\n * 这个函数也向用户开放了，主要是为了存储non-pointers。如：\n * entry = dictAddRaw(dict,mykey,NULL);\n * if (entry != NULL) dictSetSignedIntegerVal(entry,1000);\n * Return values:\n *\n * 如果已经有键key，返回NULL, and \"*existing\" is populated\n * with the existing entry if existing is not NULL.\n */</span>\ndictEntry <span class=\"token operator\">*</span><span class=\"token function\">dictAddRaw</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> dictEntry <span class=\"token operator\">*</span><span class=\"token operator\">*</span>existing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">long</span> index<span class=\"token punctuation\">;</span>\n    dictEntry <span class=\"token operator\">*</span>entry<span class=\"token punctuation\">;</span>\n    dictht <span class=\"token operator\">*</span>ht<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// rehashidc != -1 => rehash</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">dictIsRehashing</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">_dictRehashStep</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Get the index of the new element, or -1 if\n     * the element already exists. */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>index <span class=\"token operator\">=</span> <span class=\"token function\">_dictKeyIndex</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> <span class=\"token function\">dictHashKey</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> existing<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 分配内存，把新键值对插在最前面(LRU) */</span>\n    ht <span class=\"token operator\">=</span> <span class=\"token function\">dictIsRehashing</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token operator\">&amp;</span>d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">:</span> <span class=\"token operator\">&amp;</span>d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    entry <span class=\"token operator\">=</span> <span class=\"token function\">zmalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    entry<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> ht<span class=\"token operator\">-></span>table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    ht<span class=\"token operator\">-></span>table<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> entry<span class=\"token punctuation\">;</span>\n    ht<span class=\"token operator\">-></span>used<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Set the hash entry fields. */</span>\n    <span class=\"token function\">dictSetKey</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> entry<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> entry<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>rehash的部分上面已经讨论过了。抛开rehashing，其实就3步。</p>\n<p>首先是<code class=\"language-text\">_dictKeyIndex</code>，就是顺着链表找。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// dict.c</span>\n<span class=\"token comment\">/* Returns the index of a free slot that can be populated with\n * a hash entry for the given 'key'.\n * If the key already exists, -1 is returned\n * and the optional output parameter may be filled.\n *\n * Note that if we are in the process of rehashing the hash table, the\n * index is always returned in the context of the second (new) hash table. */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">long</span> <span class=\"token function\">_dictKeyIndex</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> uint64_t hash<span class=\"token punctuation\">,</span> dictEntry <span class=\"token operator\">*</span><span class=\"token operator\">*</span>existing<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">long</span> idx<span class=\"token punctuation\">,</span> table<span class=\"token punctuation\">;</span>\n    dictEntry <span class=\"token operator\">*</span>he<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existing<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>existing <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Expand the hash table if needed */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">_dictExpandIfNeeded</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> DICT_ERR<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>table <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> table <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> table<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        idx <span class=\"token operator\">=</span> hash <span class=\"token operator\">&amp;</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span>table<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sizemask<span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* Search if this slot does not already contain the given key */</span>\n        he <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span>table<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>he<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">==</span>he<span class=\"token operator\">-></span>key <span class=\"token operator\">||</span> <span class=\"token function\">dictCompareKeys</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> he<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existing<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>existing <span class=\"token operator\">=</span> he<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            he <span class=\"token operator\">=</span> he<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">dictIsRehashing</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> idx<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>找到之后就是插入新键。最后就是set key。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// dict.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> dictSetKey(d, entry, _key_) do { \\\n    if ((d)->type->keyDup) \\\n        (entry)->key = (d)->type->keyDup((d)->privdata, _key_); \\\n    else \\\n        (entry)->key = (_key_); \\\n} while(0)</span></code></pre></div>\n<p>不太清楚这里的<code class=\"language-text\">type-&gt;keyDup</code>是什么意思。估计是为了复制一个key，而不是用原来的。</p>\n<h3><code class=\"language-text\">dictDelete</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// dict.c</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">dictDelete</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>ht<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">dictGenericDelete</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> DICT_OK <span class=\"token operator\">:</span> DICT_ERR<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Search and remove an element. This is an helper function for\n * dictDelete() and dictUnlink(), please check the top comment\n * of those functions. */</span>\n<span class=\"token keyword\">static</span> dictEntry <span class=\"token operator\">*</span><span class=\"token function\">dictGenericDelete</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> nofree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    uint64_t h<span class=\"token punctuation\">,</span> idx<span class=\"token punctuation\">;</span>\n    dictEntry <span class=\"token operator\">*</span>he<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>prevHe<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> table<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">dictIsRehashing</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">_dictRehashStep</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    h <span class=\"token operator\">=</span> <span class=\"token function\">dictHashKey</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>table <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> table <span class=\"token operator\">&lt;=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> table<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        idx <span class=\"token operator\">=</span> h <span class=\"token operator\">&amp;</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span>table<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sizemask<span class=\"token punctuation\">;</span>\n        he <span class=\"token operator\">=</span> d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span>table<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n        prevHe <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>he<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>key<span class=\"token operator\">==</span>he<span class=\"token operator\">-></span>key <span class=\"token operator\">||</span> <span class=\"token function\">dictCompareKeys</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> key<span class=\"token punctuation\">,</span> he<span class=\"token operator\">-></span>key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token comment\">/* Unlink the element from the list */</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prevHe<span class=\"token punctuation\">)</span>\n                    prevHe<span class=\"token operator\">-></span>next <span class=\"token operator\">=</span> he<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">else</span>\n                    d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span>table<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>table<span class=\"token punctuation\">[</span>idx<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> he<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nofree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                    <span class=\"token function\">dictFreeKey</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> he<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">dictFreeVal</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> he<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token function\">zfree</span><span class=\"token punctuation\">(</span>he<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n                d<span class=\"token operator\">-></span>ht<span class=\"token punctuation\">[</span>table<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>used<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">return</span> he<span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            prevHe <span class=\"token operator\">=</span> he<span class=\"token punctuation\">;</span>\n            he <span class=\"token operator\">=</span> he<span class=\"token operator\">-></span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">dictIsRehashing</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* not found */</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就是个单向链表的删除。</p>\n<p>然后还有个<code class=\"language-text\">dictUnlink</code>用来不释放空间的。其搭配于<code class=\"language-text\">dictFreeUnlinkedEntry</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">dictEntry <span class=\"token operator\">*</span><span class=\"token function\">dictUnlink</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>ht<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>key<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">dictGenericDelete</span><span class=\"token punctuation\">(</span>ht<span class=\"token punctuation\">,</span>key<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* You need to call this function to really free the entry after a call\n * to dictUnlink(). It's safe to call this function with 'he' = NULL. */</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">dictFreeUnlinkedEntry</span><span class=\"token punctuation\">(</span>dict <span class=\"token operator\">*</span>d<span class=\"token punctuation\">,</span> dictEntry <span class=\"token operator\">*</span>he<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>he <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dictFreeKey</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> he<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dictFreeVal</span><span class=\"token punctuation\">(</span>d<span class=\"token punctuation\">,</span> he<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">zfree</span><span class=\"token punctuation\">(</span>he<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3><code class=\"language-text\">dictFind</code></h3>\n<p>单链表查找。<code class=\"language-text\">dictFetchValue</code>是其返回值的wrapper。</p>\n<p>更新貌似直接<code class=\"language-text\">dictFind</code> + <code class=\"language-text\">dictSetVal</code>就行了。</p>\n<p>剩下还有一些API，我们来看一下：</p>\n<h3><code class=\"language-text\">dictCreate</code>、<code class=\"language-text\">dictRelease</code>、<code class=\"language-text\">dictEmpty</code></h3>\n<p>创建，释放和清空。都是简单的内存操作。注意释放一个链表node的时候还需要分别释放其键和值。</p>","frontmatter":{"title":"Redis源码阅读 —— 字典","date":"2019-08-15T10:54:00.000Z","tags":["redis","C"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/redis-source-code-reading-dict/"}}}