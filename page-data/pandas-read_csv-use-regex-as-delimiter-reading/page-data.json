{"componentChunkName":"component---src-templates-blog-post-js","path":"/pandas-read_csv-use-regex-as-delimiter-reading/","webpackCompilationHash":"5a11a2db5b88de6221a2","result":{"data":{"markdownRemark":{"html":"<p>When doing my homework, I need to read a badly formed csv into a pandas dataframe. And what I need is to use regular expression for separation. Because the documentation is not good. I have to read the source code for it.</p>\n<h2>TL;DR</h2>\n<p>If using a regex as a delimiter, each line of the file would be treated with <code class=\"language-text\">re.split(pattern, line)</code>.</p>\n<h2>Source Code Reading</h2>\n<p>The core of read in the <code class=\"language-text\">read_csv</code> function is the <code class=\"language-text\">_read</code> function in <code class=\"language-text\">pandas/pandas/io/parsers.py</code>.  Here is the code:</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">def</span> <span class=\"token function\">_read</span><span class=\"token punctuation\">(</span>filepath_or_buffer<span class=\"token punctuation\">,</span> kwds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"some check for the value in kwds\"</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    \n    <span class=\"token comment\"># Create the parser.</span>\n    parser <span class=\"token operator\">=</span> TextFileReader<span class=\"token punctuation\">(</span>filepath_or_buffer<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwds<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> chunksize <span class=\"token keyword\">or</span> iterator<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">return</span> parser\n\n    <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n        data <span class=\"token operator\">=</span> parser<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>nrows<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">finally</span><span class=\"token punctuation\">:</span>\n        parser<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">if</span> should_close<span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            filepath_or_buffer<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> ValueError<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">pass</span>\n\n    <span class=\"token keyword\">return</span> data</code></pre></div>\n<p>The core of the <code class=\"language-text\">_read</code> function is the <code class=\"language-text\">TextFileReader</code> which is also in the same file.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">TextFileReader</span><span class=\"token punctuation\">(</span>BaseIterator<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token triple-quoted-string string\">\"\"\"\n    Passed dialect overrides any of the related parser options\n    \"\"\"</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> engine<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n        self<span class=\"token punctuation\">.</span>f <span class=\"token operator\">=</span> f\n\n        <span class=\"token keyword\">if</span> engine <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            engine_specified <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            engine <span class=\"token operator\">=</span> <span class=\"token string\">'python'</span>\n            engine_specified <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n        self<span class=\"token punctuation\">.</span>_engine_specified <span class=\"token operator\">=</span> kwds<span class=\"token punctuation\">.</span>get<span class=\"token punctuation\">(</span><span class=\"token string\">'engine_specified'</span><span class=\"token punctuation\">,</span> engine_specified<span class=\"token punctuation\">)</span>\n\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"check and correct some kwds key values\"</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n        self<span class=\"token punctuation\">.</span>orig_options <span class=\"token operator\">=</span> kwds\n\n        <span class=\"token comment\"># miscellanea</span>\n        self<span class=\"token punctuation\">.</span>engine <span class=\"token operator\">=</span> engine\n        self<span class=\"token punctuation\">.</span>_engine <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>_currow <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t\n        <span class=\"token comment\"># make the option legal for the engine</span>\n        options <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_get_options_with_defaults<span class=\"token punctuation\">(</span>engine<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>chunksize <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'chunksize'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>nrows <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'nrows'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>squeeze <span class=\"token operator\">=</span> options<span class=\"token punctuation\">.</span>pop<span class=\"token punctuation\">(</span><span class=\"token string\">'squeeze'</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">False</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># might mutate self.engine</span>\n        <span class=\"token comment\"># gh-16530 about file like object</span>\n        self<span class=\"token punctuation\">.</span>engine <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_check_file_or_buffer<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> engine<span class=\"token punctuation\">)</span>\n        <span class=\"token comment\"># if some features are not supported by C engine, fall back to python one. </span>\n        self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>engine <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_clean_options<span class=\"token punctuation\">(</span>options<span class=\"token punctuation\">,</span> engine<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token string\">'has_index_names'</span> <span class=\"token keyword\">in</span> kwds<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">[</span><span class=\"token string\">'has_index_names'</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> kwds<span class=\"token punctuation\">[</span><span class=\"token string\">'has_index_names'</span><span class=\"token punctuation\">]</span>\n\n        self<span class=\"token punctuation\">.</span>_make_engine<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>engine<span class=\"token punctuation\">)</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        self<span class=\"token punctuation\">.</span>_engine<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"omit the code for arguments checking\"</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__next__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>get_chunk<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>close<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">raise</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_make_engine</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> engine<span class=\"token operator\">=</span><span class=\"token string\">'c'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> engine <span class=\"token operator\">==</span> <span class=\"token string\">'c'</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>_engine <span class=\"token operator\">=</span> CParserWrapper<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> engine <span class=\"token operator\">==</span> <span class=\"token string\">'python'</span><span class=\"token punctuation\">:</span>\n                klass <span class=\"token operator\">=</span> PythonParser\n            <span class=\"token keyword\">elif</span> engine <span class=\"token operator\">==</span> <span class=\"token string\">'python-fwf'</span><span class=\"token punctuation\">:</span>\n                klass <span class=\"token operator\">=</span> FixedWidthFieldParser\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"raise error\"</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            self<span class=\"token punctuation\">.</span>_engine <span class=\"token operator\">=</span> klass<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>f<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>self<span class=\"token punctuation\">.</span>options<span class=\"token punctuation\">)</span>\n\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> nrows<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        nrows <span class=\"token operator\">=</span> _validate_integer<span class=\"token punctuation\">(</span><span class=\"token string\">'nrows'</span><span class=\"token punctuation\">,</span> nrows<span class=\"token punctuation\">)</span>\n        ret <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_engine<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>nrows<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"turn ret to dataframe\"</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        <span class=\"token keyword\">return</span> df\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_create_index</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        index<span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">,</span> col_dict <span class=\"token operator\">=</span> ret\n        <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">,</span> col_dict\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">get_chunk</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> size<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">if</span> size <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            size <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>chunksize\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>nrows <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>_currow <span class=\"token operator\">>=</span> self<span class=\"token punctuation\">.</span>nrows<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> StopIteration\n            size <span class=\"token operator\">=</span> <span class=\"token builtin\">min</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>nrows <span class=\"token operator\">-</span> self<span class=\"token punctuation\">.</span>_currow<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>read<span class=\"token punctuation\">(</span>nrows<span class=\"token operator\">=</span>size<span class=\"token punctuation\">)</span></code></pre></div>\n<p>The engine used would be <code class=\"language-text\">CParserWrapper</code> for C, <code class=\"language-text\">PythonParser</code> for python and <code class=\"language-text\">FixedWidthFieldParser</code></p>\n<p> for python-fwf, which adds some specialization to <code class=\"language-text\">PythonParser</code> . And this time, we will focus on <code class=\"language-text\">PythonParser</code> which has the most functionalities. I have tried my best to reduce the length of the code for <code class=\"language-text\">PythonParser</code>.</p>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token keyword\">class</span> <span class=\"token class-name\">PythonParser</span><span class=\"token punctuation\">(</span>ParserBase<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">__init__</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">,</span> <span class=\"token operator\">**</span>kwds<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Workhorse function for processing nested list into DataFrame\n        Should be replaced by np.genfromtxt eventually?\n        \"\"\"</span>\n        ParserBase<span class=\"token punctuation\">.</span>__init__<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> kwds<span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        self<span class=\"token punctuation\">.</span>buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        self<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n        self<span class=\"token punctuation\">.</span>line_pos <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\t\t\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"similar to self.xxx = kwds['xxx']\"</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n            \n        self<span class=\"token punctuation\">.</span>_comment_lines <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n\n        mode <span class=\"token operator\">=</span> <span class=\"token string\">'r'</span> <span class=\"token keyword\">if</span> PY3 <span class=\"token keyword\">else</span> <span class=\"token string\">'rb'</span>\n        f<span class=\"token punctuation\">,</span> handles <span class=\"token operator\">=</span> _get_handle<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">,</span> encoding<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">,</span>\n                                 compression<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>compression<span class=\"token punctuation\">,</span>\n                                 memory_map<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>memory_map<span class=\"token punctuation\">)</span>\n        self<span class=\"token punctuation\">.</span>handles<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>handles<span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Set self.data to something that can read lines.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">hasattr</span><span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> <span class=\"token string\">'readline'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>_make_reader<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> f\n\n        <span class=\"token comment\"># Get columns in two steps: infer from data, then</span>\n        <span class=\"token comment\"># infer column indices from self.usecols if it is specified.</span>\n        self<span class=\"token punctuation\">.</span>_col_indices <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n        <span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>num_original_columns<span class=\"token punctuation\">,</span>\n         self<span class=\"token punctuation\">.</span>unnamed_cols<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_infer_columns<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token comment\"># Now self.columns has the set of columns that we will process.</span>\n        <span class=\"token comment\"># The original set is stored in self.original_columns.</span>\n        <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># we are processing a multi index column</span>\n            self<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>index_names<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>col_names<span class=\"token punctuation\">,</span> _ <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>\n                self<span class=\"token punctuation\">.</span>_extract_multi_indexer_columns<span class=\"token punctuation\">(</span>\n                    self<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>index_names<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>col_names\n                <span class=\"token punctuation\">)</span>\n            <span class=\"token punctuation\">)</span>\n            <span class=\"token comment\"># Update list of original names to include all indices.</span>\n            self<span class=\"token punctuation\">.</span>num_original_columns <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            self<span class=\"token punctuation\">.</span>columns <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n        <span class=\"token comment\"># get popped off for index</span>\n        self<span class=\"token punctuation\">.</span>orig_names <span class=\"token operator\">=</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>columns<span class=\"token punctuation\">)</span>\n        \n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"process date, decimal, thousand separator\"</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n        \n    <span class=\"token keyword\">def</span> <span class=\"token function\">_make_reader</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> f<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        sep <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>delimiter\n\n        <span class=\"token keyword\">if</span> sep <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span> <span class=\"token keyword\">or</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>sep<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>lineterminator<span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span> ValueError<span class=\"token punctuation\">(</span><span class=\"token string\">'Custom line terminators not supported in '</span>\n                                 <span class=\"token string\">'python parser (yet)'</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">class</span> <span class=\"token class-name\">MyDialect</span><span class=\"token punctuation\">(</span>csv<span class=\"token punctuation\">.</span>Dialect<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                delimiter <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>delimiter\n                quotechar <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>quotechar\n                escapechar <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>escapechar\n                doublequote <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>doublequote\n                skipinitialspace <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>skipinitialspace\n                quoting <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>quoting\n                lineterminator <span class=\"token operator\">=</span> <span class=\"token string\">'\\n'</span>\n\n            dia <span class=\"token operator\">=</span> MyDialect\n\n            sniff_sep <span class=\"token operator\">=</span> <span class=\"token boolean\">True</span>\n\n            <span class=\"token keyword\">if</span> sep <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                sniff_sep <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n                dia<span class=\"token punctuation\">.</span>delimiter <span class=\"token operator\">=</span> sep\n            <span class=\"token comment\"># attempt to sniff the delimiter</span>\n            <span class=\"token keyword\">if</span> sniff_sep<span class=\"token punctuation\">:</span>\n                line <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">while</span> self<span class=\"token punctuation\">.</span>skipfunc<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                    line <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                line <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_check_comments<span class=\"token punctuation\">(</span><span class=\"token punctuation\">[</span>line<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span>\n\n                self<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                self<span class=\"token punctuation\">.</span>line_pos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n                sniffed <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>Sniffer<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>sniff<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n                dia<span class=\"token punctuation\">.</span>delimiter <span class=\"token operator\">=</span> sniffed<span class=\"token punctuation\">.</span>delimiter\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>encoding <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>\n                        UnicodeReader<span class=\"token punctuation\">(</span>StringIO<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                      dialect<span class=\"token operator\">=</span>dia<span class=\"token punctuation\">,</span>\n                                      encoding<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    self<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span><span class=\"token builtin\">list</span><span class=\"token punctuation\">(</span>csv<span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">(</span>StringIO<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n                                                    dialect<span class=\"token operator\">=</span>dia<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>encoding <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                reader <span class=\"token operator\">=</span> UnicodeReader<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> dialect<span class=\"token operator\">=</span>dia<span class=\"token punctuation\">,</span>\n                                       encoding<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">,</span>\n                                       strict<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                reader <span class=\"token operator\">=</span> csv<span class=\"token punctuation\">.</span>reader<span class=\"token punctuation\">(</span>f<span class=\"token punctuation\">,</span> dialect<span class=\"token operator\">=</span>dia<span class=\"token punctuation\">,</span>\n                                    strict<span class=\"token operator\">=</span><span class=\"token boolean\">True</span><span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">def</span> <span class=\"token function\">_read</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                line <span class=\"token operator\">=</span> f<span class=\"token punctuation\">.</span>readline<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> compat<span class=\"token punctuation\">.</span>PY2 <span class=\"token keyword\">and</span> self<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">:</span>\n                    line <span class=\"token operator\">=</span> line<span class=\"token punctuation\">.</span>decode<span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>encoding<span class=\"token punctuation\">)</span>\n\n                pat <span class=\"token operator\">=</span> re<span class=\"token punctuation\">.</span><span class=\"token builtin\">compile</span><span class=\"token punctuation\">(</span>sep<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">yield</span> pat<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">for</span> line <span class=\"token keyword\">in</span> f<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">yield</span> pat<span class=\"token punctuation\">.</span>split<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">.</span>strip<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n            reader <span class=\"token operator\">=</span> _read<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n        self<span class=\"token punctuation\">.</span>data <span class=\"token operator\">=</span> reader\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> rows<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            content <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_get_lines<span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>_first_chunk<span class=\"token punctuation\">:</span>\n                content <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">raise</span>\n\n        <span class=\"token comment\"># done with first read, next time raise StopIteration</span>\n        self<span class=\"token punctuation\">.</span>_first_chunk <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"turn content into index, columns, data\"</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n        <span class=\"token keyword\">return</span> index<span class=\"token punctuation\">,</span> columns<span class=\"token punctuation\">,</span> data\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_next_line</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token string\">\"move self.pos in self.data to get next needed line\"</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n        self<span class=\"token punctuation\">.</span>line_pos <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n        self<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>line<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> line\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_next_iter_line</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> row_num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        <span class=\"token triple-quoted-string string\">\"\"\"\n        Wrapper around iterating through `self.data` (CSV source).\n        When a CSV error is raised, we check for specific\n        error messages that allow us to customize the\n        error message displayed to the user.\n        Parameters\n        ----------\n        row_num : The row number of the line being parsed.\n        \"\"\"</span>\n\n        <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">return</span> <span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">except</span> csv<span class=\"token punctuation\">.</span>Error <span class=\"token keyword\">as</span> e<span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>warn_bad_lines <span class=\"token keyword\">or</span> self<span class=\"token punctuation\">.</span>error_bad_lines<span class=\"token punctuation\">:</span>\n                msg <span class=\"token operator\">=</span> <span class=\"token builtin\">str</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> <span class=\"token string\">'NULL byte'</span> <span class=\"token keyword\">in</span> msg<span class=\"token punctuation\">:</span>\n                    msg <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'NULL byte detected. This byte '</span>\n                           <span class=\"token string\">'cannot be processed in Python\\'s '</span>\n                           <span class=\"token string\">'native csv library at the moment, '</span>\n                           <span class=\"token string\">'so please pass in engine=\\'c\\' instead'</span><span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>skipfooter <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                    reason <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token string\">'Error could possibly be due to '</span>\n                              <span class=\"token string\">'parsing errors in the skipped footer rows '</span>\n                              <span class=\"token string\">'(the skipfooter keyword is only applied '</span>\n                              <span class=\"token string\">'after Python\\'s csv library has parsed '</span>\n                              <span class=\"token string\">'all rows).'</span><span class=\"token punctuation\">)</span>\n                    msg <span class=\"token operator\">+=</span> <span class=\"token string\">'. '</span> <span class=\"token operator\">+</span> reason\n\t\t\t\t<span class=\"token comment\"># Alert a user about a malformed row.</span>\n                self<span class=\"token punctuation\">.</span>_alert_malformed<span class=\"token punctuation\">(</span>msg<span class=\"token punctuation\">,</span> row_num<span class=\"token punctuation\">)</span>\n            <span class=\"token keyword\">return</span> <span class=\"token boolean\">None</span>\n\n    _implicit_index <span class=\"token operator\">=</span> <span class=\"token boolean\">False</span>\n\n    <span class=\"token keyword\">def</span> <span class=\"token function\">_get_lines</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">,</span> rows<span class=\"token operator\">=</span><span class=\"token boolean\">None</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n        lines <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buf\n        new_rows <span class=\"token operator\">=</span> <span class=\"token boolean\">None</span>\n\n        <span class=\"token comment\"># already fetched some number</span>\n        <span class=\"token keyword\">if</span> rows <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token comment\"># we already have the lines in the buffer</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">)</span> <span class=\"token operator\">>=</span> rows<span class=\"token punctuation\">:</span>\n                new_rows<span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>buf <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span>rows<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> self<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">[</span>rows<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n\n            <span class=\"token comment\"># need some lines</span>\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                rows <span class=\"token operator\">-=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>buf<span class=\"token punctuation\">)</span>\n\n        <span class=\"token keyword\">if</span> new_rows <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n            <span class=\"token keyword\">if</span> <span class=\"token builtin\">isinstance</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">,</span> <span class=\"token builtin\">list</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">></span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">raise</span> StopIteration\n                <span class=\"token keyword\">if</span> rows <span class=\"token keyword\">is</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                    new_rows <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">:</span><span class=\"token punctuation\">]</span>\n                    new_pos <span class=\"token operator\">=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span>\n                <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                    new_rows <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">[</span>self<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">:</span>self<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">+</span> rows<span class=\"token punctuation\">]</span>\n                    new_pos <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">+</span> rows\n\n                <span class=\"token comment\"># Check for stop rows. n.b.: self.skiprows is a set.</span>\n                <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>skiprows<span class=\"token punctuation\">:</span>\n                    new_rows <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>row <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>new_rows<span class=\"token punctuation\">)</span>\n                                <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>skipfunc<span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n\n                lines<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>new_rows<span class=\"token punctuation\">)</span>\n                self<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">=</span> new_pos\n\n            <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                new_rows <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n                <span class=\"token keyword\">try</span><span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> rows <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">for</span> _ <span class=\"token keyword\">in</span> <span class=\"token builtin\">range</span><span class=\"token punctuation\">(</span>rows<span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n                            new_rows<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span><span class=\"token builtin\">next</span><span class=\"token punctuation\">(</span>self<span class=\"token punctuation\">.</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                        lines<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>new_rows<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n                        rows <span class=\"token operator\">=</span> <span class=\"token number\">0</span>\n\n                        <span class=\"token keyword\">while</span> <span class=\"token boolean\">True</span><span class=\"token punctuation\">:</span>\n                            new_row <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_next_iter_line<span class=\"token punctuation\">(</span>\n                                row_num<span class=\"token operator\">=</span>self<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">+</span> rows <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n                            rows <span class=\"token operator\">+=</span> <span class=\"token number\">1</span>\n\n                            <span class=\"token keyword\">if</span> new_row <span class=\"token keyword\">is</span> <span class=\"token keyword\">not</span> <span class=\"token boolean\">None</span><span class=\"token punctuation\">:</span>\n                                new_rows<span class=\"token punctuation\">.</span>append<span class=\"token punctuation\">(</span>new_row<span class=\"token punctuation\">)</span>\n\n                <span class=\"token keyword\">except</span> StopIteration<span class=\"token punctuation\">:</span>\n                    <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>skiprows<span class=\"token punctuation\">:</span>\n                        new_rows <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span>row <span class=\"token keyword\">for</span> i<span class=\"token punctuation\">,</span> row <span class=\"token keyword\">in</span> <span class=\"token builtin\">enumerate</span><span class=\"token punctuation\">(</span>new_rows<span class=\"token punctuation\">)</span>\n                                    <span class=\"token keyword\">if</span> <span class=\"token keyword\">not</span> self<span class=\"token punctuation\">.</span>skipfunc<span class=\"token punctuation\">(</span>i <span class=\"token operator\">+</span> self<span class=\"token punctuation\">.</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span>\n                    lines<span class=\"token punctuation\">.</span>extend<span class=\"token punctuation\">(</span>new_rows<span class=\"token punctuation\">)</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">:</span>\n                        <span class=\"token keyword\">raise</span>\n                self<span class=\"token punctuation\">.</span>pos <span class=\"token operator\">+=</span> <span class=\"token builtin\">len</span><span class=\"token punctuation\">(</span>new_rows<span class=\"token punctuation\">)</span>\n\n            self<span class=\"token punctuation\">.</span>buf <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span>\n        <span class=\"token keyword\">else</span><span class=\"token punctuation\">:</span>\n            lines <span class=\"token operator\">=</span> new_rows\n\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>skipfooter<span class=\"token punctuation\">:</span>\n            lines <span class=\"token operator\">=</span> lines<span class=\"token punctuation\">[</span><span class=\"token punctuation\">:</span><span class=\"token operator\">-</span>self<span class=\"token punctuation\">.</span>skipfooter<span class=\"token punctuation\">]</span>\n\n        lines <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_check_comments<span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">if</span> self<span class=\"token punctuation\">.</span>skip_blank_lines<span class=\"token punctuation\">:</span>\n            lines <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_remove_empty_lines<span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span>\n        lines <span class=\"token operator\">=</span> self<span class=\"token punctuation\">.</span>_check_thousands<span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> self<span class=\"token punctuation\">.</span>_check_decimal<span class=\"token punctuation\">(</span>lines<span class=\"token punctuation\">)</span>\n    \n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<p>The core of this parser consists of two elements: <code class=\"language-text\">self.data</code> , as the origin file object and <code class=\"language-text\">self.buf</code> that saves the lines needed that is needed.</p>\n<p>Mostly, we will use the <code class=\"language-text\">read(self, rows=None)</code> function, where if <code class=\"language-text\">rows</code> given, return certain number of rows, otherwise return the whole data as a list. And to read the data, <code class=\"language-text\">_get_lines</code> will be called and first use the lines already stored in the buffer and if not enough, will read line by line from <code class=\"language-text\">self.data</code>.</p>\n<p>The regex part lies in the <code class=\"language-text\">_make_reader</code> function, where for regex delimiter, simply <code class=\"language-text\">pat.split</code> is used.</p>\n<p>Notice, here I omit the column infer section, which is also a big part of the code but is irrelevant to what I hope to discover. The <code class=\"language-text\">self.buf</code> has tight connect with function <code class=\"language-text\">_infer_columns</code> and the reason why the design need to have a buffer lies there.</p>","frontmatter":{"title":"Pandas read_csv use regex as delimiter","date":"2019-02-03T14:35:00.000Z","tags":["python","pandas"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/pandas-read_csv-use-regex-as-delimiter-reading/"}}}