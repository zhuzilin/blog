{"componentChunkName":"component---src-templates-blog-post-js","path":"/nginx-basics/","webpackCompilationHash":"7e8cb6d6d8baacdb1aae","result":{"data":{"markdownRemark":{"html":"<p>由于我已经无数次的查过ngnix相关的内容以及像反向代理这样的东西了，每次过了一两个月就忘得一干二净，所以和git一样，我自己记录一份可以直接上手的教程。使用的主要参考是nginx的<a href=\"http://nginx.org/en/docs/beginners_guide.html\">beginner's guide</a>。</p>\n<p>nginx有一个master进程和多个worker进程。master进程的任务是read and evaluate configuration并maintain work进程。worker进程则负责实际的请求。nginx采用的是event-based model与操作系统相关的机制来高效地在worker进程中分配request。</p>\n<p>配置文件<code class=\"language-text\">nginx.conf</code>默认放在<code class=\"language-text\">/user/local/nginx/conf</code>， <code class=\"language-text\">/etc/nginx</code>， <code class=\"language-text\">/usr/local/etc/nginx</code>中的一个地址下面。</p>\n<p>安装nginx很简单，就是直接运行以下的命令就好了：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">apt-get</span> <span class=\"token function\">install</span> nginx</code></pre></div>\n<p>然后对其基本的指令就是</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token function\">sudo</span> <span class=\"token function\">service</span> nginx <span class=\"token punctuation\">{</span>start<span class=\"token operator\">|</span>stop<span class=\"token operator\">|</span>restart<span class=\"token operator\">|</span>reload<span class=\"token operator\">|</span>force-reload<span class=\"token operator\">|</span>status<span class=\"token operator\">|</span>configtest<span class=\"token operator\">|</span>rotate<span class=\"token operator\">|</span>upgrade<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Configuration Basics</h3>\n<p>nginx的配置文件和C有点像，支撑被称为directives，可以有单行以\";\"结束的，或者是由\"{}\"包住的块。如果一个directive里面包含其他的directive，就被称为context（如events, http, server, location）。最外面的directive被称为main context。</p>\n<h3>Serving Static Content</h3>\n<p>web server的一个重要功能就是serving out files（如图片与static HTML），依据request的类型，文件会从不同地址被served：<code class=\"language-text\">/data/www</code>可能包含HTML，<code class=\"language-text\">/data/images</code>可能包含图片。</p>\n<p>在<code class=\"language-text\">/data/www</code>中放一个<code class=\"language-text\">index.html</code>之后，在配置文件中加上：</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">http</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token keyword\">root</span> <span class=\"token operator\">/</span>data<span class=\"token operator\">/</span>www<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span>images<span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n    \t\t<span class=\"token keyword\">root</span> <span class=\"token operator\">/</span>data<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意一般会有好多个server，每个对应不同的端口号和server names。默认是http，也就是port 80。</p>\n<p>然后reload就可以了。</p>\n<h3>Setting Up a Simple Proxy Server （反向代理）</h3>\n<p>server的另一个常见用法是设定proxy server，也就是当server接收到request的时候，会传给proxied servers，把他们返回的结果返回给client。我们这里做一个很简单的例子：</p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">listen</span> <span class=\"token number\">8080</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">root</span> <span class=\"token operator\">/</span>data<span class=\"token operator\">/</span>up1<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">proxy_pass</span> <span class=\"token keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>localhost<span class=\"token punctuation\">:</span><span class=\"token number\">8080</span><span class=\"token operator\">/</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">location</span> <span class=\"token operator\">~</span> \\<span class=\"token punctuation\">.</span><span class=\"token punctuation\">(</span>gif<span class=\"token operator\">|</span>jpg<span class=\"token operator\">|</span>png<span class=\"token punctuation\">)</span>$ <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">root</span> <span class=\"token operator\">/</span>data<span class=\"token operator\">/</span>images<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的<code class=\"language-text\">~ \\.(gif|jpg|png)$</code>表示的是正则表达式，nginx的匹配顺序是：</p>\n<blockquote>\n<p>When nginx selects a <code class=\"language-text\">location</code> block to serve a request it first checks<a href=\"http://nginx.org/en/docs/http/ngx_http_core_module.html#location\">location</a> directives that specify prefixes, remembering <code class=\"language-text\">location</code> with the longest prefix, and then checks regular expressions. If there is a match with a regular expression, nginx picks this <code class=\"language-text\">location</code> or, otherwise, it picks the one remembered earlier.</p>\n</blockquote>\n<h3>Load balancing</h3>\n<p>这部分来自<a href=\"http://nginx.org/en/docs/http/load_balancing.html\">Using nginx as HTTP load balancer</a></p>\n<div class=\"gatsby-highlight\" data-language=\"nginx\"><pre class=\"language-nginx\"><code class=\"language-nginx\"><span class=\"token keyword\">http</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">upstream</span> myapp1 <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">server</span> srv1<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">server</span> srv2<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">server</span> srv3<span class=\"token punctuation\">.</span>example<span class=\"token punctuation\">.</span>com<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">server</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">listen</span> <span class=\"token number\">80</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">location</span> <span class=\"token operator\">/</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">proxy_pass</span> <span class=\"token keyword\">http</span><span class=\"token punctuation\">:</span><span class=\"token operator\">/</span><span class=\"token operator\">/</span>myapp1<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上游有3个，默认使用round robin。还有其他的几种方式。</p>","frontmatter":{"title":"我的nginx笔记","date":"2019-05-02T09:49:00.000Z","tags":["中文","nginx","web"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/nginx-basics/"}}}