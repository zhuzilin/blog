{"componentChunkName":"component---src-templates-blog-post-js","path":"/OSDI-2020-PipeSwitch-阅读笔记/","webpackCompilationHash":"cb894d9b8b35d24cbcd1","result":{"data":{"markdownRemark":{"html":"<p>这个项目的代码公布在了：<a href=\"https://github.com/netx-repo/PipeSwitch\">https://github.com/netx-repo/PipeSwitch</a> 和 <a href=\"https://github.com/Myrmustin/PipeSwitch_Plus\">https://github.com/Myrmustin/PipeSwitch_Plus</a></p>\n<p>虽然不知道 plus 版本是不是进阶版，但是还是看的 plus 版的。</p>\n<p>对于 C++ 部分，主要加入了 4 个函数：<code class=\"language-text\">allocateSharedCache</code>、<code class=\"language-text\">sendSharedCache</code>、<code class=\"language-text\">recvSharedCache</code>、<code class=\"language-text\">insertSharedCache</code> 和 <code class=\"language-text\">clearSharedCache</code>。</p>\n<h2>C++ 代码</h2>\n<h3>allocateSharedCache</h3>\n<p>就是分配一段显存在 <code class=\"language-text\">PIPESWITCH_shared_ptr</code>，大小为 12GB。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token macro property\"><span class=\"token directive-hash\">#</span><span class=\"token directive keyword\">define</span> <span class=\"token macro-name\">SIZE_SHARED_CACHE</span> <span class=\"token expression\"><span class=\"token punctuation\">(</span><span class=\"token number\">12</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024UL</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024UL</span> <span class=\"token operator\">*</span> <span class=\"token number\">1024UL</span><span class=\"token punctuation\">)</span> </span><span class=\"token comment\">// PipeSwitch</span></span>\n\n  <span class=\"token comment\">/* PipeSwitch: allocate shared GPU memory */</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">allocateSharedCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>recursive_mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cudaError_t err <span class=\"token operator\">=</span> <span class=\"token function\">cudaMalloc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>PIPESWITCH_shared_ptr<span class=\"token punctuation\">,</span> SIZE_SHARED_CACHE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> cudaSuccess<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allocate_shared_cache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>sendSharedCache</h3>\n<p>获取一个跨进程的 handle，并把这个 handle 发出去。</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">  <span class=\"token comment\">/* PipeSwitch: send shared GPU memory */</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">sendSharedCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>recursive_mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cudaIpcMemHandle_t shared_cache_handle<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Pack CUDA pointer</span>\n    cudaError_t err <span class=\"token operator\">=</span> <span class=\"token function\">cudaIpcGetMemHandle</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>shared_cache_handle<span class=\"token punctuation\">,</span> PIPESWITCH_shared_ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> cudaSuccess<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pack_shared_cache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Accept connection</span>\n    <span class=\"token keyword\">int</span> server_fd<span class=\"token punctuation\">,</span> conn_fd<span class=\"token punctuation\">,</span> valread<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">int</span> opt <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> address<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">int</span> addrlen <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>server_fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"socket failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">setsockopt</span><span class=\"token punctuation\">(</span>server_fd<span class=\"token punctuation\">,</span> SOL_SOCKET<span class=\"token punctuation\">,</span> SO_REUSEADDR <span class=\"token operator\">|</span> SO_REUSEPORT<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>opt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>opt<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"setsockopt\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n    address<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> \n    address<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">.</span>s_addr <span class=\"token operator\">=</span> INADDR_ANY<span class=\"token punctuation\">;</span> \n    address<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span> PORT <span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span>server_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>address<span class=\"token punctuation\">,</span>  <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>address<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"bind failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">listen</span><span class=\"token punctuation\">(</span>server_fd<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"listen\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>conn_fd <span class=\"token operator\">=</span> <span class=\"token function\">accept</span><span class=\"token punctuation\">(</span>server_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>address<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>socklen_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>addrlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"accept\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Send the packed pointer</span>\n    <span class=\"token function\">write</span><span class=\"token punctuation\">(</span>conn_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>shared_cache_handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cudaIpcMemHandle_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>conn_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>server_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>recvSharedCache</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">  <span class=\"token comment\">/* PipeSwitch: recv shared GPU memory */</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">recvSharedCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>recursive_mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cudaIpcMemHandle_t shared_cache_handle<span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Connect</span>\n    <span class=\"token keyword\">int</span> conn_fd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr_in</span> serv_addr<span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>conn_fd <span class=\"token operator\">=</span> <span class=\"token function\">socket</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> SOCK_STREAM<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\n Socket creation error \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    serv_addr<span class=\"token punctuation\">.</span>sin_family <span class=\"token operator\">=</span> AF_INET<span class=\"token punctuation\">;</span> \n    serv_addr<span class=\"token punctuation\">.</span>sin_port <span class=\"token operator\">=</span> <span class=\"token function\">htons</span><span class=\"token punctuation\">(</span>PORT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">inet_pton</span><span class=\"token punctuation\">(</span>AF_INET<span class=\"token punctuation\">,</span> <span class=\"token string\">\"127.0.0.1\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">.</span>sin_addr<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nInvalid address/ Address not supported \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">connect</span><span class=\"token punctuation\">(</span>conn_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sockaddr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>serv_addr<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>serv_addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> \n        <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"\\nConnection Failed \\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n        <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Receive packed pointer</span>\n    <span class=\"token function\">read</span><span class=\"token punctuation\">(</span>conn_fd<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>shared_cache_handle<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>cudaIpcMemHandle_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    \n    <span class=\"token comment\">// Extract the pointer</span>\n    cudaError_t err <span class=\"token operator\">=</span> <span class=\"token function\">cudaIpcOpenMemHandle</span><span class=\"token punctuation\">(</span>\n      \t<span class=\"token operator\">&amp;</span>PIPESWITCH_shared_ptr<span class=\"token punctuation\">,</span> shared_cache_handle<span class=\"token punctuation\">,</span> cudaIpcMemLazyEnablePeerAccess<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>err <span class=\"token operator\">!=</span> cudaSuccess<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">perror</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"extract_shared_cache\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span>EXIT_FAILURE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>conn_fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>insertSharedCache</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">  <span class=\"token comment\">/* PipeSwitch: insert shared GPU memory to large block pool */</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">insertSharedCache</span><span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">,</span> size_t offset<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>recursive_mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> device<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">C10_CUDA_CHECK</span><span class=\"token punctuation\">(</span><span class=\"token function\">cudaGetDevice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    Block<span class=\"token operator\">*</span> block <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token function\">Block</span><span class=\"token punctuation\">(</span>\n      device<span class=\"token punctuation\">,</span> \n      cuda<span class=\"token operator\">::</span><span class=\"token function\">getCurrentCUDAStream</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n      size<span class=\"token punctuation\">,</span> \n      <span class=\"token operator\">&amp;</span>large_blocks<span class=\"token punctuation\">,</span> \n      <span class=\"token keyword\">static_cast</span><span class=\"token operator\">&lt;</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>PIPESWITCH_shared_ptr<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// allocated_size += size;</span>\n    large_blocks<span class=\"token punctuation\">.</span><span class=\"token function\">insert</span><span class=\"token punctuation\">(</span>block<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">get_stats_for_device</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">increaseCached</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>clearSharedCache</h3>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">  <span class=\"token comment\">/* PipeSwitch: clear shared GPU memory */</span>\n  <span class=\"token keyword\">void</span> <span class=\"token function\">clearSharedCache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    std<span class=\"token operator\">::</span>lock_guard<span class=\"token operator\">&lt;</span>std<span class=\"token operator\">::</span>recursive_mutex<span class=\"token operator\">></span> <span class=\"token function\">lock</span><span class=\"token punctuation\">(</span>mutex<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">int</span> device<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">C10_CUDA_CHECK</span><span class=\"token punctuation\">(</span><span class=\"token function\">cudaGetDevice</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    cudaStream_t stream <span class=\"token operator\">=</span> cuda<span class=\"token operator\">::</span><span class=\"token function\">getCurrentCUDAStream</span><span class=\"token punctuation\">(</span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Begin Clear\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> large_blocks<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> large_blocks<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      Block<span class=\"token operator\">*</span> block <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// 这里没有 prev 没有 next 说明是没有进行切分的</span>\n      <span class=\"token comment\">// 同时 stream 要是 PipeSwitch 里面设置的 cuda_stream_for_parameter</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token operator\">-></span>stream <span class=\"token operator\">==</span> stream <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>block<span class=\"token operator\">-></span>prev <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>block<span class=\"token operator\">-></span>next<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Clear\"</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> block<span class=\"token operator\">-></span>ptr <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span>\n                  <span class=\"token operator\">&lt;&lt;</span> block<span class=\"token operator\">-></span>size <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\", \"</span> <span class=\"token operator\">&lt;&lt;</span> block<span class=\"token operator\">-></span>allocated <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> <span class=\"token keyword\">auto</span><span class=\"token operator\">&amp;</span> stats <span class=\"token operator\">=</span> <span class=\"token function\">get_stats_for_device</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">-></span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">get_stats_for_device</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">-></span>device<span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">decreaseCached</span><span class=\"token punctuation\">(</span>block<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">auto</span> cur <span class=\"token operator\">=</span> it<span class=\"token punctuation\">;</span>\n        <span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n        large_blocks<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>cur<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">delete</span> block<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token operator\">++</span>it<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    std<span class=\"token operator\">::</span>cout <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"End Clear\"</span> <span class=\"token operator\">&lt;&lt;</span> std<span class=\"token operator\">::</span>endl<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// allocated_size = 0;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h3>kSmallSize</h3>\n<p>除此之外，PipeSwitch 还把 <code class=\"language-text\">kSmallSize</code> 设置为了 1。这意味着这样几件事：</p>\n<ul>\n<li><code class=\"language-text\">get_pool</code> 永远使用 <code class=\"language-text\">large_blocks</code>；</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">  BlockPool<span class=\"token operator\">&amp;</span> <span class=\"token function\">get_pool</span><span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">&lt;=</span> kSmallSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> small_blocks<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> large_blocks<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>在 <code class=\"language-text\">THCCachingAllocator</code> 中，有  <code class=\"language-text\">large_blocks</code> 和 <code class=\"language-text\">small_blocks</code> 两个 <code class=\"language-text\">BlockPool</code>（其实就是 <code class=\"language-text\">std::set</code>）。内部 block 的排序方式如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">bool</span> <span class=\"token function\">BlockComparator</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> Block<span class=\"token operator\">*</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> Block<span class=\"token operator\">*</span> b<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">-></span>device <span class=\"token operator\">!=</span> b<span class=\"token operator\">-></span>device<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">-></span>device <span class=\"token operator\">&lt;</span> b<span class=\"token operator\">-></span>device<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">-></span>stream <span class=\"token operator\">!=</span> b<span class=\"token operator\">-></span>stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>a<span class=\"token operator\">-></span>stream <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>b<span class=\"token operator\">-></span>stream<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>a<span class=\"token operator\">-></span>size <span class=\"token operator\">!=</span> b<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> a<span class=\"token operator\">-></span>size <span class=\"token operator\">&lt;</span> b<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>a<span class=\"token operator\">-></span>ptr <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>b<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里比较上的一个重点在于先比较 device，再比较 stream，最后再找合适的 size。而在具体查找 block 的时候，更是只能允许选择同一个 stream 上的内存：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">    <span class=\"token keyword\">auto</span> find_free_block <span class=\"token operator\">=</span> <span class=\"token punctuation\">[</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>Block<span class=\"token operator\">*</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">auto</span> it <span class=\"token operator\">=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">lower_bound</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>search_key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>it <span class=\"token operator\">!=</span> pool<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>device <span class=\"token operator\">==</span> device <span class=\"token operator\">&amp;&amp;</span>\n          <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>it<span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>stream <span class=\"token operator\">==</span> stream<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        Block<span class=\"token operator\">*</span> block <span class=\"token operator\">=</span> <span class=\"token operator\">*</span>it<span class=\"token punctuation\">;</span>\n        pool<span class=\"token punctuation\">.</span><span class=\"token function\">erase</span><span class=\"token punctuation\">(</span>it<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> block<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token keyword\">return</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这个机制使得 PipeSwitch 可以在不同的 stream 里面共用同一段显存。</p>\n<ul>\n<li>对于 <code class=\"language-text\">large_blocks</code>，只要有剩余，就会拆分；</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">  <span class=\"token keyword\">bool</span> <span class=\"token function\">should_split</span><span class=\"token punctuation\">(</span>Block<span class=\"token operator\">*</span> block<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    size_t remaining <span class=\"token operator\">=</span> block<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> size<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token operator\">-></span>pool <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>small_blocks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> remaining <span class=\"token operator\">>=</span> kMinBlockSize<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>block<span class=\"token operator\">-></span>pool <span class=\"token operator\">==</span> <span class=\"token operator\">&amp;</span>large_blocks<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 对于 large blocks，如果有 remaining，就一定拆分</span>\n      <span class=\"token keyword\">return</span> remaining <span class=\"token operator\">></span> kSmallSize<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">AT_ERROR</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"should_split: invalid pool\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>因为由上面一点，知道所有的 block 都在 <code class=\"language-text\">large_blocks</code> 里面，所以可以说所有的 block 都会继续拆分（感觉这样会出现比较严重的 fragmentation）。</p>\n<ul>\n<li>永远不会用 <code class=\"language-text\">kSmallBuffer</code></li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\">  size_t <span class=\"token function\">get_allocation_size</span><span class=\"token punctuation\">(</span>size_t size<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">&lt;=</span> kSmallSize<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> kSmallBuffer<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 2 MB</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>size <span class=\"token operator\">&lt;</span> kMinLargeAlloc<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">return</span> kLargeBuffer<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 20 MB</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// 2N MB</span>\n      <span class=\"token keyword\">return</span> kRoundLarge <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>size <span class=\"token operator\">+</span> kRoundLarge <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> kRoundLarge<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<h2>python 代码</h2>\n<div class=\"gatsby-highlight\" data-language=\"python\"><pre class=\"language-python\"><code class=\"language-python\"><span class=\"token comment\"># PipeSwitch</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">allocate_shared_cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> _initialized<span class=\"token punctuation\">:</span>\n        torch<span class=\"token punctuation\">.</span>_C<span class=\"token punctuation\">.</span>_cuda_allocateSharedCache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># PipeSwitch</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">send_shared_cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> _initialized<span class=\"token punctuation\">:</span>\n        torch<span class=\"token punctuation\">.</span>_C<span class=\"token punctuation\">.</span>_cuda_sendSharedCache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># PipeSwitch</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">recv_shared_cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> _initialized<span class=\"token punctuation\">:</span>\n        torch<span class=\"token punctuation\">.</span>_C<span class=\"token punctuation\">.</span>_cuda_recvSharedCache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># PipeSwitch</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">insert_shared_cache_for_parameter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> _initialized<span class=\"token punctuation\">:</span>\n        torch<span class=\"token punctuation\">.</span>_C<span class=\"token punctuation\">.</span>_cuda_insertSharedCacheForParameter<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># PipeSwitch</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">insert_shared_cache_for_computation</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> _initialized<span class=\"token punctuation\">:</span>\n        torch<span class=\"token punctuation\">.</span>_C<span class=\"token punctuation\">.</span>_cuda_insertSharedCacheForComputation<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\"># PipeSwitch</span>\n<span class=\"token keyword\">def</span> <span class=\"token function\">clear_shared_cache</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">:</span>\n    <span class=\"token keyword\">if</span> _initialized<span class=\"token punctuation\">:</span>\n        torch<span class=\"token punctuation\">.</span>_C<span class=\"token punctuation\">.</span>_cuda_clearSharedCache<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里可能仅仅需要分辨的是 insert for parameter 和 insert for computation 了：</p>\n<div class=\"gatsby-highlight\" data-language=\"c++\"><pre class=\"language-c++\"><code class=\"language-c++\">// PipeSwitch\nPyObject * THCPModule_insertSharedCacheForParameter(PyObject *_unused, PyObject *noargs)\n{\n  HANDLE_TH_ERRORS\n      c10::cuda::CUDACachingAllocator::insertSharedCache(\n    \t\t\t1UL * 1024UL * 1024UL * 1024UL, 0);\n  END_HANDLE_TH_ERRORS\n  Py_RETURN_NONE;\n}\n\n// PipeSwitch\nPyObject * THCPModule_insertSharedCacheForComputation(PyObject *_unused, PyObject *noargs)\n{\n  HANDLE_TH_ERRORS\n      c10::cuda::CUDACachingAllocator::insertSharedCache(\n    \t\t\t11UL * 1024UL * 1024UL * 1024UL, 1UL * 1024UL * 1024UL * 1024UL);\n  END_HANDLE_TH_ERRORS\n  Py_RETURN_NONE;\n}</code></pre></div>\n<p>相当于就是前面 1G 用作参数，后面 11G 用作计算。</p>","frontmatter":{"title":"OSDI 2020 PipeSwitch 阅读笔记","date":"2021-11-02T21:30:00.000Z","tags":["paper"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/OSDI-2020-PipeSwitch-阅读笔记/"}}}