{"componentChunkName":"component---src-templates-blog-post-js","path":"/工作快-2-年，捋一捋自己的思路/","webpackCompilationHash":"36b38c574f1d3c5e8b77","result":{"data":{"markdownRemark":{"html":"<p>一晃之间，就到了 21 年年底，自己参加工作也快 2 年了。最近自己脑子有点乱，想写点东西捋一捋~ 发到网上来，也是觉得可能有不少在类似阶段的朋友（尤其是和我一样转专业的朋友）有同样的困惑和思考，希望能和大家一起讨论讨论。</p>\n<p>先来讲一讲这两年我主要干了啥。在刚开始工作的时候，我给自己定的目标有两个，一个是去快速掌握工作所必备的技能，尽可能做到在一个小领域里有独当一面的能力；另一个则是补充 CS 各个领域，尤其是系统领域的常识。坦白讲，这两件事背后都来源于自己的非科班出身（力学专业）。由于自己不是计算机专业读出来的，我完全不了解一个国内培养出来的优秀的应届生该具备什么样的能力，所以也不清楚公司以及行业对我的要求是什么样的。不过，幸运的是，这种对未知的恐惧很大程度上推动了我，让我能够在这两年间有了比较明显的成长。</p>\n<p>首先说说和工作紧密相关的小领域。我最初加入的团队主要是和深度学习训练加速相关的工作，所以我比较深入地了解了主流的深度学习训练框架以及相关工具，比如 tensorflow、pytorch、horovod 等等，也基本都给这些框架贡献过代码。对训练框架的了解主要分为几个阶段。</p>\n<p>第一个阶段就是看源码，熟悉项目。当时需要我去简单改写 tensorflow，所以自然而然地要去研究 tensorflow 的源码。看源码这个事让我收益颇丰，它可以让人知其然也能知其所以然。很多时候在宏观上看似正确的设计，在源码层面上是禁不起推敲的。在这个过程中，我也比较幸运地总结出了适合自己的读源码的方式，怎么做笔记，怎么要带着问题去看之类的。具体方法因人而异，在这里就不写了。这部分的积累让我不怵看源码这个事儿了，后续不管是去看 pytorch, horovod 这种框架，还是 nccl 这样的底层库，或者是公司内的奇形怪状的项目，基本也能比较快速地给出一个针对需求的改动方案。</p>\n<p>看源码的一个无心插柳的收获则是在设计模式上。虽然之前也尝试去看过 gang of four 的设计模式，但是在不结合有足够复杂性的项目的时候，设计模式这种心法口诀类型的东西实在是很难吸收。这里非常感谢 tf1 的 C++ 部分优秀的代码风格和繁复的设计，让我对一些设计模式有了实感。</p>\n<p>第二个阶段是参与社区，发 PR。在读 tensorflow 代码的过程中，时不时会发现一些小 bug，所以就慢慢开始向社区提 PR。第一次被 merge 进去的时候还是很开心的，觉得自己也算是为世界级的项目作出过贡献了。所以去年非常执迷于给项目找 bug，或者直接去解决社区里的问题，来来回回可能 merge 了二三十个进 tf，年初的时候相对比较闲，又给 horovod, pytorch 和 tvm 提了些代码，成了它们的 contributor。现在自己基本已经趋于理智了，可以比较平和地看待参与社区这个问题了。</p>\n<p>从技术提升的角度来看，把很大的精力投入进 tensorflow，pytorch 这样大企业主导的项目收益不是很大。一个原因是这些公司已经投入了很大的团队维护这些项目，最有意思的东西肯定要留给内部的人消化（人家也要升职的嘛），这使得外部的开发者很难去深度参与某一个模块儿，只能每个地方都薄薄地去做一点工作。当然，万事都有例外，对于一些比较小的子模块，可能团队的规模并不大，那么也是可能获取到更大的自由度的，例如我在参与的过程中发现 <code class=\"language-text\">tf.data</code> 的社区管理者比较友好，并且就两三个人在维护，所以给 <code class=\"language-text\">tf.data</code> 提了比较多的东西。</p>\n<p>另一个原因则是时差，因为很多优秀项目的维护者都在美帝，这让在 github issue 上和他们交流成了现代版飞鸽传书。所以一个很简单的东西就可能要一两个月才能合并进去。交流的低效让人丧失了交流的欲望，也丧失了参与社区的很重要的一个动机。也是因为能交流的次数少，所以我都会尽可能地一次性把自己的 pr 或者 issue 讲清楚，降低时间成本，例如<a href=\"https://github.com/tensorflow/tensorflow/issues/41626\">这个 issue</a>。这倒是间接锻炼了我的英文写作能力，上次写这么长的东西，可能还是在考 GRE 的时候...</p>\n<p>第三个阶段则是自己找活儿，想 idea。作为偏 infra 的团队的成员，仅仅是了解训练框架是不够的，关键在于如何能在已有的工具上做出有价值的工作。这个阶段的难度一下子就提升了。打个不恰当的比方，前两个阶段类似于本科时候学专业课，第三阶段则是读博的时候写 proposal。目前的我还不具备独立提出有意义的 idea 的能力，在今年的比较长的一段时间都在四处乱撞，不停地进行 “哇，感觉这是个不错的想法呀！” 和 “这没啥用呀...” 之间反复横跳。因为深度学习框架，或者 MLSys 并不是一个独立的一块儿</p>","frontmatter":{"title":"工作快 2 年，捋一捋自己的思路","date":null,"tags":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/工作快-2-年，捋一捋自己的思路/"}}}