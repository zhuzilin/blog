{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-lab3/","webpackCompilationHash":"b675513abbbda0859f3e","result":{"data":{"markdownRemark":{"html":"<p>注意，在运行lab3之前，需要修改<code class=\"language-text\">kern/kernel.ld</code>文件中的<code class=\"language-text\">bss</code>部分为：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\t.bss : {\n\t\tPROVIDE(edata = .);\n\t\t*(.dynbss)\n\t\t*(.bss .bss.*)\n\t\t*(COMMON)\n\t\tPROVIDE(end = .);\n\t}</code></pre></div>\n<p>非常感谢解决了这个问题的同学，解决的原文在<a href=\"https://zhuanlan.zhihu.com/p/46838542\">这里</a>。</p>\n<h2>Part A: User Environments and Exception Handling</h2>\n<p>首先我们需要看一下新的<code class=\"language-text\">inc/env.h</code>文件，其中包含了user environment的基本定义：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> int32_t envid_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// An environment ID 'envid_t' has three parts:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// +1+---------------21-----------------+--------10--------+</span>\n<span class=\"token comment\">// |0|          Uniqueifier             |   Environment    |</span>\n<span class=\"token comment\">// | |                                  |      Index       |</span>\n<span class=\"token comment\">// +------------------------------------+------------------+</span>\n<span class=\"token comment\">//                                       \\--- ENVX(eid) --/</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The environment index ENVX(eid) equals the environment's index in the</span>\n<span class=\"token comment\">// 'envs[]' array.  The uniqueifier distinguishes environments that were</span>\n<span class=\"token comment\">// created at different times, but share the same environment index.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// All real environments are greater than 0 (so the sign bit is zero).</span>\n<span class=\"token comment\">// envid_ts less than 0 signify errors.  The envid_t == 0 is special, and</span>\n<span class=\"token comment\">// stands for the current environment.</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> LOG2NENV\t\t10</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> NENV\t\t\t(1 &lt;&lt; LOG2NENV)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENVX(envid)\t\t((envid) &amp; (NENV - 1))</span>\n\n<span class=\"token comment\">// Values of env_status in struct Env</span>\n<span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{</span>\n\tENV_FREE <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\tENV_DYING<span class=\"token punctuation\">,</span>\n\tENV_RUNNABLE<span class=\"token punctuation\">,</span>\n\tENV_RUNNING<span class=\"token punctuation\">,</span>\n\tENV_NOT_RUNNABLE\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Special environment types</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnvType</span> <span class=\"token punctuation\">{</span>\n\tENV_TYPE_USER <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Trapframe</span> env_tf<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// Saved registers</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>env_link<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Next free Env</span>\n\tenvid_t env_id<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// Unique environment identifier</span>\n\tenvid_t env_parent_id<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// env_id of this env's parent</span>\n\t<span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnvType</span> env_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Indicates special system environments</span>\n\t<span class=\"token keyword\">unsigned</span> env_status<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Status of the environment</span>\n\tuint32_t env_runs<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Number of times environment has run</span>\n\n\t<span class=\"token comment\">// Address space</span>\n\tpde_t <span class=\"token operator\">*</span>env_pgdir<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Kernel virtual address of page dir</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>虽然这个lab只会去创建一个user environment，但是为了之后的lab，需要能够支持多个environment。</p>\n<p><code class=\"language-text\">kern/env.c</code>的前几行定义了kernel中的3个和环境相关的重要全局变量：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>envs <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// All environments</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>curenv <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// The current env</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>env_free_list<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// Free environment list</span>\n\t\t\t\t\t<span class=\"token comment\">// (linked by Env->env_link)</span></code></pre></div>\n<p>当JOS启动的时候，<code class=\"language-text\">envs</code>会指向一个<code class=\"language-text\">struct Env</code>的数组表示系统中所有的环境。在JOS的设计中，最多有<code class=\"language-text\">NENV</code>（1024）个环境（一般远远达不到这个值）。这个数组中会存在一个能够保存这<code class=\"language-text\">NENV</code>个环境的数据结构。</p>\n<p>就像<code class=\"language-text\">page_free_list</code>一样，JOS有一个<code class=\"language-text\">env_free_list</code>用来表示inactive Env，用来进行allocation, deallocation。<code class=\"language-text\">curenv</code>是当前正在执行的环境的指针，初始化为<code class=\"language-text\">NULL</code>。</p>\n<h3>Environment State</h3>\n<p>回到<code class=\"language-text\">inc/env.h</code>，我们来看一下<code class=\"language-text\">Env</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Trapframe</span> env_tf<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// Saved registers</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>env_link<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Next free Env</span>\n\tenvid_t env_id<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// Unique environment identifier</span>\n\tenvid_t env_parent_id<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// env_id of this env's parent</span>\n\t<span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnvType</span> env_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Indicates special system environments</span>\n\t<span class=\"token keyword\">unsigned</span> env_status<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Status of the environment</span>\n\tuint32_t env_runs<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Number of times environment has run</span>\n\n\t<span class=\"token comment\">// Address space</span>\n\tpde_t <span class=\"token operator\">*</span>env_pgdir<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Kernel virtual address of page dir</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>对于这些field的更详细的解释是：</p>\n<ul>\n<li><code class=\"language-text\">env_tf</code>: 当该环境不运行的时候保存寄存器，比如从user mode到kernel mode的转换过程。</li>\n<li><code class=\"language-text\">env_link</code>: 指向<code class=\"language-text\">env_free_list</code>里的下一个<code class=\"language-text\">Env</code>。</li>\n<li><code class=\"language-text\">env_id</code>: 保存一个uniquely identifier。注意如果一个环境被释放了，之后又有环境用了这个<code class=\"language-text\">struct Env</code>，他们的<code class=\"language-text\">env_id</code>会不同。</li>\n<li><code class=\"language-text\">env_parent_id</code>:  保存创建了这个环境的环境的<code class=\"language-text\">env_id</code>。从而可以建立一个树，从而方便一些security decision，也就是决定某个环境是否有某个权限。</li>\n<li><code class=\"language-text\">env_type</code>: 用来区分特殊环境的，普通的都是<code class=\"language-text\">ENV_TYPE_USER</code>。</li>\n<li>\n<p><code class=\"language-text\">env_status</code>: 状态，具体取值如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Values of env_status in struct Env</span>\n<span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{</span>\n\tENV_FREE <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// inactive, Env在env_free上</span>\n\tENV_DYING<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// zombie, environment, 下次trap到kernel的时候会被释放</span>\n\tENV_RUNNABLE<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// waiting to run</span>\n\tENV_RUNNING<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// currently running</span>\n\tENV_NOT_RUNNABLE  <span class=\"token comment\">// currently active, but not ready to run，如等待IPC</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n</li>\n<li><code class=\"language-text\">env_pgdir</code>: 该环境的page directory</li>\n</ul>\n<p>同Unix process一样，JOS环境结合了thread与address space。thread用保存的寄存器确定（<code class=\"language-text\">env_tf</code>），address space用<code class=\"language-text\">env_pgdir</code>确定。kernel必须要设置好这两者以成功运行某个环境。</p>\n<h3>Allocating the Environments Array</h3>\n<p>修改<code class=\"language-text\">mem_init</code>以分配<code class=\"language-text\">envs</code>的地址。并把envs映射到kernel page directory的对应位置。</p>\n<h3>Exercise 1</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////</span>\n\t<span class=\"token comment\">// Make 'envs' point to an array of size 'NENV' of 'struct Env'.</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\tenvs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">boot_alloc</span><span class=\"token punctuation\">(</span>NENV<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">//////////////////////////////////////////////////////////////////////</span>\n\t<span class=\"token comment\">// Map the 'envs' array read-only by the user at linear address UENVS</span>\n\t<span class=\"token comment\">// (ie. perm = PTE_U | PTE_P).</span>\n\t<span class=\"token comment\">// Permissions:</span>\n\t<span class=\"token comment\">//    - the new image at UENVS  -- kernel R, user R</span>\n\t<span class=\"token comment\">//    - envs itself -- kernel RW, user NONE</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">,</span> UENVS<span class=\"token punctuation\">,</span> PTSIZE<span class=\"token punctuation\">,</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>envs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意后面的这个映射位置以及大小是参照的JOS的虚拟内存分布。写完之后运行kernel应该会出现好几个succeeded:</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">check_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_alloc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_kern_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_installed_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span></code></pre></div>\n<h3>Creating and Running Environments</h3>\n<p>因为现在还没有file system，所以要运行一个用户环境需要让kernel去加载一个静态的二进制image。这些影响都在<code class=\"language-text\">obj/user/</code>中，这些在<code class=\"language-text\">kern/Makefrag</code>中也有体现：</p>\n<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token comment\"># Binary program images to embed within the kernel.</span>\n<span class=\"token comment\"># Binary files for LAB3</span>\nKERN_BINFILES <span class=\"token operator\">:=</span>\tuser/hello \\\n\t\t\tuser/buggyhello \\\n\t\t\tuser/buggyhello2 \\\n\t\t\tuser/evilhello \\\n\t\t\tuser/testbss \\\n\t\t\tuser/divzero \\\n\t\t\tuser/breakpoint \\\n\t\t\tuser/softint \\\n\t\t\tuser/badsegment \\\n\t\t\tuser/faultread \\\n\t\t\tuser/faultreadkernel \\\n\t\t\tuser/faultwrite \\\n\t\t\tuser/faultwritekernel\n...\n<span class=\"token comment\"># How to build the kernel itself</span>\n<span class=\"token symbol\"><span class=\"token variable\">$</span>(OBJDIR)/kern/kernel</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>KERN_OBJFILES<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>KERN_BINFILES<span class=\"token punctuation\">)</span> kern/kernel.ld \\\n\t  <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJDIR<span class=\"token punctuation\">)</span>/.vars.KERN_LDFLAGS\n\t<span class=\"token operator\">@</span>echo + ld <span class=\"token variable\">$@</span>\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>LD<span class=\"token punctuation\">)</span> -o <span class=\"token variable\">$@</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>KERN_LDFLAGS<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>KERN_OBJFILES<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>GCC_LIB<span class=\"token punctuation\">)</span> -b binary <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>KERN_BINFILES<span class=\"token punctuation\">)</span>\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJDUMP<span class=\"token punctuation\">)</span> -S <span class=\"token variable\">$@</span> > <span class=\"token variable\">$@.asm</span>\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">)</span> -n <span class=\"token variable\">$@</span> > <span class=\"token variable\">$@.sym</span></code></pre></div>\n<p>这里的<code class=\"language-text\">-b binary</code>表示把文件当成raw unterpreted binary而不是编译器生成的<code class=\"language-text\">.o</code>文件。如果查看<code class=\"language-text\">obj/kern/kernel.sym</code>，可以看到一系列神奇的symbol</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">00008acc A _binary_obj_user_hello_size\n00008ad0 A _binary_obj_user_badsegment_size\n00008ad0 A _binary_obj_user_breakpoint_size\n00008ad0 A _binary_obj_user_buggyhello_size\n00008ad0 A _binary_obj_user_evilhello_size\n00008ad0 A _binary_obj_user_faultread_size\n00008ad0 A _binary_obj_user_faultwrite_size\n00008ad0 A _binary_obj_user_softint_size\n00008ad8 A _binary_obj_user_faultreadkernel_size\n00008ad8 A _binary_obj_user_faultwritekernel_size\n00008ae4 A _binary_obj_user_divzero_size\n00008ae8 A _binary_obj_user_testbss_size\n00008aec A _binary_obj_user_buggyhello2_size</code></pre></div>\n<p>linker生成了这些symbol以让kernel可以调用这些二进制文件。</p>\n<p>在<code class=\"language-text\">kern/init.c</code>中，<code class=\"language-text\">i386_init()</code>函数会调用这些二进制文件中的一个（默认是<code class=\"language-text\">user_hello</code>）。但是这个函数里面和环境相关的部分都还没有完成，下面就是要填充上这些函数了。</p>\n<h3>Exercise 2</h3>\n<p>完成<code class=\"language-text\">kern/env.c</code>中的如下函数：</p>\n<ul>\n<li>\n<p><code class=\"language-text\">env_init()</code></p>\n<p>初始化<code class=\"language-text\">envs</code>与<code class=\"language-text\">env_free_list</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Mark all environments in 'envs' as free, set their env_ids to 0,</span>\n<span class=\"token comment\">// and insert them into the env_free_list.</span>\n<span class=\"token comment\">// Make sure the environments are in the free list in the same order</span>\n<span class=\"token comment\">// they are in the envs array (i.e., so that the first call to</span>\n<span class=\"token comment\">// env_alloc() returns envs[0]).</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">env_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Set up envs array</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>envs<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>envs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tenv_free_list <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>NENV<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tenvs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>env_link <span class=\"token operator\">=</span> env_free_list<span class=\"token punctuation\">;</span>\n\t\tenv_free_list <span class=\"token operator\">=</span> envs <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// Per-CPU part of the initialization</span>\n\t<span class=\"token function\">env_init_percpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意这里注释要求<code class=\"language-text\">env_free_list</code>顺序和<code class=\"language-text\">envs</code>的一样所以这里和<code class=\"language-text\">page_init</code>的顺序相反。（不明白为啥...）</p>\n</li>\n<li>\n<p><code class=\"language-text\">env_setup_vm()</code></p>\n<p>把初始化<code class=\"language-text\">env_pgdir</code>，并把其中的kernel部分的内存分配好。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Initialize the kernel virtual memory layout for environment e.</span>\n<span class=\"token comment\">// Allocate a page directory, set e->env_pgdir accordingly,</span>\n<span class=\"token comment\">// and initialize the kernel portion of the new environment's address space.</span>\n<span class=\"token comment\">// Do NOT (yet) map anything into the user portion</span>\n<span class=\"token comment\">// of the environment's virtual address space.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns 0 on success, &lt; 0 on error.  Errors include:</span>\n<span class=\"token comment\">//\t-E_NO_MEM if page directory or table could not be allocated.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">env_setup_vm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Allocate a page for the page directory</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token function\">page_alloc</span><span class=\"token punctuation\">(</span>ALLOC_ZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Now, set e->env_pgdir and initialize the page directory.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Hint:</span>\n\t<span class=\"token comment\">//    - The VA space of all envs is identical above UTOP</span>\n\t<span class=\"token comment\">//\t(except at UVPT, which we've set below).</span>\n\t<span class=\"token comment\">//\tSee inc/memlayout.h for permissions and layout.</span>\n\t<span class=\"token comment\">//\tCan you use kern_pgdir as a template?  Hint: Yes.</span>\n\t<span class=\"token comment\">//\t(Make sure you got the permissions right in Lab 2.)</span>\n\t<span class=\"token comment\">//    - The initial VA below UTOP is empty.</span>\n\t<span class=\"token comment\">//    - You do not need to make any more calls to page_alloc.</span>\n\t<span class=\"token comment\">//    - Note: In general, pp_ref is not maintained for</span>\n\t<span class=\"token comment\">//\tphysical pages mapped only above UTOP, but env_pgdir</span>\n\t<span class=\"token comment\">//\tis an exception -- you need to increment env_pgdir's</span>\n\t<span class=\"token comment\">//\tpp_ref for env_free to work correctly.</span>\n\t<span class=\"token comment\">//    - The functions in kern/pmap.h are handy.</span>\n\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\te<span class=\"token operator\">-></span>env_pgdir <span class=\"token operator\">=</span> <span class=\"token function\">page2kva</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>pp_ref<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> kern_pgdir<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// UVPT maps the env's own page table read-only.</span>\n\t<span class=\"token comment\">// Permissions: kernel R, user R</span>\n\te<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">[</span><span class=\"token function\">PDX</span><span class=\"token punctuation\">(</span>UVPT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> PTE_P <span class=\"token operator\">|</span> PTE_U<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意这里用内存复制是因为<code class=\"language-text\">boot_region_map</code>是一个静态函数，不能调用。</p>\n</li>\n<li>\n<p><code class=\"language-text\">region_alloc</code></p>\n<p>在当前环境下在虚拟地址<code class=\"language-text\">va</code>处分配长为<code class=\"language-text\">len</code>的内存。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Allocate len bytes of physical memory for environment env,</span>\n<span class=\"token comment\">// and map it at virtual address va in the environment's address space.</span>\n<span class=\"token comment\">// Does not zero or otherwise initialize the mapped pages in any way.</span>\n<span class=\"token comment\">// Pages should be writable by user and kernel.</span>\n<span class=\"token comment\">// Panic if any allocation attempt fails.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">region_alloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token comment\">// (But only if you need it for load_icode.)</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Hint: It is easier to use region_alloc if the caller can pass</span>\n\t<span class=\"token comment\">//   'va' and 'len' values that are not page-aligned.</span>\n\t<span class=\"token comment\">//   You should round va down, and round (va + len) up.</span>\n\t<span class=\"token comment\">//   (Watch out for corner-cases!)</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> end <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDUP</span><span class=\"token punctuation\">(</span>va <span class=\"token operator\">+</span> len<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> v <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token function\">page_alloc</span><span class=\"token punctuation\">(</span>ALLOC_ZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"region_alloc: %e\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">page_insert</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> PTE_U <span class=\"token operator\">|</span> PTE_W <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"region_alloc: %e\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">load_icode()</code></p>\n<p>设置initial program binary, stack与processor flags。如注释所说，主要是模仿<code class=\"language-text\">boot/main.c</code>中的函数。注意需要切换<code class=\"language-text\">pgdir</code>，因为进入这个函数的时候是kernel mode，但是分配内存要在用户的地址空间分配。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Set up the initial program binary, stack, and processor flags</span>\n<span class=\"token comment\">// for a user process.</span>\n<span class=\"token comment\">// This function is ONLY called during kernel initialization,</span>\n<span class=\"token comment\">// before running the first user-mode environment.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// This function loads all loadable segments from the ELF binary image</span>\n<span class=\"token comment\">// into the environment's user memory, starting at the appropriate</span>\n<span class=\"token comment\">// virtual addresses indicated in the ELF program header.</span>\n<span class=\"token comment\">// At the same time it clears to zero any portions of these segments</span>\n<span class=\"token comment\">// that are marked in the program header as being mapped</span>\n<span class=\"token comment\">// but not actually present in the ELF file - i.e., the program's bss section.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// All this is very similar to what our boot loader does, except the boot</span>\n<span class=\"token comment\">// loader also needs to read the code from disk.  Take a look at</span>\n<span class=\"token comment\">// boot/main.c to get ideas.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Finally, this function maps one page for the program's initial stack.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// load_icode panics if it encounters problems.</span>\n<span class=\"token comment\">//  - How might load_icode fail?  What might be wrong with the given input?</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">load_icode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">,</span> uint8_t <span class=\"token operator\">*</span>binary<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Hints:</span>\n\t<span class=\"token comment\">//  Load each program segment into virtual memory</span>\n\t<span class=\"token comment\">//  at the address specified in the ELF segment header.</span>\n\t<span class=\"token comment\">//  You should only load segments with ph->p_type == ELF_PROG_LOAD.</span>\n\t<span class=\"token comment\">//  Each segment's virtual address can be found in ph->p_va</span>\n\t<span class=\"token comment\">//  and its size in memory can be found in ph->p_memsz.</span>\n\t<span class=\"token comment\">//  The ph->p_filesz bytes from the ELF binary, starting at</span>\n\t<span class=\"token comment\">//  'binary + ph->p_offset', should be copied to virtual address</span>\n\t<span class=\"token comment\">//  ph->p_va.  Any remaining memory bytes should be cleared to zero.</span>\n\t<span class=\"token comment\">//  (The ELF header should have ph->p_filesz &lt;= ph->p_memsz.)</span>\n\t<span class=\"token comment\">//  Use functions from the previous lab to allocate and map pages.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">//  All page protection bits should be user read/write for now.</span>\n\t<span class=\"token comment\">//  ELF segments are not necessarily page-aligned, but you can</span>\n\t<span class=\"token comment\">//  assume for this function that no two segments will touch</span>\n\t<span class=\"token comment\">//  the same virtual page.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">//  You may find a function like region_alloc useful.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">//  Loading the segments is much simpler if you can move data</span>\n\t<span class=\"token comment\">//  directly into the virtual addresses stored in the ELF binary.</span>\n\t<span class=\"token comment\">//  So which page directory should be in force during</span>\n\t<span class=\"token comment\">//  this function?</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">//  You must also do something with the program's entry point,</span>\n\t<span class=\"token comment\">//  to make sure that the environment starts executing there.</span>\n\t<span class=\"token comment\">//  What?  (See env_run() and env_pop_tf() below.)</span>\n\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Elf</span> <span class=\"token operator\">*</span>elfhdr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Elf</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>binary<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elfhdr<span class=\"token operator\">-></span>e_magic <span class=\"token operator\">!=</span> ELF_MAGIC<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load_icode: not valid elf file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Proghdr</span> <span class=\"token operator\">*</span>ph<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>eph<span class=\"token punctuation\">;</span>\n\tph <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Proghdr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>binary <span class=\"token operator\">+</span> elfhdr<span class=\"token operator\">-></span>e_phoff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\teph <span class=\"token operator\">=</span> ph <span class=\"token operator\">+</span> elfhdr<span class=\"token operator\">-></span>e_phnum<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> ph <span class=\"token operator\">&lt;</span> eph<span class=\"token punctuation\">;</span> ph<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_type <span class=\"token operator\">==</span> ELF_PROG_LOAD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">region_alloc</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ph<span class=\"token operator\">-></span>p_va<span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>p_memsz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>binary <span class=\"token operator\">+</span> ph<span class=\"token operator\">-></span>p_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>p_filesz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\te<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_eip <span class=\"token operator\">=</span> elfhdr<span class=\"token operator\">-></span>e_entry<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Now map one page for the program's initial stack</span>\n\t<span class=\"token comment\">// at virtual address USTACKTOP - PGSIZE.</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token function\">region_alloc</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>USTACKTOP <span class=\"token operator\">-</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">env_create</code></p>\n<p>就是结合上面的两个函数，先<code class=\"language-text\">env_alloc</code>再<code class=\"language-text\">load_icode</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Allocates a new env with env_alloc, loads the named elf</span>\n<span class=\"token comment\">// binary into it with load_icode, and sets its env_type.</span>\n<span class=\"token comment\">// This function is ONLY called during kernel initialization,</span>\n<span class=\"token comment\">// before running the first user-mode environment.</span>\n<span class=\"token comment\">// The new env's parent ID is set to 0.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">env_create</span><span class=\"token punctuation\">(</span>uint8_t <span class=\"token operator\">*</span>binary<span class=\"token punctuation\">,</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnvType</span> type<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">env_alloc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"env_create: %e\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">load_icode</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">env_run()</code></p>\n<p>按照注释的要求一步一步写就好了。注意别忘了最开始<code class=\"language-text\">curenv</code>可能是<code class=\"language-text\">NULL</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Context switch from curenv to env e.</span>\n<span class=\"token comment\">// Note: if this is the first call to env_run, curenv is NULL.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// This function does not return.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">env_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Step 1: If this is a context switch (a new environment is running):</span>\n\t<span class=\"token comment\">//\t   1. Set the current environment (if any) back to</span>\n\t<span class=\"token comment\">//\t      ENV_RUNNABLE if it is ENV_RUNNING (think about</span>\n\t<span class=\"token comment\">//\t      what other states it can be in),</span>\n\t<span class=\"token comment\">//\t   2. Set 'curenv' to the new environment,</span>\n\t<span class=\"token comment\">//\t   3. Set its status to ENV_RUNNING,</span>\n\t<span class=\"token comment\">//\t   4. Update its 'env_runs' counter,</span>\n\t<span class=\"token comment\">//\t   5. Use lcr3() to switch to its address space.</span>\n\t<span class=\"token comment\">// Step 2: Use env_pop_tf() to restore the environment's</span>\n\t<span class=\"token comment\">//\t   registers and drop into user mode in the</span>\n\t<span class=\"token comment\">//\t   environment.</span>\n\n\t<span class=\"token comment\">// Hint: This function loads the new environment's state from</span>\n\t<span class=\"token comment\">//\te->env_tf.  Go back through the code you wrote above</span>\n\t<span class=\"token comment\">//\tand make sure you have set the relevant parts of</span>\n\t<span class=\"token comment\">//\te->env_tf to sensible values.</span>\n\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curenv <span class=\"token operator\">&amp;&amp;</span> curenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">==</span> ENV_RUNNING<span class=\"token punctuation\">)</span>\n\t\tcurenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_RUNNABLE<span class=\"token punctuation\">;</span>\n\tcurenv <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_RUNNING<span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_runs<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">env_pop_tf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// panic(\"env_run not yet implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n</ul>\n<p>完成了这几步之后运行当启动kernel的时候会进行如下操作：</p>\n<ul>\n<li>start (<code class=\"language-text\">kern/entry.S</code>)：kernel的entry，也就是boot loader加载kernel的entry</li>\n<li>\n<p><code class=\"language-text\">i386_init</code>(<code class=\"language-text\">kern/init.c</code>)：上面的entry调用了这个函数，对kernel进行初始化</p>\n<ul>\n<li><code class=\"language-text\">cons_init</code>：初始化console</li>\n<li><code class=\"language-text\">mem_init</code>：初始化kernel address space</li>\n<li><code class=\"language-text\">env_init</code>：初始化所有的环境</li>\n<li><code class=\"language-text\">trap_init</code> (still incomplete at this point)：初始化中断</li>\n<li><code class=\"language-text\">env_create</code>：创建一个用户环境</li>\n<li><code class=\"language-text\">env_run</code>：运行用户环境</li>\n<li><code class=\"language-text\">env_pop_tf</code>：从trapframe中还原这个用户环境所需要的寄存器状态。</li>\n</ul>\n</li>\n</ul>\n<p>完成了exercise 2之后因为并没有初始化中断，所以会在<code class=\"language-text\">user_hello</code>第一次进行system call的时候报triple fault的错。这是因为：When the CPU discovers that it is not set up to handle this system call interrupt, it will generate a general protection exception, find that it can't handle that, generate a double fault exception, find that it can't handle that either, and finally give up with what's known as a \"triple fault\".</p>\n<p>我们可以使用gdb来检测是否进入了用户环境，在<code class=\"language-text\">env_pop_tf</code>中加断点之后逐步运行可以发现其会运行至地址为<code class=\"language-text\">0x800020</code>（可能会有出入）的指令，也就是进入了user mode。然后在<code class=\"language-text\">int $0x30</code>处加断点，之后再运行1步就会进入triple fault了。</p>\n<h3>Handling Interrupts and Exceptions</h3>\n<p>我们来完成中断部分。</p>\n<h3>Exercise 3</h3>\n<p>读书，在这里就不记录了。</p>\n<h3>Basics of Protected Control Transfer</h3>\n<p>Exeception和interrupt都是protected control transfer，其在用户代码不能干涉kernel的情况下，让处理器进入kernel mode。在intel的术语中，interrupt是由处理器外部的异步事件，如IO引起的，而exception是同步运行的代码引起的，如除0或者page fault。</p>\n<p>之前提到过，为了能够做到protected，处理器的中断机制让用户只能进入几个固定的kernel位置。在<code class=\"language-text\">x86</code>中，由2种机制可以确保这种protection。</p>\n<ul>\n<li>\n<p><strong>The Interrupt Descriptor Table （IDT）</strong></p>\n<p>一个在kernel private memory中的表，记录了0~255这256种不同的中断的<code class=\"language-text\">EIP</code>和<code class=\"language-text\">CS</code>，前者是中断进入的kernel code的位置，后者是中断的privilege level（在JOS中都是0，也就是kernel mode）。</p>\n</li>\n<li>\n<p><strong>The Task State Segment （TSS）</strong></p>\n<p>用于存放中断前的old processor state，用于中断之后还原状态。注意这部分也是存储在kernel stack中的。</p>\n<p>尽管TSS很大，可以有很多功用，JOS仅仅记录中断转移到的kernel stack。处理器用<code class=\"language-text\">ESP0</code>和<code class=\"language-text\">SS0</code>来定义kernel mode，且JOS中不使用TSS的其他field。</p>\n</li>\n</ul>\n<h3>Types of Exceptions and Interrupts</h3>\n<p>大于31的中断为software interrupt或hardware interrupt，前者是可以用<code class=\"language-text\">int</code>指令进入，后者是外部硬件发出的。</p>\n<p>在这节里，我们会拓展JOS使其可以处理它自己产生的0~31中断。之后一节我们会处理48(<code class=\"language-text\">0x30</code>)，也就是system call，注意这个48是随机选的。lab4里面我们会处理硬件中断。</p>\n<h3>An Example</h3>\n<p>例如，代码中出现了除0，那么：</p>\n<ol>\n<li>processor会通过TSS中的<code class=\"language-text\">ESP0</code>和<code class=\"language-text\">SS0</code>来切换到kernel stack。在JOS中，这两个值分别是<code class=\"language-text\">GD_KD</code>与<code class=\"language-text\">KSTACKTOP</code>。</li>\n<li>\n<p>处理器会把exception parameter推进kernel stack，其地址始于<code class=\"language-text\">KSTACKTOP</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span> KSTACKTOP             \n<span class=\"token operator\">|</span> <span class=\"token number\">0x00000</span> <span class=\"token operator\">|</span> old SS   <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">4</span>\n<span class=\"token operator\">|</span>      old ESP       <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">8</span>\n<span class=\"token operator\">|</span>     old EFLAGS     <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">12</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">0x00000</span> <span class=\"token operator\">|</span> old CS   <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">16</span>\n<span class=\"token operator\">|</span>      old EIP       <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">20</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span> ESP \n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>             </code></pre></div>\n</li>\n<li>对于除0这种情况，在<code class=\"language-text\">x86</code>中对应的是vector 0，处理器会读取IDT中entry 0，并设置对应的<code class=\"language-text\">CS:IP</code>。</li>\n<li>最后会运行这个exception对应的handler，例如结束程序。</li>\n</ol>\n<p>对于一些特殊的exception，除了会推入上述的5个words，处理器还会退入error code。可以阅读80386的manual来查看不同的error code意味着什么。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span> KSTACKTOP             \n<span class=\"token operator\">|</span> <span class=\"token number\">0x00000</span> <span class=\"token operator\">|</span> old SS   <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">4</span>\n<span class=\"token operator\">|</span>      old ESP       <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">8</span>\n<span class=\"token operator\">|</span>     old EFLAGS     <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">12</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">0x00000</span> <span class=\"token operator\">|</span> old CS   <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">16</span>\n<span class=\"token operator\">|</span>      old EIP       <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">|</span>     error code     <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">24</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span> ESP\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>             </code></pre></div>\n<h3>Nested Exceptions and Interrupts</h3>\n<p>中断即可以在user mode中产生，也可以从kernel mode中产生。但是<code class=\"language-text\">x86</code>处理器只会在从user到kernel的过程中自动保存old register state。如果发生中断时已经在kernel里了，CPU只会继续向同样的kernel stack中推入值，从而使kernel可以处理嵌套的中断。</p>\n<p>具体来说，因为不需要换栈，所以就不需要保存<code class=\"language-text\">SS</code>与<code class=\"language-text\">ESP</code>，所以handler眼中的第二个中断对应的stack就会是这样：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span> old ESP\n<span class=\"token operator\">|</span>     old EFLAGS     <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">4</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">0x00000</span> <span class=\"token operator\">|</span> old CS   <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">8</span>\n<span class=\"token operator\">|</span>      old EIP       <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">12</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span> </code></pre></div>\n<h3>Setting Up the IDT</h3>\n<p>我们来设置0~31的IDT。我们需要用到的一些定义在<code class=\"language-text\">inc/trap.h</code>与<code class=\"language-text\">kern/trap.h</code>中。</p>\n<p>注意，0~31中的有一些中断已经被intel保留了，所以处理器永远都不会产生这些中断，怎么处理都行。</p>\n<p>整个的控制方式应该如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">      IDT                   trapentry<span class=\"token punctuation\">.</span>S         trap<span class=\"token punctuation\">.</span>c\n   \n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>                        \n<span class=\"token operator\">|</span>   <span class=\"token operator\">&amp;</span>handler1    <span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-></span> handler1<span class=\"token operator\">:</span>          trap <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Trapframe</span> <span class=\"token operator\">*</span>tf<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>             <span class=\"token comment\">// do stuff      {</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>             call trap          <span class=\"token comment\">// handle the exception/interrupt</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>             <span class=\"token comment\">// ...           }</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>   <span class=\"token operator\">&amp;</span>handler2    <span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">></span> handler2<span class=\"token operator\">:</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>            <span class=\"token comment\">// do stuff</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>            call trap\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>            <span class=\"token comment\">// ...</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n       <span class=\"token punctuation\">.</span>\n       <span class=\"token punctuation\">.</span>\n       <span class=\"token punctuation\">.</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>   <span class=\"token operator\">&amp;</span>handlerX    <span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">></span> handlerX<span class=\"token operator\">:</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>             <span class=\"token comment\">// do stuff</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>             call trap\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>             <span class=\"token comment\">// ...</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span></code></pre></div>\n<p>每个中断都应该在<code class=\"language-text\">trapentry.S</code>和<code class=\"language-text\">trap_init()</code>中有其对应的地址。</p>\n<h3>Exercise 4</h3>\n<p>这部分我主要是通过和xv6的对应部分对照着写的。</p>\n<p>首先写<code class=\"language-text\">trapentry.S</code>，这个文件分为两部分，第一是写handler:</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">/*\n * Lab 3: Your code here for generating entry points for the different traps.\n */\nTRAPHANDLER_NOEC(T_DIVIDE_handler, T_DIVIDE)\nTRAPHANDLER_NOEC(T_DEBUG_handler, T_DEBUG)\nTRAPHANDLER_NOEC(T_NMI_handler, T_NMI)\nTRAPHANDLER_NOEC(T_BRKPT_handler, T_BRKPT)\nTRAPHANDLER_NOEC(T_OFLOW_handler, T_OFLOW)\nTRAPHANDLER_NOEC(T_BOUND_handler, T_BOUND)\nTRAPHANDLER_NOEC(T_ILLOP_handler, T_ILLOP)\nTRAPHANDLER_NOEC(T_DEVICE_handler, T_DEVICE)\nTRAPHANDLER(T_DBLFLT_handler, T_DBLFLT)\nTRAPHANDLER(T_TSS_handler, T_TSS)\nTRAPHANDLER(T_SEGNP_handler, T_SEGNP)\nTRAPHANDLER(T_STACK_handler, T_STACK)\nTRAPHANDLER(T_GPFLT_handler, T_GPFLT)\nTRAPHANDLER(T_PGFLT_handler, T_PGFLT)\nTRAPHANDLER_NOEC(T_FPERR_handler, T_FPERR)\nTRAPHANDLER(T_ALIGN_handler, T_ALIGN)\nTRAPHANDLER_NOEC(T_MCHK_handler, T_MCHK)\nTRAPHANDLER_NOEC(T_SIMDERR_handler, T_SIMDERR)\nTRAPHANDLER_NOEC(T_SYSCALL_handler, T_SYSCALL)</code></pre></div>\n<p>具体是使用<code class=\"language-text\">TRAPHANDLER</code>还是<code class=\"language-text\">TRAPHANDLER_NOEC</code>可以对照xv6的<code class=\"language-text\">vector.S</code>文件。</p>\n<p>然后是写<code class=\"language-text\">_alltrap</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">/*\n * Lab 3: Your code here for _alltraps\n */\n  # vectors.S sends all traps here.\n_alltraps:\n  # Build trap frame.\n  pushl %ds\n  pushl %es\n  pushal\n  \n  # Set up data segments.\n  movw $GD_KD, %ax\n  movw %ax, %ds\n  movw %ax, %es\n\n  # Call trap(tf), where tf=%esp\n  pushl %esp\n  call trap\n  addl $4, %esp\n\n  popal\n  popl %es\n  popl %ds\n  addl $0x8, %esp  # trapno and errcode\n  iret</code></pre></div>\n<p>注意要对照着<code class=\"language-text\">inc/trap.h</code>中的<code class=\"language-text\">Trapframe</code>的定义来写，同时要参照xv6中的<code class=\"language-text\">trapasm.S</code>和<code class=\"language-text\">x86.h</code>(有trapframe的定义)来写。最后是<code class=\"language-text\">trap_init()</code>。因为在<code class=\"language-text\">trapentry.S</code>中只有函数名是全局变量，所以只能重复性的写很多...</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">void\ntrap_init(void)\n{\n\textern struct Segdesc gdt[];\n\n\t// LAB 3: Your code here.\n\tvoid T_DIVIDE_handler();\n\tvoid T_DEBUG_handler();\n\tvoid T_NMI_handler();\n\tvoid T_BRKPT_handler();\n\tvoid T_OFLOW_handler();\n\tvoid T_BOUND_handler();\n\tvoid T_ILLOP_handler();\n\tvoid T_DEVICE_handler();\n\tvoid T_DBLFLT_handler();\n\tvoid T_TSS_handler();\n\tvoid T_SEGNP_handler();\n\tvoid T_STACK_handler();\n\tvoid T_GPFLT_handler();\n\tvoid T_PGFLT_handler();\n\tvoid T_FPERR_handler();\n\tvoid T_ALIGN_handler();\n\tvoid T_MCHK_handler();\n\tvoid T_SIMDERR_handler();\n\tvoid T_SYSCALL_handler();\n\tSETGATE(idt[T_DIVIDE], 1, GD_KT, T_DIVIDE_handler, 0);\n\tSETGATE(idt[T_DEBUG], 1, GD_KT, T_DEBUG_handler, 0);\n\tSETGATE(idt[T_NMI], 1, GD_KT, T_NMI_handler, 0);\n\tSETGATE(idt[T_BRKPT], 1, GD_KT, T_BRKPT_handler, 0);\n\tSETGATE(idt[T_OFLOW], 1, GD_KT, T_OFLOW_handler, 0);\n\tSETGATE(idt[T_BOUND], 1, GD_KT, T_BOUND_handler, 0);\n\tSETGATE(idt[T_ILLOP], 1, GD_KT, T_ILLOP_handler, 0);\n\tSETGATE(idt[T_DEVICE], 1, GD_KT, T_DEVICE_handler, 0);\n\tSETGATE(idt[T_DBLFLT], 1, GD_KT, T_DBLFLT_handler, 0);\n\tSETGATE(idt[T_TSS], 1, GD_KT, T_TSS_handler, 0);\n\tSETGATE(idt[T_SEGNP], 1, GD_KT, T_SEGNP_handler, 0);\n\tSETGATE(idt[T_STACK], 1, GD_KT, T_STACK_handler, 0);\n\tSETGATE(idt[T_GPFLT], 1, GD_KT, T_GPFLT_handler, 0);\n\tSETGATE(idt[T_PGFLT], 1, GD_KT, T_PGFLT_handler, 0);\n\tSETGATE(idt[T_FPERR], 1, GD_KT, T_FPERR_handler, 0);\n\tSETGATE(idt[T_ALIGN], 1, GD_KT, T_ALIGN_handler, 0);\n\tSETGATE(idt[T_MCHK], 1, GD_KT, T_MCHK_handler, 0);\n\tSETGATE(idt[T_SIMDERR], 1, GD_KT, T_SIMDERR_handler, 0);\n\tSETGATE(idt[T_SYSCALL], 0, GD_KT, T_SYSCALL_handler, 3);\n\t// Per-CPU setup \n\ttrap_init_percpu();\n}</code></pre></div>\n<p>然后运行<code class=\"language-text\">make grade</code>，就通过了Part A。注意这里的代码虽然可以通过lab3，但是到lab4会出问题...因为其<code class=\"language-text\">istrap</code>参数的问题，详情请见lab4。</p>\n<p>回答两个问题：</p>\n<ul>\n<li>为什么要每个中断一个handler？那样就不能分开设置<code class=\"language-text\">SETGATE</code>中的<code class=\"language-text\">trapit</code>了，也就是不能区分exception和interruption了，同时也不能给不同的中断设置不同的中断等级了。</li>\n<li>为什么<code class=\"language-text\">user/softint</code>中的<code class=\"language-text\">int $14</code>会进入vector 13？14的privilege level是0，也就是user不能调用，在上面的代码中不是<code class=\"language-text\">$30</code>都会被识别为general protection fault，也就是中断13。</li>\n</ul>\n<h2>Part B: Page Faults, Breakpoints Exceptions, and System Calls</h2>\n<p>处理其他的中断。</p>\n<h3>Handling Page Faults</h3>\n<p>处理page fault，也就是14。当发生page fault的时候，处理器会把产生错误的地址存在<code class=\"language-text\">CR2</code>寄存器中。</p>\n<h3>Exercise 5</h3>\n<p>在<code class=\"language-text\">trap_dispatch()</code>里面加入<code class=\"language-text\">page_fault_handler()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">trap_dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Trapframe</span> <span class=\"token operator\">*</span>tf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Handle processor exceptions.</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_trapno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> T_PGFLT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">page_fault_handler</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// Unexpected trap: The user process or the kernel has a bug.</span>\n\t<span class=\"token function\">print_trapframe</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_cs <span class=\"token operator\">==</span> GD_KT<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unhandled trap in kernel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">env_destroy</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>The Breakpoint Exception</h3>\n<h3>Exercise 6</h3>\n<p>对于断点中断，需要调用的是<code class=\"language-text\">kern/monitor.c</code>中的<code class=\"language-text\">monitor</code>函数，不过注意，因为<code class=\"language-text\">breakpoint.c</code>中是通过直接触法来进行测试的，所以需要把断点的等级调为3</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">SETGATE(idt[T_BRKPT], 1, GD_KT, T_BRKPT_handler, 3);</code></pre></div>\n<p>然后<code class=\"language-text\">trap_dispatch</code>为：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_trapno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> T_PGFLT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">page_fault_handler</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> T_BRKPT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">monitor</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>System calls</h3>\n<p>在JOS中，我们使用<code class=\"language-text\">int $0x30</code>来进行system call。应用会自己把system call需要的参数以及其编号川籍来，所以kernel就不需要去操作用户环境或者instruction stream了。system call number会在<code class=\"language-text\">%eax</code>， 参数（前5个）会在 <code class=\"language-text\">%edx</code>, <code class=\"language-text\">%ecx</code>, <code class=\"language-text\">%ebx</code>, <code class=\"language-text\">%edi</code>, 和 <code class=\"language-text\">%esi</code>。同样，kernel会把返回值存在<code class=\"language-text\">%eax</code>中。<code class=\"language-text\">syscall</code>函数在<code class=\"language-text\">lb/syscall.c</code>中。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> int32_t\n<span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> check<span class=\"token punctuation\">,</span> uint32_t a1<span class=\"token punctuation\">,</span> uint32_t a2<span class=\"token punctuation\">,</span> uint32_t a3<span class=\"token punctuation\">,</span> uint32_t a4<span class=\"token punctuation\">,</span> uint32_t a5<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tint32_t ret<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Generic system call: pass system call number in AX,</span>\n\t<span class=\"token comment\">// up to five parameters in DX, CX, BX, DI, SI.</span>\n\t<span class=\"token comment\">// Interrupt kernel with T_SYSCALL.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// The \"volatile\" tells the assembler not to optimize</span>\n\t<span class=\"token comment\">// this instruction away just because we don't use the</span>\n\t<span class=\"token comment\">// return value.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// The last clause tells the assembler that this can</span>\n\t<span class=\"token comment\">// potentially change the condition codes and arbitrary</span>\n\t<span class=\"token comment\">// memory locations.</span>\n\n\t<span class=\"token keyword\">asm</span> <span class=\"token keyword\">volatile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int %1\\n\"</span>\n\t\t     <span class=\"token operator\">:</span> <span class=\"token string\">\"=a\"</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n\t\t     <span class=\"token operator\">:</span> <span class=\"token string\">\"i\"</span> <span class=\"token punctuation\">(</span>T_SYSCALL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t       <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t       <span class=\"token string\">\"d\"</span> <span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t       <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t       <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">(</span>a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t       <span class=\"token string\">\"D\"</span> <span class=\"token punctuation\">(</span>a4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t       <span class=\"token string\">\"S\"</span> <span class=\"token punctuation\">(</span>a5<span class=\"token punctuation\">)</span>\n\t\t     <span class=\"token operator\">:</span> <span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"memory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>check <span class=\"token operator\">&amp;&amp;</span> ret <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"syscall %d returned %d (> 0)\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面的这种写法叫gcc内联汇编，感兴趣的同学可以取查一下。</p>\n<p>注意这里的和xv6的对比，明显JOS比xv6要简单很多，并没有通过用户的stack(<code class=\"language-text\">esp</code>)来掏出来参数，而且JOS也没有<code class=\"language-text\">myproc</code>这样一个全局状态。</p>\n<h3>Exercise 7</h3>\n<p>加入system call的handler。由于我们已经加过了基本设置，所以只需要修改<code class=\"language-text\">trap_dispatch()</code>与<code class=\"language-text\">kern/syscall.c</code>中的<code class=\"language-text\">syscall()</code>了。</p>\n<p>首先是<code class=\"language-text\">trap_dispatch()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_trapno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> T_PGFLT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">page_fault_handler</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> T_BRKPT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">monitor</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> T_SYSCALL<span class=\"token operator\">:</span>\n\t\t\ttf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_eax <span class=\"token operator\">=</span> <span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span>\n\t\t\t\ttf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_eax<span class=\"token punctuation\">,</span> tf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_edx<span class=\"token punctuation\">,</span>\n\t\t\t\ttf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_ecx<span class=\"token punctuation\">,</span> tf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_ebx<span class=\"token punctuation\">,</span>\n\t\t\t\ttf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_edi<span class=\"token punctuation\">,</span> tf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_esi\n\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意别忘了用返回值更新<code class=\"language-text\">eax</code>。</p>\n<p>其次是<code class=\"language-text\">syscall()</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Dispatches to the correct kernel function, passing the arguments.</span>\nint32_t\n<span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span>uint32_t syscallno<span class=\"token punctuation\">,</span> uint32_t a1<span class=\"token punctuation\">,</span> uint32_t a2<span class=\"token punctuation\">,</span> uint32_t a3<span class=\"token punctuation\">,</span> uint32_t a4<span class=\"token punctuation\">,</span> uint32_t a5<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Call the function corresponding to the 'syscallno' parameter.</span>\n\t<span class=\"token comment\">// Return any appropriate return value.</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\n\t<span class=\"token comment\">// panic(\"syscall not implemented\");</span>\n\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>syscallno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> SYS_cputs<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">sys_cputs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_cgetc<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_cgetc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_getenvid<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_getenvid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_env_destroy<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_env_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>envid_t<span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>User-mode startup</h3>\n<p>用户应用会从<code class=\"language-text\">lib/entry</code>进入，然后调用<code class=\"language-text\">lib/libmain.c</code>中的<code class=\"language-text\">libmain()</code>，之后<code class=\"language-text\">libmain</code>会调用<code class=\"language-text\">umain</code>也就是进入了比如<code class=\"language-text\">hello</code>这样的函数中。我们希望能够在用户应用中使用<code class=\"language-text\">thisenv</code>也就是当前的环境状态。由于我们已经有了<code class=\"language-text\">sys_getenvid()</code>这样的函数，这个函数在<code class=\"language-text\">lib/syscall.c</code>中被声明，用来掉system call中的<code class=\"language-text\">SYS_getenvid</code>。有了<code class=\"language-text\">envid</code>之后，因为从<code class=\"language-text\">inc/env.h</code>中得知：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// An environment ID 'envid_t' has three parts:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// +1+---------------21-----------------+--------10--------+</span>\n<span class=\"token comment\">// |0|          Uniqueifier             |   Environment    |</span>\n<span class=\"token comment\">// | |                                  |      Index       |</span>\n<span class=\"token comment\">// +------------------------------------+------------------+</span>\n<span class=\"token comment\">//                                       \\--- ENVX(eid) --/</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The environment index ENVX(eid) equals the environment's index in the</span>\n<span class=\"token comment\">// 'envs[]' array.  The uniqueifier distinguishes environments that were</span>\n<span class=\"token comment\">// created at different times, but share the same environment index.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// All real environments are greater than 0 (so the sign bit is zero).</span>\n<span class=\"token comment\">// envid_ts less than 0 signify errors.  The envid_t == 0 is special, and</span>\n<span class=\"token comment\">// stands for the current environment.</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> LOG2NENV\t\t10</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> NENV\t\t\t(1 &lt;&lt; LOG2NENV)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENVX(envid)\t\t((envid) &amp; (NENV - 1))</span></code></pre></div>\n<p>我们只需要取后10位就可以得到当前环境在<code class=\"language-text\">envs</code>中的序号了，所以有：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">thisenv <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>envs<span class=\"token punctuation\">[</span><span class=\"token function\">ENVX</span><span class=\"token punctuation\">(</span><span class=\"token function\">sys_getenvid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h3>Page faults and memory protection</h3>\n<p>内存保护是操作系统非常重要的一部分，也是保证bug不能破坏其他程序或者kernel的一个重要手段。</p>\n<p>操作系统通常通过硬件来实现内存保护。OS让硬件知道哪些虚拟地址是可以访问的，哪些不行。当一个程序试图访问非法地址的之后，处理器会trap。如果问题可以结局，那么kernel就会解决这个问题并让程序继续运行，如果不行，那么程序就不会继续运行。</p>\n<p>一个常见的解决方法是自动扩充stack。一般默认就分配一个page作为用户的stack，如果触发了page fault，就自动再进行分配。</p>\n<p>system call会导致一个很有趣的问题。很多system call允许用户传指针进kernel，这些指针会指向读写的buffer。这种做法有两个问题：</p>\n<ul>\n<li>kernel中的page fault会比user program中的严重许多。如果kernel中的page fault不能解决，那么就会panic整个系统。但是事实上，在上面谈到的问题里，那些buffer带来的page fault是user program的，而不是kernel的。</li>\n<li>kernel往往有更强的权限，上面的这个system call可能会泄露一些kernel的private memory。</li>\n</ul>\n<p>基于这两个原因，我们需要很谨慎的处理传进kernel的指针。</p>\n<p>我们讲用一个机制来解决这两个问题。当程序向kernel传递指针的时候，kernel会检查该指针是不是在用户地址内，以及对应的page table允许内存操作。这样，kernel就不会因为dereference用户指针导致page fault了。</p>\n<h3>Exercise 9</h3>\n<p>首先给<code class=\"language-text\">trap</code>中加上page fault在kernel mode，直接<code class=\"language-text\">panic</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_trapno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> T_PGFLT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_cs <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page fault in kernel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">page_fault_handler</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>之后补全<code class=\"language-text\">kern/pmap.c</code>中的<code class=\"language-text\">user_mem_check</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Check that an environment is allowed to access the range of memory</span>\n<span class=\"token comment\">// [va, va+len) with permissions 'perm | PTE_P'.</span>\n<span class=\"token comment\">// Normally 'perm' will contain PTE_U at least, but this is not required.</span>\n<span class=\"token comment\">// 'va' and 'len' need not be page-aligned; you must test every page that</span>\n<span class=\"token comment\">// contains any of that range.  You will test either 'len/PGSIZE',</span>\n<span class=\"token comment\">// 'len/PGSIZE + 1', or 'len/PGSIZE + 2' pages.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A user program can access a virtual address if (1) the address is below</span>\n<span class=\"token comment\">// ULIM, and (2) the page table gives it permission.  These are exactly</span>\n<span class=\"token comment\">// the tests you should implement here.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If there is an error, set the 'user_mem_check_addr' variable to the first</span>\n<span class=\"token comment\">// erroneous virtual address.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns 0 if the user program can access this range of addresses,</span>\n<span class=\"token comment\">// and -E_FAULT otherwise.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">user_mem_check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>env<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\tuintptr_t v <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuintptr_t end <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDUP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>va <span class=\"token operator\">+</span> len<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>v <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> v <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpte_t <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> <span class=\"token function\">pgdir_walk</span><span class=\"token punctuation\">(</span>env<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pte <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte <span class=\"token operator\">&amp;</span> perm<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> perm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">)</span>\n\t\t\t\tuser_mem_check_addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tuser_mem_check_addr <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_FAULT<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意需要返回的是这区间里的第一个地址，所以如果<code class=\"language-text\">v</code>比<code class=\"language-text\">va</code>小，返回的应该是<code class=\"language-text\">va</code>。</p>\n<p>然后修改<code class=\"language-text\">syscall.c</code>中的<code class=\"language-text\">sys_cputs</code>以检查指针。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">sys_cputs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Check that the user has permission to read memory [s, s+len).</span>\n\t<span class=\"token comment\">// Destroy the environment if not.</span>\n\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token function\">user_mem_assert</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> PTE_U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Print the string supplied by the user.</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.*s\"</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后，为了在<code class=\"language-text\">breakpoint</code>中实现<code class=\"language-text\">backtrace</code>功能，在<code class=\"language-text\">kern/kdebug.c</code>的<code class=\"language-text\">debuginfo_eip()</code>中加入如下代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">// Find the relevant set of stabs</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>=</span> ULIM<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstabs <span class=\"token operator\">=</span> __STAB_BEGIN__<span class=\"token punctuation\">;</span>\n\t\tstab_end <span class=\"token operator\">=</span> __STAB_END__<span class=\"token punctuation\">;</span>\n\t\tstabstr <span class=\"token operator\">=</span> __STABSTR_BEGIN__<span class=\"token punctuation\">;</span>\n\t\tstabstr_end <span class=\"token operator\">=</span> __STABSTR_END__<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// The user-application linker script, user/user.ld,</span>\n\t\t<span class=\"token comment\">// puts information about the application's stabs (equivalent</span>\n\t\t<span class=\"token comment\">// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and</span>\n\t\t<span class=\"token comment\">// __STABSTR_END__) in a structure located at virtual address</span>\n\t\t<span class=\"token comment\">// USTABDATA.</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">UserStabData</span> <span class=\"token operator\">*</span>usd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">UserStabData</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> USTABDATA<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Make sure this memory is valid.</span>\n\t\t<span class=\"token comment\">// Return -1 if it is not.  Hint: Call user_mem_check.</span>\n\t\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">user_mem_check</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>usd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UserStabData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\tstabs <span class=\"token operator\">=</span> usd<span class=\"token operator\">-></span>stabs<span class=\"token punctuation\">;</span>\n\t\tstab_end <span class=\"token operator\">=</span> usd<span class=\"token operator\">-></span>stab_end<span class=\"token punctuation\">;</span>\n\t\tstabstr <span class=\"token operator\">=</span> usd<span class=\"token operator\">-></span>stabstr<span class=\"token punctuation\">;</span>\n\t\tstabstr_end <span class=\"token operator\">=</span> usd<span class=\"token operator\">-></span>stabstr_end<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Make sure the STABS and string table memory is valid.</span>\n\t\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">user_mem_check</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stabs<span class=\"token punctuation\">,</span> stab_end <span class=\"token operator\">-</span> stabs<span class=\"token punctuation\">,</span> PTE_U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">user_mem_check</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stabstr<span class=\"token punctuation\">,</span> stabstr_end <span class=\"token operator\">-</span> stabstr<span class=\"token punctuation\">,</span> PTE_U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后运行<code class=\"language-text\">make run-breakpoint-nox</code>进入中断之后，如果运行<code class=\"language-text\">bracktrack</code>就会有如下结果：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">K<span class=\"token operator\">></span> backtrace\nStack backtrace:\n  ebp efffff00  eip f0100ad7  args 00000001 efffff28 f01d2000 f0106781 f011af48\n      kern/monitor.c:151: monitor+353\n  ebp efffff80  eip f010429b  args f01d2000 efffffbc f0150508 00000092 f011afd8\n      kern/trap.c:191: trap+282\n  ebp efffffb0  eip f0104389  args efffffbc 00000000 00000000 eebfdfc0 efffffdc\n      kern/trapentry.S:87: <span class=\"token operator\">&lt;</span>unknown<span class=\"token operator\">></span>+0\n  ebp eebfdfc0  eip 00800087  args 00000000 00000000 eebfdff0 00800058 00000000\n      lib/libmain.c:25: libmain+78\n  ebp eebfdff0  eip 00800031  args 00000000 00000000Incoming TRAP frame at 0xeffffe64\nkernel panic at kern/trap.c:187: page fault <span class=\"token keyword\">in</span> kernel</code></pre></div>\n<p>这里为什么没有搞懂。。。</p>\n<h3>Exercise 10</h3>\n<p>当完成exercise 9的时候，exercise 10自动完成了。9和10的唯一区别就是传入的指针，一个是未分配的，另外一个是传入了对应kernel部分的地址，这两者都可以用上面的检查方法搞定。</p>\n<p>最后来运行一下<code class=\"language-text\">make grade</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">divzero: OK <span class=\"token punctuation\">(</span>1.0s<span class=\"token punctuation\">)</span>\nsoftint: OK <span class=\"token punctuation\">(</span>0.9s<span class=\"token punctuation\">)</span>\nbadsegment: OK <span class=\"token punctuation\">(</span>1.0s<span class=\"token punctuation\">)</span>\nPart A score: 30/30\n\nfaultread: OK <span class=\"token punctuation\">(</span>1.0s<span class=\"token punctuation\">)</span>\nfaultreadkernel: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nfaultwrite: OK <span class=\"token punctuation\">(</span>1.1s<span class=\"token punctuation\">)</span>\nfaultwritekernel: OK <span class=\"token punctuation\">(</span>1.8s<span class=\"token punctuation\">)</span>\nbreakpoint: OK <span class=\"token punctuation\">(</span>1.1s<span class=\"token punctuation\">)</span>\ntestbss: OK <span class=\"token punctuation\">(</span>1.9s<span class=\"token punctuation\">)</span>\nhello: OK <span class=\"token punctuation\">(</span>2.1s<span class=\"token punctuation\">)</span>\nbuggyhello: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nbuggyhello2: OK <span class=\"token punctuation\">(</span>2.2s<span class=\"token punctuation\">)</span>\nevilhello: OK <span class=\"token punctuation\">(</span>1.8s<span class=\"token punctuation\">)</span>\nPart B score: 50/50\n\nScore: 80/80</code></pre></div>","frontmatter":{"title":"6.828 lab3 User Environments","date":"2019-03-05T09:00:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-lab3/"}}}