{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-lab4/","webpackCompilationHash":"7e8cb6d6d8baacdb1aae","result":{"data":{"markdownRemark":{"html":"<h2>Part A: Multiprocessor Support and Cooperative Multitasking</h2>\n<p>第一部分要把JOS拓展到多处理器的系统，并实现一些system call来让user-level environments创建新的环境。然后还需要实现cooperative的round-robin，也就是让当前的用户环境可以主动的退出。之后的part C会实现pre-emptive的版本。</p>\n<h3>Multiprocessor Support</h3>\n<p>我们首先来实现symmetric multiprocessing (SMP)。这是一个多处理器的模型，所有的CPU都有同样的系统资源权限，如内存和I/O。因为在SMP中所有的处理器都一样，在boot的过程中，CPU被分为两类：</p>\n<ul>\n<li>the bootstrap processor (BSP): 用于初始化系统并boot操作系统。</li>\n<li>the application processors (APs): 在操作系统正常运行之后由BSP激活。</li>\n</ul>\n<p>哪个CPU是BSP是由硬件和BIOS决定的。截止到现在，JOS都运行在BSP上。</p>\n<p>在一个SMP系统里，每个CPU都有an accompanying local APIC (LAPIC) unit. 之前提到过，LAPIC是用于在系统中deliver interrupt。LAPIC同时还是其对应的CPU的unique identifier。这次的lab里面我们会用LAPIC unit的一些基本的功能（在<code class=\"language-text\">kern/lapic.c</code>）。</p>\n<ul>\n<li>\n<p><code class=\"language-text\">cpunum()</code>函数里用LAPIC的identifier来获得当前的代码运行在哪个CPU上：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ID      (0x0020/4)   </span><span class=\"token comment\">// ID</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lapic<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> lapic<span class=\"token punctuation\">[</span>ID<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>\n<p><code class=\"language-text\">lapic_startap()</code>函数来让BSP给APs发送STARTUP interprocessor interrupt (IPI)来启动其他的CPU</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> IO_RTC  0x70</span>\n\n<span class=\"token comment\">// Start additional processor running entry code at addr.</span>\n<span class=\"token comment\">// See Appendix B of MultiProcessor Specification.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">lapic_startap</span><span class=\"token punctuation\">(</span>uint8_t apicid<span class=\"token punctuation\">,</span> uint32_t addr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\tuint16_t <span class=\"token operator\">*</span>wrv<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// \"The BSP must initialize CMOS shutdown code to 0AH</span>\n\t<span class=\"token comment\">// and the warm reset vector (DWORD based at 40:67) to point at</span>\n\t<span class=\"token comment\">// the AP startup code prior to the [universal startup algorithm].\"</span>\n\t<span class=\"token function\">outb</span><span class=\"token punctuation\">(</span>IO_RTC<span class=\"token punctuation\">,</span> <span class=\"token number\">0xF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// offset 0xF is shutdown code</span>\n\t<span class=\"token function\">outb</span><span class=\"token punctuation\">(</span>IO_RTC<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\twrv <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uint16_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">KADDR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x67</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Warm reset vector</span>\n\twrv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\twrv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> addr <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// \"Universal startup algorithm.\"</span>\n\t<span class=\"token comment\">// Send INIT (level-triggered) interrupt to reset other CPU.</span>\n\t<span class=\"token function\">lapicw</span><span class=\"token punctuation\">(</span>ICRHI<span class=\"token punctuation\">,</span> apicid <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lapicw</span><span class=\"token punctuation\">(</span>ICRLO<span class=\"token punctuation\">,</span> INIT <span class=\"token operator\">|</span> LEVEL <span class=\"token operator\">|</span> ASSERT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">microdelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lapicw</span><span class=\"token punctuation\">(</span>ICRLO<span class=\"token punctuation\">,</span> INIT <span class=\"token operator\">|</span> LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">microdelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// should be 10ms, but too slow in Bochs!</span>\n\n\t<span class=\"token comment\">// Send startup IPI (twice!) to enter code.</span>\n\t<span class=\"token comment\">// Regular hardware is supposed to only accept a STARTUP</span>\n\t<span class=\"token comment\">// when it is in the halted state due to an INIT.  So the second</span>\n\t<span class=\"token comment\">// should be ignored, but it is part of the official Intel algorithm.</span>\n\t<span class=\"token comment\">// Bochs complains about the second one.  Too bad for Bochs.</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">lapicw</span><span class=\"token punctuation\">(</span>ICRHI<span class=\"token punctuation\">,</span> apicid <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">lapicw</span><span class=\"token punctuation\">(</span>ICRLO<span class=\"token punctuation\">,</span> STARTUP <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">microdelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n</li>\n<li>在PART C中，我们会给LAPIC的内置timer来trigger clock interrupt以实现preemptive multitasking，在<code class=\"language-text\">apic_init()</code>中。</li>\n</ul>\n<p>一个处理器通过memory-mapping I/O (MMIO，之前note2中提到过)来访问其LAPIC。在MMIO中，一部跟物理内存是hardwired到一些I/O设备的寄存器上，所以用来访问内存的指令也可以用来访问device registers。我们之前提到过在物理地址<code class=\"language-text\">0xa0000</code>上有一个IO hole(见之前note2的物理地址layout)，这个是用来写入VGA显示buffer的。LAPIC类似，其PA在<code class=\"language-text\">0xfe000000</code>开始的32MB。因为我们的虚拟内存只映射到<code class=\"language-text\">KERNBASE</code>，也就是<code class=\"language-text\">0xf0000000</code>，所以我们我们不能直接访问。在JOS的虚拟内存中，有从<code class=\"language-text\">MMIOBASE</code>开始的4MB的gap，以映射LAPIC这样的设备。因为之后的之后需要使用更多的MMIO，我们需要写一个函数来从这个区域中分配内存以映射device memory。</p>\n<h3>Exercise 1</h3>\n<p>实现<code class=\"language-text\">kern/lapic.c</code>中的<code class=\"language-text\">mmio_map_region</code>。需要做完下一个exercise才能测试。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Reserve size bytes in the MMIO region and map [pa,pa+size) at this</span>\n<span class=\"token comment\">// location.  Return the base of the reserved region.  size does *not*</span>\n<span class=\"token comment\">// have to be multiple of PGSIZE.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">mmio_map_region</span><span class=\"token punctuation\">(</span>physaddr_t pa<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Where to start the next region.  Initially, this is the</span>\n\t<span class=\"token comment\">// beginning of the MMIO region.  Because this is static, its</span>\n\t<span class=\"token comment\">// value will be preserved between calls to mmio_map_region</span>\n\t<span class=\"token comment\">// (just like nextfree in boot_alloc).</span>\n\t<span class=\"token keyword\">static</span> uintptr_t base <span class=\"token operator\">=</span> MMIOBASE<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Reserve size bytes of virtual memory starting at base and</span>\n\t<span class=\"token comment\">// map physical pages [pa,pa+size) to virtual addresses</span>\n\t<span class=\"token comment\">// [base,base+size).  Since this is device memory and not</span>\n\t<span class=\"token comment\">// regular DRAM, you'll have to tell the CPU that it isn't</span>\n\t<span class=\"token comment\">// safe to cache access to this memory.  Luckily, the page</span>\n\t<span class=\"token comment\">// tables provide bits for this purpose; simply create the</span>\n\t<span class=\"token comment\">// mapping with PTE_PCD|PTE_PWT (cache-disable and</span>\n\t<span class=\"token comment\">// write-through) in addition to PTE_W.  (If you're interested</span>\n\t<span class=\"token comment\">// in more details on this, see section 10.5 of IA32 volume</span>\n\t<span class=\"token comment\">// 3A.)</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Be sure to round size up to a multiple of PGSIZE and to</span>\n\t<span class=\"token comment\">// handle if this reservation would overflow MMIOLIM (it's</span>\n\t<span class=\"token comment\">// okay to simply panic if this happens).</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Hint: The staff solution uses boot_map_region.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Your code here:</span>\n\tsize <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDUP</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MMIOLIM <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>base <span class=\"token operator\">+</span> size <span class=\"token operator\">&lt;</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"overflow MMIOLIM\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> pa<span class=\"token punctuation\">,</span> PTE_W <span class=\"token operator\">|</span> PTE_PCD <span class=\"token operator\">|</span> PTE_PWT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbase <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">-</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>按照注释要求写就行了，唯一需要注意的就是<code class=\"language-text\">base + size</code>可能会overflow，所以需要检查<code class=\"language-text\">base + size &gt;= base</code>。</p>\n<h3>Application Processor Bootstrap</h3>\n<p>在启动APs之前，BSP应该首先收集多处理器系统的相关信息，比如CPU总数，他们的APIC ID以及他们的LAPIC在MMIO里的地址。<code class=\"language-text\">kern/mpconfig.c</code>中的<code class=\"language-text\">mp_init()</code>就通过读MP configuration table中的信息来得到这些信息，这个表在BIOS' s region of memory。</p>\n<p><code class=\"language-text\">kern/init.c</code>中的<code class=\"language-text\">boot_aps()</code>进行AP bootstrap process。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Start the non-boot (AP) processors.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">boot_aps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">extern</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> mpentry_start<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mpentry_end<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>code<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">CpuInfo</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Write entry code to unused memory at MPENTRY_PADDR</span>\n\tcode <span class=\"token operator\">=</span> <span class=\"token function\">KADDR</span><span class=\"token punctuation\">(</span>MPENTRY_PADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> mpentry_start<span class=\"token punctuation\">,</span> mpentry_end <span class=\"token operator\">-</span> mpentry_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Boot each AP one at a time</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> cpus<span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> cpus <span class=\"token operator\">+</span> ncpu<span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> cpus <span class=\"token operator\">+</span> <span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// We've started already.</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Tell mpentry.S what stack to use </span>\n\t\tmpentry_kstack <span class=\"token operator\">=</span> percpu_kstacks<span class=\"token punctuation\">[</span>c <span class=\"token operator\">-</span> cpus<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> KSTKSIZE<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// Start the CPU at mpentry_start</span>\n\t\t<span class=\"token function\">lapic_startap</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>cpu_id<span class=\"token punctuation\">,</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// Wait for the CPU to finish some basic setup in mp_main()</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>cpu_status <span class=\"token operator\">!=</span> CPU_STARTED<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>就像是<code class=\"language-text\">boot/boot.S</code>中的，所以<code class=\"language-text\">boot_aps()</code>把AP entry code(在<code class=\"language-text\">kern/mpentry.S</code>中)移到a memory location that is addressable in the real mode。不像bootloader，我们对AP在哪里会运行AP的代码，我们把entry code复制到 <code class=\"language-text\">0x7000</code> (<code class=\"language-text\">MPENTRY_PADDR</code>)，但实际上任何640KB以下的地址都行。</p>\n<p>在完成上述的这个<code class=\"language-text\">memmove</code>之后，<code class=\"language-text\">boot_aps()</code>一个一个通过发STARTUP IPIs到LAPIC unit来激活AP（也就是运行<code class=\"language-text\">lapic_startap</code>）。启动之后，会返回一个初始的<code class=\"language-text\">CS:IP</code>，AP就会从这个地址开始运行entry code，这个地址就是<code class=\"language-text\">MPENTRY_PADDR</code>。</p>\n<p>这个entry code就是<code class=\"language-text\">kern/mpentry.S</code>。它之中的代码和<code class=\"language-text\">boot/boot.S</code>很像，先做一些设置之后，就会让AP转到protected mode，然后运行<code class=\"language-text\">kern/init.c</code>中的<code class=\"language-text\">mp_main()</code>。<code class=\"language-text\">boot_aps()</code>会等待<code class=\"language-text\">c-&gt;cpu_status != CPU_STARTED</code>，这样这一个AP就被启动了，然后在<code class=\"language-text\">boot_aps</code>的循环里面就可以进行下一个AP了。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Setup code for APs</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">mp_main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// We are in high EIP now, safe to switch to kern_pgdir </span>\n\t<span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SMP: CPU %d starting\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lapic_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">env_init_percpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">trap_init_percpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">xchg</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>thiscpu<span class=\"token operator\">-></span>cpu_status<span class=\"token punctuation\">,</span> CPU_STARTED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tell boot_aps() we're up</span>\n\n\t<span class=\"token comment\">// Now that we have finished some basic setup, call sched_yield()</span>\n\t<span class=\"token comment\">// to start running processes on this CPU.  But make sure that</span>\n\t<span class=\"token comment\">// only one CPU can enter the scheduler at a time!</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Your code here:</span>\n\n\t<span class=\"token comment\">// Remove this after you finish Exercise 6</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Exercise 2</h3>\n<p>修改<code class=\"language-text\">page_init()</code>以腾空<code class=\"language-text\">MPENTRY_PADDR</code>。是的我们可以安全的把AP bootstrap code复制到对应的位置。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Initialize page structure and memory free list.</span>\n<span class=\"token comment\">// After this is done, NEVER use boot_alloc again.  ONLY use the page</span>\n<span class=\"token comment\">// allocator functions below to allocate and deallocate physical</span>\n<span class=\"token comment\">// memory via the page_free_list.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">page_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4:</span>\n\t<span class=\"token comment\">// Change your code to mark the physical page at MPENTRY_PADDR</span>\n\t<span class=\"token comment\">// as in use</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>mpentry_page <span class=\"token operator\">=</span> <span class=\"token function\">pa2page</span><span class=\"token punctuation\">(</span>MPENTRY_PADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// The example code here marks all physical pages as free.</span>\n\t<span class=\"token comment\">// However this is not truly the case.  What memory is free?</span>\n\t<span class=\"token comment\">//  1) Mark physical page 0 as in use.</span>\n\t<span class=\"token comment\">//     This way we preserve the real-mode IDT and BIOS structures</span>\n\t<span class=\"token comment\">//     in case we ever need them.  (Currently we don't, but...)</span>\n\t<span class=\"token comment\">//  2) The rest of base memory, [PGSIZE, npages_basemem * PGSIZE)</span>\n\t<span class=\"token comment\">//     is free.</span>\n\t<span class=\"token comment\">//  3) Then comes the IO hole [IOPHYSMEM, EXTPHYSMEM), which must</span>\n\t<span class=\"token comment\">//     never be allocated.</span>\n\t<span class=\"token comment\">//  4) Then extended memory [EXTPHYSMEM, ...).</span>\n\t<span class=\"token comment\">//     Some of it is in use, some is free. Where is the kernel</span>\n\t<span class=\"token comment\">//     in physical memory?  Which pages are already in use for</span>\n\t<span class=\"token comment\">//     page tables and other data structures?</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Change the code to reflect this.</span>\n\t<span class=\"token comment\">// NB: DO NOT actually touch the physical memory corresponding to</span>\n\t<span class=\"token comment\">// free pages!</span>\n\tsize_t i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> npages_basemem<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pages <span class=\"token operator\">+</span> i <span class=\"token operator\">==</span> mpentry_page<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\tpages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pp_ref <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tpages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pp_link <span class=\"token operator\">=</span> page_free_list<span class=\"token punctuation\">;</span>\n\t\tpage_free_list <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span><span class=\"token function\">boot_alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>PGSIZE<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> npages<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pp_ref <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tpages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pp_link <span class=\"token operator\">=</span> page_free_list<span class=\"token punctuation\">;</span>\n\t\tpage_free_list <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>加上这个之后，测试可以有：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> qemu-nox\n<span class=\"token punctuation\">..</span>.\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_alloc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\nkernel panic on CPU 0 at kern/pmap.c:813: assertion failed: check_va2pa<span class=\"token punctuation\">(</span>pgdir, KERNBASE + i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> i\nWelcome to the JOS kernel monitor<span class=\"token operator\">!</span>\nType <span class=\"token string\">'help'</span> <span class=\"token keyword\">for</span> a list of commands.\nK<span class=\"token operator\">></span></code></pre></div>\n<ul>\n<li>\n<p>比较<code class=\"language-text\">kern/mpentry.S</code> 和<code class=\"language-text\">boot/boot.S</code>. 牢记<code class=\"language-text\">kern/mpentry.S</code>和kernel中的其他代码一样，是被编译与链接在<code class=\"language-text\">KERNBASE</code>之上的。<code class=\"language-text\">mpentry.S</code>中<code class=\"language-text\">MPBOOTPHYS</code>这个宏来?为什么<code class=\"language-text\">boot.S</code>不需要？换句话说，如果我们不用这个宏，会出什么问题呢？ </p>\n<p>在<code class=\"language-text\">mpentry.S</code>的注释里面有写这两者的区别，那就是：</p>\n<blockquote>\n<p>This code is similar to boot/boot.S except that</p>\n<ul>\n<li>it does not need to enable A20</li>\n<li>\n<p>it uses MPBOOTPHYS to calculate absolute addresses of its</p>\n<p>symbols, rather than relying on the linker to fill them</p>\n</li>\n</ul>\n</blockquote>\n<p>这种转换是因为bootloader的LMA和VMA都在<code class=\"language-text\">0x7c00</code>，并没有进行什么映射，所以运行<code class=\"language-text\">boot.S</code>时虚拟地址就是物理地址，不需要转换。但是kernel中的则不然，已经进行了转换了，但是在加载GDT的时候需要物理地址。具体来看，<code class=\"language-text\">MPBOOTPHYS</code>的代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MPBOOTPHYS(s) ((s) - mpentry_start + MPENTRY_PADDR)</span></code></pre></div>\n<p><code class=\"language-text\">mpentry-start</code>就是这个函数的地址，而<code class=\"language-text\">MPENTRY_PADDR</code>是APs的startup code的物理地址。相当于是把<code class=\"language-text\">gdt</code>的位置相对于<code class=\"language-text\">mpentry_start</code>这个函数的地址的对应到<code class=\"language-text\">MPENTRY_PADDR + gdt - mpentry_start</code>，就如同<code class=\"language-text\">boot.S</code>中<code class=\"language-text\">gdt</code>对应到在<code class=\"language-text\">start + gdt - start</code>是一样的（<code class=\"language-text\">start</code>是<code class=\"language-text\">boot.S</code>的那个函数的地址）。</p>\n</li>\n</ul>\n<h3>Per-CPU State and Initialization</h3>\n<p>当写一个多处理器的OS的时候，区分per-CPU state that is private to each processor与global state that the whole system shares是非常重要的。<code class=\"language-text\">kern/cpu.h</code>中定义了大多数per-CPU state，包括了<code class=\"language-text\">CpuInfo</code>，其存储了per-CPU变量。<code class=\"language-text\">cpunum()</code>总会返回CPU的ID，这个ID可以用来作为<code class=\"language-text\">cpus</code>这样的数组的index。<code class=\"language-text\">thiscpu</code>表示当前的CPU对应的<code class=\"language-text\">struct CpuInfo</code>。</p>\n<p>一些值得注意的per-CPU state：</p>\n<ul>\n<li>\n<p>per-CPU kernel stack</p>\n<p>因为多个CPU可能会同时trap进kernel，所以我们需要给每个CPU一个单独的kernel stack。<code class=\"language-text\">percpu_kstacks[NCPU][KSTKSIZE]</code>这个数组就是干这个的。</p>\n<p>在lab2中，我们把<code class=\"language-text\">bootstack</code>对应的BSP的kernel stack映射到了<code class=\"language-text\">KSTACKTOP</code>下面：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////</span>\n\t<span class=\"token comment\">// Use the physical memory that 'bootstack' refers to as the kernel</span>\n\t<span class=\"token comment\">// stack.  The kernel stack grows down from virtual address KSTACKTOP.</span>\n\t<span class=\"token comment\">// We consider the entire range from [KSTACKTOP-PTSIZE, KSTACKTOP)</span>\n\t<span class=\"token comment\">// to be the kernel stack, but break this into two pieces:</span>\n\t<span class=\"token comment\">//     * [KSTACKTOP-KSTKSIZE, KSTACKTOP) -- backed by physical memory</span>\n\t<span class=\"token comment\">//     * [KSTACKTOP-PTSIZE, KSTACKTOP-KSTKSIZE) -- not backed; so if</span>\n\t<span class=\"token comment\">//       the kernel overflows its stack, it will fault rather than</span>\n\t<span class=\"token comment\">//       overwrite memory.  Known as a \"guard page\".</span>\n\t<span class=\"token comment\">//     Permissions: kernel RW, user NONE</span>\n\t<span class=\"token comment\">// Your code goes here:</span>\n\t<span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">,</span> KSTACKTOP<span class=\"token operator\">-</span>KSTKSIZE<span class=\"token punctuation\">,</span> KSTKSIZE<span class=\"token punctuation\">,</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>bootstack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                  PTE_W <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在lab4中，我们会把所有的kernel stack都映射到这个区域，并包含一个guard page。CPU 0的stack会从<code class=\"language-text\">KSTACKTOP</code>开始，CPU 1会在CPU 0的stack再向下<code class=\"language-text\">KSTGAP</code>。在更新了个<code class=\"language-text\">inc/memorylayout.h</code>中有详细的体现：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\n* Virtual memory map:                                Permissions\n*                                                    kernel/user\n*\n*    4 Gig -------->  +------------------------------+\n*                     |                              | RW/--\n*                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n*                     :              .               :\n*                     :              .               :\n*                     :              .               :\n*                     |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~| RW/--\n*                     |                              | RW/--\n*                     |   Remapped Physical Memory   | RW/--\n*                     |                              | RW/--\n*    KERNBASE, ---->  +------------------------------+ 0xf0000000      --+\n*    KSTACKTOP        |     CPU0's Kernel Stack      | RW/--  KSTKSIZE   |\n*                     | - - - - - - - - - - - - - - -|                   |\n*                     |      Invalid Memory (*)      | --/--  KSTKGAP    |\n*                     +------------------------------+                   |\n*                     |     CPU1's Kernel Stack      | RW/--  KSTKSIZE   |\n*                     | - - - - - - - - - - - - - - -|                 PTSIZE\n*                     |      Invalid Memory (*)      | --/--  KSTKGAP    |\n*                     +------------------------------+                   |\n*                     :              .               :                   |\n*                     :              .               :                   |\n*    MMIOLIM ------>  +------------------------------+ 0xefc00000      --+\n*                     |       Memory-mapped I/O      | RW/--  PTSIZE\n* ULIM, MMIOBASE -->  +------------------------------+ 0xef800000\n*                     |  Cur. Page Table (User R-)   | R-/R-  PTSIZE\n*    UVPT      ---->  +------------------------------+ 0xef400000\n*                     |          RO PAGES            | R-/R-  PTSIZE\n*    UPAGES    ---->  +------------------------------+ 0xef000000\n*                     |           RO ENVS            | R-/R-  PTSIZE\n* UTOP,UENVS ------>  +------------------------------+ 0xeec00000\n* UXSTACKTOP -/       |     User Exception Stack     | RW/RW  PGSIZE\n*                     +------------------------------+ 0xeebff000\n*                     |       Empty Memory (*)       | --/--  PGSIZE\n*    USTACKTOP  --->  +------------------------------+ 0xeebfe000\n*                     |      Normal User Stack       | RW/RW  PGSIZE\n*                     +------------------------------+ 0xeebfd000\n*                     |                              |\n*                     |                              |\n*                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n*                     .                              .\n*                     .                              .\n*                     .                              .\n*                     |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|\n*                     |     Program Data &amp; Heap      |\n*    UTEXT -------->  +------------------------------+ 0x00800000\n*    PFTEMP ------->  |       Empty Memory (*)       |        PTSIZE\n*                     |                              |\n*    UTEMP -------->  +------------------------------+ 0x00400000      --+\n*                     |       Empty Memory (*)       |                   |\n*                     | - - - - - - - - - - - - - - -|                   |\n*                     |  User STAB Data (optional)   |                 PTSIZE\n*    USTABDATA ---->  +------------------------------+ 0x00200000        |\n*                     |       Empty Memory (*)       |                   |\n*    0 ------------>  +------------------------------+                 --+\n*\n* (*) Note: The kernel ensures that \"Invalid Memory\" is *never* mapped.\n*     \"Empty Memory\" is normally unmapped, but user programs may map pages\n*     there if desired.  JOS user programs map pages temporarily at UTEMP.\n*/</span></code></pre></div>\n</li>\n<li>\n<p>per-CPU TSS and TSS descriptor</p>\n<p>首先先说一下什么是TSS:</p>\n<blockquote>\n<p>The <strong>task state segment</strong> (<strong>TSS</strong>) is a special structure on <a href=\"https://en.wikipedia.org/wiki/X86\">x86</a>-based computers which holds information about a <a href=\"https://en.wikipedia.org/wiki/Task_(computers)\">task</a>. It is used by the <a href=\"https://en.wikipedia.org/wiki/Operating_system\">operating system</a> <a href=\"https://en.wikipedia.org/wiki/Kernel_(computer_science)\">kernel</a> for task management. Specifically, the following information is stored in the TSS:</p>\n<ul>\n<li><a href=\"https://en.wikipedia.org/wiki/Processor_register\">Processor register</a> state</li>\n<li>I/O port permissions</li>\n<li>Inner-level stack pointers</li>\n<li>Previous TSS link</li>\n</ul>\n<p>The TSS may reside anywhere in <a href=\"https://en.wikipedia.org/wiki/Memory\">memory</a>. A special segment register called the task register (TR) holds a <a href=\"https://en.wikipedia.org/wiki/X86_memory_segmentation\">segment selector</a> that points to a valid TSS segment descriptor which resides in the <a href=\"https://en.wikipedia.org/wiki/Global_Descriptor_Table\">GDT</a> (a TSS descriptor may not reside in the <a href=\"https://en.wikipedia.org/wiki/Local_Descriptor_Table\">LDT</a>). Therefore, to use a TSS the following must be done by the operating system kernel:</p>\n<ol>\n<li>Create a TSS descriptor entry in the GDT</li>\n<li>Load the TR with the segment selector for that segment</li>\n<li>Add information to the TSS in memory as needed</li>\n</ol>\n<p>For security purposes, the TSS should be placed in memory that is accessible only to the <a href=\"https://en.wikipedia.org/wiki/Kernel_(computer_science)\">kernel</a>.</p>\n<p>quote from <a href=\"https://en.wikipedia.org/wiki/Task_state_segment\">https://en.wikipedia.org/wiki/Task_state_segment</a></p>\n</blockquote>\n<p>所以说，TSS就是一个用来保存一个task (在scheduling中指一个thread或者一个process)的相关信息的。而TSS descriptor会被在GDT中分配，因为GDT就是用来管理每个segment是做什么的用的。</p>\n<p>因为需要明确每个CPU的stack在哪里，所以需要per-CPU TSS。CPU i的TSS被存在<code class=\"language-text\">cpus[i].cpu_ts</code>中，对应的TSS descriptor在<code class=\"language-text\">gdt[(GDT_TSS0 &gt;&gt; 3) + i]</code>。在<code class=\"language-text\">kern/trap.c</code>中使用个全局变量<code class=\"language-text\">struct Taskstate ts</code> 将变得没什么用。</p>\n</li>\n<li>\n<p>per-CPU current environment pointer</p>\n<p>因为CPU们可以同时跑不同的进程，所以不能只有一个<code class=\"language-text\">curenv</code>了，我们把它改为<code class=\"language-text\">cpus[cpunum()].cpu_env</code>（或者<code class=\"language-text\">thiscpu-&gt;cpu_env</code>）。这指向当前CPU正在执行的环境。</p>\n</li>\n<li>\n<p>per-CPU system register</p>\n<p>所有的寄存器，包括系统寄存器都是private to CPU。所以对于寄存器的初始化函数，如<code class=\"language-text\">lcr3()</code>, <code class=\"language-text\">ltr()</code>, <code class=\"language-text\">lgdt()</code>, <code class=\"language-text\">lidt()</code>都需要在每个CPU上运行一下。</p>\n</li>\n</ul>\n<p>除此之外，乳沟还有加入任何per-CPU state，或者和CPU相关的初始化，注意都要转化为在CPU上运行。</p>\n<h3>Exercise 3</h3>\n<p>修改<code class=\"language-text\">kern.pmap.c</code>中的<code class=\"language-text\">mem_init_mp()</code>来把多个CPU的stack按照上面所说的映射上。</p>\n<p>写法就是按照注释的要求，注意stacktop是最上面：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Modify mappings in kern_pgdir to support SMP</span>\n<span class=\"token comment\">//   - Map the per-CPU stacks in the region [KSTACKTOP-PTSIZE, KSTACKTOP)</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">mem_init_mp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Map per-CPU stacks starting at KSTACKTOP, for up to 'NCPU' CPUs.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// For CPU i, use the physical memory that 'percpu_kstacks[i]' refers</span>\n\t<span class=\"token comment\">// to as its kernel stack. CPU i's kernel stack grows down from virtual</span>\n\t<span class=\"token comment\">// address kstacktop_i = KSTACKTOP - i * (KSTKSIZE + KSTKGAP), and is</span>\n\t<span class=\"token comment\">// divided into two pieces, just like the single stack you set up in</span>\n\t<span class=\"token comment\">// mem_init:</span>\n\t<span class=\"token comment\">//     * [kstacktop_i - KSTKSIZE, kstacktop_i)</span>\n\t<span class=\"token comment\">//          -- backed by physical memory</span>\n\t<span class=\"token comment\">//     * [kstacktop_i - (KSTKSIZE + KSTKGAP), kstacktop_i - KSTKSIZE)</span>\n\t<span class=\"token comment\">//          -- not backed; so if the kernel overflows its stack,</span>\n\t<span class=\"token comment\">//             it will fault rather than overwrite another CPU's stack.</span>\n\t<span class=\"token comment\">//             Known as a \"guard page\".</span>\n\t<span class=\"token comment\">//     Permissions: kernel RW, user NONE</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// LAB 4: Your code here:</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>NCPU<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tuintptr_t kstacktop_i <span class=\"token operator\">=</span> KSTACKTOP <span class=\"token operator\">-</span> i <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>KSTKSIZE <span class=\"token operator\">+</span> KSTKGAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">,</span> kstacktop_i <span class=\"token operator\">-</span> KSTKSIZE<span class=\"token punctuation\">,</span> KSTKSIZE<span class=\"token punctuation\">,</span> \n                        <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>percpu_kstacks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_W <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行之后的结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> qemu-nox\n<span class=\"token punctuation\">..</span>.\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_alloc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_kern_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_installed_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\nSMP: CPU 0 found 1 CPU<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\nenabled interrupts: 1 2\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\nkernel panic on CPU 0 at kern/trap.c:220: page fault <span class=\"token keyword\">in</span> kernel\nWelcome to the JOS kernel monitor<span class=\"token operator\">!</span>\nType <span class=\"token string\">'help'</span> <span class=\"token keyword\">for</span> a list of commands.\nK<span class=\"token operator\">></span></code></pre></div>\n<h3>Exercise 4</h3>\n<p>修改<code class=\"language-text\">kern/trap.c</code>中的<code class=\"language-text\">trap_init_percpu()</code>，以初始化BSP的TSS和TSS descriptor。注意，改完之后的代码应该不包含<code class=\"language-text\">ts</code>这个全局变量了。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Initialize and load the per-CPU TSS and IDT</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">trap_init_percpu</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// The example code here sets up the Task State Segment (TSS) and</span>\n\t<span class=\"token comment\">// the TSS descriptor for CPU 0. But it is incorrect if we are</span>\n\t<span class=\"token comment\">// running on other CPUs because each CPU has its own kernel stack.</span>\n\t<span class=\"token comment\">// Fix the code so that it works for all CPUs.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Hints:</span>\n\t<span class=\"token comment\">//   - The macro \"thiscpu\" always refers to the current CPU's</span>\n\t<span class=\"token comment\">//     struct CpuInfo;</span>\n\t<span class=\"token comment\">//   - The ID of the current CPU is given by cpunum() or</span>\n\t<span class=\"token comment\">//     thiscpu->cpu_id;</span>\n\t<span class=\"token comment\">//   - Use \"thiscpu->cpu_ts\" as the TSS for the current CPU,</span>\n\t<span class=\"token comment\">//     rather than the global \"ts\" variable;</span>\n\t<span class=\"token comment\">//   - Use gdt[(GD_TSS0 >> 3) + i] for CPU i's TSS descriptor;</span>\n\t<span class=\"token comment\">//   - You mapped the per-CPU kernel stacks in mem_init_mp()</span>\n\t<span class=\"token comment\">//   - Initialize cpu_ts.ts_iomb to prevent unauthorized environments</span>\n\t<span class=\"token comment\">//     from doing IO (0 is not the correct value!)</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// ltr sets a 'busy' flag in the TSS selector, so if you</span>\n\t<span class=\"token comment\">// accidentally load the same TSS on more than one CPU, you'll</span>\n\t<span class=\"token comment\">// get a triple fault.  If you set up an individual CPU's TSS</span>\n\t<span class=\"token comment\">// wrong, you may not get a fault until you try to return from</span>\n\t<span class=\"token comment\">// user space on that CPU.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// LAB 4: Your code here:</span>\n\n\t<span class=\"token comment\">// Setup a TSS so that we get the right stack</span>\n\t<span class=\"token comment\">// when we trap to the kernel.</span>\n\tthiscpu<span class=\"token operator\">-></span>cpu_ts<span class=\"token punctuation\">.</span>ts_esp0 <span class=\"token operator\">=</span> KSTACKTOP <span class=\"token operator\">-</span> <span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>KSTKSIZE <span class=\"token operator\">+</span> KSTKGAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthiscpu<span class=\"token operator\">-></span>cpu_ts<span class=\"token punctuation\">.</span>ts_ss0 <span class=\"token operator\">=</span> GD_KD<span class=\"token punctuation\">;</span>\n\tthiscpu<span class=\"token operator\">-></span>cpu_ts<span class=\"token punctuation\">.</span>ts_iomb <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Taskstate</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Initialize the TSS slot of the gdt.</span>\n\tgdt<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>GD_TSS0 <span class=\"token operator\">>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">SEG16</span><span class=\"token punctuation\">(</span>STS_T32A<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>thiscpu<span class=\"token operator\">-></span>cpu_ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Taskstate</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tgdt<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>GD_TSS0 <span class=\"token operator\">>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sd_s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Load the TSS selector (like other segment selectors, the</span>\n\t<span class=\"token comment\">// bottom three bits are special; we leave them 0)</span>\n\t<span class=\"token function\">ltr</span><span class=\"token punctuation\">(</span>GD_TSS0 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Load the IDT</span>\n\t<span class=\"token function\">lidt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>idt_pd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>测试结果如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> qemu-nox CPUS<span class=\"token operator\">=</span>4\n<span class=\"token punctuation\">..</span>.\nPhysical memory: 131072K available, base <span class=\"token operator\">=</span> 640K, extended <span class=\"token operator\">=</span> 130432K\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_alloc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_kern_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_installed_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\nSMP: CPU 0 found 4 CPU<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\nenabled interrupts: 1 2\nSMP: CPU 1 starting\nSMP: CPU 2 starting\nSMP: CPU 3 starting\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<h3>Locking</h3>\n<p>现在当在<code class=\"language-text\">mp_main()</code>初始化AP之后进入spin:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Setup code for APs</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">mp_main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// We are in high EIP now, safe to switch to kern_pgdir </span>\n\t<span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SMP: CPU %d starting\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lapic_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">env_init_percpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">trap_init_percpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">xchg</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>thiscpu<span class=\"token operator\">-></span>cpu_status<span class=\"token punctuation\">,</span> CPU_STARTED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tell boot_aps() we're up</span>\n\n\t<span class=\"token comment\">// Now that we have finished some basic setup, call sched_yield()</span>\n\t<span class=\"token comment\">// to start running processes on this CPU.  But make sure that</span>\n\t<span class=\"token comment\">// only one CPU can enter the scheduler at a time!</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Your code here:</span>\n\n\t<span class=\"token comment\">// Remove this after you finish Exercise 6</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>再让AP进行更复杂的操作之前，我们需要解决这里面可能有的一些race。（这里不太明白，明明<code class=\"language-text\">boot_aps</code>是一个CPU一个CPU处理的，为啥会有race...）最简单的方法就是用一个<em>big kernel lock</em>。big kernel lock是一个全局锁，当一个环境进入kernel mode的时候就会获取这个锁，当环境返回user mode的时候就会释放。这样让use mode的环境们可以并行运行，但是如果要进入kernel就只能有一个了。</p>\n<p><code class=\"language-text\">kern/spinlock.h</code>中声明了big kernel lock，名为<code class=\"language-text\">kernel_lock</code>，其接口为<code class=\"language-text\">lock_kernel()</code>与<code class=\"language-text\">unlock_kernel()</code>。我们需要在以下的4个地方加入这个锁相关的代码：</p>\n<ul>\n<li>在<code class=\"language-text\">i386_init()</code>, BSP唤醒其他CPUs之前acquire。</li>\n<li>在<code class=\"language-text\">mp_main()</code>, 初始化AP后acquire, 之后调用<code class=\"language-text\">sched_yield()</code>来在这个AP上运行环境。</li>\n<li>在<code class=\"language-text\">trap()</code>, 当trap是来自user mode的时候acquire。</li>\n<li>在<code class=\"language-text\">env_run()</code>, release the lock <em>right before</em> switching to user mode. 或早或晚都会导致races or deadlocks.</li>\n</ul>\n<h3>Exercise 5</h3>\n<p>根据上面的4条修改代码：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// i386_init()</span>\n\t<span class=\"token comment\">// Acquire the big kernel lock before waking up APs</span>\n\t<span class=\"token comment\">// Your code here:</span>\n\t<span class=\"token function\">lock_kernel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Starting non-boot CPUs</span>\n\t<span class=\"token function\">boot_aps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// mp_main()</span>\n\t<span class=\"token comment\">// Now that we have finished some basic setup, call sched_yield()</span>\n\t<span class=\"token comment\">// to start running processes on this CPU.  But make sure that</span>\n\t<span class=\"token comment\">// only one CPU can enter the scheduler at a time!</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Your code here:</span>\n\t<span class=\"token function\">lock_kernel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sched_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Remove this after you finish Exercise 6</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// trap()</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_cs <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Trapped from user mode.</span>\n\t\t<span class=\"token comment\">// Acquire the big kernel lock before doing any</span>\n\t\t<span class=\"token comment\">// serious kernel work.</span>\n\t\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n        <span class=\"token function\">lock_kernel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">// env_run()</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">env_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Step 1: If this is a context switch (a new environment is running):</span>\n\t<span class=\"token comment\">//\t   1. Set the current environment (if any) back to</span>\n\t<span class=\"token comment\">//\t      ENV_RUNNABLE if it is ENV_RUNNING (think about</span>\n\t<span class=\"token comment\">//\t      what other states it can be in),</span>\n\t<span class=\"token comment\">//\t   2. Set 'curenv' to the new environment,</span>\n\t<span class=\"token comment\">//\t   3. Set its status to ENV_RUNNING,</span>\n\t<span class=\"token comment\">//\t   4. Update its 'env_runs' counter,</span>\n\t<span class=\"token comment\">//\t   5. Use lcr3() to switch to its address space.</span>\n\t<span class=\"token comment\">// Step 2: Use env_pop_tf() to restore the environment's</span>\n\t<span class=\"token comment\">//\t   registers and drop into user mode in the</span>\n\t<span class=\"token comment\">//\t   environment.</span>\n\n\t<span class=\"token comment\">// Hint: This function loads the new environment's state from</span>\n\t<span class=\"token comment\">//\te->env_tf.  Go back through the code you wrote above</span>\n\t<span class=\"token comment\">//\tand make sure you have set the relevant parts of</span>\n\t<span class=\"token comment\">//\te->env_tf to sensible values.</span>\n\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curenv <span class=\"token operator\">&amp;&amp;</span> curenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">==</span> ENV_RUNNING<span class=\"token punctuation\">)</span>\n\t\tcurenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_RUNNABLE<span class=\"token punctuation\">;</span>\n\tcurenv <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_RUNNING<span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_runs<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">unlock_kernel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">env_pop_tf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// panic(\"env_run not yet implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后的这个<code class=\"language-text\">env_run</code>是通过上面的注释加在了step 1和step 2之间了。</p>\n<p>需要做完下一个exercise 才能测试这一个。</p>\n<ul>\n<li>\n<p>如果big kernel lock保证了只能有一个环境运行在kernel mode，为什么我们还需要不同的kernel stack呢？</p>\n<p>回忆进入<code class=\"language-text\">trap</code>函数之前，在<code class=\"language-text\">trapentry.S</code>的<code class=\"language-text\">_alltraps</code>中是需要存入当前的<code class=\"language-text\">esp</code>等状态信息的。如果先后有两个不同CPU的触发从user mode到kernel mode的中断，那么会先后推入<code class=\"language-text\">esp</code>等信息，如CPU 0先推入，然后CPU 1再推入，但是如果CPU 0先返回了，就会恢复成CPU 0的状态了，就出问题了。简而言之，在进入<code class=\"language-text\">trap()</code>之前仍然是有关于栈的操作的，所以只用在<code class=\"language-text\">trap</code>里的锁是午发避免race的。</p>\n</li>\n</ul>\n<h3>Round-Robin Scheduling</h3>\n<p>下一个任务就是实现Round-Robin。其在ROS中的工作方式如下：</p>\n<ul>\n<li>在<code class=\"language-text\">kern/sched.c</code>中的<code class=\"language-text\">sched_yield()</code>函数会循环搜索<code class=\"language-text\">envs[]</code>，找到第一个状态为<code class=\"language-text\">ENV_RUNNABLE</code>的环境就调用<code class=\"language-text\">env_run()</code>来进入这个环境。</li>\n<li><code class=\"language-text\">sched_yield()</code>需要保证一个环境同时只能运行在一个CPU上。已经被运行了的环境的状态为<code class=\"language-text\">ENV_RUNNING</code>。</li>\n<li>我们实现了一个新的system call，名为<code class=\"language-text\">sys_yield()</code>，其让用户环境可以主动的调用<code class=\"language-text\">sched_yield()</code>来让出CPU。</li>\n</ul>\n<h3>Exercise 6</h3>\n<p>实现<code class=\"language-text\">sched_yield()</code>，并把<code class=\"language-text\">sys_yield()</code>加入<code class=\"language-text\">syscall()</code>。修改<code class=\"language-text\">kern/init.c</code>来创建3个环境，让他们都运行<code class=\"language-text\">user/yield.c</code>。</p>\n<p>首先是<code class=\"language-text\">sched_yield()</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Choose a user environment to run and run it.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">sched_yield</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>idle<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Implement simple round-robin scheduling.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Search through 'envs' for an ENV_RUNNABLE environment in</span>\n\t<span class=\"token comment\">// circular fashion starting just after the env this CPU was</span>\n\t<span class=\"token comment\">// last running.  Switch to the first such environment found.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// If no envs are runnable, but the environment previously</span>\n\t<span class=\"token comment\">// running on this CPU is still ENV_RUNNING, it's okay to</span>\n\t<span class=\"token comment\">// choose that environment.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Never choose an environment that's currently running on</span>\n\t<span class=\"token comment\">// another CPU (env_status == ENV_RUNNING). If there are</span>\n\t<span class=\"token comment\">// no runnable environments, simply drop through to the code</span>\n\t<span class=\"token comment\">// below to halt the cpu.</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\tidle <span class=\"token operator\">=</span> curenv <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">?</span> envs <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>curenv <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> NENV<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> envs <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>idle <span class=\"token operator\">-</span> envs <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> NENV<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_status <span class=\"token operator\">!=</span> ENV_RUNNABLE<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">env_run</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> NENV <span class=\"token operator\">&amp;&amp;</span> curenv <span class=\"token operator\">&amp;&amp;</span> curenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">==</span> ENV_RUNNING<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">env_run</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// sched_halt never returns</span>\n\t<span class=\"token function\">sched_halt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后在<code class=\"language-text\">syscall()</code>里面加上<code class=\"language-text\">sys_yield</code>。注意<code class=\"language-text\">SYS_yield</code>已经在<code class=\"language-text\">inc/syscall.h</code>里面被加上了。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t\t<span class=\"token keyword\">case</span> SYS_yield<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最后在<code class=\"language-text\">init()</code>中加入3个yield：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TEST)</span>\n\t<span class=\"token comment\">// Don't touch -- used by grading script!</span>\n\t<span class=\"token function\">ENV_CREATE</span><span class=\"token punctuation\">(</span>TEST<span class=\"token punctuation\">,</span> ENV_TYPE_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token comment\">// Touch all you want.</span>\n\t<span class=\"token function\">ENV_CREATE</span><span class=\"token punctuation\">(</span>user_yield<span class=\"token punctuation\">,</span> ENV_TYPE_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ENV_CREATE</span><span class=\"token punctuation\">(</span>user_yield<span class=\"token punctuation\">,</span> ENV_TYPE_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ENV_CREATE</span><span class=\"token punctuation\">(</span>user_yield<span class=\"token punctuation\">,</span> ENV_TYPE_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//ENV_CREATE(user_primes, ENV_TYPE_USER);</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span> </span><span class=\"token comment\">// TEST*</span>\n\t<span class=\"token comment\">// Schedule and run the first user environment!</span>\n\t<span class=\"token function\">sched_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行可以得到：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> qemu-nox\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001001\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001002\nHello, I am environment 00001000.\nHello, I am environment 00001001.\nHello, I am environment 00001002.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 0.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 0.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 0.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 1.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 1.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 1.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 2.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 2.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 2.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 3.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 3.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 3.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 4.\nAll <span class=\"token keyword\">done</span> <span class=\"token keyword\">in</span> environment 00001000.\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 4.\nAll <span class=\"token keyword\">done</span> <span class=\"token keyword\">in</span> environment 00001001.\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001001\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 4.\nAll <span class=\"token keyword\">done</span> <span class=\"token keyword\">in</span> environment 00001002.\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001002\nNo runnable environments <span class=\"token keyword\">in</span> the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>如果设置CPUS=2会有：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> qemu-nox CPUS<span class=\"token operator\">=</span>2\n***\n*** Use Ctrl-a x to <span class=\"token keyword\">exit</span> qemu\n***\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001001\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001002\nHello, I am environment 00001000.\nHello, I am environment 00001001.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 0.\nHello, I am environment 00001002.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 0.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 1.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 0.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 1.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 2.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 1.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 2.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 3.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 3.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 2.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 4.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 4.\nAll <span class=\"token keyword\">done</span> <span class=\"token keyword\">in</span> environment 00001000.\nAll <span class=\"token keyword\">done</span> <span class=\"token keyword\">in</span> environment 00001001.\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001001\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 3.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 4.\nAll <span class=\"token keyword\">done</span> <span class=\"token keyword\">in</span> environment 00001002.\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001002\nNo runnable environments <span class=\"token keyword\">in</span> the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<ul>\n<li>\n<p>在现在的<code class=\"language-text\">env_run()</code>中，为什么在进行context switch前后都可以dereference <code class=\"language-text\">e</code>？</p>\n<p>因为<code class=\"language-text\">e</code>在kernel部分，所有的环境的里对应的地址是一样的。</p>\n</li>\n<li>\n<p>再切换的时候是在哪里保存的旧的寄存器状态的？为什么要这么做？</p>\n<p>如果不这么做切换回来就不能继续运行了...保存是在<code class=\"language-text\">_alltraps</code>中做的，恢复是在<code class=\"language-text\">env_run</code>的<code class=\"language-text\">env_pop_tf()</code>做的。</p>\n</li>\n</ul>\n<h3>System Calls for Environment Creation</h3>\n<p>尽管现在可以子啊用户环境之间相互切换了，创建环境仍然需要在kernel初始化的时候进行。现在开始需要实现system calls来让用户环境可以创建新的用户环境。</p>\n<p>Unix用<code class=\"language-text\">fork()</code>作为process creation primitive。其会复制整个address space。父进程和子进程的唯一区别在于其process ID与parent process ID。在父进程中，<code class=\"language-text\">fork()</code>返回子进程ID，子进程中返回0。在默认设置下，这两个进程之后对内存的修改互不影响。</p>\n<p>我们将创建一个不同的，更primitive的一组system call。用这些system call我们将可以完全在用户环境下实现<code class=\"language-text\">fork</code>。新的system call有：</p>\n<ul>\n<li>\n<p><code class=\"language-text\">sys_exofork</code></p>\n<p>创建一个新的几乎完全是空白的环境。这个环境的address space在用户部分什么都没有映射，且环境不能运行。但是其寄存器状态会和父进程相同。在父进程中，<code class=\"language-text\">sys_exofork</code>会返回子进程的<code class=\"language-text\">envid_t</code>，子进程中返回0（因为子进程不能运行，所以直到parent把child标记为runnable之后才会返回这个0）。</p>\n</li>\n<li>\n<p><code class=\"language-text\">sys_env_set_status</code></p>\n<p>把某一个环境的状态设置为<code class=\"language-text\">ENV_RUNNABLE</code>或<code class=\"language-text\">ENV_NOT_RUNNABLE</code>。基本上是用来表示一个新环境可以运行了。</p>\n</li>\n<li>\n<p><code class=\"language-text\">sys_page_alloc</code></p>\n<p>把某一page的物理内存映射到制定address space的虚拟地址。</p>\n</li>\n<li>\n<p><code class=\"language-text\">sys_page_map</code></p>\n<p>把一个page（注意不是page的内容）从一个地址空间映射到另一个。保存memory sharing arrangement inplace使得两者会指向同样的物理内存。</p>\n</li>\n<li>\n<p><code class=\"language-text\">sys_page_unmap</code></p>\n<p>在某一给定地址空间中，unmap a page mapped at a given VA。</p>\n</li>\n</ul>\n<p>对于以上这些输入中包含environment ID的system call，JOS支持0表示当前环境。这一支持在<code class=\"language-text\">envid2env()</code>中被实现了。</p>\n<p>在<code class=\"language-text\">user/dumbfork.c</code>中已经实现了一个比较蠢的<code class=\"language-text\">fork</code>，测试程序会使用上述system call来创建一个子进程。然后父进程和子进程会相互调用<code class=\"language-text\">sys_yield</code>，10个循环之后parent exit，20个之后child退出。</p>\n<h3>Exercise 7</h3>\n<p>在<code class=\"language-text\">kern/syscall.c</code>中实现上述system call。</p>\n<p>首先是<code class=\"language-text\">sys_exofork</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Allocate a new environment.</span>\n<span class=\"token comment\">// Returns envid of new environment, or &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_NO_FREE_ENV if no free environment is available.</span>\n<span class=\"token comment\">//\t-E_NO_MEM on memory exhaustion.</span>\n<span class=\"token keyword\">static</span> envid_t\n<span class=\"token function\">sys_exofork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Create the new environment with env_alloc(), from kern/env.c.</span>\n\t<span class=\"token comment\">// It should be left as env_alloc created it, except that</span>\n\t<span class=\"token comment\">// status is set to ENV_NOT_RUNNABLE, and the register set is copied</span>\n\t<span class=\"token comment\">// from the current environment -- but tweaked so sys_exofork</span>\n\t<span class=\"token comment\">// will appear to return 0.</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">env_alloc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> curenv<span class=\"token operator\">-></span>env_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_NOT_RUNNABLE<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_tf <span class=\"token operator\">=</span> curenv<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_regs<span class=\"token punctuation\">.</span>reg_eax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> e<span class=\"token operator\">-></span>env_id<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_exofork not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后是<code class=\"language-text\">sys_env_set_status</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Set envid's env_status to status, which must be ENV_RUNNABLE</span>\n<span class=\"token comment\">// or ENV_NOT_RUNNABLE.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns 0 on success, &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_BAD_ENV if environment envid doesn't currently exist,</span>\n<span class=\"token comment\">//\t\tor the caller doesn't have permission to change envid.</span>\n<span class=\"token comment\">//\t-E_INVAL if status is not a valid status for an environment.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_env_set_status</span><span class=\"token punctuation\">(</span>envid_t envid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Hint: Use the 'envid2env' function from kern/env.c to translate an</span>\n\t<span class=\"token comment\">// envid to a struct Env.</span>\n\t<span class=\"token comment\">// You should set envid2env's third argument to 1, which will</span>\n\t<span class=\"token comment\">// check whether the current environment has permission to set</span>\n\t<span class=\"token comment\">// envid's status.</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> ENV_NOT_RUNNABLE <span class=\"token operator\">&amp;&amp;</span> status <span class=\"token operator\">!=</span> ENV_RUNNABLE<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_env_set_status not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后是<code class=\"language-text\">sys_page_alloc</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Allocate a page of memory and map it at 'va' with permission</span>\n<span class=\"token comment\">// 'perm' in the address space of 'envid'.</span>\n<span class=\"token comment\">// The page's contents are set to 0.</span>\n<span class=\"token comment\">// If a page is already mapped at 'va', that page is unmapped as a</span>\n<span class=\"token comment\">// side effect.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// perm -- PTE_U | PTE_P must be set, PTE_AVAIL | PTE_W may or may not be set,</span>\n<span class=\"token comment\">//         but no other bits may be set.  See PTE_SYSCALL in inc/mmu.h.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return 0 on success, &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_BAD_ENV if environment envid doesn't currently exist,</span>\n<span class=\"token comment\">//\t\tor the caller doesn't have permission to change envid.</span>\n<span class=\"token comment\">//\t-E_INVAL if va >= UTOP, or va is not page-aligned.</span>\n<span class=\"token comment\">//\t-E_INVAL if perm is inappropriate (see above).</span>\n<span class=\"token comment\">//\t-E_NO_MEM if there's no memory to allocate the new page,</span>\n<span class=\"token comment\">//\t\tor to allocate any necessary page tables.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span>envid_t envid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Hint: This function is a wrapper around page_alloc() and</span>\n\t<span class=\"token comment\">//   page_insert() from kern/pmap.c.</span>\n\t<span class=\"token comment\">//   Most of the new code you write should be to check the</span>\n\t<span class=\"token comment\">//   parameters for correctness.</span>\n\t<span class=\"token comment\">//   If page_insert() fails, remember to free the page you</span>\n\t<span class=\"token comment\">//   allocated!</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>pp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>va <span class=\"token operator\">>=</span> UTOP <span class=\"token operator\">||</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>PTE_SYSCALL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pp <span class=\"token operator\">=</span> <span class=\"token function\">page_alloc</span><span class=\"token punctuation\">(</span>ALLOC_ZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">page_insert</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> pp<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">page_free</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_page_alloc not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后是<code class=\"language-text\">sys_page_map</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Map the page of memory at 'srcva' in srcenvid's address space</span>\n<span class=\"token comment\">// at 'dstva' in dstenvid's address space with permission 'perm'.</span>\n<span class=\"token comment\">// Perm has the same restrictions as in sys_page_alloc, except</span>\n<span class=\"token comment\">// that it also must not grant write access to a read-only</span>\n<span class=\"token comment\">// page.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return 0 on success, &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_BAD_ENV if srcenvid and/or dstenvid doesn't currently exist,</span>\n<span class=\"token comment\">//\t\tor the caller doesn't have permission to change one of them.</span>\n<span class=\"token comment\">//\t-E_INVAL if srcva >= UTOP or srcva is not page-aligned,</span>\n<span class=\"token comment\">//\t\tor dstva >= UTOP or dstva is not page-aligned.</span>\n<span class=\"token comment\">//\t-E_INVAL is srcva is not mapped in srcenvid's address space.</span>\n<span class=\"token comment\">//\t-E_INVAL if perm is inappropriate (see sys_page_alloc).</span>\n<span class=\"token comment\">//\t-E_INVAL if (perm &amp; PTE_W), but srcva is read-only in srcenvid's</span>\n<span class=\"token comment\">//\t\taddress space.</span>\n<span class=\"token comment\">//\t-E_NO_MEM if there's no memory to allocate any necessary page tables.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_page_map</span><span class=\"token punctuation\">(</span>envid_t srcenvid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>srcva<span class=\"token punctuation\">,</span>\n\t     envid_t dstenvid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dstva<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Hint: This function is a wrapper around page_lookup() and</span>\n\t<span class=\"token comment\">//   page_insert() from kern/pmap.c.</span>\n\t<span class=\"token comment\">//   Again, most of the new code you write should be to check the</span>\n\t<span class=\"token comment\">//   parameters for correctness.</span>\n\t<span class=\"token comment\">//   Use the third argument to page_lookup() to</span>\n\t<span class=\"token comment\">//   check the current permissions on the page.</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>srce <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>dste <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>pp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tpte_t <span class=\"token operator\">*</span>src_pte <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>srcenvid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>srce<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>dstenvid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dste<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>srcva <span class=\"token operator\">>=</span> UTOP <span class=\"token operator\">||</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>srcva<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>srcva<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>dstva <span class=\"token operator\">>=</span> UTOP <span class=\"token operator\">||</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>dstva<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>dstva<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>PTE_SYSCALL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pp <span class=\"token operator\">=</span> <span class=\"token function\">page_lookup</span><span class=\"token punctuation\">(</span>srce<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> srcva<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>src_pte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>src_pte <span class=\"token operator\">&amp;</span> PTE_W<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> PTE_W<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">page_insert</span><span class=\"token punctuation\">(</span>dste<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> pp<span class=\"token punctuation\">,</span> dstva<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_page_map not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后是<code class=\"language-text\">sys_page_unmap</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Unmap the page of memory at 'va' in the address space of 'envid'.</span>\n<span class=\"token comment\">// If no page is mapped, the function silently succeeds.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return 0 on success, &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_BAD_ENV if environment envid doesn't currently exist,</span>\n<span class=\"token comment\">//\t\tor the caller doesn't have permission to change envid.</span>\n<span class=\"token comment\">//\t-E_INVAL if va >= UTOP, or va is not page-aligned.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_page_unmap</span><span class=\"token punctuation\">(</span>envid_t envid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Hint: This function is a wrapper around page_remove().</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>va <span class=\"token operator\">>=</span> UTOP <span class=\"token operator\">||</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">page_remove</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_page_unmap not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后把这些system call都放到<code class=\"language-text\">syscall()</code>函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Dispatches to the correct kernel function, passing the arguments.</span>\nint32_t\n<span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span>uint32_t syscallno<span class=\"token punctuation\">,</span> uint32_t a1<span class=\"token punctuation\">,</span> uint32_t a2<span class=\"token punctuation\">,</span> uint32_t a3<span class=\"token punctuation\">,</span> uint32_t a4<span class=\"token punctuation\">,</span> uint32_t a5<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Call the function corresponding to the 'syscallno' parameter.</span>\n\t<span class=\"token comment\">// Return any appropriate return value.</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token comment\">// panic(\"syscall not implemented\");</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>syscallno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> SYS_cputs<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">sys_cputs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_cgetc<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_cgetc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_getenvid<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_getenvid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_env_destroy<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_env_destroy</span><span class=\"token punctuation\">(</span><span class=\"token function\">sys_getenvid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_yield<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_page_alloc<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>envid_t<span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_page_map<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_page_map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>envid_t<span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>envid_t<span class=\"token punctuation\">)</span>a3<span class=\"token punctuation\">,</span> \n\t\t\t                    <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a4<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_page_unmap<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_page_unmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>envid_t<span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_exofork<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_exofork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_env_set_status<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_env_set_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>envid_t<span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后就可以运行<code class=\"language-text\">make grade</code>了：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> grade\n<span class=\"token punctuation\">..</span>.\ndumbfork: OK <span class=\"token punctuation\">(</span>1.1s<span class=\"token punctuation\">)</span>\nPart A score: 5/5</code></pre></div>\n<h2>Part B: Copy-on-Write Fork</h2>\n<p>xv6中实现的<code class=\"language-text\">fork()</code>就是基本上和<code class=\"language-text\">dumbfork()</code>一样的，把parent的address space复制到child。而这个赋值操作也就是<code class=\"language-text\">fork</code>开销最大的地方。</p>\n<p>然而，很多时候<code class=\"language-text\">fork</code>后面都直接会跟着<code class=\"language-text\">exec</code>，那么这个复制就显得很浪费了。</p>\n<p>基于这个原因，Unix的后续版本利用virtual memory hardware来允许parent和child共享内存，直到某一个进行修改内存。这个技术被称为<em>copy-on-write</em>。为了达到这一目的，<code class=\"language-text\">fork</code>的时候系统复制的时候address space <em>mappings</em> 而不是page里具体的内容，并标记这些page为read-only。当任意一个进程进行写入的时候就会触发page fault，这时在给这个出发了fault的进程分配一个new, private, writable copy of the page。这样直到写入才会真正进行复制，从而使得<code class=\"language-text\">fork</code>之后直接<code class=\"language-text\">exec</code>的开销小了很多：child很可能只需要复制1个page（the current page of its stack，这个没明白...）</p>\n<p>我们接下来就来实现<em>copy-on-wirte</em> <code class=\"language-text\">fork</code>。</p>\n<h3>User-level page fault handling</h3>\n<p>一个user-level copy-on-write <code class=\"language-text\">fork</code>需要获取在write-protected pages上的page faults。注意copy-on-write只是user-level page fault handling的众多应用之一。</p>\n<p>创建一个address space然后用page faults来进行后续操作是非常常见的。如大多数Unix kernel最开始都只会分配1个page作为stack，之后随着需求再扩增（lazy allocation）。一个典型的Unix kernel需要keep track of what action to take when a page fault occers in each <em>region</em> of a process's space.比如说，再stack触法的一般会需要分配并映射一个新的physical page，在BSS（存储未初始化全局变量的segment）中的往往需要分配一个新的page，全部填充为0，然后再映射。在ystem with demand-paged executables（这啥...），在text region触法的会从硬盘读入对应page的binary，并进行映射。</p>\n<p>kernel需要track很多信息。于其采用传统Unix的方法，我们将在user space里面决定不同的page fault要做什么，这样bugs are less damaging。这种设计让应用定义其内存区域的自动度更大了：我们将在后续的disk-based file system中使用user-level page fault handling。</p>\n<h3>Setting the Page Fault Handler</h3>\n<p>为了handle自己的page fault，一个用户环境需要在JOS kernel中注册一个<em>page fault handler entrypoint</em>。用户环境会用<code class=\"language-text\">sys_env_set_pgfault_upcall</code>这个system call来注册其page fault entrypoint。我们已经在<code class=\"language-text\">Env</code>中加入了<code class=\"language-text\">env_pgfault_upcall</code>来进行记录了。</p>\n<h3>Exercise 8</h3>\n<p>实现<code class=\"language-text\">sys_env_set_pgfault_upcall</code>。注意在查询environment id的时候要进行permission checking(对应参数设为1)，因为这是一个很危险的system call。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Set the page fault upcall for 'envid' by modifying the corresponding struct</span>\n<span class=\"token comment\">// Env's 'env_pgfault_upcall' field.  When 'envid' causes a page fault, the</span>\n<span class=\"token comment\">// kernel will push a fault record onto the exception stack, then branch to</span>\n<span class=\"token comment\">// 'func'.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns 0 on success, &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_BAD_ENV if environment envid doesn't currently exist,</span>\n<span class=\"token comment\">//\t\tor the caller doesn't have permission to change envid.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_env_set_pgfault_upcall</span><span class=\"token punctuation\">(</span>envid_t envid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_pgfault_upcall <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_env_set_pgfault_upcall not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>Normal and Exception Stacks in User Environments</h3>\n<p>在正常(normal)的执行过程中，JOS的一个用户环境会正常地运行在user stack上：其<code class=\"language-text\">ESP</code>寄存器最开始会为<code class=\"language-text\">USTACKTOP</code>，且其栈的数据会在<code class=\"language-text\">USTACKTOP-PGSIZE</code>和<code class=\"language-text\">USTACKTOP-1</code>之间。然而，当发生了page fault的时候，kernel会重启用户环境，让其运行a designated user-level page fault handler在一个不同的stack上——<em>user exception</em> stack。本质上，我们需要让JOS代表用户环境实现这个自动的\"stack switch\"，和x86处理器代表JOS从user mode转换到kernel mode一样。</p>\n<p>JOS的user exception stack也是1 page大，在<code class=\"language-text\">UXSTACKTOP-PGSIZE</code>和<code class=\"language-text\">USTACKTOP-1</code>之间。当在这个栈上运行的时候，user-level page fault handler可以用JOS的regular system call来映射新page或解决page fault对应的问题。然后通过一个assemble language stub，user-level page fault handler 返回到origin stack的错误代码处。</p>\n<p>每个想要支持user-level page fault handling的用户环境都需要使用<code class=\"language-text\">sys-page_alloc()</code>来给其exception stack分配内存。</p>\n<h3>Invoking the User Page Fault Handler</h3>\n<p>我们将需要改变<code class=\"language-text\">kern/trap.c</code>中的page fault handling code以按照如下方法在user mode处理page fault。我们将把fault出现了时候的用户环境的状态称为<em>trap-time</em> state。</p>\n<p>如果没有注册page fault handler，JOS会和以前一样destroy the user environment。如若不然，kernel会在exception stack上创建一个类似于<code class=\"language-text\">inc/trap.h</code>中的<code class=\"language-text\">struct UTrapframe</code>的trap frame。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">                    &lt;-- UXSTACKTOP\ntrap-time esp\ntrap-time eflags\ntrap-time eip\ntrap-time eax       start of struct PushRegs\ntrap-time ecx\ntrap-time edx\ntrap-time ebx\ntrap-time esp\ntrap-time ebp\ntrap-time esi\ntrap-time edi       end of struct PushRegs\ntf_err (error code)\nfault_va            &lt;-- %esp when handler is run</code></pre></div>\n<p><code class=\"language-text\">UTrapframe</code>的结构如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/* information about the fault */</span>\n\tuint32_t utf_fault_va<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* va for T_PGFLT, 0 otherwise */</span>\n\tuint32_t utf_err<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* trap-time return state */</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PushRegs</span> utf_regs<span class=\"token punctuation\">;</span>\n\tuintptr_t utf_eip<span class=\"token punctuation\">;</span>\n\tuint32_t utf_eflags<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* the trap-time stack to return to */</span>\n\tuintptr_t utf_esp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token function\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>packed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>kernel之后会用这个stack和page fault handler来让user environment继续运行。注意，<code class=\"language-text\">fault_va</code>就是出了错误的VA。</p>\n<p>如果用户环境已经运行在exception stack的情况下出现了要给exception，那么说明page fault handler出错了。这种情况下，会在现在的<code class=\"language-text\">tf-&gt;tf_esp</code>下重新创建一个stack frame。我们需要先放入一个空的32-bit word，然后创建一个<code class=\"language-text\">struct UTrapframe</code>。</p>\n<p>我们可以通过检查<code class=\"language-text\">tf-&gt;tf_esp</code>是否在<code class=\"language-text\">UXSTACKTOP-PGSIZE</code>和<code class=\"language-text\">USTACKTOP-1</code>之间来判断是不是已经在exception stack上了。</p>\n<h3>Exercise 9</h3>\n<p>实现<code class=\"language-text\">kern/trap.c</code>中的<code class=\"language-text\">page_fault_handler</code>。如果exception stack runs out of space了怎么办？</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">page_fault_handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Trapframe</span> <span class=\"token operator\">*</span>tf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tuint32_t fault_va<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Read processor's CR2 register to find the faulting address</span>\n\tfault_va <span class=\"token operator\">=</span> <span class=\"token function\">rcr2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Handle kernel-mode page faults.</span>\n\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\n\t<span class=\"token comment\">// We've already handled kernel-mode exceptions, so if we get here,</span>\n\t<span class=\"token comment\">// the page fault happened in user mode.</span>\n\n\t<span class=\"token comment\">// Call the environment's page fault upcall, if one exists.  Set up a</span>\n\t<span class=\"token comment\">// page fault stack frame on the user exception stack (below</span>\n\t<span class=\"token comment\">// UXSTACKTOP), then branch to curenv->env_pgfault_upcall.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// The page fault upcall might cause another page fault, in which case</span>\n\t<span class=\"token comment\">// we branch to the page fault upcall recursively, pushing another</span>\n\t<span class=\"token comment\">// page fault stack frame on top of the user exception stack.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// It is convenient for our code which returns from a page fault</span>\n\t<span class=\"token comment\">// (lib/pfentry.S) to have one word of scratch space at the top of the</span>\n\t<span class=\"token comment\">// trap-time stack; it allows us to more easily restore the eip/esp. In</span>\n\t<span class=\"token comment\">// the non-recursive case, we don't have to worry about this because</span>\n\t<span class=\"token comment\">// the top of the regular user stack is free.  In the recursive case,</span>\n\t<span class=\"token comment\">// this means we have to leave an extra word between the current top of</span>\n\t<span class=\"token comment\">// the exception stack and the new stack frame because the exception</span>\n\t<span class=\"token comment\">// stack _is_ the trap-time stack.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// If there's no page fault upcall, the environment didn't allocate a</span>\n\t<span class=\"token comment\">// page for its exception stack or can't write to it, or the exception</span>\n\t<span class=\"token comment\">// stack overflows, then destroy the environment that caused the fault.</span>\n\t<span class=\"token comment\">// Note that the grade script assumes you will first check for the page</span>\n\t<span class=\"token comment\">// fault upcall and print the \"user fault va\" message below if there is</span>\n\t<span class=\"token comment\">// none.  The remaining three checks can be combined into a single test.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Hints:</span>\n\t<span class=\"token comment\">//   user_mem_assert() and env_run() are useful here.</span>\n\t<span class=\"token comment\">//   To change what the user environment runs, modify 'curenv->env_tf'</span>\n\t<span class=\"token comment\">//   (the 'tf' variable points at 'curenv->env_tf').</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\tbool flag <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_pgfault_upcall <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\tflag <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fault_va <span class=\"token operator\">&lt;</span> UXSTACKTOP <span class=\"token operator\">&amp;&amp;</span> fault_va <span class=\"token operator\">>=</span> UXSTACKTOP <span class=\"token operator\">-</span> PGSIZE<span class=\"token punctuation\">)</span>\n\t\tflag <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// this makes sure it's from user mode</span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span>utf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_esp <span class=\"token operator\">&lt;</span> UXSTACKTOP <span class=\"token operator\">&amp;&amp;</span> curenv<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_esp <span class=\"token operator\">>=</span> UXSTACKTOP <span class=\"token operator\">-</span> PGSIZE<span class=\"token punctuation\">)</span>\n\t\t\tutf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_esp <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tutf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UXSTACKTOP <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// check the overflow and write permission</span>\n\t\t<span class=\"token function\">user_mem_assert</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">,</span> utf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tutf<span class=\"token operator\">-></span>utf_fault_va <span class=\"token operator\">=</span> fault_va<span class=\"token punctuation\">;</span>\n\t\tutf<span class=\"token operator\">-></span>utf_err <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_err<span class=\"token punctuation\">;</span>\n\t\tutf<span class=\"token operator\">-></span>utf_regs <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">;</span>\n\t\tutf<span class=\"token operator\">-></span>utf_eip <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_eip<span class=\"token punctuation\">;</span>\n\t\tutf<span class=\"token operator\">-></span>utf_eflags <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_eflags<span class=\"token punctuation\">;</span>\n\t\tutf<span class=\"token operator\">-></span>utf_esp <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_esp<span class=\"token punctuation\">;</span>\n\t\ttf<span class=\"token operator\">-></span>tf_eip <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>curenv<span class=\"token operator\">-></span>env_pgfault_upcall<span class=\"token punctuation\">;</span>\n\t\ttf<span class=\"token operator\">-></span>tf_esp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>utf<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">env_run</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// Destroy the environment that caused the fault.</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%08x] user fault va %08x ip %08x\\n\"</span><span class=\"token punctuation\">,</span>\n\t\tcurenv<span class=\"token operator\">-></span>env_id<span class=\"token punctuation\">,</span> fault_va<span class=\"token punctuation\">,</span> tf<span class=\"token operator\">-></span>tf_eip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">print_trapframe</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">env_destroy</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>User-mode Page Fault Entrypoint</h3>\n<p>Next, you need to implement the assembly routine that will take care of calling the C page fault handler and resume execution at the original faulting instruction. This assembly routine is the handler that will be registered with the kernel using <code class=\"language-text\">sys_env_set_pgfault_upcall()</code>.</p>\n<h3>Exercise 10</h3>\n<p>实现<code class=\"language-text\">lib/pfentry.S</code>中的<code class=\"language-text\">_pgfault_upcall</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">.text\n.globl _pgfault_upcall\n_pgfault_upcall:\n\t// Call the C page fault handler.\n\tpushl %esp\t\t\t// function argument: pointer to UTF\n\tmovl _pgfault_handler, %eax\n\tcall *%eax\n\taddl $4, %esp\t\t\t// pop function argument\n\t\n\t// Now the C page fault handler has returned and you must return\n\t// to the trap time state.\n\t// Push trap-time %eip onto the trap-time stack.\n\t//\n\t// Explanation:\n\t//   We must prepare the trap-time stack for our eventual return to\n\t//   re-execute the instruction that faulted.\n\t//   Unfortunately, we can&#39;t return directly from the exception stack:\n\t//   We can&#39;t call &#39;jmp&#39;, since that requires that we load the address\n\t//   into a register, and all registers must have their trap-time\n\t//   values after the return.\n\t//   We can&#39;t call &#39;ret&#39; from the exception stack either, since if we\n\t//   did, %esp would have the wrong value.\n\t//   So instead, we push the trap-time %eip onto the *trap-time* stack!\n\t//   Below we&#39;ll switch to that stack and call &#39;ret&#39;, which will\n\t//   restore %eip to its pre-fault value.\n\t//\n\t//   In the case of a recursive fault on the exception stack,\n\t//   note that the word we&#39;re pushing now will fit in the\n\t//   blank word that the kernel reserved for us.\n\t//\n\t// Throughout the remaining code, think carefully about what\n\t// registers are available for intermediate calculations.  You\n\t// may find that you have to rearrange your code in non-obvious\n\t// ways as registers become unavailable as scratch space.\n\t//\n\t// LAB 4: Your code here.\n\tmovl 0x28(%esp), %edx # trap-time eip\n\tsubl $0x4, 0x30(%esp) # we have to use subl now because we can&#39;t use after popfl\n\tmovl 0x30(%esp), %eax # trap-time esp-4\n\tmovl %edx, (%eax)\n\taddl $0x8, %esp\n\n\t// Restore the trap-time registers.  After you do this, you\n\t// can no longer modify any general-purpose registers.\n\t// LAB 4: Your code here.\n\tpopal\n\n\t// Restore eflags from the stack.  After you do this, you can\n\t// no longer use arithmetic operations or anything else that\n\t// modifies eflags.\n\t// LAB 4: Your code here.\n\taddl $0x4, %esp #eip\n\tpopfl\n\n\t// Switch back to the adjusted trap-time stack.\n\t// LAB 4: Your code here.\n\tpopl %esp\n\n\t// Return to re-execute the instruction that faulted.\n\t// LAB 4: Your code here.\n\tret</code></pre></div>\n<p>然后是完成<code class=\"language-text\">lib/pgfault.c</code>中的<code class=\"language-text\">set_pgfault_handler()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Set the page fault handler function.</span>\n<span class=\"token comment\">// If there isn't one yet, _pgfault_handler will be 0.</span>\n<span class=\"token comment\">// The first time we register a handler, we need to</span>\n<span class=\"token comment\">// allocate an exception stack (one page of memory with its top</span>\n<span class=\"token comment\">// at UXSTACKTOP), and tell the kernel to call the assembly-language</span>\n<span class=\"token comment\">// _pgfault_upcall routine when a page fault occurs.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">set_pgfault_handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span>utf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_pgfault_handler <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// First time through!</span>\n\t\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UXSTACKTOP <span class=\"token operator\">-</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_W <span class=\"token operator\">|</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail to allocate exception stack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sys_env_set_pgfault_upcall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> _pgfault_upcall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//panic(\"set_pgfault_handler not implemented\");</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// Save handler pointer for assembly to call.</span>\n\t_pgfault_handler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后就是进行测试，我们来一次看这些个测试样例。</p>\n<p>首先是<code class=\"language-text\">user_faultread</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">umain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I read %08x from location 0!\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>单纯的就是访问了一个没有被分配的内存，没有设置<code class=\"language-text\">_pgfault_upcall</code>，所以直接destroy，输出为：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> run-faultread-nox\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> user fault va 00000000 <span class=\"token function\">ip</span> 00800039\nTRAP frame at 0xf02b0000 from CPU 0\n  edi  0x00000000\n  esi  0x00000000\n  ebp  0xeebfdfd0\n  oesp 0xf0235fdc\n  ebx  0x00000000\n  edx  0x00000000\n  ecx  0x00000000\n  eax  0xeec00000\n  es   0x----0023\n  ds   0x----0023\n  <span class=\"token function\">trap</span> 0x0000000e Page Fault\n  cr2  0x00000000\n  err  0x00000004 <span class=\"token punctuation\">[</span>user, read, not-present<span class=\"token punctuation\">]</span>\n  eip  0x00800039\n  cs   0x----001b\n  flag 0x00000086\n  esp  0xeebfdfc0\n  ss   0x----0023\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\nNo runnable environments <span class=\"token keyword\">in</span> the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>然后是<code class=\"language-text\">user_faultdie</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span>utf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>utf<span class=\"token operator\">-></span>utf_fault_va<span class=\"token punctuation\">;</span>\n\tuint32_t err <span class=\"token operator\">=</span> utf<span class=\"token operator\">-></span>utf_err<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i faulted at va %x, err %x\\n\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> err <span class=\"token operator\">&amp;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_env_destroy</span><span class=\"token punctuation\">(</span><span class=\"token function\">sys_getenvid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">umain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">set_pgfault_handler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xDeadBeef</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>会输出错误地址与错误信息，然后destroy。所以结果是：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> run-faultdie-nox\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\ni faulted at va deadbeef, err 6\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\nNo runnable environments <span class=\"token keyword\">in</span> the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>然后是<code class=\"language-text\">user_faultalloc</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span>utf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>utf<span class=\"token operator\">-></span>utf_fault_va<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fault %x\\n\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\tPTE_P<span class=\"token operator\">|</span>PTE_U<span class=\"token operator\">|</span>PTE_W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allocating at %x in page fault handler: %e\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> addr<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"this string was faulted in at %x\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">umain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">set_pgfault_handler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xDeadBeef</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xCafeBffe</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>如果遇到问题，尝试分配一个page，然后输出出错的位置。<code class=\"language-text\">snprintf</code>是把字符串存在对应地址用的。所以输出结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> run-faultalloc-nox\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\nfault deadbeef\nthis string was faulted <span class=\"token keyword\">in</span> at deadbeef\nfault cafebffe\nfault cafec000\nthis string was faulted <span class=\"token keyword\">in</span> at cafebffe\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\nNo runnable environments <span class=\"token keyword\">in</span> the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>经过测试可以知道是在进行第二次<code class=\"language-text\">snprintf</code>的时候在exception stack里面又触发了中断。这是因为分配的buffer是100 byte，而<code class=\"language-text\">0xcafebffe + 100</code>已经到了下一个page了，所以就需要再进行一次分配。</p>\n<p>最后是<code class=\"language-text\">user_faultallocbad</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span>utf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>utf<span class=\"token operator\">-></span>utf_fault_va<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fault %x\\n\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\tPTE_P<span class=\"token operator\">|</span>PTE_U<span class=\"token operator\">|</span>PTE_W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allocating at %x in page fault handler: %e\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> addr<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"this string was faulted in at %x\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">umain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">set_pgfault_handler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_cputs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xDEADBEEF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意和上面的区别是没有使用<code class=\"language-text\">cprintf</code>，而是调用了<code class=\"language-text\">sys_cputs</code>这一system call。</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ make run-faultallocbad-nox\n...\n[00000000] new env 00001000\n[00001000] user_mem_check assertion failure for va deadbeef\n[00001000] free env 00001000\nNo runnable environments in the system!\n...</code></pre></div>\n<p>用<code class=\"language-text\">cprintf</code>和<code class=\"language-text\">sys_cputs</code>的区别在于，<code class=\"language-text\">cprintf</code>再实现的时候先使用了user lib中的<code class=\"language-text\">vprintfmt</code>，<code class=\"language-text\">vprintfmt</code>会访问<code class=\"language-text\">0xdeadbeef</code>里面存储的内容（把内容复制到buffer中），从而在在user mode触法page fault。而直接调用<code class=\"language-text\">sys_cputs</code>会在触法page fault之前触法system call，然后在<code class=\"language-text\">sys_cputs</code>里面的<code class=\"language-text\">user_mem_assert</code>会发现这个地址不能访问，从而导致destroy。</p>\n<h3>Implementing Copy-on-Write Fork</h3>\n<p>现在我们来实现copy-on-write fork。其代码在<code class=\"language-text\">lib/fork.c</code>，主要的控制流如下：</p>\n<ol>\n<li>parent把<code class=\"language-text\">pgfault()</code>作为page fault handler</li>\n<li>parent调用<code class=\"language-text\">set_exofork</code>来创建一个child environment</li>\n<li>\n<p>对于每个在<code class=\"language-text\">UTOP</code>之下的writable或是copy-on-write page，parent调用<code class=\"language-text\">duppage</code>。其会map这个page到child的对应位置，然后再map到自己的位置，只不过是把权限改为copy-on-write。用<code class=\"language-text\">PTE_COW</code>表示copy-on-write page。</p>\n<p>exception stack不会这样map，child需要重新分配一个新的page作为exception stack，不然就没法正常运行page fault handler了。</p>\n</li>\n<li>parent重新为child设置page fault entry point</li>\n<li>截止到这个时候，child已经可以运行了，所以parent把child设置为<code class=\"language-text\">ENV_RUNNABLE</code></li>\n</ol>\n<p>每次一个环境访问要向一个copy-on-write page写入的时候就会触法page fault handler，其控制流如下：</p>\n<ol>\n<li>kernel通过<code class=\"language-text\">_pgfault_upcall</code>调用<code class=\"language-text\">pgfault()</code></li>\n<li><code class=\"language-text\">pgfault</code>检查page fault是否为一个写入，以及page是<code class=\"language-text\">PTE_COW</code></li>\n<li><code class=\"language-text\">pgfault</code>现在一个临时的地方分配一个新的page，然后把需要写入的page的内容复制到这个临时的page中，然后在把临时page map到对应的位置，给予read/write权限。最后unmap这个临时的地方。</li>\n</ol>\n<h3>Exercise 12</h3>\n<p>按照上述的流程补全<code class=\"language-text\">lib/fork.c</code>。</p>\n<p>具体代码如下，其中大量参考了<code class=\"language-text\">dumbfork</code>，尤其是<code class=\"language-text\">pgfault</code>，实际上和<code class=\"language-text\">dumbfork</code>做的事情一样。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// implement fork from user space</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;inc/string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;inc/lib.h></span></span>\n\n<span class=\"token comment\">// PTE_COW marks copy-on-write page table entries.</span>\n<span class=\"token comment\">// It is one of the bits explicitly allocated to user processes (PTE_AVAIL).</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> PTE_COW\t\t0x800</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">_pgfault_upcall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Custom page fault handler - if faulting page is copy-on-write,</span>\n<span class=\"token comment\">// map in our own private writable copy.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">pgfault</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span>utf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> utf<span class=\"token operator\">-></span>utf_fault_va<span class=\"token punctuation\">;</span>\n\tuint32_t err <span class=\"token operator\">=</span> utf<span class=\"token operator\">-></span>utf_err<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Check that the faulting access was (1) a write, and (2) to a</span>\n\t<span class=\"token comment\">// copy-on-write page.  If not, panic.</span>\n\t<span class=\"token comment\">// Hint:</span>\n\t<span class=\"token comment\">//   Use the read-only page table mappings at uvpt</span>\n\t<span class=\"token comment\">//   (see &lt;inc/memlayout.h>).</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">&amp;</span> FEC_WR<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> \n\t     <span class=\"token punctuation\">(</span>uvpd<span class=\"token punctuation\">[</span><span class=\"token function\">PDX</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t   <span class=\"token punctuation\">(</span>uvpt<span class=\"token punctuation\">[</span><span class=\"token function\">PGNUM</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t   <span class=\"token punctuation\">(</span>uvpt<span class=\"token punctuation\">[</span><span class=\"token function\">PGNUM</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> PTE_COW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fault not on copy-on-write\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Allocate a new page, map it at a temporary location (PFTEMP),</span>\n\t<span class=\"token comment\">// copy the data from the old page to the new page, then move the new</span>\n\t<span class=\"token comment\">// page to the old page's address.</span>\n\t<span class=\"token comment\">// Hint:</span>\n\t<span class=\"token comment\">//   You should make three system calls.</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\taddr <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PFTEMP<span class=\"token punctuation\">,</span> PTE_W <span class=\"token operator\">|</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail to alloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>PFTEMP<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_map</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PFTEMP<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> PTE_W <span class=\"token operator\">|</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail to map\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_unmap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PFTEMP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail to umap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"pgfault not implemented\");</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Map our virtual page pn (address pn*PGSIZE) into the target envid</span>\n<span class=\"token comment\">// at the same virtual address.  If the page is writable or copy-on-write,</span>\n<span class=\"token comment\">// the new mapping must be created copy-on-write, and then our mapping must be</span>\n<span class=\"token comment\">// marked copy-on-write as well.  (Exercise: Why do we need to mark ours</span>\n<span class=\"token comment\">// copy-on-write again if it was already copy-on-write at the beginning of</span>\n<span class=\"token comment\">// this function?)</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns: 0 on success, &lt; 0 on error.</span>\n<span class=\"token comment\">// It is also OK to panic on error.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">duppage</span><span class=\"token punctuation\">(</span>envid_t envid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> pn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pn <span class=\"token operator\">*</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>uvpd<span class=\"token punctuation\">[</span><span class=\"token function\">PDX</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>uvpt<span class=\"token punctuation\">[</span>pn<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>uvpt<span class=\"token punctuation\">[</span>pn<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>PTE_W <span class=\"token operator\">|</span> PTE_COW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_map</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> envid<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> PTE_COW <span class=\"token operator\">|</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_map</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> PTE_COW <span class=\"token operator\">|</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_map</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> envid<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//panic(\"duppage not implemented\");</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// User-level fork with copy-on-write.</span>\n<span class=\"token comment\">// Set up our page fault handler appropriately.</span>\n<span class=\"token comment\">// Create a child.</span>\n<span class=\"token comment\">// Copy our address space and page fault handler setup to the child.</span>\n<span class=\"token comment\">// Then mark the child as runnable and return.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns: child's envid to the parent, 0 to the child, &lt; 0 on error.</span>\n<span class=\"token comment\">// It is also OK to panic on error.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Hint:</span>\n<span class=\"token comment\">//   Use uvpd, uvpt, and duppage.</span>\n<span class=\"token comment\">//   Remember to fix \"thisenv\" in the child process.</span>\n<span class=\"token comment\">//   Neither user exception stack should ever be marked copy-on-write,</span>\n<span class=\"token comment\">//   so you must allocate a new page for the child's user exception stack.</span>\n<span class=\"token comment\">//</span>\nenvid_t\n<span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\tenvid_t envid<span class=\"token punctuation\">;</span>\n\tuint8_t <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">set_pgfault_handler</span><span class=\"token punctuation\">(</span>pgfault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tenvid <span class=\"token operator\">=</span> <span class=\"token function\">sys_exofork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>envid <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sys_exofork: %e\"</span><span class=\"token punctuation\">,</span> envid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>envid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tthisenv <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>envs<span class=\"token punctuation\">[</span><span class=\"token function\">ENVX</span><span class=\"token punctuation\">(</span><span class=\"token function\">sys_getenvid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UXSTACKTOP <span class=\"token operator\">-</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_U <span class=\"token operator\">|</span> PTE_W <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail to alloc for exception stack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>addr <span class=\"token operator\">&lt;</span> UTOP<span class=\"token punctuation\">;</span> addr <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>addr <span class=\"token operator\">==</span> UXSTACKTOP <span class=\"token operator\">-</span> PGSIZE<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uvpd<span class=\"token punctuation\">[</span><span class=\"token function\">PDX</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>uvpt<span class=\"token punctuation\">[</span><span class=\"token function\">PGNUM</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">duppage</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token function\">PGNUM</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"duppage failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">sys_env_set_pgfault_upcall</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> _pgfault_upcall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_env_set_status</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> ENV_RUNNABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sys_env_set_status: %e\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> envid<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"fork not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行测试，有：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> run-forktree-nox\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\n1000: I am <span class=\"token string\">''</span>\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001001\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001002\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\n1001: I am <span class=\"token string\">'0'</span>\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00002000\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001003\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001001\n2000: I am <span class=\"token string\">'00'</span>\n<span class=\"token punctuation\">[</span>00002000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00002001\n<span class=\"token punctuation\">[</span>00002000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001004\n<span class=\"token punctuation\">[</span>00002000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00002000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00002000\n2001: I am <span class=\"token string\">'000'</span>\n<span class=\"token punctuation\">[</span>00002001<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00002001<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00002001\n1002: I am <span class=\"token string\">'1'</span>\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00003001\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00003000\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001002\n3000: I am <span class=\"token string\">'11'</span>\n<span class=\"token punctuation\">[</span>00003000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00002002\n<span class=\"token punctuation\">[</span>00003000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001005\n<span class=\"token punctuation\">[</span>00003000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00003000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00003000\n3001: I am <span class=\"token string\">'10'</span>\n<span class=\"token punctuation\">[</span>00003001<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00004000\n<span class=\"token punctuation\">[</span>00003001<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001006\n<span class=\"token punctuation\">[</span>00003001<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00003001<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00003001\n4000: I am <span class=\"token string\">'100'</span>\n<span class=\"token punctuation\">[</span>00004000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00004000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00004000\n2002: I am <span class=\"token string\">'110'</span>\n<span class=\"token punctuation\">[</span>00002002<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00002002<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00002002\n1003: I am <span class=\"token string\">'01'</span>\n<span class=\"token punctuation\">[</span>00001003<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00003002\n<span class=\"token punctuation\">[</span>00001003<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00005000\n<span class=\"token punctuation\">[</span>00001003<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001003<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001003\n5000: I am <span class=\"token string\">'011'</span>\n<span class=\"token punctuation\">[</span>00005000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00005000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00005000\n3002: I am <span class=\"token string\">'010'</span>\n<span class=\"token punctuation\">[</span>00003002<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00003002<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00003002\n1004: I am <span class=\"token string\">'001'</span>\n<span class=\"token punctuation\">[</span>00001004<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001004<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001004\n1005: I am <span class=\"token string\">'111'</span>\n<span class=\"token punctuation\">[</span>00001005<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001005<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001005\n1006: I am <span class=\"token string\">'101'</span>\n<span class=\"token punctuation\">[</span>00001006<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001006<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001006\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>然后就完成了Part B</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> grade\n<span class=\"token punctuation\">..</span>.\ndumbfork: OK <span class=\"token punctuation\">(</span>1.4s<span class=\"token punctuation\">)</span>\nPart A score: 5/5\n\nfaultread: OK <span class=\"token punctuation\">(</span>0.9s<span class=\"token punctuation\">)</span>\nfaultwrite: OK <span class=\"token punctuation\">(</span>1.0s<span class=\"token punctuation\">)</span>\nfaultdie: OK <span class=\"token punctuation\">(</span>1.0s<span class=\"token punctuation\">)</span>\nfaultregs: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nfaultalloc: OK <span class=\"token punctuation\">(</span>1.0s<span class=\"token punctuation\">)</span>\nfaultallocbad: OK <span class=\"token punctuation\">(</span>1.9s<span class=\"token punctuation\">)</span>\nfaultnostack: OK <span class=\"token punctuation\">(</span>2.1s<span class=\"token punctuation\">)</span>\nfaultbadhandler: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nfaultevilhandler: OK <span class=\"token punctuation\">(</span>1.9s<span class=\"token punctuation\">)</span>\nforktree: OK <span class=\"token punctuation\">(</span>2.1s<span class=\"token punctuation\">)</span>\nPart B score: 50/50</code></pre></div>\n<h2>Part C Preemptive Multitasking and Inter-Process communication (IPC)</h2>\n<p>这部分我们会实现preempty uncooperative environment以及environment之间的通信。</p>\n<h3>Clock Interrupts and Preemption</h3>\n<p>运行<code class=\"language-text\">user/spin</code>，会发现child里面的循环会永久得占据CPU，导致parent或是kernel没有办法运行。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// user/spin.c</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">umain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tenvid_t env<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am the parent.  Forking the child...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>env <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am the child.  Spinning...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">/* do nothing */</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am the parent.  Running the child...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am the parent.  Killing the child...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_env_destroy</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>显然这不是一个好的设计，因为user-mode environment可以直接导致整个系统halt。为了让kernel可以preempt a running environment，我们需要让JOS kernel实现external hardware interrupt from the clock hardware。</p>\n<h3>Interrupt discipline</h3>\n<p>External interrupts被称为IRQ。有16个IRQ，从0到15。IRQ number到IDT entry的映射还没有实现。</p>\n<p>在<code class=\"language-text\">inc/trap.c</code>中定义了<code class=\"language-text\">IRQ_OFFSET</code>为32，所以IDT中的32~47对应了IRQ的0~15。比如<code class=\"language-text\">IDT[IRQ_OFFSET + 0]</code>对应了始终中断的handler。采用这个<code class=\"language-text\">IRQ_OFFSET</code>是为了让device interrupt和processor exception分开。（最早版本的MS-DOS不进行区分，导致了很多问题...）</p>\n<p>在JOS中，我们相较于xv6做了简化，在kernel里面externel device interrupt都被禁用了。在JOS中externel device interrupt是用<code class=\"language-text\">%eflags</code>的<code class=\"language-text\">FL_IF</code>位控制的，为1则开启。尽管我们有很多种方法可以修改这一位，为了简化，我们仅仅在进入或离开user mode的时候进行<code class=\"language-text\">%eflags</code>的恢复或存储。</p>\n<p>我们需要保证在用户环境中<code class=\"language-text\">FL_IF</code>位为1，从而能够接受中断。在bootloader的最初处我们加载了仅用了所有中断，然后截止到现在我们没有开启过他们。</p>\n<h3>Exercise 13</h3>\n<p>修改<code class=\"language-text\">kern/trapentry.S</code>, <code class=\"language-text\">kern/trap.c</code>来加入IRQ 0~15。同时更改<code class=\"language-text\">env_alloc()</code>让用户环境开启中断。并且取消<code class=\"language-text\">sched_halt</code>中<code class=\"language-text\">sti</code>前面的注释。让idle CPU启用中断。</p>\n<p>下面是对应的代码。首先是<code class=\"language-text\">trapentry.S</code>，注意提示中又说the processor never pushes an error code when invoking a hardware interrupt handler，所以应该采用<code class=\"language-text\">TRAPHANDLER_NOEC</code>（至少我是这么觉得的...）</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">TRAPHANDLER_NOEC(IRQ_0, IRQ_OFFSET + 0)\nTRAPHANDLER_NOEC(IRQ_1, IRQ_OFFSET + 1)\nTRAPHANDLER_NOEC(IRQ_2, IRQ_OFFSET + 2)\nTRAPHANDLER_NOEC(IRQ_3, IRQ_OFFSET + 3)\nTRAPHANDLER_NOEC(IRQ_4, IRQ_OFFSET + 4)\nTRAPHANDLER_NOEC(IRQ_5, IRQ_OFFSET + 5)\nTRAPHANDLER_NOEC(IRQ_6, IRQ_OFFSET + 6)\nTRAPHANDLER_NOEC(IRQ_7, IRQ_OFFSET + 7)\nTRAPHANDLER_NOEC(IRQ_8, IRQ_OFFSET + 8)\nTRAPHANDLER_NOEC(IRQ_9, IRQ_OFFSET + 9)\nTRAPHANDLER_NOEC(IRQ_10, IRQ_OFFSET + 10)\nTRAPHANDLER_NOEC(IRQ_11, IRQ_OFFSET + 11)\nTRAPHANDLER_NOEC(IRQ_12, IRQ_OFFSET + 12)\nTRAPHANDLER_NOEC(IRQ_13, IRQ_OFFSET + 13)\nTRAPHANDLER_NOEC(IRQ_14, IRQ_OFFSET + 14)\nTRAPHANDLER_NOEC(IRQ_15, IRQ_OFFSET + 15)</code></pre></div>\n<p>然后是<code class=\"language-text\">kern/trap.c</code>，添加的代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">// IRQ</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_7</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_9</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_10</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_11</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_12</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_13</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_14</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_15</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_0<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_3<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_4<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_5<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_6<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_7<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_8<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_9<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_10<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_11<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_12<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_13<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_14<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_15<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>最开始在实现的时候出了一个问题，那就是无法通过<code class=\"language-text\">trap()</code>中的。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token function\">read_eflags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> FL_IF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>也就是在trap的时候<code class=\"language-text\">FL_IF</code>处有值。经过网上搜索解决方案，发现是在lab 3中的<code class=\"language-text\">SETGATE</code>使用出了错误。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Set up a normal interrupt/trap gate descriptor.</span>\n<span class=\"token comment\">// - istrap: 1 for a trap (= exception) gate, 0 for an interrupt gate.</span>\n    <span class=\"token comment\">//   see section 9.6.1.3 of the i386 reference: \"The difference between</span>\n    <span class=\"token comment\">//   an interrupt gate and a trap gate is in the effect on IF (the</span>\n    <span class=\"token comment\">//   interrupt-enable flag). An interrupt that vectors through an</span>\n    <span class=\"token comment\">//   interrupt gate resets IF, thereby preventing other interrupts from</span>\n    <span class=\"token comment\">//   interfering with the current interrupt handler. A subsequent IRET</span>\n    <span class=\"token comment\">//   instruction restores IF to the value in the EFLAGS image on the</span>\n    <span class=\"token comment\">//   stack. An interrupt through a trap gate does not change IF.\"</span>\n<span class=\"token comment\">// - sel: Code segment selector for interrupt/trap handler</span>\n<span class=\"token comment\">// - off: Offset in code segment for interrupt/trap handler</span>\n<span class=\"token comment\">// - dpl: Descriptor Privilege Level -</span>\n<span class=\"token comment\">//\t  the privilege level required for software to invoke</span>\n<span class=\"token comment\">//\t  this interrupt/trap gate explicitly using an int instruction.</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SETGATE(gate, istrap, sel, off, dpl)\t\t\t\\\n{\t\t\t\t\t\t\t\t\\\n\t(gate).gd_off_15_0 = (uint32_t) (off) &amp; 0xffff;\t\t\\\n\t(gate).gd_sel = (sel);\t\t\t\t\t\\\n\t(gate).gd_args = 0;\t\t\t\t\t\\\n\t(gate).gd_rsv1 = 0;\t\t\t\t\t\\\n\t(gate).gd_type = (istrap) ? STS_TG32 : STS_IG32;\t\\\n\t(gate).gd_s = 0;\t\t\t\t\t\\\n\t(gate).gd_dpl = (dpl);\t\t\t\t\t\\\n\t(gate).gd_p = 1;\t\t\t\t\t\\\n\t(gate).gd_off_31_16 = (uint32_t) (off) >> 16;\t\t\\\n}</span></code></pre></div>\n<p>阅读<code class=\"language-text\">SETGATE</code>的注释可以看到<code class=\"language-text\">istrap</code>部分如果设置为0才能保证在中断的里面不会有中断，这也是JOS的要求（和xv6不同），所以所有的<code class=\"language-text\">SETGATE</code>（包括lab3的部分）都需要采用<code class=\"language-text\">istrap=0</code>。</p>\n<p>然后在<code class=\"language-text\">env_alloc()</code>中：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">// Enable interrupts while in user mode.</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\te<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_eflags <span class=\"token operator\">|=</span> FL_IF<span class=\"token punctuation\">;</span></code></pre></div>\n<p>最后是<code class=\"language-text\">sched_halt()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">// Reset stack pointer, enable interrupts and then halt.</span>\n\t<span class=\"token keyword\">asm</span> <span class=\"token keyword\">volatile</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">\"movl $0, %%ebp\\n\"</span>\n\t\t<span class=\"token string\">\"movl %0, %%esp\\n\"</span>\n\t\t<span class=\"token string\">\"pushl $0\\n\"</span>\n\t\t<span class=\"token string\">\"pushl $0\\n\"</span>\n\t\t<span class=\"token comment\">// Uncomment the following line after completing exercise 13</span>\n\t\t<span class=\"token string\">\"sti\\n\"</span>\n\t\t<span class=\"token string\">\"1:\\n\"</span>\n\t\t<span class=\"token string\">\"hlt\\n\"</span>\n\t\t<span class=\"token string\">\"jmp 1b\\n\"</span>\n\t<span class=\"token operator\">:</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">(</span>thiscpu<span class=\"token operator\">-></span>cpu_ts<span class=\"token punctuation\">.</span>ts_esp0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>再用<code class=\"language-text\">user/spin</code>测试会发现中断已经被打开了：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">$ make run<span class=\"token operator\">-</span>spin<span class=\"token operator\">-</span>nox\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">00000000</span><span class=\"token punctuation\">]</span> new env <span class=\"token number\">00001000</span>\nI am the parent<span class=\"token punctuation\">.</span>  Forking the child<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">00001000</span><span class=\"token punctuation\">]</span> new env <span class=\"token number\">00001001</span>\nI am the parent<span class=\"token punctuation\">.</span>  Running the child<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nI am the child<span class=\"token punctuation\">.</span>  Spinning<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nTRAP frame at <span class=\"token number\">0xf02b707c</span> from CPU <span class=\"token number\">0</span>\n  edi  <span class=\"token number\">0x00000000</span>\n  esi  <span class=\"token number\">0x00000000</span>\n  ebp  <span class=\"token number\">0xeebfdfd0</span>\n  oesp <span class=\"token number\">0xf023cfdc</span>\n  ebx  <span class=\"token number\">0x00000000</span>\n  edx  <span class=\"token number\">0xeebfde88</span>\n  ecx  <span class=\"token number\">0x0000001d</span>\n  eax  <span class=\"token number\">0x0000001d</span>\n  es   <span class=\"token number\">0</span>x<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token number\">0023</span>\n  ds   <span class=\"token number\">0</span>x<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token number\">0023</span>\n  trap <span class=\"token number\">0x00000020</span> Hardware Interrupt\n  err  <span class=\"token number\">0x00000000</span>\n  eip  <span class=\"token number\">0x00800060</span>\n  cs   <span class=\"token number\">0</span>x<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token number\">001</span>b\n  flag <span class=\"token number\">0x00000282</span>\n  esp  <span class=\"token number\">0xeebfdfc8</span>\n  ss   <span class=\"token number\">0</span>x<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token number\">0023</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">00001001</span><span class=\"token punctuation\">]</span> free env <span class=\"token number\">00001001</span>\nI am the parent<span class=\"token punctuation\">.</span>  Killing the child<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">00001000</span><span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span><span class=\"token number\">00001000</span><span class=\"token punctuation\">]</span> free env <span class=\"token number\">00001000</span>\nNo runnable environments in the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>\n<h3>Handling Clock Interrupts</h3>\n<p>我们接下来来设置时钟中断的handler。<code class=\"language-text\">lapic_init</code>和<code class=\"language-text\">pic_init</code>已经设置了始终和中断控制器，我们只需要写handler了。</p>\n<h3>Exercise 14</h3>\n<p>修改<code class=\"language-text\">trap_dispatch</code>，添加timer interrupt handler。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t\t<span class=\"token comment\">// Handle clock interrupts. Don't forget to acknowledge the</span>\n\t\t<span class=\"token comment\">// interrupt using lapic_eoi() before calling the scheduler!</span>\n\t\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t\t<span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_TIMER<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">lapic_eoi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sched_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>这个时候我们就可以正常运行<code class=\"language-text\">user/spin</code>了。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> run-spin-nox\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\nI am the parent.  Forking the child<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001001\nI am the parent.  Running the child<span class=\"token punctuation\">..</span>.\nI am the child.  Spinning<span class=\"token punctuation\">..</span>.\nI am the parent.  Killing the child<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> destroying 00001001\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001001\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\nNo runnable environments <span class=\"token keyword\">in</span> the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<h3>Inter-Process communication (IPC)</h3>\n<p>截止到现在，我们非常重视isolation，但是让程序可以相互之间交流也是很重要的一个功能。让程序可以互动可以带来强大的功能。interprocess communication有很多的模型，到今天为止哪个模型最好仍然没有定论。我们会实现一个简单的模型。</p>\n<h3>IPC in JOS</h3>\n<p>我们会实现几个简单的system call来实现一个简单的interprocess communication mechanism。两个system call分别实<code class=\"language-text\">sys_ipc_recv</code>和<code class=\"language-text\">sys_ipc_try_send</code>。之后我们会把他们包装在<code class=\"language-text\">ipc_recv</code>和<code class=\"language-text\">ipc_send</code>里。</p>\n<p>在JOS的IPC中相互传输的信息由两部分组成，一个32位的值和一个可选的single page mapping。让环境可以相互之间传page mapping是一种传输大数据量的高效方法，同时也让环境更好设置共享内存。</p>\n<h3>Sending and Receiving Messages</h3>\n<p>如果要接收到信息，环境需要调用<code class=\"language-text\">sys_ipc_recv</code>，这个system call会de-schedules当前环境并只有收到信息之后才会继续运行。当一个环境等待获取信息的时候，其他的环境可以发信息。注意是是任何环境，因为IPC的设计本身确保了安全，发信息不会搞崩接受的环境，所以不需要环境之间由parent child这样的关系。</p>\n<p>如果要发送一条信息，环境需要调用<code class=\"language-text\">sys_ipc_try_send</code>，以自己和接受环境为参数。如果对应的环境确实在准备接收，那么数据会被传过去并返回0，不然返回<code class=\"language-text\">-E_IPC_NOT_RECV</code>。</p>\n<p>User space中的库函数<code class=\"language-text\">ipc_recv</code>会负责调用<code class=\"language-text\">sys_ipc_recv</code>以及在<code class=\"language-text\">struct Env</code>中查询接收到的数据。</p>\n<p>同样<code class=\"language-text\">ipc_send</code>会重复调用<code class=\"language-text\">sys_ipc_try_send</code>直到成功发送。</p>\n<h3>Transferring Pages</h3>\n<p>当一个环境以一个合理的<code class=\"language-text\">dstva</code>（在<code class=\"language-text\">UTOP</code>之下）调用<code class=\"language-text\">sys_ipc_recv</code>的时候，环境表示其可以接受一个mapping。如果sender发过来一个page，那么这个page就会被map在<code class=\"language-text\">dstva</code>处。如果<code class=\"language-text\">dstva</code>原来就有一个mapping，这个mapping会被unmap。</p>\n<p>当一个环境以一个合理的<code class=\"language-text\">srcva</code>（在<code class=\"language-text\">UTOP</code>之下）调用<code class=\"language-text\">sys_ipc_try_send</code>的时候，环境表示其想要发送一个map在<code class=\"language-text\">srcva</code>的page，其permission为<code class=\"language-text\">perm</code>。IPC成功之后，sender会保留原始的mapping，但是receiver和它会share这个page。</p>\n<p>如果sender和receive中的一个不愿意发送或是接受page，那么就不会有page被传输。IPC之后，<code class=\"language-text\">Env</code>中的<code class=\"language-text\">env_ipc_perm</code>会为接收到的page的permission或0。</p>\n<h3>Implementing IPC</h3>\n<h3>Exercise 15</h3>\n<p>完成<code class=\"language-text\">sys_ipc_recv</code>, <code class=\"language-text\">sys_ipc_try_send</code>以及<code class=\"language-text\">ipc_recv</code>和<code class=\"language-text\">ipc_send</code>。注意在使用<code class=\"language-text\">envid2env</code>的时候<code class=\"language-text\">checkperm</code>应设为0，原因上面提到了。</p>\n<p>按照详细的注释一点一点加上就好了，首先是<code class=\"language-text\">sys_ipc_recv</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Block until a value is ready.  Record that you want to receive</span>\n<span class=\"token comment\">// using the env_ipc_recving and env_ipc_dstva fields of struct Env,</span>\n<span class=\"token comment\">// mark yourself not runnable, and then give up the CPU.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If 'dstva' is &lt; UTOP, then you are willing to receive a page of data.</span>\n<span class=\"token comment\">// 'dstva' is the virtual address at which the sent page should be mapped.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// This function only returns on error, but the system call will eventually</span>\n<span class=\"token comment\">// return 0 on success.</span>\n<span class=\"token comment\">// Return &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_INVAL if dstva &lt; UTOP but dstva is not page-aligned.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_ipc_recv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dstva<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>dstva <span class=\"token operator\">&lt;</span> UTOP<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>dstva<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>dstva<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_ipc_recving <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_ipc_dstva <span class=\"token operator\">=</span> dstva<span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_NOT_RUNNABLE<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sched_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_ipc_recv not implemented\");</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后是<code class=\"language-text\">sys_ipc_try_send</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Try to send 'value' to the target env 'envid'.</span>\n<span class=\"token comment\">// If srcva &lt; UTOP, then also send page currently mapped at 'srcva',</span>\n<span class=\"token comment\">// so that receiver gets a duplicate mapping of the same page.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The send fails with a return value of -E_IPC_NOT_RECV if the</span>\n<span class=\"token comment\">// target is not blocked, waiting for an IPC.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The send also can fail for the other reasons listed below.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Otherwise, the send succeeds, and the target's ipc fields are</span>\n<span class=\"token comment\">// updated as follows:</span>\n<span class=\"token comment\">//    env_ipc_recving is set to 0 to block future sends;</span>\n<span class=\"token comment\">//    env_ipc_from is set to the sending envid;</span>\n<span class=\"token comment\">//    env_ipc_value is set to the 'value' parameter;</span>\n<span class=\"token comment\">//    env_ipc_perm is set to 'perm' if a page was transferred, 0 otherwise.</span>\n<span class=\"token comment\">// The target environment is marked runnable again, returning 0</span>\n<span class=\"token comment\">// from the paused sys_ipc_recv system call.  (Hint: does the</span>\n<span class=\"token comment\">// sys_ipc_recv function ever actually return?)</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If the sender wants to send a page but the receiver isn't asking for one,</span>\n<span class=\"token comment\">// then no page mapping is transferred, but no error occurs.</span>\n<span class=\"token comment\">// The ipc only happens when no errors occur.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns 0 on success, &lt; 0 on error.</span>\n<span class=\"token comment\">// Errors are:</span>\n<span class=\"token comment\">//\t-E_BAD_ENV if environment envid doesn't currently exist.</span>\n<span class=\"token comment\">//\t\t(No need to check permissions.)</span>\n<span class=\"token comment\">//\t-E_IPC_NOT_RECV if envid is not currently blocked in sys_ipc_recv,</span>\n<span class=\"token comment\">//\t\tor another environment managed to send first.</span>\n<span class=\"token comment\">//\t-E_INVAL if srcva &lt; UTOP but srcva is not page-aligned.</span>\n<span class=\"token comment\">//\t-E_INVAL if srcva &lt; UTOP and perm is inappropriate</span>\n<span class=\"token comment\">//\t\t(see sys_page_alloc).</span>\n<span class=\"token comment\">//\t-E_INVAL if srcva &lt; UTOP but srcva is not mapped in the caller's</span>\n<span class=\"token comment\">//\t\taddress space.</span>\n<span class=\"token comment\">//\t-E_INVAL if (perm &amp; PTE_W), but srcva is read-only in the</span>\n<span class=\"token comment\">//\t\tcurrent environment's address space.</span>\n<span class=\"token comment\">//\t-E_NO_MEM if there's not enough memory to map srcva in envid's</span>\n<span class=\"token comment\">//\t\taddress space.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_ipc_try_send</span><span class=\"token punctuation\">(</span>envid_t envid<span class=\"token punctuation\">,</span> uint32_t value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>srcva<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>pp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tpte_t <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token operator\">-></span>env_ipc_recving<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_IPC_NOT_RECV<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>srcva <span class=\"token operator\">&lt;</span> UTOP <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>e<span class=\"token operator\">-></span>env_ipc_dstva <span class=\"token operator\">&lt;</span> UTOP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>srcva<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>srcva<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>PTE_SYSCALL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pp <span class=\"token operator\">=</span> <span class=\"token function\">page_lookup</span><span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> srcva<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte <span class=\"token operator\">&amp;</span> perm<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> perm<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> PTE_W<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte <span class=\"token operator\">&amp;</span> PTE_W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">page_insert</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> pp<span class=\"token punctuation\">,</span> e<span class=\"token operator\">-></span>env_ipc_dstva<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t\te<span class=\"token operator\">-></span>env_ipc_perm <span class=\"token operator\">=</span> perm<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\te<span class=\"token operator\">-></span>env_ipc_recving <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_ipc_from <span class=\"token operator\">=</span> curenv<span class=\"token operator\">-></span>env_id<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_ipc_value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_RUNNABLE<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_regs<span class=\"token punctuation\">.</span>reg_eax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_ipc_try_send not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意写完这两个之后别忘了在<code class=\"language-text\">syscall()</code>里面加上这两个函数。</p>\n<p>然后是<code class=\"language-text\">ipc_recv</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Receive a value via IPC and return it.</span>\n<span class=\"token comment\">// If 'pg' is nonnull, then any page sent by the sender will be mapped at</span>\n<span class=\"token comment\">//\tthat address.</span>\n<span class=\"token comment\">// If 'from_env_store' is nonnull, then store the IPC sender's envid in</span>\n<span class=\"token comment\">//\t*from_env_store.</span>\n<span class=\"token comment\">// If 'perm_store' is nonnull, then store the IPC sender's page permission</span>\n<span class=\"token comment\">//\tin *perm_store (this is nonzero iff a page was successfully</span>\n<span class=\"token comment\">//\ttransferred to 'pg').</span>\n<span class=\"token comment\">// If the system call fails, then store 0 in *fromenv and *perm (if</span>\n<span class=\"token comment\">//\tthey're nonnull) and return the error.</span>\n<span class=\"token comment\">// Otherwise, return the value sent by the sender</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Hint:</span>\n<span class=\"token comment\">//   Use 'thisenv' to discover the value and who sent it.</span>\n<span class=\"token comment\">//   If 'pg' is null, pass sys_ipc_recv a value that it will understand</span>\n<span class=\"token comment\">//   as meaning \"no page\".  (Zero is not the right value, since that's</span>\n<span class=\"token comment\">//   a perfectly valid place to map a page.)</span>\nint32_t\n<span class=\"token function\">ipc_recv</span><span class=\"token punctuation\">(</span>envid_t <span class=\"token operator\">*</span>from_env_store<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>pg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>perm_store<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dstva <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>UTOP<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pg<span class=\"token punctuation\">)</span>\n\t\tdstva <span class=\"token operator\">=</span> pg<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from_env_store<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">*</span>from_env_store <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>perm_store<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">*</span>perm_store <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_ipc_recv</span><span class=\"token punctuation\">(</span>dstva<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from_env_store<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">*</span>from_env_store <span class=\"token operator\">=</span> thisenv<span class=\"token operator\">-></span>env_ipc_from<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>perm_store<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">*</span>perm_store <span class=\"token operator\">=</span> thisenv<span class=\"token operator\">-></span>env_ipc_perm<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> thisenv<span class=\"token operator\">-></span>env_ipc_value<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"ipc_recv not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后是<code class=\"language-text\">ipc_send</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Send 'val' (and 'pg' with 'perm', if 'pg' is nonnull) to 'toenv'.</span>\n<span class=\"token comment\">// This function keeps trying until it succeeds.</span>\n<span class=\"token comment\">// It should panic() on any error other than -E_IPC_NOT_RECV.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Hint:</span>\n<span class=\"token comment\">//   Use sys_yield() to be CPU-friendly.</span>\n<span class=\"token comment\">//   If 'pg' is null, pass sys_ipc_try_send a value that it will understand</span>\n<span class=\"token comment\">//   as meaning \"no page\".  (Zero is not the right value.)</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">ipc_send</span><span class=\"token punctuation\">(</span>envid_t to_env<span class=\"token punctuation\">,</span> uint32_t val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>pg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>srcva <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>UTOP<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pg<span class=\"token punctuation\">)</span>\n\t\tsrcva <span class=\"token operator\">=</span> pg<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_ipc_try_send</span><span class=\"token punctuation\">(</span>to_env<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> pg<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span>E_IPC_NOT_RECV<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ipc send fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//panic(\"ipc_send not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>完成了之后就可以用<code class=\"language-text\">user/pingpong</code>或者是<code class=\"language-text\">user/primes</code>来进行测试。</p>\n<p>最后来<code class=\"language-text\">make grade</code>一下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> grade\n<span class=\"token punctuation\">..</span>.\ndumbfork: OK <span class=\"token punctuation\">(</span>2.5s<span class=\"token punctuation\">)</span>\nPart A score: 5/5\n\nfaultread: OK <span class=\"token punctuation\">(</span>1.9s<span class=\"token punctuation\">)</span>\nfaultwrite: OK <span class=\"token punctuation\">(</span>2.1s<span class=\"token punctuation\">)</span>\nfaultdie: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nfaultregs: OK <span class=\"token punctuation\">(</span>2.1s<span class=\"token punctuation\">)</span>\nfaultalloc: OK <span class=\"token punctuation\">(</span>0.9s<span class=\"token punctuation\">)</span>\nfaultallocbad: OK <span class=\"token punctuation\">(</span>1.9s<span class=\"token punctuation\">)</span>\nfaultnostack: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nfaultbadhandler: OK <span class=\"token punctuation\">(</span>2.2s<span class=\"token punctuation\">)</span>\nfaultevilhandler: OK <span class=\"token punctuation\">(</span>1.9s<span class=\"token punctuation\">)</span>\nforktree: OK <span class=\"token punctuation\">(</span>2.2s<span class=\"token punctuation\">)</span>\nPart B score: 50/50\n\nspin: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nstresssched: OK <span class=\"token punctuation\">(</span>2.2s<span class=\"token punctuation\">)</span>\nsendpage: OK <span class=\"token punctuation\">(</span>1.7s<span class=\"token punctuation\">)</span>\npingpong: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nprimes: OK <span class=\"token punctuation\">(</span>4.4s<span class=\"token punctuation\">)</span>\nPart C score: 25/25\n\nScore: 80/80</code></pre></div>\n<p>lab4就完成了。</p>","frontmatter":{"title":"6.828 lab4 Preemptive Multitasking","date":"2019-03-31T02:40:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-lab4/"}}}