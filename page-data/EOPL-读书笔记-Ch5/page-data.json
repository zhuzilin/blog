{"componentChunkName":"component---src-templates-blog-post-js","path":"/EOPL-读书笔记-Ch5/","webpackCompilationHash":"36b38c574f1d3c5e8b77","result":{"data":{"markdownRemark":{"html":"<p>继续看 EOPL。</p>\n<h2>Ch5 Continuation-Passing Interpreters</h2>\n<p>在 Ch3 我们利用 environment 这个概念探索了 binding。在本章我们会对 control context 做同样的探索。通过引入 continuation 作为 control context 的先后向，我们会写些以 continutation 为参数的解释器，从而使 control context 变为显式的。</p>\n<p>考虑阶乘函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact\n\t<span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span></span><span class=\"token punctuation\">)</span></span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">zero</span>? n<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> n <span class=\"token punctuation\">(</span><span class=\"token car\">fact</span> <span class=\"token punctuation\">(</span><span class=\"token car\">-</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>随着函数的展开，<code class=\"language-text\">fact</code> 会调用越来越大的 control context：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">  <span class=\"token punctuation\">(</span><span class=\"token car\">fact</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">(</span><span class=\"token car\">fact</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span><span class=\"token car\">fact</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span><span class=\"token car\">fact</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token car\">fact</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">2</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">1</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">3</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">2</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">4</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">3</span> <span class=\"token number\">2</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> <span class=\"token number\">4</span> <span class=\"token number\">6</span><span class=\"token punctuation\">)</span>\n= 24</code></pre></div>\n<p>而考虑下面这种写法：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact-iter\n\t<span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span></span><span class=\"token punctuation\">)</span></span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token car\">fact-iter-acc</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact-iter-acc\n\t<span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span> <span class=\"token argument variable\">a</span></span><span class=\"token punctuation\">)</span></span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">zero</span>? n<span class=\"token punctuation\">)</span> a <span class=\"token punctuation\">(</span><span class=\"token car\">fact-iter-acc</span> <span class=\"token punctuation\">(</span><span class=\"token car\">-</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> n a<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>展开后为：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">  <span class=\"token punctuation\">(</span><span class=\"token car\">fact-iter</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">fact-iter-acc</span> <span class=\"token number\">4</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">fact-iter-acc</span> <span class=\"token number\">3</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">fact-iter-acc</span> <span class=\"token number\">2</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">fact-iter-acc</span> <span class=\"token number\">1</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">fact-iter-acc</span> <span class=\"token number\">0</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span>\n= 24</code></pre></div>\n<p>这里每次的 control context 都一样：在这种情况，实际是没有 control context 的。当 <code class=\"language-text\">fact_iter-acc</code> 调用自己的时候，它是在 tail end 调用的。在这种情况下，调用的函数的结果会直接作为外层函数的返回值返回，而不会做其他什么操作，我们称为 tail call。也是因此，上面的推导中，每步都是 <code class=\"language-text\">(fact-iter-acc n a)</code>。</p>\n<p>在执行 <code class=\"language-text\">fact</code> 这样的函数的时候，会在每次递归中记录额外的 control information，这部分信息会一直保留到递归函数返回。这就导致了第一个推导过程中 control context 的增长。这种过程称为 recursive control behavior。</p>\n<p>作为对比，调用 <code class=\"language-text\">fact-iter-acc</code> 的时候，不需要记录额外的控制信息。这种情况使用的内容是有固定上限的，被称作 iterative control behavior。</p>\n<p>造成两者的区别的核心原因是，<code class=\"language-text\">fact</code> 是在 operand 的位置被调用的，所以我们总结出了这样的一条原则：</p>\n<ul>\n<li><strong>It is evaluation of operands, not the calling of procedures, that makes the control context grow.</strong></li>\n</ul>\n<p>本章主要介绍如何追踪并操作 control context。我们的核心工具会是 continuation。continuation 是 control context 的抽象，就如同 environment 是 data context 的抽象一样。我们将会通过显示传入 continuation 参数的方式写 interpreter，就想之前显式传入 environment 一样。</p>\n<p>在 Ch6 我们会展示如何把转化解释器的一些技巧应用在任意程序上。我们称转化后的程序为 continuation passing style。</p>\n<h3>5.1 A Continuation-Passing Interpreter</h3>\n<p>我们会以 3.4 中的 LETREC 为基础开始我们的新解释器。我们的目标则是重写解释器，使得任何 <code class=\"language-text\">value-of</code> 都不会生成任何 control context。当 control context 增长时，我们转而扩展 continuation 参数，就像 Ch3 中在需要扩展 data context 的时候就会扩展 environment 一样。</p>\n<p>我们知道 environment 表示的是 symbol 到 denoted value 的函数，那么 continuation 代表什么呢？continuation 表示 a procedure that takes the result of the expression and completes the computation（回想一下上面的 <code class=\"language-text\">fact</code>）。所以我们也需要引入一个 <code class=\"language-text\">apply-cont</code> 函数，其参数为 continutation <code class=\"language-text\">cont</code> 和一个值 <code class=\"language-text\">val</code>，并能返回 <code class=\"language-text\">cont</code> 指向的计算结果。</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token comment\">; FinalAnswer = ExpVal</span>\napply-cont : Cont × ExpVal → FinalAnswer</code></pre></div>\n<p>我们把 <code class=\"language-text\">apply-cont</code> 的返回类型称为 <code class=\"language-text\">FinalAnswer</code>，以提醒我们，它是计算的<strong>最终</strong>结果：程序的其他部分不能再使用它了。</p>\n<p>首先，我们要引入 <code class=\"language-text\">(end-cont)</code>，意思是不需要再做什么计算了，它的 specification 为：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">end-cont</span><span class=\"token punctuation\">)</span> val<span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">begin</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">eopl</span><span class=\"token lisp-property property\">:printf</span> <span class=\"token string\">\"End of computation.~%\"</span><span class=\"token punctuation\">)</span>\n    val<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里的 print 让我们能查看它究竟被调用了几次。</p>\n<p>引入了 continuation 后，<code class=\"language-text\">value-of-program</code> 也有了变化：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token comment\">;value-of-program : Program → FinalAnswer</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> value-of-program\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">pgm</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">cases</span> program pgm\n    \t<span class=\"token punctuation\">(</span><span class=\"token car\">a-program</span> <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span><span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> exp1 <span class=\"token punctuation\">(</span><span class=\"token car\">init-env</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">end-cont</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>下一步就是去完成 <code class=\"language-text\">value-of/k</code>。最初的一些表达式，都是不需要做什么大的修改的，只需要引入 <code class=\"language-text\">apply-cont</code> 就行：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token comment\">; value-of/k : Exp × Env × Cont → FinalAnswer</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> value-of/k\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">exp</span> <span class=\"token argument variable\">env</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">cases</span> expression exp\n      <span class=\"token punctuation\">(</span><span class=\"token car\">const-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">num</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> cont <span class=\"token punctuation\">(</span><span class=\"token car\">num-val</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">var-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">var</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> cont <span class=\"token punctuation\">(</span><span class=\"token car\">apply-env</span> env var<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">proc-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">var</span> body<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> cont\n        \t<span class=\"token punctuation\">(</span><span class=\"token car\">proc-val</span> <span class=\"token punctuation\">(</span><span class=\"token car\">procedure</span> var body env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      ...\n    <span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">letrec</code> 也比较简单，因为它主要就是更新一下 environment，不更新 continuation：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">      <span class=\"token punctuation\">(</span><span class=\"token car\">letrec-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">p-name</span> b-var p-body letrec-body<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> letrec-body\n          <span class=\"token punctuation\">(</span><span class=\"token car\">extend-env-rec</span> p-name b-var p-body env<span class=\"token punctuation\">)</span>\n          cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>注意这里不更新 continuation 的原因是里面的 <code class=\"language-text\">value-of/k</code> 变成了尾递归。</p>\n<ul>\n<li>\n<p><strong>Tail Calls Don’t Grow the Continuation</strong></p>\n<ul>\n<li>如果 <code class=\"language-text\">exp1</code> 被返回成了 <code class=\"language-text\">exp2</code>，那么 <code class=\"language-text\">exp1</code> 和 <code class=\"language-text\">exp2</code> 应该在相同的 continuation 中。</li>\n</ul>\n</li>\n</ul>\n<p>下一步考虑 <code class=\"language-text\">zero?</code>。因为 <code class=\"language-text\">zero?</code> 需要先计算里面的值，然后在判断它是不是 0，所以实际上是会延展 continuation 的：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">      <span class=\"token punctuation\">(</span><span class=\"token car\">zero</span>?-exp <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> exp1 env\n        \t<span class=\"token punctuation\">(</span><span class=\"token car\">zero1-cont</span> cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>并且我们希望：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">zero1-cont</span> cont<span class=\"token punctuation\">)</span> val<span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> cont\n    <span class=\"token punctuation\">(</span><span class=\"token car\">bool-val</span>\n    \t<span class=\"token punctuation\">(</span><span class=\"token car\">zero</span>? <span class=\"token punctuation\">(</span><span class=\"token car\">expval->num</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">let</code> 类似 <code class=\"language-text\">zero?</code>，原先的 <code class=\"language-text\">let</code> 的代码为：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">      <span class=\"token punctuation\">(</span><span class=\"token car\">let-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">var</span> exp1 body<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">val1</span> <span class=\"token punctuation\">(</span><span class=\"token car\">value-of</span> exp1 env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        \t<span class=\"token punctuation\">(</span><span class=\"token car\">value-of</span> body\n        \t\t<span class=\"token punctuation\">(</span><span class=\"token car\">extend-env</span> var val1 env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>我们需要更新一下 <code class=\"language-text\">cont</code>，变为：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">      <span class=\"token punctuation\">(</span><span class=\"token car\">let-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">var</span> exp1 body<span class=\"token punctuation\">)</span>\n      \t<span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> exp1 env\n      \t\t<span class=\"token punctuation\">(</span><span class=\"token car\">let-exp-cont</span> var body env cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>并且保证：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">let-exp-cont</span> var body env cont<span class=\"token punctuation\">)</span> val<span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> body <span class=\"token punctuation\">(</span><span class=\"token car\">extend-env</span> var val env<span class=\"token punctuation\">)</span> cont<span class=\"token punctuation\">)</span></code></pre></div>\n<p>以此类推，我们可以做出 if expression：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">      <span class=\"token punctuation\">(</span><span class=\"token car\">if-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span> exp2 exp3<span class=\"token punctuation\">)</span>\n      \t<span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> exp1 env\n      \t\t<span class=\"token punctuation\">(</span><span class=\"token car\">if-test-cont</span> exp2 exp3 env cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>且有：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">if-test-cont</span> exp2 exp3 env cont<span class=\"token punctuation\">)</span> val<span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">expval->bool</span> val<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> exp2 env cont<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> exp3 env cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>至此，我们已经有了 4 个 continuation builder （<code class=\"language-text\">end-cont</code>、 <code class=\"language-text\">zero1-cont</code>、<code class=\"language-text\">let-exp-cont</code>、<code class=\"language-text\">if-test-cont</code>）。</p>\n<p>由于 continuation 只有 1 个 observer，所以我们是可以用 procedure representation 的（见图 5.2）。当然也可以用 data representation，也就是用 <code class=\"language-text\">define-datatype</code>，然后在 <code class=\"language-text\">apply-cont</code> 里面用 <code class=\"language-text\">case</code> 一个一个单独写（见图 5.3）。</p>\n<p>Difference 要更麻烦一点，因为它会计算两个值。</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">      <span class=\"token punctuation\">(</span><span class=\"token car\">diff-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span> exp2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> exp1 env\n        \t<span class=\"token punctuation\">(</span><span class=\"token car\">diff1-cont</span> exp2 env cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>所以要把 <code class=\"language-text\">exp2</code> 放进 continuation：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token comment\">; diff1-cont</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">diff1-cont</span> exp2 env cont<span class=\"token punctuation\">)</span> val1<span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> exp2 env\n\t\t<span class=\"token punctuation\">(</span><span class=\"token car\">diff2-cont</span> val1 cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">; diff2-cont</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">diff2-cont</span> val1 cont<span class=\"token punctuation\">)</span> val2<span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">num1</span> <span class=\"token punctuation\">(</span><span class=\"token car\">expval->num</span> val1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    \t\t<span class=\"token punctuation\">(</span><span class=\"token car\">num2</span> <span class=\"token punctuation\">(</span><span class=\"token car\">expval->num</span> val2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> cont\n    \t<span class=\"token punctuation\">(</span><span class=\"token car\">num-val</span> <span class=\"token punctuation\">(</span><span class=\"token car\">-</span> num1 num2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>最后一个就是 <code class=\"language-text\">call</code> 了，原来是：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">      <span class=\"token punctuation\">(</span><span class=\"token car\">call-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">rator</span> rand<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">proc1</span> <span class=\"token punctuation\">(</span><span class=\"token car\">expval->proc</span> <span class=\"token punctuation\">(</span><span class=\"token car\">value-of</span> rator env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n              <span class=\"token punctuation\">(</span><span class=\"token car\">val</span> <span class=\"token punctuation\">(</span><span class=\"token car\">value-of</span> rand env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token car\">apply-procedure</span> proc1 val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这时我们需要做 3 件事，计算 <code class=\"language-text\">rator</code> 的值，计算 <code class=\"language-text\">rand</code> 的值以及 <code class=\"language-text\">apply-procedure</code>。</p>\n<p>和 difference 一样，我们会运行第一件，然后把剩下放进 continuation：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">      <span class=\"token punctuation\">(</span><span class=\"token car\">call-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">rator</span> rand<span class=\"token punctuation\">)</span>\n      \t<span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> rator env\n      \t\t<span class=\"token punctuation\">(</span><span class=\"token car\">rator-cont</span> rand env cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>然后有：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token comment\">; rator-cont</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">rator-cont</span> rand env cont<span class=\"token punctuation\">)</span> val1<span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> rand env\n\t\t<span class=\"token punctuation\">(</span><span class=\"token car\">rand-cont</span> val1 cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">; rand-cont</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">rand-cont</span> val1 cont<span class=\"token punctuation\">)</span> val2<span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">proc1</span> <span class=\"token punctuation\">(</span><span class=\"token car\">expval->proc</span> val1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">apply-procedure/k</span> proc1 val2 cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>注意 <code class=\"language-text\">apply-procedure/k</code> 那里传的是原本的 <code class=\"language-text\">cont</code>，因为到这里之前没跑的两步都运行完了，而 <code class=\"language-text\">apply-procedure/k</code> 是尾递归。</p>\n<p>还需要根据 continuation-passing 的风格修改一下 <code class=\"language-text\">apply-procedure/k</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token comment\">; apply-procedure/k : Proc × ExpVal × Cont → FinalAnswer</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> apply-procedure/k\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">proc1</span> <span class=\"token argument variable\">val</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">cases</span> proc proc1\n      <span class=\"token punctuation\">(</span><span class=\"token car\">procedure</span> <span class=\"token punctuation\">(</span><span class=\"token car\">var</span> body saved-env<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> body\n          <span class=\"token punctuation\">(</span><span class=\"token car\">extend-env</span> var val saved-env<span class=\"token punctuation\">)</span>\n          cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>因为是尾递归，所以不用引入新的 continuation。</p>\n<h3>5.2 A Trampolined Interpreter</h3>\n<p>虽然上面给了我们一个转化 ordinary procedural language 的方法，但实际上，对于多数语言，在每次调用函数的时候，不管是否需要，都会扩展 control context（也就是扩展堆栈），这使得系统的堆栈在运行过程中持续增长。</p>\n<p>解决这个问题的一个方法叫做 trampolining。为了避免进行无尽的链式调用，我们将整个调用链拆分。拆分的方式是将解释中的一个函数改为返回一个 0 参数的函数。当这个参数被调用的时候，就会继续整体计算。例如，我们可以把 <code class=\"language-text\">apply-procedure/k</code> 改为：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token comment\">; Bounce = ExpVal ∪ (() → Bounce)</span>\n<span class=\"token comment\">; apply-procedure/k : Proc × ExpVal × Cont → Bounce</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> apply-procedure/k\n\t<span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">proc1</span> <span class=\"token argument variable\">val</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n\t\t<span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"></span><span class=\"token punctuation\">)</span></span>\n\t\t\t<span class=\"token punctuation\">(</span><span class=\"token car\">cases</span> procedure proc1\n\t\t\t\t<span class=\"token punctuation\">(</span>... <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>因为 <code class=\"language-text\">apply-procedure/k</code> 的返回值从 <code class=\"language-text\">ExpVal</code> 转变为了 <code class=\"language-text\">Bounce</code>，所以我们还需要更新一下 <code class=\"language-text\">value-of-k</code> 和 <code class=\"language-text\">apply-cont</code> 的签名（改为返回 <code class=\"language-text\">Bounce</code>）：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token comment\">; value-of/k : Exp × Env × Cont → Bounce</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> value-of/k\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">exp</span> <span class=\"token argument variable\">env</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">cases</span> expression exp\n      <span class=\"token punctuation\">(</span>... <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span>... <span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token comment\">; apply-cont : Cont × ExpVal → Bounce</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> apply-cont\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">cont</span> <span class=\"token argument variable\">val</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">cases</span> continuation cont\n      <span class=\"token punctuation\">(</span>... val<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span>... <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span>... <span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span>... <span class=\"token punctuation\">(</span><span class=\"token car\">apply-procedure/k</span> ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>我们的程序最终肯定是需要把 <code class=\"language-text\">Bounce</code> 转化为 <code class=\"language-text\">ExpVal</code> 的，所以我们要引入 <code class=\"language-text\">trampoline</code> 函数，并更新 <code class=\"language-text\">value-of-program</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token comment\">; value-of-program : Program → FinalAnswer</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> value-of-program\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">pgm</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">cases</span> program pgm\n      <span class=\"token punctuation\">(</span><span class=\"token car\">a-program</span> <span class=\"token punctuation\">(</span><span class=\"token car\">exp</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">trampoline</span>\n      \t<span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> exp <span class=\"token punctuation\">(</span><span class=\"token car\">init-env</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">end-cont</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">; trampoline : Bounce → FinalAnswer</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> trampoline\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">bounce</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">expval</span>? bounce<span class=\"token punctuation\">)</span>\n      bounce\n      <span class=\"token punctuation\">(</span><span class=\"token car\">trampoline</span> <span class=\"token punctuation\">(</span><span class=\"token car\">bounce</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>每个 <code class=\"language-text\">apply-procedure/k</code> 返回的 <code class=\"language-text\">lambda ()</code> 实际上记录了当前计算的一个 snapshot （相当于是把计算推迟到最后的 <code class=\"language-text\">trampoline</code> 函数里面去了）。这样做的结果就是让调用栈最多就走到 <code class=\"language-text\">apply-procedure/k</code>，等整体的栈退回来之后，再继续计算，从而限制了无尽的回调和堆栈的增长。</p>\n<h3>5.3 An Imperative Interpreter</h3>\n<ul>\n<li><strong>A 0-argument tail call is the same as a jump</strong></li>\n</ul>\n<h3>5.4 Exceptions</h3>\n<p>为了引入 exception handling，我们加入如下两条语法：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">Expression :<span class=\"token lisp-property property\">:=</span> try Expression catch <span class=\"token punctuation\">(</span><span class=\"token car\">Identifier</span><span class=\"token punctuation\">)</span> Expression\n\t\t\t\t\t\t\t try-exp <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span> var handler-exp<span class=\"token punctuation\">)</span>\nExpression :<span class=\"token lisp-property property\">:=</span> raise Expression\n\t\t\t\t\t\t\t raise-exp <span class=\"token punctuation\">(</span><span class=\"token car\">exp</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>用 conitinuation passing interpreter 实现 exception handling 是很简单的。让我们从 <code class=\"language-text\">try</code> 开始。首先肯定是要引入 <code class=\"language-text\">try</code> 相关的 continuation：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">      <span class=\"token punctuation\">(</span><span class=\"token car\">try-cont</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">var</span> identifier?<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">handler-exp</span> expression?<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">env</span> environment?<span class=\"token punctuation\">)</span>\n      \t<span class=\"token punctuation\">(</span><span class=\"token car\">cont</span> continuation?<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">raise1-cont</span>\n      \t<span class=\"token punctuation\">(</span><span class=\"token car\">saved-cont</span> continuation?<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>之后这样实现 <code class=\"language-text\">try</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">      <span class=\"token punctuation\">(</span><span class=\"token car\">try-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span> var handler-exp<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> exp1 env\n        \t<span class=\"token punctuation\">(</span><span class=\"token car\">try-cont</span> var handler-exp env cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">try-cont</span> var handler-exp env cont<span class=\"token punctuation\">)</span> val<span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> cont val<span class=\"token punctuation\">)</span></code></pre></div>\n<p>然后是 <code class=\"language-text\">raise</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">      <span class=\"token punctuation\">(</span><span class=\"token car\">raise-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> exp1 env\n        \t<span class=\"token punctuation\">(</span><span class=\"token car\">raise1-cont</span> cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">raise1-cont</span> cont<span class=\"token punctuation\">)</span> val<span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">apply-handler</span> val cont<span class=\"token punctuation\">)</span></code></pre></div>\n<p><code class=\"language-text\">raise</code> 的目的是找到最近的 handler，并处理 error。</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token comment\">; apply-handler : ExpVal × Cont → FinalAnswer</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> apply-handler\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">val</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">cases</span> continuation cont\n      <span class=\"token punctuation\">(</span><span class=\"token car\">try-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">var</span> handler-exp saved-env saved-cont<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> handler-exp\n          <span class=\"token punctuation\">(</span><span class=\"token car\">extend-env</span> var val saved-env<span class=\"token punctuation\">)</span>\n          saved-cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">end-cont</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n      \t<span class=\"token punctuation\">(</span><span class=\"token car\">report-uncaught-exception</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">diff1-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">exp2</span> saved-env saved-cont<span class=\"token punctuation\">)</span>\n      \t<span class=\"token punctuation\">(</span><span class=\"token car\">apply-handler</span> val saved-cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">diff2-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">val1</span> saved-cont<span class=\"token punctuation\">)</span>\n      \t<span class=\"token punctuation\">(</span><span class=\"token car\">apply-handler</span> val saved-cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      ...<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>注意这里只有 <code class=\"language-text\">try</code> 的部分是有 handler 的，以及需要更新 environment，因为增加了一个绑定。</p>\n<h3>5.5 Threads</h3>\n<p>thread 相当于是有多个 computation in progress，相互之间通过 shared memory（这里不是指 OS 里的 shared memory，而只是说他们都可以往相同的内存里复制）进行共享，类似 Ch4。</p>\n<p>这节内容挺多的，等需要的时候再详细看吧。</p>","frontmatter":{"title":"EOPL 读书笔记 Ch5","date":"2021-05-06T21:30:00.000Z","tags":["PL"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/EOPL-读书笔记-Ch5/"}}}