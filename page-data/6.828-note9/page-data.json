{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-note9/","webpackCompilationHash":"bb5c7520fcd440d7acfc","result":{"data":{"markdownRemark":{"html":"<p>这里会记录阅读6.828课程lecture note的我的个人笔记。可能会中英混杂，不是很适合外人阅读，也请见谅。</p>\n<h2>Lecture 10: Processes, threads, and scheduling</h2>\n<p>之前的一次作业基本上都是阅读代码和回答问题，所以就不单独列出来了。本讲的内容非常建议按照要求先阅读xv6-book的对应部分。</p>\n<h3>Process scheduling</h3>\n<p>什么是进程：</p>\n<p>进程是an abstract virtual machine，仿佛其有自己的CPU和内存，并不受其他进程影响。主要是为了isolation。</p>\n<p>进程的主要API有：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  fork\n  exec\n  exit\n  wait\n  kill\n  sbrk\n  getpid</code></pre></div>\n<p>我们的挑战是很多时候，进程数比内核数多。这个时候我们就要用名叫time-sharing（分时）的方法，伴随以scheduling和context switch。</p>\n<p>我们的主要目标是：</p>\n<ul>\n<li>transparent to user processes (kernel对于用户应用不可见)</li>\n<li>pre-emptive for user processes</li>\n<li>pre-emptive for kernel (帮助系统作响应)</li>\n</ul>\n<p>xv6的解决方案是每个进程1个 user thread，1个kernel thread，每个处理器1个scheduler thread</p>\n<p>什么是线程：</p>\n<ul>\n<li>a CPU core executing (with register and stack)</li>\n<li>a saved set of registers and a stack that could execute</li>\n</ul>\n<p>xv6的进程切换的概况：</p>\n<p><img src=\"https://i.imgur.com/33o9uPP.png\" alt=\"context switch\"></p>\n<ul>\n<li>user -> kernel thread (via system call or timer)</li>\n<li>kernel thread yields, due to pre-emption or waiting for I/O</li>\n<li>kernel thread -> scheduler thread</li>\n<li>scheduler thread finds a RUNNABLE kernel thread</li>\n<li>scheduler thread -> kernel thread</li>\n<li>kernel thread -> user</li>\n</ul>\n<p>每个xv6 process都有一个状态<code class=\"language-text\">proc-&gt;state</code>，可以的取值为：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  RUNNING\n  RUNNABLE\n  SLEEPING\n  ZOMBIE\n  UNUSED</code></pre></div>\n<p>注意：</p>\n<ul>\n<li>xv6有多个kernel thread，他们共享同一个kernel address space</li>\n<li>xv6的每个进程只有1个user thread</li>\n<li>像Linux这样的系统支持没个进程多个线程。</li>\n</ul>\n<p>context switching是xv6里最难做对的事了。</p>\n<h3>xv6 code for context switch</h3>\n<p>下面让我们来看看xv6的代码来学习一下它是怎么进行context switch的：</p>\n<p>进行两次context switch是为了简化cleaning up。</p>\n<p>我们没有讲义中提到的<code class=\"language-text\">hog.c</code>，所以没办法用gdb进行调试，不过还是可以跟着调试的路子看代码。</p>\n<p>当开始发生context swtich的时候，会先通过时间中断触发<code class=\"language-text\">trap()</code>中的这部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token comment\">// Force process to give up CPU on clock tick.</span>\n  <span class=\"token comment\">// If interrupts were on while locks held, would need to check nlock.</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> RUNNING <span class=\"token operator\">&amp;&amp;</span>\n     tf<span class=\"token operator\">-></span>trapno <span class=\"token operator\">==</span> T_IRQ0<span class=\"token operator\">+</span>IRQ_TIMER<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后进入位于<code class=\"language-text\">proc.c</code>的<code class=\"language-text\">yield</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Give up the CPU for one scheduling round.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//DOC: yieldlock</span>\n  <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNABLE<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sched</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>让当前进程等待之后，进入在同一个文件中的<code class=\"language-text\">shed()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Enter scheduler.  Must hold only ptable.lock</span>\n<span class=\"token comment\">// and have changed proc->state. Saves and restores</span>\n<span class=\"token comment\">// intena because intena is a property of this</span>\n<span class=\"token comment\">// kernel thread, not this CPU. It should</span>\n<span class=\"token comment\">// be proc->intena and proc->ncli, but that would</span>\n<span class=\"token comment\">// break in the few places where a lock is held but</span>\n<span class=\"token comment\">// there's no process.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">sched</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> intena<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">holding</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sched ptable.lock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ncli <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sched locks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> RUNNING<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sched running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">readeflags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>FL_IF<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sched interruptible\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  intena <span class=\"token operator\">=</span> <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>intena<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">swtch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>context<span class=\"token punctuation\">,</span> <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>scheduler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>intena <span class=\"token operator\">=</span> intena<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">shed</code>就是检查一下当前的状态是不是对的。注意这里因为acquire了<code class=\"language-text\">ptable.lock</code>，由于spinlock的特点（见<code class=\"language-text\">spinlock.c/aquire()</code>），cpu的中断应该是处于disabled状态，也就是说第3个判断是由上面两个推测出来的。然后转到<code class=\"language-text\">swtch()</code>（步骤2）。在<code class=\"language-text\">swtch.S</code>中：</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># Context switch\n#\n#   void swtch(struct context **old, struct context *new);\n# \n# Save the current registers on the stack, creating\n# a struct context, and save its address in *old.\n# Switch stacks to new and pop previously-saved registers.\n\n.globl swtch\nswtch:\n  movl 4(%esp), %eax  # &amp;p-&gt;context\n  movl 8(%esp), %edx  # mycpu()-&gt;scheduler\n\n  # Save old callee-saved registers\n  pushl %ebp\n  pushl %ebx\n  pushl %esi\n  pushl %edi\n\n  # Switch stacks\n  movl %esp, (%eax)\n  movl %edx, %esp\n\n  # Load new callee-saved registers\n  popl %edi\n  popl %esi\n  popl %ebx\n  popl %ebp\n  ret</code></pre></div>\n<p><code class=\"language-text\">swtch</code>不清楚thread的信息，其只是保存切换前的一些寄存器，切换到了<code class=\"language-text\">mycpu()-&gt;scheduler</code>这个处理器的scheduler thread里（通过切换<code class=\"language-text\">%esp</code>），然后把切换后的环境的寄存器恢复回来，然后return。这些保存和恢复的寄存器就是context。</p>\n<p>切换栈使得<code class=\"language-text\">swtch</code>返回会返回到CPU的<code class=\"language-text\">scheduler()</code>中了。这个函数在<code class=\"language-text\">proc.c</code>中</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Per-CPU process scheduler.</span>\n<span class=\"token comment\">// Each CPU calls scheduler() after setting itself up.</span>\n<span class=\"token comment\">// Scheduler never returns.  It loops, doing:</span>\n<span class=\"token comment\">//  - choose a process to run</span>\n<span class=\"token comment\">//  - swtch to start running that process</span>\n<span class=\"token comment\">//  - eventually that process transfers control</span>\n<span class=\"token comment\">//      via swtch back to the scheduler.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">scheduler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cpu</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token operator\">-></span>proc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Enable interrupts on this processor.</span>\n    <span class=\"token function\">sti</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Loop over process table looking for process to run.</span>\n    <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">!=</span> RUNNABLE<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Switch to chosen process.  It is the process's job</span>\n      <span class=\"token comment\">// to release ptable.lock and then reacquire it</span>\n      <span class=\"token comment\">// before jumping back to us.</span>\n      c<span class=\"token operator\">-></span>proc <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">switchuvm</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNING<span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">swtch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>scheduler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">switchkvm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Process is done running for now.</span>\n      <span class=\"token comment\">// It should have changed its p->state before coming back.</span>\n      c<span class=\"token operator\">-></span>proc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意会继续从<code class=\"language-text\">scheduler</code>的<code class=\"language-text\">swtch</code>这行继续运行，因为之前就是从这里切换走的。注意前面的<code class=\"language-text\">ptable.lock</code>和<code class=\"language-text\">yield</code>里是一个锁。然后就是运行<code class=\"language-text\">switchkvm()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Switch h/w page table register to the kernel-only page table,</span>\n<span class=\"token comment\">// for when no process is running.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">switchkvm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>kpgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// switch to the kernel page table</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>通过<code class=\"language-text\">switchkvm</code>来释放了旧的page table。然后<code class=\"language-text\">scheduler</code>回继续运行，去找下一个<code class=\"language-text\">RUNNABLE</code>的进程，如果没有，就释放<code class=\"language-text\">ptable.lock</code>，看看其他的处理器有没有需要。</p>\n<p>如果有可以切换的 （有<code class=\"language-text\">RUNNABLE</code>），就运行<code class=\"language-text\">switchuvm</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Switch TSS and h/w page table to correspond to process p.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">switchuvm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"switchuvm: no process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>kstack <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"switchuvm: no kstack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"switchuvm: no pgdir\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">pushcli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>gdt<span class=\"token punctuation\">[</span>SEG_TSS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">SEG16</span><span class=\"token punctuation\">(</span>STS_T32A<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">,</span>\n                                <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>gdt<span class=\"token punctuation\">[</span>SEG_TSS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">.</span>ss0 <span class=\"token operator\">=</span> SEG_KDATA <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">.</span>esp0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>p<span class=\"token operator\">-></span>kstack <span class=\"token operator\">+</span> KSTACKSIZE<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// setting IOPL=0 in eflags *and* iomb beyond the tss segment limit</span>\n  <span class=\"token comment\">// forbids I/O instructions (e.g., inb and outb) from user space</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">.</span>iomb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ushort<span class=\"token punctuation\">)</span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ltr</span><span class=\"token punctuation\">(</span>SEG_TSS <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// switch to process's address space</span>\n  <span class=\"token function\">popcli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>把TSS和page table都换成这个进程的。之后就再调用<code class=\"language-text\">swtch</code>切换到这个进程了。注意从这个<code class=\"language-text\">swtch</code>返回的时候，会返回到<code class=\"language-text\">sched</code>的最下面，因为之前的切换就发生于此，然后依次返回<code class=\"language-text\">yield</code>, <code class=\"language-text\">trap</code>...从而继续运行这个进程。</p>\n<p>注意，在<code class=\"language-text\">yield</code>中的<code class=\"language-text\">acquire</code>会被另外一个进程里的<code class=\"language-text\">yield</code>的<code class=\"language-text\">release</code>去释放。</p>\n<p>下面是关于这整个步骤的几个问题：</p>\n<ul>\n<li>\n<p>scheduling policy是什么：</p>\n<p>因为是循环运行，所以是Round Robin。除非只有两个进程在同时运行，刚刚<code class=\"language-text\">yield</code>的程序不会被马上运行。</p>\n</li>\n<li>\n<p>为什么<code class=\"language-text\">scheduler</code>会在每个循环后会<code class=\"language-text\">release</code>，循环前会<code class=\"language-text\">acquire</code>。</p>\n<p>为了让其他的<strong>processor</strong>可以使用<code class=\"language-text\">ptable</code>。不然如果两个处理器只有1个进程，会导致死锁。原因如下：</p>\n<p>假设有cpu A和cpu B，进程p运行在cpu A上。如果cpu B <code class=\"language-text\">acquire</code>了锁，但不<code class=\"language-text\">release</code>，会导致p在<code class=\"language-text\">yield</code>的时候会无限等待。</p>\n</li>\n<li>\n<p>为什么在<code class=\"language-text\">scheduler</code>里面重启中断？</p>\n<p>因为可能没有<code class=\"language-text\">RUNNABLE</code>进程，如果不重启中断就会一直死循环在<code class=\"language-text\">scheduler</code>里面了。enable interrupt可以让一些在等待I/O的进程能够signal completion</p>\n</li>\n<li>\n<p>为什么是<code class=\"language-text\">yield</code>获取了<code class=\"language-text\">ptable.lock</code>但是<code class=\"language-text\">scheduler()</code>来释放。</p>\n<p>注意这是非常不寻常的地方，aquire和release不是在同一个线程里面做的</p>\n<p>为什么<code class=\"language-text\">swtch</code>需要hold lock呢？</p>\n<p>不然可能会有两个processor都换成了同一个进程</p>\n</li>\n<li>\n<p><code class=\"language-text\">ptable.lock</code>保护的是如下的几个invariant</p>\n<ul>\n<li>RUNNING过程中，处理器的寄存器存值（而不是在context中）</li>\n<li>RUNNABLE过程中，context保存寄存器。且没有处理器使用这个进程的stack</li>\n</ul>\n<p>从<code class=\"language-text\">yield</code>到<code class=\"language-text\">scheduler</code>都hold lock保证了关闭中断，所以没有timer会影响<code class=\"language-text\">swtch</code>的save&#x26;restore。另一个CPU在过程中不能进行stack switch</p>\n</li>\n<li>\n<p>kernel thread进行不进行pre-emptive scheduling (就是上面说的这个过程)</p>\n<p>从<code class=\"language-text\">trap</code>的条件可以看出来，time interrupt不区分kernel thread还是user-level thread。</p>\n</li>\n</ul>\n<h3>Thread clean up</h3>\n<p>这里主要看<code class=\"language-text\">kill</code>, <code class=\"language-text\">exit</code>, <code class=\"language-text\">wait</code>这3个进程的API。</p>\n<p>首先是<code class=\"language-text\">kill</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Kill the process with the given pid.</span>\n<span class=\"token comment\">// Process won't exit until it returns</span>\n<span class=\"token comment\">// to user space (see trap in trap.c).</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">kill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pid<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pid <span class=\"token operator\">==</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      p<span class=\"token operator\">-></span>killed <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Wake process from sleep if necessary.</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> SLEEPING<span class=\"token punctuation\">)</span>\n        p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNABLE<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>用这个函数去释放内存什么的太麻烦了，所以是指把<code class=\"language-text\">p-&gt;kill</code>设置为1。然后在<code class=\"language-text\">trap</code>里面</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>trapno <span class=\"token operator\">==</span> T_SYSCALL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>killed<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>tf <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>killed<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>从而转化为进程自己调用<code class=\"language-text\">exit()</code>，自己来退出。</p>\n<p>那么之后就是<code class=\"language-text\">exit()</code>函数：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Exit the current process.  Does not return.</span>\n<span class=\"token comment\">// An exited process remains in the zombie state</span>\n<span class=\"token comment\">// until its parent calls wait() to find out it exited.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>curproc <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curproc <span class=\"token operator\">==</span> initproc<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init exiting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Close all open files.</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> fd <span class=\"token operator\">&lt;</span> NOFILE<span class=\"token punctuation\">;</span> fd<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curproc<span class=\"token operator\">-></span>ofile<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fileclose</span><span class=\"token punctuation\">(</span>curproc<span class=\"token operator\">-></span>ofile<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      curproc<span class=\"token operator\">-></span>ofile<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">begin_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">iput</span><span class=\"token punctuation\">(</span>curproc<span class=\"token operator\">-></span>cwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">end_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  curproc<span class=\"token operator\">-></span>cwd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Parent might be sleeping in wait().</span>\n  <span class=\"token function\">wakeup1</span><span class=\"token punctuation\">(</span>curproc<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Pass abandoned children to init.</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>parent <span class=\"token operator\">==</span> curproc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      p<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> initproc<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> ZOMBIE<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">wakeup1</span><span class=\"token punctuation\">(</span>initproc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Jump into the scheduler, never to return.</span>\n  curproc<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> ZOMBIE<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sched</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zombie exit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>一个进程自己是不能释放自己的stack的。只能把自己设置为<code class=\"language-text\">ZOMBIE</code>然后切出去让parent进程来清理。</p>\n<p><code class=\"language-text\">wait</code>就是用来进行这个最后的处理的：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Wait for a child process to exit and return its pid.</span>\n<span class=\"token comment\">// Return -1 if this process has no children.</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> havekids<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>curproc <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Scan through table looking for exited children.</span>\n    havekids <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>parent <span class=\"token operator\">!=</span> curproc<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      havekids <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> ZOMBIE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Found one.</span>\n        pid <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">kfree</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>kstack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>kstack <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">freevm</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>pid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>killed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> UNUSED<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> pid<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// No point waiting if we don't have any children.</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>havekids <span class=\"token operator\">||</span> curproc<span class=\"token operator\">-></span>killed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Wait for children to exit.  (See wakeup1 call in proc_exit.)</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>curproc<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//DOC: wait-sleep</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">wait</code>就是一个循环，如果有子进程变成<code class=\"language-text\">ZOMBIE</code>了，那么就清理其内存，并返回这个子进程的<code class=\"language-text\">pid</code>。如果暂时没有就会进入<code class=\"language-text\">sleep</code>，下一讲会讲。</p>","frontmatter":{"title":"6.828 笔记9"}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-note9/"}}}