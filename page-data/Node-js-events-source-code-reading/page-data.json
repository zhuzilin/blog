{"componentChunkName":"component---src-templates-blog-post-js","path":"/Node-js-events-source-code-reading/","webpackCompilationHash":"7e8cb6d6d8baacdb1aae","result":{"data":{"markdownRemark":{"html":"<p>It is well-known that Node.js is an event based JavaScript  runtime environment. And today let's dig deeper into the source code and have a look at how this event mechanism is implemented.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">const</span> EventEmitter <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'events'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">class</span> <span class=\"token class-name\">MyEmitter</span> <span class=\"token keyword\">extends</span> <span class=\"token class-name\">EventEmitter</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">const</span> myEmitter <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">MyEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">on</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">=></span> <span class=\"token punctuation\">{</span>\n  console<span class=\"token punctuation\">.</span><span class=\"token function\">log</span><span class=\"token punctuation\">(</span><span class=\"token string\">'an event occurred!'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nmyEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'event'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Here is demo of the core function of the events. Therefore it is reasonable that we just focus on functions shown in this demo.</p>\n<p>The event relevant code lies in the <code class=\"language-text\">./lib/events.js</code> file. Apparently, the code exports <code class=\"language-text\">EventEmitter</code> function as its default export.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">EventEmitter</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  EventEmitter<span class=\"token punctuation\">.</span><span class=\"token function\">init</span><span class=\"token punctuation\">.</span><span class=\"token function\">call</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\nmodule<span class=\"token punctuation\">.</span>exports <span class=\"token operator\">=</span> EventEmitter<span class=\"token punctuation\">;</span></code></pre></div>\n<p>And the initialization is also simple. It only give initial value to some properties, <code class=\"language-text\">this._event</code> is a null object   that could map the event name to the function and <code class=\"language-text\">this._eventsCount</code> is the total number of the events.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\">EventEmitter<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">init</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_events <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span> <span class=\"token operator\">||</span>\n      <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_events <span class=\"token operator\">===</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">getPrototypeOf</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span>_events<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_events <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_eventsCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_maxListeners <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_maxListeners <span class=\"token operator\">||</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>Now comes the untrivial parts.</p>\n<p>The <code class=\"language-text\">on</code> function is a wrapper of the <code class=\"language-text\">addListener</code>, which is a wrapper of <code class=\"language-text\">_addListener</code>:</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">addListener</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">addListener</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> listener</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">_addListener</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>on <span class=\"token operator\">=</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>addListener<span class=\"token punctuation\">;</span></code></pre></div>\n<p>So our main focus would be the <code class=\"language-text\">_addListener</code> function, notice the <code class=\"language-text\">target</code> argument is the <code class=\"language-text\">EventEmitter</code> object.</p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token keyword\">function</span> <span class=\"token function\">_addListener</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">target<span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">,</span> prepend</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">var</span> m<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> events<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">var</span> existing<span class=\"token punctuation\">;</span>\n  \n  <span class=\"token comment\">// To check if listener is function.</span>\n  <span class=\"token function\">checkListener</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  events <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>_events<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>events <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    events <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>_events <span class=\"token operator\">=</span> Object<span class=\"token punctuation\">.</span><span class=\"token function\">create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    target<span class=\"token punctuation\">.</span>_eventsCount <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// To avoid recursion in the case that type === \"newListener\"! Before</span>\n    <span class=\"token comment\">// adding it to the listeners, first emit \"newListener\".</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>events<span class=\"token punctuation\">.</span>newListener <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      target<span class=\"token punctuation\">.</span><span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token string\">'newListener'</span><span class=\"token punctuation\">,</span> type<span class=\"token punctuation\">,</span>\n                  listener<span class=\"token punctuation\">.</span>listener <span class=\"token operator\">?</span> listener<span class=\"token punctuation\">.</span>listener <span class=\"token punctuation\">:</span> listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Re-assign `events` because a newListener handler could have caused the</span>\n      <span class=\"token comment\">// this._events to be assigned to a new object</span>\n      events <span class=\"token operator\">=</span> target<span class=\"token punctuation\">.</span>_events<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    existing <span class=\"token operator\">=</span> events<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>existing <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Optimize the case of one listener. Don't need the extra array object.</span>\n    events<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> listener<span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">++</span>target<span class=\"token punctuation\">.</span>_eventsCount<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> existing <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// Adding the second element, need to change to array.</span>\n      existing <span class=\"token operator\">=</span> events<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span>\n        prepend <span class=\"token operator\">?</span> <span class=\"token punctuation\">[</span>listener<span class=\"token punctuation\">,</span> existing<span class=\"token punctuation\">]</span> <span class=\"token punctuation\">:</span> <span class=\"token punctuation\">[</span>existing<span class=\"token punctuation\">,</span> listener<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// If we've already got an array, just append.</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prepend<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      existing<span class=\"token punctuation\">.</span><span class=\"token function\">unshift</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n      existing<span class=\"token punctuation\">.</span><span class=\"token function\">push</span><span class=\"token punctuation\">(</span>listener<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Check for listener leak</span>\n    m <span class=\"token operator\">=</span> <span class=\"token function\">$getMaxListeners</span><span class=\"token punctuation\">(</span>target<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>m <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> existing<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> m <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>existing<span class=\"token punctuation\">.</span>warned<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      existing<span class=\"token punctuation\">.</span>warned <span class=\"token operator\">=</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// No error code for this since it is a Warning</span>\n      <span class=\"token comment\">// eslint-disable-next-line no-restricted-syntax</span>\n      <span class=\"token keyword\">const</span> w <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">(</span><span class=\"token string\">'Possible EventEmitter memory leak detected. '</span> <span class=\"token operator\">+</span>\n                          <span class=\"token template-string\"><span class=\"token string\">`</span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span>existing<span class=\"token punctuation\">.</span>length<span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> </span><span class=\"token interpolation\"><span class=\"token interpolation-punctuation punctuation\">${</span><span class=\"token function\">String</span><span class=\"token punctuation\">(</span>type<span class=\"token punctuation\">)</span><span class=\"token interpolation-punctuation punctuation\">}</span></span><span class=\"token string\"> listeners `</span></span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">'added. Use emitter.setMaxListeners() to '</span> <span class=\"token operator\">+</span>\n                          <span class=\"token string\">'increase limit'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      w<span class=\"token punctuation\">.</span>name <span class=\"token operator\">=</span> <span class=\"token string\">'MaxListenersExceededWarning'</span><span class=\"token punctuation\">;</span>\n      w<span class=\"token punctuation\">.</span>emitter <span class=\"token operator\">=</span> target<span class=\"token punctuation\">;</span>\n      w<span class=\"token punctuation\">.</span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n      w<span class=\"token punctuation\">.</span>count <span class=\"token operator\">=</span> existing<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n      process<span class=\"token punctuation\">.</span><span class=\"token function\">emitWarning</span><span class=\"token punctuation\">(</span>w<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> target<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>The comment in the code is really clear. The major part of the code is to add the <code class=\"language-text\">listener</code> to  <code class=\"language-text\">_events</code> and add one to <code class=\"language-text\">_eventsCount</code>. Also, if there is an existing listener, we will substitute it. Notice, if there is a <code class=\"language-text\">&quot;newListener&quot;</code> listener registered, it will be called before add the <code class=\"language-text\">listener</code> to  <code class=\"language-text\">_events</code>.</p>\n<p>And for emit: </p>\n<div class=\"gatsby-highlight\" data-language=\"javascript\"><pre class=\"language-javascript\"><code class=\"language-javascript\"><span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span><span class=\"token function-variable function\">emit</span> <span class=\"token operator\">=</span> <span class=\"token keyword\">function</span> <span class=\"token function\">emit</span><span class=\"token punctuation\">(</span><span class=\"token parameter\">type<span class=\"token punctuation\">,</span> <span class=\"token operator\">...</span>args</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">let</span> doError <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>type <span class=\"token operator\">===</span> <span class=\"token string\">'error'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// if we are emitting an error</span>\n\n  <span class=\"token keyword\">const</span> events <span class=\"token operator\">=</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">.</span>_events<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>events <span class=\"token operator\">!==</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\n    doError <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>doError <span class=\"token operator\">&amp;&amp;</span> events<span class=\"token punctuation\">.</span>error <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>doError<span class=\"token punctuation\">)</span>  <span class=\"token comment\">// event is undefined but emit event other than error.</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// If there is no 'error' event listener then throw.</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>doError<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">let</span> er<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>args<span class=\"token punctuation\">.</span>length <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      er <span class=\"token operator\">=</span> args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>er <span class=\"token keyword\">instanceof</span> <span class=\"token class-name\">Error</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">try</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">const</span> <span class=\"token punctuation\">{</span> kExpandStackSymbol <span class=\"token punctuation\">}</span> <span class=\"token operator\">=</span> <span class=\"token function\">require</span><span class=\"token punctuation\">(</span><span class=\"token string\">'internal/util'</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">const</span> capture <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n        Error<span class=\"token punctuation\">.</span><span class=\"token function\">captureStackTrace</span><span class=\"token punctuation\">(</span>capture<span class=\"token punctuation\">,</span> <span class=\"token class-name\">EventEmitter</span><span class=\"token punctuation\">.</span>prototype<span class=\"token punctuation\">.</span>emit<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        Object<span class=\"token punctuation\">.</span><span class=\"token function\">defineProperty</span><span class=\"token punctuation\">(</span>er<span class=\"token punctuation\">,</span> kExpandStackSymbol<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">{</span>\n          value<span class=\"token punctuation\">:</span> <span class=\"token function\">enhanceStackTrace</span><span class=\"token punctuation\">.</span><span class=\"token function\">bind</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">null</span><span class=\"token punctuation\">,</span> er<span class=\"token punctuation\">,</span> capture<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n          configurable<span class=\"token punctuation\">:</span> <span class=\"token boolean\">true</span>\n        <span class=\"token punctuation\">}</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span> <span class=\"token keyword\">catch</span> <span class=\"token punctuation\">{</span><span class=\"token punctuation\">}</span>\n\n      <span class=\"token comment\">// Note: The comments on the `throw` lines are intentional, they show</span>\n      <span class=\"token comment\">// up in Node's output if this results in an unhandled exception.</span>\n      <span class=\"token keyword\">throw</span> er<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unhandled 'error' event</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token comment\">// At least give some kind of context to the user</span>\n    <span class=\"token keyword\">const</span> errors <span class=\"token operator\">=</span> <span class=\"token function\">lazyErrors</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> err <span class=\"token operator\">=</span> <span class=\"token keyword\">new</span> <span class=\"token class-name\">errors<span class=\"token punctuation\">.</span>ERR_UNHANDLED_ERROR</span><span class=\"token punctuation\">(</span>er<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    err<span class=\"token punctuation\">.</span>context <span class=\"token operator\">=</span> er<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">throw</span> err<span class=\"token punctuation\">;</span> <span class=\"token comment\">// Unhandled 'error' event</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">const</span> handler <span class=\"token operator\">=</span> events<span class=\"token punctuation\">[</span>type<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>handler <span class=\"token operator\">===</span> <span class=\"token keyword\">undefined</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">typeof</span> handler <span class=\"token operator\">===</span> <span class=\"token string\">'function'</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">const</span> len <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">.</span>length<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">const</span> listeners <span class=\"token operator\">=</span> <span class=\"token function\">arrayClone</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">var</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">Reflect</span><span class=\"token punctuation\">.</span><span class=\"token function\">apply</span><span class=\"token punctuation\">(</span>listeners<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">this</span><span class=\"token punctuation\">,</span> args<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">return</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>In the <code class=\"language-text\">emit</code> function, we will call the handler in the <code class=\"language-text\">_events</code>, except for <code class=\"language-text\">&quot;error&quot;</code>, which will be used as error processing.</p>\n<p>So basically, the events module is just save the event handlers in the EventEmitter and call it when emitting.</p>","frontmatter":{"title":"Node.js events source code reading","date":"2019-01-16T16:34:36.000Z","tags":["node"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/Node-js-events-source-code-reading/"}}}