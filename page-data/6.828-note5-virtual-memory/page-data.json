{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-note5-virtual-memory/","webpackCompilationHash":"cf10bc6a65d943d15347","result":{"data":{"markdownRemark":{"html":"<p>这里会记录阅读6.828课程lecture note的我的个人笔记。可能会中英混杂，不是很适合外人阅读，也请见谅。</p>\n<h2>Lecture 6: Virtual Memory</h2>\n<h3>Virual Memory Overview</h3>\n<ul>\n<li>\n<p>我们需要隔离开的address space</p>\n<p>每个进程都有自己的内存，耶只能读写自己的内存。</p>\n<p>挑战就在于如何能够完成multiplexing的同时保证isolation</p>\n</li>\n<li>\n<p>pagine机制提供了一个addressing的抽象</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CPU -&gt; MMU -&gt; RAM\n    VA     PA</code></pre></div>\n<p>软件只能通过VA进行load/store，而不能通过PA。</p>\n<p>kernel告诉MMU该如何进行这个mapping</p>\n<ul>\n<li>本质上，MMU里有一个表，key是VA, value是PA，这个表也就被称为page table</li>\n</ul>\n<p>MMU还可以限制用户能够使用哪些虚拟地址。</p>\n</li>\n<li>\n<p>x86的上述mapping的基本单元是4KB，这个单元被称为page</p>\n<p>同时，mapping是按照4KB对齐的，也就是说每个paging都是start on 4 KB boundary</p>\n<p>因为x86的内存为32位，所以后面的12位对应一个page内部的地址，上面提到的page table做的mapping就是用VA前20位对应到PA的前20位。</p>\n</li>\n<li>\n<p>page table里面的这2^20个entry被称为2^20个page table entry（PTE），我们来看一下一个PTE中有什么：</p>\n<p>PTE的前面20位就是对应的PA（实际上是对应的PA中的那个page）的前20位，其被称为physical page number(PPN)。</p>\n<p>后面的12位都是flag，如PTE<em>P表示是否存在，PTE</em>W表示是否可写，PTE_U表示user program是否可以使用。</p>\n</li>\n<li>\n<p>page table被存在哪里呢？</p>\n<p>被存在RAM中，MMU会读取或存储PTE</p>\n<p>操作系统可以读写PTE</p>\n</li>\n<li>\n<p>如果page table就仅仅是一个PTE的array，会出现什么问题呢？</p>\n<p>首先是太大了，2^20条，每条32bit，整个table就会是4 MB了，这对于早期的机器太大了。</p>\n<p>并且对于一个小的程序，它不需要那么多内存，可能只需要几百page，剩下的就浪费了。</p>\n</li>\n<li>\n<p>所以x86使用了一个\"two-level page table\"以节省空间</p>\n<p>除了在RAM中 分配PTE，还在内存中存一个叫page directory(PD)的东西。</p>\n<p>PD也是一个array，其每一个entry被称为PDE，我们来看一下这个PDE的结构，</p>\n<p>PDE的前20位也是一个PPN，其指向的page是一个用于存page table的page，存的每个page table会指向1024个PTE。</p>\n<p>在PD中有1024个PDE，所以就指向了2^20个PTE。</p>\n<p>刚刚提到了对于一个小程序，可能不需要那么多PTE，所以有的PDE可以是invalid，从而可以让address space变得很小。</p>\n</li>\n<li>\n<p>MMU如何知道page table在RAM的哪里呢？</p>\n<p><code class=\"language-text\">%cr3</code>存了PD的地址。PD里面（间接）存了PTE的PA，而这些PTE不一定是连续的。</p>\n</li>\n<li>\n<p>x86 paging hardware是如何翻译VA的？</p>\n<p>首先通过<code class=\"language-text\">%cr3</code>找到PD的PA，从而可以加载PD；</p>\n<p>然后从VA的前10位找到对应的PT(page table)的PA，从而可以加载PT；</p>\n<p>然后用VA的之后10位找到PTE，PTE的前20位，也就是PPN加上VA的最后12位就得到了VA对应的PA。</p>\n</li>\n<li>\n<p>PTE中的flag</p>\n<p>P, W, U</p>\n<p>xv6用U来防止用户使用kernel memory</p>\n</li>\n<li>\n<p>如果这些flag没有被set（没有设为1）会出现什么？</p>\n<p>会触发page fault，导致CPU存储寄存器，并强制转化到kernel（进入<code class=\"language-text\">trap.c</code>）。</p>\n<p>kernel可以选择produce error, kill process或者install a PTE, resume the process</p>\n</li>\n<li>\n<p>为什么选择mapping而不是其他的，如给一个上下界？</p>\n<p>mapping带来的这种indirection让paging hardware可以解决很多问题，如</p>\n<ul>\n<li>avoid fragmentation</li>\n<li>copy-on-write fork</li>\n<li>lazy allocation</li>\n</ul>\n<p>与其他的很多技巧（这些方法都是啥。。。不知道之后的一讲会不会讲清楚。。。）</p>\n</li>\n<li>\n<p>为什么在kernel中使用VA？</p>\n<p>显然给user process一个page table是很合理的，但是为什么大多数kernel也这么做？</p>\n<ul>\n<li>还是要提一下，的确是有kernel直接跑在PA上的。</li>\n<li>有一些原因很好，一些很逊。</li>\n<li>硬件使得很难关闭page table ？？？</li>\n<li>kernel用user address很方便，但是可能会导致poor isolation between kernel/application</li>\n<li>如果地址是连续的，也会很方便。比如kernel has both 4Kbyte objects and 64Kbyte objects（没看懂这是啥意思）</li>\n<li>\n<p>如果没有page table，很容易有memory fragmentation（内存碎片？）</p>\n<p>比如先分配64K, 释放，之后分配4K，4K占据了64K的地方，之后再分配64K就没法弄了。</p>\n</li>\n<li>kernel可以跑在有不同physical memory layout的硬件上。</li>\n</ul>\n</li>\n</ul>\n<h3>Case study: xv6 use of the x86 paging hardware</h3>\n<ul>\n<li>\n<p>xv6的address space的一个概况：</p>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0x00000000:0x80000000 -- user addresses below KERNBASE\n0x80000000:0x80100000 -- map low 1MB devices (for kernel)\n0x80100000:?          -- kernel instructions/data\n?         :0x8E000000 -- 224 MB of DRAM mapped here\n0xFE000000:0x00000000 -- more memory-mapped devices</code></pre></div>\n</li>\n<li>\n<p>为什么用这种布局：</p>\n<p>user virtual addresses 从0开始</p>\n<ul>\n<li>注意不同user的0会map到不同的PA</li>\n</ul>\n<p>2GB for user heap to grow contiguously</p>\n<ul>\n<li>不过注意这2G不是连续的物理内存，所以就不会有fragmentation problem</li>\n</ul>\n<p>kernel和user都被map了</p>\n<ul>\n<li>为了方便进行system call或interrupt</li>\n<li>方便kernel读写用户内存</li>\n</ul>\n<p>kernel永远都被map在固定位置：</p>\n<ul>\n<li>方便切换进程</li>\n</ul>\n<p>kernel线性映射（pa x mapped at va x+0x80000000)</p>\n<ul>\n<li>方便kernel读写物理内存</li>\n</ul>\n</li>\n<li>这种情况最大的进程能有：<code class=\"language-text\">0x80000000</code>，也就是2G内存</li>\n</ul>\n<p>下面我们来看代码：</p>\n<p>中间的哪些断点之类的东西可能是和现在的版本代码不一样？所以这里为了弄清楚，我来自由发挥一波。</p>\n<p>首先在这里需要记录一下，为了方便查找函数出现的位置，经常会使用的指令是</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">grep</span> -n funcname *.<span class=\"token punctuation\">[</span>chS<span class=\"token punctuation\">]</span></code></pre></div>\n<p>从<code class=\"language-text\">main</code>开始，</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Bootstrap processor starts running C code here.</span>\n<span class=\"token comment\">// Allocate a real stack and switch to it, first</span>\n<span class=\"token comment\">// doing some setup required for memory allocator to work.</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">kinit1</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">,</span> <span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// phys page allocator</span>\n  <span class=\"token function\">kvmalloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// kernel page table</span>\n  <span class=\"token function\">mpinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// detect other processors</span>\n  <span class=\"token function\">lapicinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// interrupt controller</span>\n  <span class=\"token function\">seginit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// segment descriptors</span>\n  <span class=\"token function\">picinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// disable pic</span>\n  <span class=\"token function\">ioapicinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// another interrupt controller</span>\n  <span class=\"token function\">consoleinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// console hardware</span>\n  <span class=\"token function\">uartinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// serial port</span>\n  <span class=\"token function\">pinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// process table</span>\n  <span class=\"token function\">tvinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// trap vectors</span>\n  <span class=\"token function\">binit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// buffer cache</span>\n  <span class=\"token function\">fileinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// file table</span>\n  <span class=\"token function\">ideinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// disk </span>\n  <span class=\"token function\">startothers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// start other processors</span>\n  <span class=\"token function\">kinit2</span><span class=\"token punctuation\">(</span><span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span>PHYSTOP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// must come after startothers()</span>\n  <span class=\"token function\">userinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// first user process</span>\n  <span class=\"token function\">mpmain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// finish this processor's setup</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">main</code>会先调用<code class=\"language-text\">kinit1</code>然后在<code class=\"language-text\">entrypgdir</code>的范围里对kernel进行初始化，然后调用<code class=\"language-text\">kinit2</code>，其会把剩下的从<code class=\"language-text\">entrypgdir</code>到<code class=\"language-text\">PHYSTOP + KERNBASE</code>的虚拟内存分给kernel，这两个函数的具体在<code class=\"language-text\">kalloc.c</code>中</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Initialization happens in two phases.</span>\n<span class=\"token comment\">// 1. main() calls kinit1() while still using entrypgdir to place just</span>\n<span class=\"token comment\">// the pages mapped by entrypgdir on free list.</span>\n<span class=\"token comment\">// 2. main() calls kinit2() with the rest of the physical pages</span>\n<span class=\"token comment\">// after installing a full page table that maps them on all cores.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">kinit1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vstart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vend<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>kmem<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">,</span> <span class=\"token string\">\"kmem\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  kmem<span class=\"token punctuation\">.</span>use_lock <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">freerange</span><span class=\"token punctuation\">(</span>vstart<span class=\"token punctuation\">,</span> vend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 注意这里的freerange就是把这个范围里的physical memory free掉</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">kinit2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vstart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vend<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">freerange</span><span class=\"token punctuation\">(</span>vstart<span class=\"token punctuation\">,</span> vend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  kmem<span class=\"token punctuation\">.</span>use_lock <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后的<code class=\"language-text\">userinit</code>是我们的重点，这个函数的目的就是设置第一个用户process，它在<code class=\"language-text\">proc.c</code>中。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">userinit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span> _binary_initcode_start<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _binary_initcode_size<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  p <span class=\"token operator\">=</span> <span class=\"token function\">allocproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  initproc <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir <span class=\"token operator\">=</span> <span class=\"token function\">setupkvm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userinit: out of memory?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">inituvm</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> _binary_initcode_start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>_binary_initcode_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>sz <span class=\"token operator\">=</span> PGSIZE<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>tf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">-></span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>cs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SEG_UCODE <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> DPL_USER<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>ds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SEG_UDATA <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> DPL_USER<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>es <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>ds<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>ss <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>ds<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>eflags <span class=\"token operator\">=</span> FL_IF<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>esp <span class=\"token operator\">=</span> PGSIZE<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>eip <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// beginning of initcode.S</span>\n\n  <span class=\"token function\">safestrcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"initcode\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>cwd <span class=\"token operator\">=</span> <span class=\"token function\">namei</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// this assignment to p->state lets other cores</span>\n  <span class=\"token comment\">// run this process. the acquire forces the above</span>\n  <span class=\"token comment\">// writes to be visible, and the lock is also needed</span>\n  <span class=\"token comment\">// because the assignment might not be atomic.</span>\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNABLE<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>我们这次主要考虑page table相关的内容，所以主要有两个函数，<code class=\"language-text\">setupkvm()</code>与<code class=\"language-text\">inituvm</code>。首先是<code class=\"language-text\">setupkvm</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// There is one page table per process, plus one that's used when</span>\n<span class=\"token comment\">// a CPU is not running any process (kpgdir). The kernel uses the</span>\n<span class=\"token comment\">// current process's page table during system calls and interrupts;</span>\n<span class=\"token comment\">// page protection bits prevent user code from using the kernel's</span>\n<span class=\"token comment\">// mappings.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// setupkvm() and exec() set up every page table like this:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//   0..KERNBASE: user memory (text+data+stack+heap), mapped to</span>\n<span class=\"token comment\">//                phys memory allocated by the kernel</span>\n<span class=\"token comment\">//   KERNBASE..KERNBASE+EXTMEM: mapped to 0..EXTMEM (for I/O space)</span>\n<span class=\"token comment\">//   KERNBASE+EXTMEM..data: mapped to EXTMEM..V2P(data)</span>\n<span class=\"token comment\">//                for the kernel's instructions and r/o data</span>\n<span class=\"token comment\">//   data..KERNBASE+PHYSTOP: mapped to V2P(data)..PHYSTOP,</span>\n<span class=\"token comment\">//                                  rw data + free physical memory</span>\n<span class=\"token comment\">//   0xfe000000..0: mapped direct (devices such as ioapic)</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The kernel allocates physical memory for its heap and for user memory</span>\n<span class=\"token comment\">// between V2P(end) and the end of physical memory (PHYSTOP)</span>\n<span class=\"token comment\">// (directly addressable from end..P2V(PHYSTOP)).</span>\n\n<span class=\"token comment\">// This table defines the kernel's mappings, which are present in</span>\n<span class=\"token comment\">// every process's page table.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">kmap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>virt<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这一段开始的虚拟地址</span>\n  uint phys_start<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 实际物理地址起始</span>\n  uint phys_end<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 实际物理地址结束</span>\n  <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> kmap<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>KERNBASE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>             EXTMEM<span class=\"token punctuation\">,</span>    PTE_W<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// I/O space</span>\n <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>KERNLINK<span class=\"token punctuation\">,</span> <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>KERNLINK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// kern text+rodata</span>\n <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">,</span>     <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     PHYSTOP<span class=\"token punctuation\">,</span>   PTE_W<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// kern data+memory</span>\n <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>DEVSPACE<span class=\"token punctuation\">,</span> DEVSPACE<span class=\"token punctuation\">,</span>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>         PTE_W<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// more devices</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Set up kernel part of a page table.</span>\npde_t<span class=\"token operator\">*</span>\n<span class=\"token function\">setupkvm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">kmap</span> <span class=\"token operator\">*</span>k<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pgdir <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pde_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">kalloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// kalloc会分配4096B的物理内存</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span>PHYSTOP<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>DEVSPACE<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PHYSTOP too high\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> kmap<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>kmap<span class=\"token punctuation\">[</span><span class=\"token function\">NELEM</span><span class=\"token punctuation\">(</span>kmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">mappages</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> k<span class=\"token operator\">-></span>virt<span class=\"token punctuation\">,</span> k<span class=\"token operator\">-></span>phys_end <span class=\"token operator\">-</span> k<span class=\"token operator\">-></span>phys_start<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>k<span class=\"token operator\">-></span>phys_start<span class=\"token punctuation\">,</span> k<span class=\"token operator\">-></span>perm<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">freevm</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> pgdir<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>这里的重点函数就是<code class=\"language-text\">mappages</code>，</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Create PTEs for virtual addresses starting at va that refer to</span>\n<span class=\"token comment\">// physical addresses starting at pa. va and size might not</span>\n<span class=\"token comment\">// be page-aligned.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">mappages</span><span class=\"token punctuation\">(</span>pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> uint size<span class=\"token punctuation\">,</span> uint pa<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>last<span class=\"token punctuation\">;</span>\n  pte_t <span class=\"token operator\">*</span>pte<span class=\"token punctuation\">;</span>\n\n  a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">PGROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  last <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">PGROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pte <span class=\"token operator\">=</span> <span class=\"token function\">walkpgdir</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"remap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> pa <span class=\"token operator\">|</span> perm <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> last<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">;</span>\n    pa <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在解释<code class=\"language-text\">mappages</code>之前，需要先解释一下这里面的<code class=\"language-text\">walkpgdir</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Return the address of the PTE in page table pgdir</span>\n<span class=\"token comment\">// that corresponds to virtual address va.  If alloc!=0,</span>\n<span class=\"token comment\">// create any required page table pages.</span>\n<span class=\"token keyword\">static</span> pte_t <span class=\"token operator\">*</span>\n<span class=\"token function\">walkpgdir</span><span class=\"token punctuation\">(</span>pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> alloc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  pde_t <span class=\"token operator\">*</span>pde<span class=\"token punctuation\">;</span>\n  pte_t <span class=\"token operator\">*</span>pgtab<span class=\"token punctuation\">;</span>\n\n  pde <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pgdir<span class=\"token punctuation\">[</span><span class=\"token function\">PDX</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pde <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    pgtab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pte_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span><span class=\"token function\">PTE_ADDR</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pde<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>alloc <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>pgtab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pte_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">kalloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Make sure all those PTE_P bits are zero.</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pgtab<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// The permissions here are overly generous, but they can</span>\n    <span class=\"token comment\">// be further restricted by the permissions in the page table</span>\n    <span class=\"token comment\">// entries, if necessary.</span>\n    <span class=\"token operator\">*</span>pde <span class=\"token operator\">=</span> <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>pgtab<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> PTE_P <span class=\"token operator\">|</span> PTE_W <span class=\"token operator\">|</span> PTE_U<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>pgtab<span class=\"token punctuation\">[</span><span class=\"token function\">PTX</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">walkpgdir</code>是找寻<code class=\"language-text\">va</code>对应的物理地址。</p>\n<ul>\n<li>用va的前10位找到va对应的PDE。</li>\n<li>\n<p>如果PDE不是空指针，同时其存在（PTE_P）被设置了，则再把PDE的物理地址转化为虚拟地址</p>\n<ul>\n<li>找这个PDE对应的page table在哪里</li>\n</ul>\n</li>\n<li>\n<p>如果PDE是空的，同时alloc被设置为1了，说明需要分配新的page table了</p>\n<ul>\n<li>分配除一个4096B作为page table</li>\n<li>然后把这个对应的page table设置好权限，然后赋值给之前找到的PDE</li>\n</ul>\n</li>\n<li>\n<p>用va的中间10位来从page table中找到对应的PTE的物理地址</p>\n<p>注意PTE的地址指向的值的前20位加上va的后12位就是va对应的pa了。</p>\n</li>\n</ul>\n<p>说完<code class=\"language-text\">walkpgdir</code>就可以说回<code class=\"language-text\">mappages</code>和<code class=\"language-text\">setupvm</code>，其主要就是把kernel的va对应的地址都分配了。</p>\n<p>说完<code class=\"language-text\">setupvm</code>就说<code class=\"language-text\">inituvm</code>，就是把<code class=\"language-text\">_binary_initcode_start</code>存在<code class=\"language-text\">pgdir</code>的最开始的一个page中。</p>\n<p>除去最开始的初始化，在执行一个新的进程的时候也会分配新的内存的，有兴趣可以看一下<code class=\"language-text\">exec.c</code>中的代码。</p>","frontmatter":{"title":"6.828 笔记5","date":"2019-02-20T15:20:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-note5-virtual-memory/"}}}