{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-hw-xv6-system-call/","webpackCompilationHash":"e3aa308410d54d843eac","result":{"data":{"markdownRemark":{"html":"<h2>Part One: System call tracing</h2>\n<p>第一个任务是让每次调用system call的时候，都会输出其名字和返回值。需要修改的代码是<code class=\"language-text\">syscall.c</code></p>\n<p>我就直接用了暴力方法，如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span><span class=\"token operator\">*</span> syscalls_name<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n<span class=\"token punctuation\">[</span>SYS_fork<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"fork\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_exit<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"exit\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_wait<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"wait\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_pipe<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"pipe\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_read<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"read\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_kill<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"kill\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_exec<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"exec\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_fstat<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"fstat\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_chdir<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"chdir\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_dup<span class=\"token punctuation\">]</span>     <span class=\"token string\">\"dup\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_getpid<span class=\"token punctuation\">]</span>  <span class=\"token string\">\"getpid\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_sbrk<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"sbrk\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_sleep<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"sleep\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_uptime<span class=\"token punctuation\">]</span>  <span class=\"token string\">\"uptime\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_open<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"open\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_write<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"write\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_mknod<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"mknod\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_unlink<span class=\"token punctuation\">]</span>  <span class=\"token string\">\"unlink\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_link<span class=\"token punctuation\">]</span>    <span class=\"token string\">\"link\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_mkdir<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"mkdir\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">[</span>SYS_close<span class=\"token punctuation\">]</span>   <span class=\"token string\">\"close\"</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> num<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>curproc <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  num <span class=\"token operator\">=</span> curproc<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>eax<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>num <span class=\"token operator\">></span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> num <span class=\"token operator\">&lt;</span> <span class=\"token function\">NELEM</span><span class=\"token punctuation\">(</span>syscalls<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> syscalls<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    curproc<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>eax <span class=\"token operator\">=</span> syscalls<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s -> %d\\n\"</span><span class=\"token punctuation\">,</span> syscalls_name<span class=\"token punctuation\">[</span>num<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> curproc<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>eax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%d %s: unknown sys call %d\\n\"</span><span class=\"token punctuation\">,</span>\n            curproc<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">,</span> curproc<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    curproc<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>eax <span class=\"token operator\">=</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>至于如何输出system call arguments，应该是要用<code class=\"language-text\">curproc-&gt;tf</code>里面的值吧，具体具体没想好。</p>\n<p>这样之后，直接运行kernel的结果是：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\"><span class=\"token punctuation\">..</span>.\nfork -<span class=\"token operator\">></span> 2\n<span class=\"token function\">exec</span> -<span class=\"token operator\">></span> 0\n<span class=\"token function\">open</span> -<span class=\"token operator\">></span> 3\nclose -<span class=\"token operator\">></span> 0\n<span class=\"token variable\">$write</span> -<span class=\"token operator\">></span> 1\n <span class=\"token function\">write</span> -<span class=\"token operator\">></span> 1</code></pre></div>\n<h2>Part Two: Date system call</h2>\n<p>注意在做这一问的时候，最好把part 1的print给注释掉，不然太乱了。</p>\n<p>如题目所说，仿照<code class=\"language-text\">uptime</code>，有：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">grep</span> -n <span class=\"token function\">uptime</span> *.<span class=\"token punctuation\">[</span>chS<span class=\"token punctuation\">]</span>\nsyscall.c:105:extern int sys_uptime<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nsyscall.c:122:<span class=\"token punctuation\">[</span>SYS_uptime<span class=\"token punctuation\">]</span>  sys_uptime,\nsyscall.c:147:<span class=\"token punctuation\">[</span>SYS_uptime<span class=\"token punctuation\">]</span>  <span class=\"token string\">\"uptime\"</span>,\nsyscall.h:15:<span class=\"token comment\">#define SYS_uptime 14</span>\nsysproc.c:83:sys_uptime<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span>\nuser.h:25:int uptime<span class=\"token punctuation\">(</span>void<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\nusys.S:31:SYSCALL<span class=\"token punctuation\">(</span>uptime<span class=\"token punctuation\">)</span></code></pre></div>\n<p>所以在<code class=\"language-text\">syscall.h</code>中加入<code class=\"language-text\">SYS_date</code>，<code class=\"language-text\">extern int sys_date(struct rtcdate*);</code>。之后，在<code class=\"language-text\">sysproc.c</code>中加入：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">sys_date</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rtcdate</span> <span class=\"token operator\">*</span>r<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">argptr</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>p<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">rtcdate</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">cmostime</span><span class=\"token punctuation\">(</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>在<code class=\"language-text\">user.h</code>中加入<code class=\"language-text\">int sys_date(struct rtcdate*);</code>。在<code class=\"language-text\">usys.S</code>中加入<code class=\"language-text\">SYSCALL(date)</code>。</p>\n<p>之后按照要求加入加入<code class=\"language-text\">date.c</code>文件，进行修改：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rtcdate</span> r<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">date</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"date failed\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// your code to print the time in any format you like...</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"UTC %d-%d-%d %d:%d:%d\\n\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>year<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>month<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>day<span class=\"token punctuation\">,</span> \\\n                                       r<span class=\"token punctuation\">.</span>hour<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>minute<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">.</span>second<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后，在<code class=\"language-text\">Makefile</code>的<code class=\"language-text\">UPPROGS</code>中加入<code class=\"language-text\">_date</code>。就大功告成了。</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">date</span>\nUTC 2019-2-19 19:6:33</code></pre></div>\n<p>注意，xv6的<code class=\"language-text\">printf</code>没有实现<code class=\"language-text\">%02d</code>这样的操作，所以也没办法了。</p>\n<p>这个作业的目的就是为了总结一下，大致应该是在<code class=\"language-text\">sh</code>中调用<code class=\"language-text\">date</code>会调用<code class=\"language-text\">date.c</code>，而<code class=\"language-text\">date.c</code>中调用的<code class=\"language-text\">date</code>函数被定义在了<code class=\"language-text\">user.h</code>头文件中，<code class=\"language-text\">user.h</code>的函数中的system call都是由<code class=\"language-text\">usys.S</code>实现的，实现的方式就是调用了一个叫<code class=\"language-text\">SYSCALL(name)</code>的宏，其操作为：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SYSCALL(name) \\\n  .globl name; \\\n  name: \\\n    movl $SYS_ ## name, %eax; \\\n    int $T_SYSCALL; \\\n    ret</span></code></pre></div>\n<p>也就是会调用<code class=\"language-text\">INT</code>指令的。<code class=\"language-text\">make</code>了之后，我们可以看到，<code class=\"language-text\">sh.asm</code>果然出现了</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">00000db2 &lt;date&gt;:\n     db2:\tb8 16 00 00 00       \tmov    $0x16,%eax\n     db7:\tcd 40                \tint    $0x40\n     db9:\tc3                   \tret    \n     dba:\t66 90                \txchg   %ax,%ax\n     dbc:\t66 90                \txchg   %ax,%ax\n     dbe:\t66 90                \txchg   %ax,%ax</code></pre></div>\n<p>使用<code class=\"language-text\">INT</code>指令开始，就和note4中记录的调用<code class=\"language-text\">write</code>一样了。在<code class=\"language-text\">Makefile</code>中加入<code class=\"language-text\">date.c</code>应该只是为了编译出date的二进制文件用的吧，这个我还不清楚...</p>","frontmatter":{"title":"6.828 Homework xv6 system call","date":"2019-02-19T13:12:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-hw-xv6-system-call/"}}}