{"componentChunkName":"component---src-templates-blog-post-js","path":"/15-418-assignment1/","webpackCompilationHash":"36b38c574f1d3c5e8b77","result":{"data":{"markdownRemark":{"html":"<p>作业叙述的链接如下为<a href=\"http://15418.courses.cs.cmu.edu/spring2016/article/3\">这里</a></p>\n<h2>Program 1: Parallel Fractal Generation Using Pthreads</h2>\n<ol>\n<li>用pthread分上下块儿计算分型。因为没有critical region，所以直接算就好了，代码如下：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> <span class=\"token keyword\">int</span> <span class=\"token function\">mandel</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span> c_re<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span> c_im<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> count<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// workerThreadStart --</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Thread entrypoint.</span>\n<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> <span class=\"token function\">workerThreadStart</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span> threadArgs<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    WorkerArgs<span class=\"token operator\">*</span> args <span class=\"token operator\">=</span> static_cast<span class=\"token operator\">&lt;</span>WorkerArgs<span class=\"token operator\">*</span><span class=\"token operator\">></span><span class=\"token punctuation\">(</span>threadArgs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// TODO: Implement worker thread here.</span>\n\n    <span class=\"token comment\">//printf(\"Hello world from thread %d\\n\", args->threadId);</span>\n    <span class=\"token keyword\">float</span> x0 <span class=\"token operator\">=</span> args<span class=\"token operator\">-></span>x0<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> y0 <span class=\"token operator\">=</span> args<span class=\"token operator\">-></span>y0<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> x1 <span class=\"token operator\">=</span> args<span class=\"token operator\">-></span>x1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> y1 <span class=\"token operator\">=</span> args<span class=\"token operator\">-></span>y1<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> width <span class=\"token operator\">=</span> args<span class=\"token operator\">-></span>width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> height <span class=\"token operator\">=</span> args<span class=\"token operator\">-></span>height<span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 就是这里分一下块儿</span>\n    <span class=\"token keyword\">int</span> startRow <span class=\"token operator\">=</span> height <span class=\"token operator\">/</span> args<span class=\"token operator\">-></span>numThreads <span class=\"token operator\">*</span> args<span class=\"token operator\">-></span>threadId<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> endRow <span class=\"token operator\">=</span> args<span class=\"token operator\">-></span>threadId <span class=\"token operator\">==</span> args<span class=\"token operator\">-></span>numThreads<span class=\"token operator\">-</span><span class=\"token number\">1</span> <span class=\"token operator\">?</span> height <span class=\"token operator\">:</span> height <span class=\"token operator\">/</span> args<span class=\"token operator\">-></span>numThreads <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>args<span class=\"token operator\">-></span>threadId<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> maxIterations <span class=\"token operator\">=</span> args<span class=\"token operator\">-></span>maxIterations<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">float</span> dx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">-</span> x0<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> dy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> height<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> startRow<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> endRow<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> width<span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>i<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> x0 <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> dx<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> y0 <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> dy<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">*</span> width <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            args<span class=\"token operator\">-></span>output<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mandel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> maxIterations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// MandelbrotThread --</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Multi-threaded implementation of mandelbrot set image generation.</span>\n<span class=\"token comment\">// Multi-threading performed via pthreads.</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">mandelbrotThread</span><span class=\"token punctuation\">(</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n    <span class=\"token comment\">// Fire up the worker threads.  Note that numThreads-1 pthreads</span>\n    <span class=\"token comment\">// are created and the main app thread is used as a worker as</span>\n    <span class=\"token comment\">// well.</span>\n\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>numThreads<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">pthread_create</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>workers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">,</span> workerThreadStart<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">workerThreadStart</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>args<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// wait for worker threads to complete</span>\n    <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>numThreads<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">pthread_join</span><span class=\"token punctuation\">(</span>workers<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>运行后的结果为：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./mandelbrot\n<span class=\"token punctuation\">[</span>mandelbrot serial<span class=\"token punctuation\">]</span>:\t\t<span class=\"token punctuation\">[</span>250.914<span class=\"token punctuation\">]</span> ms\nWrote image <span class=\"token function\">file</span> mandelbrot-serial.ppm\n<span class=\"token punctuation\">[</span>mandelbrot thread<span class=\"token punctuation\">]</span>:\t\t<span class=\"token punctuation\">[</span>132.314<span class=\"token punctuation\">]</span> ms\nWrote image <span class=\"token function\">file</span> mandelbrot-thread.ppm\n\t\t\t\t<span class=\"token punctuation\">(</span>1.90x speedup from 2 threads<span class=\"token punctuation\">)</span></code></pre></div>\n<ol start=\"2\">\n<li>分别跑一下2, 3, 4 threads的，对比一下。</li>\n</ol>\n<p>上面已经跑了2 threads的了，现在跑3和4的：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./mandelbrot --threads 3\n<span class=\"token punctuation\">[</span>mandelbrot serial<span class=\"token punctuation\">]</span>:\t\t<span class=\"token punctuation\">[</span>251.760<span class=\"token punctuation\">]</span> ms\nWrote image <span class=\"token function\">file</span> mandelbrot-serial.ppm\n<span class=\"token punctuation\">[</span>mandelbrot thread<span class=\"token punctuation\">]</span>:\t\t<span class=\"token punctuation\">[</span>153.184<span class=\"token punctuation\">]</span> ms\nWrote image <span class=\"token function\">file</span> mandelbrot-thread.ppm\n\t\t\t\t<span class=\"token punctuation\">(</span>1.64x speedup from 3 threads<span class=\"token punctuation\">)</span>\n$ ./mandelbrot --threads 4\n<span class=\"token punctuation\">[</span>mandelbrot serial<span class=\"token punctuation\">]</span>:\t\t<span class=\"token punctuation\">[</span>252.981<span class=\"token punctuation\">]</span> ms\nWrote image <span class=\"token function\">file</span> mandelbrot-serial.ppm\n<span class=\"token punctuation\">[</span>mandelbrot thread<span class=\"token punctuation\">]</span>:\t\t<span class=\"token punctuation\">[</span>108.022<span class=\"token punctuation\">]</span> ms\nWrote image <span class=\"token function\">file</span> mandelbrot-thread.ppm\n\t\t\t\t<span class=\"token punctuation\">(</span>2.34x speedup from 4 threads<span class=\"token punctuation\">)</span></code></pre></div>\n<p>神奇的是3 thread 竟然慢了。。。</p>\n<ol start=\"3\">\n<li>通过计时，可以发现：</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">// 2 threads\nthread 0:\t\t[135.134] ms\nthread 1:\t\t[137.409] ms\n// 3 threads\nthread 0:\t\t[57.834] ms\nthread 2:\t\t[72.318] ms\nthread 1:\t\t[169.466] ms\n// 4 threads\nthread 0:\t\t[26.868] ms\nthread 3:\t\t[42.347] ms\nthread 1:\t\t[113.853] ms\nthread 2:\t\t[139.147] ms</code></pre></div>\n<p>问题在于unbalanced。</p>\n<ol start=\"4\">\n<li>给出一种static balanced的方式。我就单纯的让每次的<code class=\"language-text\">j += args.numThreads</code>了。</li>\n</ol>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> args<span class=\"token operator\">-></span>threadId<span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> height<span class=\"token punctuation\">;</span> j <span class=\"token operator\">+=</span> args<span class=\"token operator\">-></span>numThreads<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>效果如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./mandelbrot --threads 4\n<span class=\"token punctuation\">[</span>mandelbrot serial<span class=\"token punctuation\">]</span>:\t\t<span class=\"token punctuation\">[</span>251.784<span class=\"token punctuation\">]</span> ms\nWrote image <span class=\"token function\">file</span> mandelbrot-serial.ppm\n<span class=\"token punctuation\">..</span>.\nthread 0:\t\t<span class=\"token punctuation\">[</span>66.449<span class=\"token punctuation\">]</span> ms\nthread 3:\t\t<span class=\"token punctuation\">[</span>66.969<span class=\"token punctuation\">]</span> ms\nthread 2:\t\t<span class=\"token punctuation\">[</span>67.767<span class=\"token punctuation\">]</span> ms\nthread 1:\t\t<span class=\"token punctuation\">[</span>69.141<span class=\"token punctuation\">]</span> ms\n<span class=\"token punctuation\">[</span>mandelbrot thread<span class=\"token punctuation\">]</span>:\t\t<span class=\"token punctuation\">[</span>68.392<span class=\"token punctuation\">]</span> ms\nWrote image <span class=\"token function\">file</span> mandelbrot-thread.ppm\n\t\t\t\t<span class=\"token punctuation\">(</span>3.68x speedup from 4 threads<span class=\"token punctuation\">)</span></code></pre></div>\n<h2>Program 2: Vectorizing Code Using SIMD Intrinsics</h2>\n<p>任务是写一个利用SIMD的带clamp的指数函数。用的并不是SSE或AVX指令集，而是他们自己模拟的一个指令集。代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">clampedExpVector</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">float</span><span class=\"token operator\">*</span> values<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span><span class=\"token operator\">*</span> exponents<span class=\"token punctuation\">,</span> <span class=\"token keyword\">float</span><span class=\"token operator\">*</span> output<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> N<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// TODO: Implement your vectorized version of clampedExpSerial here</span>\n  __cmu418_vec_float x<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">;</span>\n  __cmu418_vec_int y<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">;</span>\n  __cmu418_vec_int zero_i <span class=\"token operator\">=</span> <span class=\"token function\">_cmu418_vset_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  __cmu418_vec_int one_i  <span class=\"token operator\">=</span> <span class=\"token function\">_cmu418_vset_int</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  __cmu418_vec_float one_f  <span class=\"token operator\">=</span> <span class=\"token function\">_cmu418_vset_float</span><span class=\"token punctuation\">(</span><span class=\"token number\">1.f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  __cmu418_vec_float bound <span class=\"token operator\">=</span> <span class=\"token function\">_cmu418_vset_float</span><span class=\"token punctuation\">(</span><span class=\"token number\">9.999999f</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  __cmu418_mask maskAll<span class=\"token punctuation\">,</span> maskIf<span class=\"token punctuation\">,</span> maskElse<span class=\"token punctuation\">,</span> maskCount<span class=\"token punctuation\">,</span> maskResult<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>N<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span>VECTOR_WIDTH<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// All ones</span>\n    maskAll <span class=\"token operator\">=</span> <span class=\"token function\">_cmu418_init_ones</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// All zeros</span>\n    maskIf <span class=\"token operator\">=</span> <span class=\"token function\">_cmu418_init_ones</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">_cmu418_vload_float</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> values<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> maskAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>               <span class=\"token comment\">// x = values[i]</span>\n    <span class=\"token function\">_cmu418_vload_int</span><span class=\"token punctuation\">(</span>y<span class=\"token punctuation\">,</span> exponents<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> maskAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>              <span class=\"token comment\">// y = exponentials[i]</span>\n\n    <span class=\"token function\">_cmu418_veq_int</span><span class=\"token punctuation\">(</span>maskIf<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> zero_i<span class=\"token punctuation\">,</span> maskAll<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">// if (y == 0) {</span>\n    <span class=\"token function\">_cmu418_vstore_float</span><span class=\"token punctuation\">(</span>output<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> one_f<span class=\"token punctuation\">,</span> maskIf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>           <span class=\"token comment\">//   output[i] = 1.f;</span>\n\n    maskElse <span class=\"token operator\">=</span> <span class=\"token function\">_cmu418_mask_not</span><span class=\"token punctuation\">(</span>maskIf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                     <span class=\"token comment\">// } else {</span>\n    <span class=\"token function\">_cmu418_vmove_float</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> maskElse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>                <span class=\"token comment\">//   result = x;</span>\n    <span class=\"token function\">_cmu418_vsub_int</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> one_i<span class=\"token punctuation\">,</span> maskElse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>             <span class=\"token comment\">//   count = y - 1;</span>\n\n    <span class=\"token function\">_cmu418_vgt_int</span><span class=\"token punctuation\">(</span>maskCount<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> zero_i<span class=\"token punctuation\">,</span> maskElse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token function\">_cmu418_cntbits</span><span class=\"token punctuation\">(</span>maskCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>                     <span class=\"token comment\">//   while (count > 0) {</span>\n      <span class=\"token function\">_cmu418_vmult_float</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> x<span class=\"token punctuation\">,</span> maskCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">//     result *= x;</span>\n      <span class=\"token function\">_cmu418_vsub_int</span><span class=\"token punctuation\">(</span>count<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> one_i<span class=\"token punctuation\">,</span> maskCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">//     count--; }</span>\n      <span class=\"token function\">_cmu418_vgt_int</span><span class=\"token punctuation\">(</span>maskCount<span class=\"token punctuation\">,</span> count<span class=\"token punctuation\">,</span> zero_i<span class=\"token punctuation\">,</span> maskCount<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">_cmu418_vgt_float</span><span class=\"token punctuation\">(</span>maskResult<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> bound<span class=\"token punctuation\">,</span> maskElse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//   if (result > 9.999999f) {</span>\n    <span class=\"token function\">_cmu418_vmove_float</span><span class=\"token punctuation\">(</span>result<span class=\"token punctuation\">,</span> bound<span class=\"token punctuation\">,</span> maskResult<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>          <span class=\"token comment\">//     result = 9.999999f; }</span>\n    <span class=\"token function\">_cmu418_vstore_float</span><span class=\"token punctuation\">(</span>output<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span> result<span class=\"token punctuation\">,</span> maskElse<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">//   output[i] = result; }</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>对于vector_width 2, 4, 8, 16运行结果如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./myexp -s 10000\nCLAMPED EXPONENT <span class=\"token punctuation\">(</span>required<span class=\"token punctuation\">)</span> \nResults matched with answer<span class=\"token operator\">!</span>\n****************** Printing Vector Unit Statistics *******************\nVector Width:              2\nTotal Vector Instructions: 162728\nVector Utilization:        76.695160%\nUtilized Vector Lanes:     249609\nTotal Vector Lanes:        325456\n************************ Result Verification *************************\nPassed<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n\n$ ./myexp -s 10000\nCLAMPED EXPONENT <span class=\"token punctuation\">(</span>required<span class=\"token punctuation\">)</span> \nResults matched with answer<span class=\"token operator\">!</span>\n****************** Printing Vector Unit Statistics *******************\nVector Width:              4\nTotal Vector Instructions: 94576\nVector Utilization:        69.467677%\nUtilized Vector Lanes:     262799\nTotal Vector Lanes:        378304\n************************ Result Verification *************************\nPassed<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n\n./myexp -s 10000\nCLAMPED EXPONENT <span class=\"token punctuation\">(</span>required<span class=\"token punctuation\">)</span> \nResults matched with answer<span class=\"token operator\">!</span>\n****************** Printing Vector Unit Statistics *******************\nVector Width:              8\nTotal Vector Instructions: 51628\nVector Utilization:        65.733468%\nUtilized Vector Lanes:     271495\nTotal Vector Lanes:        413024\n************************ Result Verification *************************\nPassed<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span>\n\n$ ./myexp -s 10000\nCLAMPED EXPONENT <span class=\"token punctuation\">(</span>required<span class=\"token punctuation\">)</span> \nResults matched with answer<span class=\"token operator\">!</span>\n****************** Printing Vector Unit Statistics *******************\nVector Width:              16\nTotal Vector Instructions: 26968\nVector Utilization:        63.998072%\nUtilized Vector Lanes:     276144\nTotal Vector Lanes:        431488\n************************ Result Verification *************************\nPassed<span class=\"token operator\">!</span><span class=\"token operator\">!</span><span class=\"token operator\">!</span></code></pre></div>\n<p>vector utilization越来越小了，应该是因为vector越多，在<code class=\"language-text\">count</code>那里做循环的平均长度就越长吧。</p>\n<p>bonus题目很有趣，过一会补上。</p>\n<h2>Program 3</h2>\n<h3>Part 1 A Few ISPC Basics</h3>\n<ol>\n<li>直接make来看一下加速情况。</li>\n</ol>\n<p>make的时候报了错，是linker的问题，上网查了一下，在所有和gcc相关的指令下面加了<code class=\"language-text\">--static</code>这个flag就没事了。默认的加速方法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">export <span class=\"token keyword\">void</span> <span class=\"token function\">mandelbrot_ispc</span><span class=\"token punctuation\">(</span>uniform <span class=\"token keyword\">float</span> x0<span class=\"token punctuation\">,</span> uniform <span class=\"token keyword\">float</span> y0<span class=\"token punctuation\">,</span> \n                            uniform <span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> uniform <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span>\n                            uniform <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> uniform <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span> \n                            uniform <span class=\"token keyword\">int</span> maxIterations<span class=\"token punctuation\">,</span>\n                            uniform <span class=\"token keyword\">int</span> output<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">float</span> dx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">-</span> x0<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> width<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">float</span> dy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> height<span class=\"token punctuation\">;</span>\n\n    foreach <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> height<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> x0 <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> dx<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> y0 <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> dy<span class=\"token punctuation\">;</span>\n\n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> j <span class=\"token operator\">*</span> width <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n            output<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mandel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> maxIterations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>最后的加速情况如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./mandelbrot_ispc \n<span class=\"token punctuation\">[</span>mandelbrot serial<span class=\"token punctuation\">]</span>:\t\t<span class=\"token punctuation\">[</span>248.229<span class=\"token punctuation\">]</span> ms\nWrote image <span class=\"token function\">file</span> mandelbrot-serial.ppm\n<span class=\"token punctuation\">[</span>mandelbrot ispc<span class=\"token punctuation\">]</span>:\t\t<span class=\"token punctuation\">[</span>59.659<span class=\"token punctuation\">]</span> ms\nWrote image <span class=\"token function\">file</span> mandelbrot-ispc.ppm\n\t\t\t\t<span class=\"token punctuation\">(</span>4.16x speedup from ISPC<span class=\"token punctuation\">)</span></code></pre></div>\n<p>这里不明白了...不是应该只能到4倍吗？为啥不止了...</p>\n<h3>Part 2 ISPC Tasks</h3>\n<ol>\n<li>带着<code class=\"language-text\">--task</code>运行，看看加速情况。</li>\n</ol>\n<p>我这里莫名的出了segmentation fault，不知道为啥，不过加速情况如下（忽略中文Ubuntu的警报）：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./mandelbrot_ispc --task\n<span class=\"token punctuation\">[</span>mandelbrot serial<span class=\"token punctuation\">]</span>:\t\t<span class=\"token punctuation\">[</span>253.527<span class=\"token punctuation\">]</span> ms\nWrote image <span class=\"token function\">file</span> mandelbrot-serial.ppm\n<span class=\"token punctuation\">[</span>mandelbrot ispc<span class=\"token punctuation\">]</span>:\t\t<span class=\"token punctuation\">[</span>62.539<span class=\"token punctuation\">]</span> ms\nWrote image <span class=\"token function\">file</span> mandelbrot-ispc.ppm\n段错误 <span class=\"token punctuation\">(</span>核心已转储<span class=\"token punctuation\">)</span></code></pre></div>\n<p>然后其加速代码为：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// slightly different kernel to support tasking</span>\ntask <span class=\"token keyword\">void</span> <span class=\"token function\">mandelbrot_ispc_task</span><span class=\"token punctuation\">(</span>uniform <span class=\"token keyword\">float</span> x0<span class=\"token punctuation\">,</span> uniform <span class=\"token keyword\">float</span> y0<span class=\"token punctuation\">,</span> \n                               uniform <span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> uniform <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span>\n                               uniform <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> uniform <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span>\n                               uniform <span class=\"token keyword\">int</span> rowsPerTask<span class=\"token punctuation\">,</span>\n                               uniform <span class=\"token keyword\">int</span> maxIterations<span class=\"token punctuation\">,</span>\n                               uniform <span class=\"token keyword\">int</span> output<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    <span class=\"token comment\">// taskIndex is an ISPC built-in</span>\n    \n    uniform <span class=\"token keyword\">int</span> ystart <span class=\"token operator\">=</span> taskIndex <span class=\"token operator\">*</span> rowsPerTask<span class=\"token punctuation\">;</span>\n    uniform <span class=\"token keyword\">int</span> yend <span class=\"token operator\">=</span> ystart <span class=\"token operator\">+</span> rowsPerTask<span class=\"token punctuation\">;</span>\n    \n    uniform <span class=\"token keyword\">float</span> dx <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>x1 <span class=\"token operator\">-</span> x0<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> width<span class=\"token punctuation\">;</span>\n    uniform <span class=\"token keyword\">float</span> dy <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>y1 <span class=\"token operator\">-</span> y0<span class=\"token punctuation\">)</span> <span class=\"token operator\">/</span> height<span class=\"token punctuation\">;</span>\n    \n    foreach <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> ystart <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> yend<span class=\"token punctuation\">,</span> i <span class=\"token operator\">=</span> <span class=\"token number\">0</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span> width<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">float</span> x <span class=\"token operator\">=</span> x0 <span class=\"token operator\">+</span> i <span class=\"token operator\">*</span> dx<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">float</span> y <span class=\"token operator\">=</span> y0 <span class=\"token operator\">+</span> j <span class=\"token operator\">*</span> dy<span class=\"token punctuation\">;</span>\n            \n            <span class=\"token keyword\">int</span> index <span class=\"token operator\">=</span> j <span class=\"token operator\">*</span> width <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n            output<span class=\"token punctuation\">[</span>index<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">mandel</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">,</span> y<span class=\"token punctuation\">,</span> maxIterations<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\nexport <span class=\"token keyword\">void</span> <span class=\"token function\">mandelbrot_ispc_withtasks</span><span class=\"token punctuation\">(</span>uniform <span class=\"token keyword\">float</span> x0<span class=\"token punctuation\">,</span> uniform <span class=\"token keyword\">float</span> y0<span class=\"token punctuation\">,</span>\n                                      uniform <span class=\"token keyword\">float</span> x1<span class=\"token punctuation\">,</span> uniform <span class=\"token keyword\">float</span> y1<span class=\"token punctuation\">,</span>\n                                      uniform <span class=\"token keyword\">int</span> width<span class=\"token punctuation\">,</span> uniform <span class=\"token keyword\">int</span> height<span class=\"token punctuation\">,</span>\n                                      uniform <span class=\"token keyword\">int</span> maxIterations<span class=\"token punctuation\">,</span>\n                                      uniform <span class=\"token keyword\">int</span> output<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\n    uniform <span class=\"token keyword\">int</span> rowsPerTask <span class=\"token operator\">=</span> height <span class=\"token operator\">/</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// create 2 tasks</span>\n    launch<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span> <span class=\"token function\">mandelbrot_ispc_task</span><span class=\"token punctuation\">(</span>x0<span class=\"token punctuation\">,</span> y0<span class=\"token punctuation\">,</span> x1<span class=\"token punctuation\">,</span> y1<span class=\"token punctuation\">,</span>\n                                     width<span class=\"token punctuation\">,</span> height<span class=\"token punctuation\">,</span>\n                                     rowsPerTask<span class=\"token punctuation\">,</span>\n                                     maxIterations<span class=\"token punctuation\">,</span>\n                                     output<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> \n<span class=\"token punctuation\">}</span></code></pre></div>\n<ol start=\"2\">\n<li>修改lauch里面的数字。</li>\n</ol>\n<p>不知道为啥，我咋改改出来的结果都还是4倍左右，没有题目中说的13-14倍...理论上task是用来达到多核的。</p>\n<ol start=\"3\">\n<li>对比pthread和ispc task</li>\n</ol>\n<blockquote>\n<p><code class=\"language-text\">ispc</code> provides an asynchronous function call (i.e. tasking) mechanism through the <code class=\"language-text\">launch</code> keyword. (The syntax is documented in the <a href=\"https://ispc.github.io/ispc.html#task-parallelism-launch-and-sync-statements\">Task Parallelism: \"launch\" and \"sync\" Statements</a> section.) A function called with <code class=\"language-text\">launch</code> executes asynchronously from the function that called it; it may run immediately or it may run concurrently on another processor in the system, for example. (This model is closely modeled on the model introduced by <strong>Intel® Cilk(tm)</strong>.)</p>\n<p>If a function launches multiple tasks, there are no guarantees about the order in which the tasks will execute. Furthermore, multiple launched tasks from a single function may execute concurrently.</p>\n<p>A function that has launched tasks may use the <code class=\"language-text\">sync</code> keyword to force synchronization with the launched functions; <code class=\"language-text\">sync</code> causes a function to wait for all of the tasks it has launched to finish before execution continues after the <code class=\"language-text\">sync</code>. (Note that <code class=\"language-text\">sync</code> only waits for the tasks launched by the current function, not tasks launched by other functions).</p>\n<p>Alternatively, when a function that has launched tasks returns, an implicit <code class=\"language-text\">sync</code> waits for all launched tasks to finish before allowing the function to return to its calling function. This feature is important since it enables parallel composition: a function can call second function without needing to be concerned if the second function has launched asynchronous tasks or not--in either case, when the second function returns, the first function can trust that all of its computation has completed.</p>\n</blockquote>\n<blockquote>\n<p>ISPC task is more abstract. It does not specify how each task is assigned to processors core. It tell the compiler which part can be run on parallel. Pthread is more concrete. The programmer needs to specify how tasks are mapped to threads.</p>\n</blockquote>\n<p>感觉ispc task比较像Cilk，所以可以看第6讲pthread和Cilk的对比。</p>\n<p>后面problem4和5都在编译的时候要么出现linker error，要不修正完有segmentation fault，就跳过去了。</p>","frontmatter":{"title":"15-418 spring 2016 assigment1","date":"2019-10-21T01:21:00.000Z","tags":["computer-architecture","15-418"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/15-418-assignment1/"}}}