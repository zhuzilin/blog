{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-hw-xv6-shell/","webpackCompilationHash":"071c70b7a11269a8b3f5","result":{"data":{"markdownRemark":{"html":"<p>这个作业是要求完成<code class=\"language-text\">sh.c</code>这个文件，来写一个shell。做这个作业之前还是需要看一下xv6 book的第一章的，不然有些地方会不明白。以及，真正的xv6的shell版本在<code class=\"language-text\">xv6-public/sh.c</code>中，可以参考学习。同时，lecture 4中的第一部分一些关于这次作业的问题，我们也在这里进行讨论。</p>\n<h2>Executing simple commands</h2>\n<p>简单来说，shell就是一个会循环读入每一行并对每一行做出反应的程序。所以除去<code class=\"language-text\">cd</code>指令（比较例外...），都是先fork一下，然后在child里对读进来的buffer进行parse并然后依据parse的内容运行对应的程序。</p>\n<p>对于执行简单工具，读过parse之后知道，simple commands就是用<code class=\"language-text\">type == &#39; &#39;</code>来表示的，其<code class=\"language-text\">argv</code>就是<code class=\"language-text\">execv</code>需要的，所以核心是：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">case</span> <span class=\"token string\">' '</span><span class=\"token operator\">:</span>\n    ecmd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">execcmd</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>cmd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ecmd<span class=\"token operator\">-></span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">execv</span><span class=\"token punctuation\">(</span>ecmd<span class=\"token operator\">-></span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ecmd<span class=\"token operator\">-></span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"exec %s failed\\n\"</span><span class=\"token punctuation\">,</span> ecmd<span class=\"token operator\">-></span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意，<code class=\"language-text\">runcmd</code>里面这个代码不能进行普通的<code class=\"language-text\">printf</code>，应该是因为都是在child里面运行的，而为什么输出最后都能返回parent，应该是因为执行的结果被重定向回了parent。但是神奇的是可以通过<code class=\"language-text\">stderr</code>输出，不知道为什么。。。</p>\n<p>问题：</p>\n<ul>\n<li>\n<p>exec</p>\n<p>这里问了几个问题。。。我几乎一个都答不上来。。。</p>\n<p>why two execv() arguments? 不明白。。。</p>\n<p>what happens to the arguments? 第一个是调用的可执行文件，第二个是参数列表</p>\n<p>can execv return? 正常是不返回的，如果返回就说明有error</p>\n<p>shell是如何继续运行的？用fork实现的</p>\n</li>\n</ul>\n<h2>I/O redirection</h2>\n<p>注意，<code class=\"language-text\">open</code>，<code class=\"language-text\">dup</code>都会选择当时没被用的最小的file descriptor。然后io redirection在xv6 book里面有很相似的例子，代码很简单先关掉再打开就好了。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">case</span> <span class=\"token string\">'>'</span><span class=\"token operator\">:</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">'&lt;'</span><span class=\"token operator\">:</span>\n    rcmd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">redircmd</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>cmd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> mode <span class=\"token operator\">=</span> S_IRUSR <span class=\"token operator\">|</span> S_IWUSR<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>rcmd<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>rcmd<span class=\"token operator\">-></span>file<span class=\"token punctuation\">,</span> rcmd<span class=\"token operator\">-></span>flags<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fail to open %s\\n\"</span><span class=\"token punctuation\">,</span> rcmd<span class=\"token operator\">-></span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">runcmd</span><span class=\"token punctuation\">(</span>rcmd<span class=\"token operator\">-></span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>问题：</p>\n<ul>\n<li>\n<p>redirect</p>\n<p>kernel是通过file descriptor table来进行redirect的</p>\n<p>因为用了fork，之后对fd的操作都是和main shell无关的，所以不会影响main shell</p>\n</li>\n</ul>\n<h2>Implement pipes</h2>\n<p>这里的难点就是<code class=\"language-text\">pipe</code>。对于<code class=\"language-text\">pipe</code>的讲解可以用xv6 book里面的例子来说：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nargv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"wc\"</span><span class=\"token punctuation\">;</span>\nargv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 在child里面就留两个，一个是0 -> pipe read, 1 -> stdout</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// child里不连上stdin了</span>\n\t<span class=\"token function\">dup</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0 -> pipe read</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// p[0]不连着pipe read</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// p[1]不连着pipe write了</span>\n\t<span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/wc\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// parent里面不动0, 1，然后留下p[1] -> pipe write，来向child写入</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">write</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>对于<code class=\"language-text\">pipe</code>的重要测试例子是<code class=\"language-text\">/bin/sleep 3 | /bin/echo hi</code>，这里最开始我也没写对...后来参考了<code class=\"language-text\">xv6-public</code>里面的代码才写出来。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">case</span> <span class=\"token string\">'|'</span><span class=\"token operator\">:</span>\n    pcmd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pipecmd</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>cmd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fail to create pipe\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fork1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">dup</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">runcmd</span><span class=\"token punctuation\">(</span>pcmd<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// the execv will end this child</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fork1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">dup</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"right\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">runcmd</span><span class=\"token punctuation\">(</span>pcmd<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// the execv will end this child</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>在分析问题之前，先简单介绍一下<code class=\"language-text\">pipe</code>的原理，本部分来自于xv6 book的Code: pipe部分，现在的理解可能有所欠缺，需要对锁有更好的理解之后再来。</p>\n<p>每个pipe的结构如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pipe</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">spinlock</span> lock<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span>PIPESIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  uint nread<span class=\"token punctuation\">;</span>     <span class=\"token comment\">// number of bytes read</span>\n  uint nwrite<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// number of bytes written</span>\n  <span class=\"token keyword\">int</span> readopen<span class=\"token punctuation\">;</span>   <span class=\"token comment\">// read fd is still open</span>\n  <span class=\"token keyword\">int</span> writeopen<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// write fd is still open</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>其中<code class=\"language-text\">data</code>就是buffer，而这个buffer是循环存储的。<code class=\"language-text\">nread</code>和<code class=\"language-text\">nwrite</code>分别记录了读入和写入的数量，注意这两个是绝对值，没有对<code class=\"language-text\">PIPESIZE</code>进行求余。<code class=\"language-text\">pipewrite</code>会先获取<code class=\"language-text\">lock</code>，其会进行写入。当buffer满了的时候，会调用<code class=\"language-text\">wakeup</code>，来唤醒任何sleeping readers，并sleeps on <code class=\"language-text\">$p-&gt;write</code>以等待一些reader读出一些data。这时<code class=\"language-text\">piperead</code>就会获取<code class=\"language-text\">lock</code>，开始读入，读到<code class=\"language-text\">p-&gt;nwrite = p-&gt;nread</code>或者需要的量为止，然后调用<code class=\"language-text\">wakeup</code>唤醒<code class=\"language-text\">pipewrite</code>。</p>\n<p>问题：</p>\n<ul>\n<li>\n<p>pipe</p>\n<ul>\n<li>如果<code class=\"language-text\">ls</code>比<code class=\"language-text\">wc</code>快很多怎么办？</li>\n</ul>\n<p>快很多的话会先把信息存在pipe的buffer里，如果buffer满了，会先sleep，等wc开始read之后再继续。</p>\n<ul>\n<li>如果<code class=\"language-text\">ls</code>比<code class=\"language-text\">wc</code>慢很多怎么办？</li>\n</ul>\n<p>慢很多的话，pipe read会等待有数据读进来再说。</p>\n<ul>\n<li>command何时决定结束：有<code class=\"language-text\">wait</code>，所以左边右边的command都结束就可以了。</li>\n</ul>\n<p>下面的两文可以用 (<code class=\"language-text\">/bin/ls | /usr/bin/wc</code>) 进行测试</p>\n<ul>\n<li>reader(右边的指令)没有关闭write end会直接卡住</li>\n</ul>\n<p>原因是pipe read如果返回的是空数据的话，会等待任何写入（blocking），或者待所有write descriptor都关闭了就返回0。所以如果不关的话，read就无法停止了，而<code class=\"language-text\">wc</code>这样的程序里面都是等read返回0来跳出循环的，所以就卡住了。</p>\n<ul>\n<li>writer（左边的指令）没有关闭read end则不会卡住</li>\n</ul>\n<p>原因是write的blocking是关于不能写入的，而和多一个reader没什么关系，因为那个正常的reader会把所有的数据都读走。</p>\n<ul>\n<li>how does the kernel know when to free the pipe buffer?</li>\n</ul>\n<blockquote>\n<p>When all file descriptors associated with a pipe or FIFO special file are closed, any data remaining in the pipe or FIFO shall be discarded.</p>\n<p><a href=\"http://pubs.opengroup.org/onlinepubs/009695399/functions/close.html\">close</a></p>\n</blockquote>\n<p>所以如果关闭了所有的read，或者关闭了所有的write应该pipe就会被free掉了。</p>\n</li>\n<li>\n<p>how does the shell know a pipeline end?</p>\n<p>两个<code class=\"language-text\">wait</code>都跑完了的时候pipeline就结束了。</p>\n</li>\n<li>\n<p>为什么需要fork两次？</p>\n<p>fork两次是为了让左右的程序同时开始运行，且等都结束再返回。不fork的话就没办法用<code class=\"language-text\">wait</code>进行限制了。</p>\n<ul>\n<li>如果运行pcmd->left不进行fork：</li>\n</ul>\n<p>那代码大致是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">case</span> <span class=\"token string\">'|'</span><span class=\"token operator\">:</span>\n    pcmd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pipecmd</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>cmd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fail to create pipe\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fork1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">dup</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">runcmd</span><span class=\"token punctuation\">(</span>pcmd<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// the execv will end this child</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dup</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">runcmd</span><span class=\"token punctuation\">(</span>pcmd<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// the execv will end this child</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>因为本来就应该左边作为右边的输入，所以不能<code class=\"language-text\">wait</code>，这导致如果左边返回很快，就直接返回了，如运行<code class=\"language-text\">/bin/ls | /bin/sleep 3</code>，本来结果应该等3秒的，现在就直接返回了。</p>\n<ul>\n<li>如果运行pcmd->right不进行fork：</li>\n</ul>\n<p>如果right不进行fork，那么代码大致是这样的：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">case</span> <span class=\"token string\">'|'</span><span class=\"token operator\">:</span>\n    pcmd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">pipecmd</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>cmd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fail to create pipe\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fork1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">dup</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">runcmd</span><span class=\"token punctuation\">(</span>pcmd<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// the execv will end this child</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">dup</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">runcmd</span><span class=\"token punctuation\">(</span>pcmd<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// the execv will end this child</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>用<code class=\"language-text\">/bin/sleep 3 | /bin/echo hi</code>进行测试，这个指令的输出应该是瞬间输出<code class=\"language-text\">hi</code>之后等3秒。但是现在这个版本因为等<code class=\"language-text\">sleep</code>运行完之后再运行<code class=\"language-text\">echo</code>，结果就是先等3秒，再输出<code class=\"language-text\">hi</code>。如果去掉<code class=\"language-text\">wait</code>运行完<code class=\"language-text\">echo</code>就直接返回了，直接忽略了<code class=\"language-text\">sleep</code>。</p>\n</li>\n<li>\n<p>为什么等两个都运行起来之后再<code class=\"language-text\">wait</code>而不是同时wait？</p>\n<p>这个的代码就是上面一段代码，原因就是为了能够让两个东西同时运行起来。不然的话，比如说要读进来一个大文件，然后对其进行<code class=\"language-text\">wc</code>，就会出现大文件充满了pipe buffer，导致writer block，因为还没有返回，所以没有reader，从而就整体锁住了这样的问题。</p>\n</li>\n</ul>\n<p>关于pipe部分的一些内部实现和结构在note10中有提到，有兴趣可以看一下。</p>\n<p>还有一些challenge problems，这次就先不写了，以后有机会吧。</p>\n<p>写完这三部分之后就可以运行测试代码了，</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./sh\n6.828$ sh <span class=\"token operator\">&lt;</span> t.sh\n     10      10      51\n     10      10      51</code></pre></div>\n<p>注意这里我并没有去写<code class=\"language-text\">PATH</code>这部分，所以改了<code class=\"language-text\">t.sh</code>，具体每个指令在哪里可以通过运行<code class=\"language-text\">which</code>指令来获取，如</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">which</span> <span class=\"token function\">ls</span>\n/bin/ls</code></pre></div>\n<p>等项目代码部署到git上之后，会在这里贴一下我的<code class=\"language-text\">sh.c</code>的代码链接的。</p>","frontmatter":{"title":"6.828 Homework xv6 shell","date":"2019-02-16T13:12:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-hw-xv6-shell/"}}}