{"componentChunkName":"component---src-templates-blog-post-js","path":"/drafts/redis-source-code-reading-object/","webpackCompilationHash":"a5e4f8556e8086fddcf0","result":{"data":{"markdownRemark":{"html":"<p>今天来看一下对象结构的实现。这个结构主要位于<code class=\"language-text\">intset.h</code>和<code class=\"language-text\">intset.c</code>。</p>\n<h2>对象</h2>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// server.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> LRU_BITS 24</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">redisObject</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> type<span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> encoding<span class=\"token operator\">:</span><span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">unsigned</span> lru<span class=\"token operator\">:</span>LRU_BITS<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* LRU time (relative to global lru_clock) or\n                            * LFU data (least significant 8 bits frequency\n                            * and most significant 16 bits access time). */</span>\n    <span class=\"token keyword\">int</span> refcount<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 指向底层的指针</span>\n<span class=\"token punctuation\">}</span> robj<span class=\"token punctuation\">;</span></code></pre></div>\n<p>这里的<code class=\"language-text\">:</code>是用于表示其占几位用的。</p>\n<p>redis有如下几种对象类型：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型常量</th>\n<th align=\"left\">对象的名称</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_STRING</code></td>\n<td align=\"left\">字符串对象</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_LIST</code></td>\n<td align=\"left\">列表对象</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_HASH</code></td>\n<td align=\"left\">哈希对象</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_SET</code></td>\n<td align=\"left\">集合对象</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_ZSET</code></td>\n<td align=\"left\">有序集合对象</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_MODULE</code></td>\n<td align=\"left\">object被redis module管理</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_STREAM</code></td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n<p>编码方式也有：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">编码常量</th>\n<th align=\"left\">编码所对应的底层数据结构</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_ENCODING_INT</code></td>\n<td align=\"left\"><code class=\"language-text\">long</code> 类型的整数</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_ENCODING_EMBSTR</code></td>\n<td align=\"left\"><code class=\"language-text\">embstr</code> 编码的简单动态字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_ENCODING_RAW</code></td>\n<td align=\"left\">简单动态字符串</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_ENCODING_HT</code></td>\n<td align=\"left\">字典</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_ENCODING_ZIPMAP</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_ENCODING_LINKEDLIST</code></td>\n<td align=\"left\">双端链表(no longer used)</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_ENCODING_ZIPLIST</code></td>\n<td align=\"left\">压缩列表</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_ENCODING_INTSET</code></td>\n<td align=\"left\">整数集合</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_ENCODING_SKIPLIST</code></td>\n<td align=\"left\">跳跃表和字典</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_ENCODING_QUICKLIST</code></td>\n<td align=\"left\"></td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">OBJ_ENCODING_STREAM</code></td>\n<td align=\"left\"></td>\n</tr>\n</tbody>\n</table>\n<p>对象类型对应的编码方式如下：</p>\n<table>\n<thead>\n<tr>\n<th align=\"left\">类型</th>\n<th align=\"left\">编码</th>\n<th align=\"left\">对象</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td align=\"left\"><code class=\"language-text\">REDIS_STRING</code></td>\n<td align=\"left\"><code class=\"language-text\">REDIS_ENCODING_INT</code></td>\n<td align=\"left\">使用整数值实现的字符串对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">REDIS_STRING</code></td>\n<td align=\"left\"><code class=\"language-text\">REDIS_ENCODING_EMBSTR</code></td>\n<td align=\"left\">使用 <code class=\"language-text\">embstr</code> 编码的简单动态字符串实现的字符串对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">REDIS_STRING</code></td>\n<td align=\"left\"><code class=\"language-text\">REDIS_ENCODING_RAW</code></td>\n<td align=\"left\">使用简单动态字符串实现的字符串对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">REDIS_LIST</code></td>\n<td align=\"left\"><code class=\"language-text\">REDIS_ENCODING_ZIPLIST</code></td>\n<td align=\"left\">使用压缩列表实现的列表对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">REDIS_LIST</code></td>\n<td align=\"left\"><code class=\"language-text\">REDIS_ENCODING_LINKEDLIST</code></td>\n<td align=\"left\">使用双端链表实现的列表对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">REDIS_HASH</code></td>\n<td align=\"left\"><code class=\"language-text\">REDIS_ENCODING_ZIPLIST</code></td>\n<td align=\"left\">使用压缩列表实现的哈希对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">REDIS_HASH</code></td>\n<td align=\"left\"><code class=\"language-text\">REDIS_ENCODING_HT</code></td>\n<td align=\"left\">使用字典实现的哈希对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">REDIS_SET</code></td>\n<td align=\"left\"><code class=\"language-text\">REDIS_ENCODING_INTSET</code></td>\n<td align=\"left\">使用整数集合实现的集合对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">REDIS_SET</code></td>\n<td align=\"left\"><code class=\"language-text\">REDIS_ENCODING_HT</code></td>\n<td align=\"left\">使用字典实现的集合对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">REDIS_ZSET</code></td>\n<td align=\"left\"><code class=\"language-text\">REDIS_ENCODING_ZIPLIST</code></td>\n<td align=\"left\">使用压缩列表实现的有序集合对象。</td>\n</tr>\n<tr>\n<td align=\"left\"><code class=\"language-text\">REDIS_ZSET</code></td>\n<td align=\"left\"><code class=\"language-text\">REDIS_ENCODING_SKIPLIST</code></td>\n<td align=\"left\">使用跳跃表和字典实现的有序集合对象。</td>\n</tr>\n</tbody>\n</table>\n<p>来一个一个看<code class=\"language-text\">object.c</code>中的函数</p>\n<h3><code class=\"language-text\">createObject</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// server.h</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">redisServer</span> server<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// server.c</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">redisServer</span> server<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// object.c</span>\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> type<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    robj <span class=\"token operator\">*</span>o <span class=\"token operator\">=</span> <span class=\"token function\">zmalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> OBJ_ENCODING_RAW<span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>ptr <span class=\"token operator\">=</span> ptr<span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>refcount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Set the LRU to the current lruclock (minutes resolution), or\n     * alternatively the LFU counter. */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>maxmemory_policy <span class=\"token operator\">&amp;</span> MAXMEMORY_FLAG_LFU<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        o<span class=\"token operator\">-></span>lru <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">LFUGetTimeInMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> LFU_INIT_VAL<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        o<span class=\"token operator\">-></span>lru <span class=\"token operator\">=</span> <span class=\"token function\">LRU_CLOCK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>对于小整数等变量，经常会让其只有公共的几份，也不进行引用计数和释放了。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// server.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OBJ_SHARED_REFCOUNT INT_MAX</span>\n\n<span class=\"token comment\">// object.c</span>\n<span class=\"token comment\">/* 设置一个特殊的引用计数使其变为 \"shared\":\n * incrRefCount and decrRefCount() 会检查变量是不是共享对象，如果是就忽略这个对象\n * 这样就可以在不使用mutex的情况下在不同线程中使用一些如小整数这样的变量\n * 常见使用方法:\n * robj *myobject = makeObjectShared(createObject(...));\n */</span>\nrobj <span class=\"token operator\">*</span><span class=\"token function\">makeObjectShared</span><span class=\"token punctuation\">(</span>robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">serverAssert</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>refcount <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>refcount <span class=\"token operator\">=</span> OBJ_SHARED_REFCOUNT<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">incrRefCount</span><span class=\"token punctuation\">(</span>robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>refcount <span class=\"token operator\">!=</span> OBJ_SHARED_REFCOUNT<span class=\"token punctuation\">)</span> o<span class=\"token operator\">-></span>refcount<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">decrRefCount</span><span class=\"token punctuation\">(</span>robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>refcount <span class=\"token operator\">==</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>type<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">case</span> OBJ_STRING<span class=\"token operator\">:</span> <span class=\"token function\">freeStringObject</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> OBJ_LIST<span class=\"token operator\">:</span> <span class=\"token function\">freeListObject</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> OBJ_SET<span class=\"token operator\">:</span> <span class=\"token function\">freeSetObject</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> OBJ_ZSET<span class=\"token operator\">:</span> <span class=\"token function\">freeZsetObject</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> OBJ_HASH<span class=\"token operator\">:</span> <span class=\"token function\">freeHashObject</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> OBJ_MODULE<span class=\"token operator\">:</span> <span class=\"token function\">freeModuleObject</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">case</span> OBJ_STREAM<span class=\"token operator\">:</span> <span class=\"token function\">freeStreamObject</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">default</span><span class=\"token operator\">:</span> <span class=\"token function\">serverPanic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown object type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token function\">zfree</span><span class=\"token punctuation\">(</span>o<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>refcount <span class=\"token operator\">&lt;=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token function\">serverPanic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"decrRefCount against refcount &lt;= 0\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>refcount <span class=\"token operator\">!=</span> OBJ_SHARED_REFCOUNT<span class=\"token punctuation\">)</span> o<span class=\"token operator\">-></span>refcount<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后陆续是各种不同的对象的<code class=\"language-text\">create</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// object.c</span>\n<span class=\"token comment\">/* 创建一个以OBJ_ENCODING_RAW为编码的字符串对象，其o->ptr指向一个sds string. */</span>\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createRawStringObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_STRING<span class=\"token punctuation\">,</span> <span class=\"token function\">sdsnewlen</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 创建一个以OBJ_ENCODING_EMBSTR为编码的字符串对象, 这里的sds string不可修改\n * 并且字符串和对象在同一内存chunk中. */</span>\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createEmbeddedStringObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    robj <span class=\"token operator\">*</span>o <span class=\"token operator\">=</span> <span class=\"token function\">zmalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>robj<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">sdshdr8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">sdshdr8</span> <span class=\"token operator\">*</span>sh <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    o<span class=\"token operator\">-></span>type <span class=\"token operator\">=</span> OBJ_STRING<span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> OBJ_ENCODING_EMBSTR<span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>ptr <span class=\"token operator\">=</span> sh<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>refcount <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>maxmemory_policy <span class=\"token operator\">&amp;</span> MAXMEMORY_FLAG_LFU<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        o<span class=\"token operator\">-></span>lru <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token function\">LFUGetTimeInMinutes</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&lt;&lt;</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> LFU_INIT_VAL<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        o<span class=\"token operator\">-></span>lru <span class=\"token operator\">=</span> <span class=\"token function\">LRU_CLOCK</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    sh<span class=\"token operator\">-></span>len <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n    sh<span class=\"token operator\">-></span>alloc <span class=\"token operator\">=</span> len<span class=\"token punctuation\">;</span>\n    sh<span class=\"token operator\">-></span>flags <span class=\"token operator\">=</span> SDS_TYPE_8<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr <span class=\"token operator\">==</span> SDS_NOINIT<span class=\"token punctuation\">)</span>\n        sh<span class=\"token operator\">-></span>buf<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>sh<span class=\"token operator\">-></span>buf<span class=\"token punctuation\">,</span>ptr<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        sh<span class=\"token operator\">-></span>buf<span class=\"token punctuation\">[</span>len<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">'\\0'</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>sh<span class=\"token operator\">-></span>buf<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>len<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 创建字符串对象，如果长度小于OBJ_ENCODING_EMBSTR_SIZE_LIMIT就用 EMBSTR\n * , 不然就用RAW。\n *\n * 目前用选44为阈值是为了让EMBSTR存储的最大字符串对象还在64byte之内 */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OBJ_ENCODING_EMBSTR_SIZE_LIMIT 44</span>\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createStringObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>ptr<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>len <span class=\"token operator\">&lt;=</span> OBJ_ENCODING_EMBSTR_SIZE_LIMIT<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">createEmbeddedStringObject</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">createRawStringObject</span><span class=\"token punctuation\">(</span>ptr<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// server.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> OBJ_SHARED_INTEGERS 10000</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sharedObjectsStruct</span> <span class=\"token punctuation\">{</span>\n    robj <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token operator\">*</span>integers<span class=\"token punctuation\">[</span>OBJ_SHARED_INTEGERS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span>\n    <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// server.c</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">sharedObjectsStruct</span> shared<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// object.c</span>\n<span class=\"token comment\">/* 从一个long long创建字符串. When possible returns a\n * shared integer object, or at least an integer encoded one.\n *\n * 如果valueobj不为0，那么不能用shared，因为其被用作了Redis key space中的整数\n * (比如用INCR的时候), 我们需要对这个key的专门的LFU/LRU值 */</span>\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createStringObjectFromLongLongWithOptions</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> valueobj<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>maxmemory <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">||</span>\n        <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>server<span class=\"token punctuation\">.</span>maxmemory_policy <span class=\"token operator\">&amp;</span> MAXMEMORY_FLAG_NO_SHARED_INTEGERS<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* 如果maxmemory policy允许, 在valueobj为true的情况下仍可以返回shared integer */</span>\n        valueobj <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">>=</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">&lt;</span> OBJ_SHARED_INTEGERS <span class=\"token operator\">&amp;&amp;</span> valueobj <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">incrRefCount</span><span class=\"token punctuation\">(</span>shared<span class=\"token punctuation\">.</span>integers<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        o <span class=\"token operator\">=</span> shared<span class=\"token punctuation\">.</span>integers<span class=\"token punctuation\">[</span>value<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>value <span class=\"token operator\">>=</span> LONG_MIN <span class=\"token operator\">&amp;&amp;</span> value <span class=\"token operator\">&lt;=</span> LONG_MAX<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            o <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_STRING<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> OBJ_ENCODING_INT<span class=\"token punctuation\">;</span>\n            o<span class=\"token operator\">-></span>ptr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span><span class=\"token punctuation\">)</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            o <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_STRING<span class=\"token punctuation\">,</span><span class=\"token function\">sdsfromlonglong</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 上面那个函数的wrapper */</span>\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createStringObjectFromLongLong</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createStringObjectFromLongLongWithOptions</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 同上 */</span>\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createStringObjectFromLongLongForValue</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">long</span> value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createStringObjectFromLongLongWithOptions</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 从long double转化. 如果humanfriendly非0，将不会用指数格式\n * 并会trim掉结尾的0, 不过这样会影响精度. 不然就会用exp format\n * and the output of snprintf() is not modified.\n *\n * The 'humanfriendly' option is used for INCRBYFLOAT and HINCRBYFLOAT. */</span>\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createStringObjectFromLongDouble</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">long</span> <span class=\"token keyword\">double</span> value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> humanfriendly<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">char</span> buf<span class=\"token punctuation\">[</span>MAX_LONG_DOUBLE_CHARS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// 这个函数可以返回inf，主要就是用snprintf</span>\n    <span class=\"token keyword\">int</span> len <span class=\"token operator\">=</span> <span class=\"token function\">ld2string</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span>humanfriendly<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createStringObject</span><span class=\"token punctuation\">(</span>buf<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 复制string对象。返回值编码一样。\n * 返回的引用计数永远为1，且对于INT，返回的永远是新对象而不是shared\n *\n * 注意这里并没有复制底层的字符串，不明白释放的时候为啥不会出问题 */</span>\nrobj <span class=\"token operator\">*</span><span class=\"token function\">dupStringObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    robj <span class=\"token operator\">*</span>d<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">serverAssert</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>type <span class=\"token operator\">==</span> OBJ_STRING<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>encoding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> OBJ_ENCODING_RAW<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">createRawStringObject</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">,</span><span class=\"token function\">sdslen</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> OBJ_ENCODING_EMBSTR<span class=\"token operator\">:</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">createEmbeddedStringObject</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">,</span><span class=\"token function\">sdslen</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> OBJ_ENCODING_INT<span class=\"token operator\">:</span>\n        d <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_STRING<span class=\"token punctuation\">,</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        d<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> OBJ_ENCODING_INT<span class=\"token punctuation\">;</span>\n        d<span class=\"token operator\">-></span>ptr <span class=\"token operator\">=</span> o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> d<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">serverPanic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Wrong encoding.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>上面是和创建字符串相关的部分。剩下几个对象的创建都是很相似的：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">robj <span class=\"token operator\">*</span><span class=\"token function\">createQuicklistObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    quicklist <span class=\"token operator\">*</span>l <span class=\"token operator\">=</span> <span class=\"token function\">quicklistCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    robj <span class=\"token operator\">*</span>o <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_LIST<span class=\"token punctuation\">,</span>l<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> OBJ_ENCODING_QUICKLIST<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createZiplistObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>zl <span class=\"token operator\">=</span> <span class=\"token function\">ziplistNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    robj <span class=\"token operator\">*</span>o <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_LIST<span class=\"token punctuation\">,</span>zl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> OBJ_ENCODING_ZIPLIST<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createSetObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    dict <span class=\"token operator\">*</span>d <span class=\"token operator\">=</span> <span class=\"token function\">dictCreate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>setDictType<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    robj <span class=\"token operator\">*</span>o <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_SET<span class=\"token punctuation\">,</span>d<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> OBJ_ENCODING_HT<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createIntsetObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    intset <span class=\"token operator\">*</span>is <span class=\"token operator\">=</span> <span class=\"token function\">intsetNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    robj <span class=\"token operator\">*</span>o <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_SET<span class=\"token punctuation\">,</span>is<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> OBJ_ENCODING_INTSET<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createHashObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>zl <span class=\"token operator\">=</span> <span class=\"token function\">ziplistNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    robj <span class=\"token operator\">*</span>o <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_HASH<span class=\"token punctuation\">,</span> zl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> OBJ_ENCODING_ZIPLIST<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createZsetObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    zset <span class=\"token operator\">*</span>zs <span class=\"token operator\">=</span> <span class=\"token function\">zmalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>zs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">;</span>\n\n    zs<span class=\"token operator\">-></span>dict <span class=\"token operator\">=</span> <span class=\"token function\">dictCreate</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>zsetDictType<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    zs<span class=\"token operator\">-></span>zsl <span class=\"token operator\">=</span> <span class=\"token function\">zslCreate</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_ZSET<span class=\"token punctuation\">,</span>zs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> OBJ_ENCODING_SKIPLIST<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createZsetZiplistObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>zl <span class=\"token operator\">=</span> <span class=\"token function\">ziplistNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    robj <span class=\"token operator\">*</span>o <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_ZSET<span class=\"token punctuation\">,</span>zl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> OBJ_ENCODING_ZIPLIST<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createStreamObject</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    stream <span class=\"token operator\">*</span>s <span class=\"token operator\">=</span> <span class=\"token function\">streamNew</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    robj <span class=\"token operator\">*</span>o <span class=\"token operator\">=</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_STREAM<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> OBJ_ENCODING_STREAM<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> o<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrobj <span class=\"token operator\">*</span><span class=\"token function\">createModuleObject</span><span class=\"token punctuation\">(</span>moduleType <span class=\"token operator\">*</span>mt<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    moduleValue <span class=\"token operator\">*</span>mv <span class=\"token operator\">=</span> <span class=\"token function\">zmalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    mv<span class=\"token operator\">-></span>type <span class=\"token operator\">=</span> mt<span class=\"token punctuation\">;</span>\n    mv<span class=\"token operator\">-></span>value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">createObject</span><span class=\"token punctuation\">(</span>OBJ_MODULE<span class=\"token punctuation\">,</span>mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3>free</h3>\n<p>释放的函数都是在<code class=\"language-text\">decreRefCount</code>里面调用的，这个函数前面提到过了。每个类型具体的释放函数很简单：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> <span class=\"token function\">freeStringObject</span><span class=\"token punctuation\">(</span>robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// 注意只有RAW会被释放</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">==</span> OBJ_ENCODING_RAW<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">sdsfree</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">freeListObject</span><span class=\"token punctuation\">(</span>robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>encoding <span class=\"token operator\">==</span> OBJ_ENCODING_QUICKLIST<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">quicklistRelease</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">serverPanic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown list encoding type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">freeSetObject</span><span class=\"token punctuation\">(</span>robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>encoding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> OBJ_ENCODING_HT<span class=\"token operator\">:</span>\n        <span class=\"token function\">dictRelease</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dict<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> OBJ_ENCODING_INTSET<span class=\"token operator\">:</span>\n        <span class=\"token function\">zfree</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">serverPanic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown set encoding type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">freeZsetObject</span><span class=\"token punctuation\">(</span>robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    zset <span class=\"token operator\">*</span>zs<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>encoding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> OBJ_ENCODING_SKIPLIST<span class=\"token operator\">:</span>\n        zs <span class=\"token operator\">=</span> o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dictRelease</span><span class=\"token punctuation\">(</span>zs<span class=\"token operator\">-></span>dict<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">zslFree</span><span class=\"token punctuation\">(</span>zs<span class=\"token operator\">-></span>zsl<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">zfree</span><span class=\"token punctuation\">(</span>zs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> OBJ_ENCODING_ZIPLIST<span class=\"token operator\">:</span>\n        <span class=\"token function\">zfree</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">serverPanic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown sorted set encoding\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">freeHashObject</span><span class=\"token punctuation\">(</span>robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>encoding<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">case</span> OBJ_ENCODING_HT<span class=\"token operator\">:</span>\n        <span class=\"token function\">dictRelease</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>dict<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">case</span> OBJ_ENCODING_ZIPLIST<span class=\"token operator\">:</span>\n        <span class=\"token function\">zfree</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n        <span class=\"token function\">serverPanic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Unknown hash encoding type\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">freeModuleObject</span><span class=\"token punctuation\">(</span>robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    moduleValue <span class=\"token operator\">*</span>mv <span class=\"token operator\">=</span> o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">;</span>\n    mv<span class=\"token operator\">-></span>type<span class=\"token operator\">-></span><span class=\"token function\">free</span><span class=\"token punctuation\">(</span>mv<span class=\"token operator\">-></span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">zfree</span><span class=\"token punctuation\">(</span>mv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">freeStreamObject</span><span class=\"token punctuation\">(</span>robj <span class=\"token operator\">*</span>o<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">freeStream</span><span class=\"token punctuation\">(</span>o<span class=\"token operator\">-></span>ptr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Redis源码阅读 —— 对象","date":null,"tags":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/drafts/redis-source-code-reading-object/"}}}