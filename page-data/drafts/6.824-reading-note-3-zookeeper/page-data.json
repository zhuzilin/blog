{"componentChunkName":"component---src-templates-blog-post-js","path":"/drafts/6.824-reading-note-3-zookeeper/","webpackCompilationHash":"a5e4f8556e8086fddcf0","result":{"data":{"markdownRemark":{"html":"<h2>ZooKeeper: Wait-free coordination for Internet-scale systems</h2>\n<h3>1 Introduction</h3>\n<p>大规模分布式系统需要不同类型的coordination。Conifguration是最基本的coordination。最简单的形式下，configuration就是一系列operational parameter，一些复杂系统有动态参数。Group membership和leader election也在分布式系统中非常常见：多数情况下进程需要知道其他进程是否alive，以及其他process在负责什么。锁是一个强有力的coordination primitive，其通过实现mutual exclusive来访问critical resource。</p>\n<p>一种coordination的方法是为不同的coordination开发不同的服务。比如，Amazon Simple Queue Service专注于queuing。其他的服务也有特别为leader election和configuration开发的。实现更强有力的服务可以用来实现不那么强的。不如说Chubby是一个有很强同步性保证的锁。锁可以用来实现leader election和group membership等等。</p>\n<p>当实现我们的coordination service的时候，我们并没有在服务端实现特殊的primitive，而是选择开放一个API用于让开发者实现他们自己的primitives。这样的选择指向了实现一个不需要改变service core但是可以实现新primitive的<strong>coordination kernel</strong>。这个方法让服务可以有各种形式的coordination。</p>\n<p>当设计ZooKeeper的API时，我们并没有考虑像锁一样的blocking primitives。Blocking primitives可以导致慢或者出错的client影响快速的client的性能表现。如果服务需要依赖于其他client的response和failure detection，这个服务的实现就会很复杂。因此，ZooKeeper实现了一个API来操作简单的waitfree data object</p>\n<h3>2 The ZooKeeper Service</h3>\n<p>Client向Zookeeper</p>","frontmatter":{"title":"6.824 阅读笔记3 —— ZooKeeper","date":"2019-09-21T12:19:00.000Z","tags":["OS","“distributed”","6.824"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/drafts/6.824-reading-note-3-zookeeper/"}}}