{"componentChunkName":"component---src-templates-blog-post-js","path":"/drafts/redis-source-code-reading-radis-tree/","webpackCompilationHash":"a5e4f8556e8086fddcf0","result":{"data":{"markdownRemark":{"html":"<p>今天来看一下基数树结构的实现。这个结构主要位于<code class=\"language-text\">rax.h</code>和<code class=\"language-text\">rax.c</code>。</p>\n<h2>Radix Tree</h2>\n<p><a href=\"%5Bhttps://zh.wikipedia.org/wiki/%E5%9F%BA%E6%95%B0%E6%A0%91%5D(https://zh.wikipedia.org/wiki/%E5%9F%BA%E6%95%B0%E6%A0%91)\">基数树</a>(radix tree)是一种进行了路径压缩的字典树(trie tree)。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// rax.h</span>\n<span class=\"token comment\">/* Representation of a radix tree as implemented in this file, 包含\n * \"foo\", \"foobar\" 和 \"footer\" 如果节点对应一个key，就用[]，不然用()。\n *\n * 最朴素的表示方法（trie tree）:\n *\n *              (f) \"\"\n *                \\\n *                (o) \"f\"\n *                  \\\n *                  (o) \"fo\"\n *                    \\\n *                  [t   b] \"foo\"\n *                  /     \\\n *         \"foot\" (e)     (a) \"foob\"\n *                /         \\\n *      \"foote\" (r)         (r) \"fooba\"\n *              /             \\\n *    \"footer\" []             [] \"foobar\"\n *\n * 不过一个常见的方法是把连续的一个child的节点压缩一下\n * 也就是:\n *\n *                  [\"foo\"] \"\"\n *                     |\n *                  [t   b] \"foo\"\n *                  /     \\\n *        \"foot\" (\"er\")    (\"ar\") \"foob\"\n *                 /          \\\n *       \"footer\" []          [] \"foobar\"\n *\n * 但是这个方法会让实现变得有点复杂\n * 比如要再插入\"first\"，那么需要\"node splitting\"操作, 因为\"foo\"不再是所有的前缀了\n * 进行node splitting后，树会变成:\n *\n *\n *                    (f) \"\"\n *                    /\n *                 (i o) \"f\"\n *                 /   \\\n *    \"firs\"  (\"rst\")  (o) \"fo\"\n *              /        \\\n *    \"first\" []       [t   b] \"foo\"\n *                     /     \\\n *           \"foot\" (\"er\")    (\"ar\") \"foob\"\n *                    /          \\\n *          \"footer\" []          [] \"foobar\"\n *\n * 同样，如果进行了删除操作, 可能需要再次压缩\n *\n */</span></code></pre></div>\n<p>对于一个树，就要来看其节点结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">raxNode</span> <span class=\"token punctuation\">{</span>\n    uint32_t iskey<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 此node是否包含一个key? */</span>\n    uint32_t isnull<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">/* Associated value is NULL (don't store it). */</span>\n    uint32_t iscompr<span class=\"token operator\">:</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">/* 节点是否是压缩节点. */</span>\n    uint32_t size<span class=\"token operator\">:</span><span class=\"token number\">29</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">/* 孩子数量，或者压缩节点长度. */</span>\n    <span class=\"token comment\">/* data[] layout如下:\n     *\n     * 如果未被压缩，那么存储'size' bytes, 一个child对应的char一个\n     * 与'size'个raxNode pointers, 指向每个child node.\n     * 注意char不是存在child，而是存在parent里:\n     *\n     * [header iscompr=0][abc][a-ptr][b-ptr][c-ptr](value-ptr?)\n     *\n     * 如果是也锁节点(iscompr位为1) 节点只有1个children.\n     * 这样的话'size' bytes of the string直接保存在data section的开始部分\n     *\n     * [header iscompr=1][xyz][z-ptr](value-ptr?)\n     *\n     * 压缩和不压缩的节点都可以表示key\n     * with associated data in the radix tree at any level (并不只是末尾节点).\n     *\n     * 如果节点有an associated key (iskey=1)且其不是NULL(isnull=0), \n     * 那么在data最后会有value的指针。\n     */</span>\n    <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> data<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> raxNode<span class=\"token punctuation\">;</span></code></pre></div>\n<p>树的宏观结构如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">rax</span> <span class=\"token punctuation\">{</span>\n    raxNode <span class=\"token operator\">*</span>head<span class=\"token punctuation\">;</span>\n    uint64_t numele<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 应该是level</span>\n    uint64_t numnodes<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> rax<span class=\"token punctuation\">;</span></code></pre></div>\n<p>下面来看一下其接口</p>\n<h3><code class=\"language-text\">raxNew</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// rax_malloc.h</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> rax_malloc zmalloc</span>\n\n<span class=\"token comment\">// rax.c</span>\n<span class=\"token comment\">/* 指定child个数，返回一个未被压缩的节点。\n * 如果datafiled为true, 还要为value ptr分配内存. */</span>\nraxNode <span class=\"token operator\">*</span><span class=\"token function\">raxNewNode</span><span class=\"token punctuation\">(</span>size_t children<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> datafield<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    size_t nodesize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>raxNode<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>children<span class=\"token operator\">+</span><span class=\"token function\">raxPadding</span><span class=\"token punctuation\">(</span>children<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>\n                      <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>raxNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>children<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>datafield<span class=\"token punctuation\">)</span> nodesize <span class=\"token operator\">+=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    raxNode <span class=\"token operator\">*</span>node <span class=\"token operator\">=</span> <span class=\"token function\">rax_malloc</span><span class=\"token punctuation\">(</span>nodesize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>node <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>iskey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>isnull <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>iscompr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    node<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> children<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> node<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\nrax <span class=\"token operator\">*</span><span class=\"token function\">raxNew</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    rax <span class=\"token operator\">*</span>rax <span class=\"token operator\">=</span> <span class=\"token function\">rax_malloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>rax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rax <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    rax<span class=\"token operator\">-></span>numele <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    rax<span class=\"token operator\">-></span>numnodes <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    rax<span class=\"token operator\">-></span>head <span class=\"token operator\">=</span> <span class=\"token function\">raxNewNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>rax<span class=\"token operator\">-></span>head <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">rax_free</span><span class=\"token punctuation\">(</span>rax<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">return</span> rax<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3><code class=\"language-text\">raxInsert</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// rax.c</span>\n<span class=\"token comment\">/* Overwriting insert. Just a wrapper for raxGenericInsert()\n * 强制更新value. */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">raxInsert</span><span class=\"token punctuation\">(</span>rax <span class=\"token operator\">*</span>rax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>old<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">raxGenericInsert</span><span class=\"token punctuation\">(</span>rax<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">,</span>old<span class=\"token punctuation\">,</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Non overwriting insert function: 如果key已经存在了, 不更新value且返回0.\n * This is a just a wrapper for raxGenericInsert(). */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">raxTryInsert</span><span class=\"token punctuation\">(</span>rax <span class=\"token operator\">*</span>rax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>old<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">return</span> <span class=\"token function\">raxGenericInsert</span><span class=\"token punctuation\">(</span>rax<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">,</span>old<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* 插入长为'len'的's', 设置auxiliary data为'data'\n * 如果element已经存在（若overwrite为1，更新已经存在的element）返回0\n * 不然插入element并返回1.\n * OOM时也返回0，但是会设置errno为ENOMEM, 其余情况errno为0.\n */</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">raxGenericInsert</span><span class=\"token punctuation\">(</span>rax <span class=\"token operator\">*</span>rax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>data<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>old<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> overwrite<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    size_t i<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Split position. 对应raxLowWalk()中的*splitpos */</span>\n    raxNode <span class=\"token operator\">*</span>h<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>parentlink<span class=\"token punctuation\">;</span>\n\n    <span class=\"token function\">debugf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"### Insert %.*s with value %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>len<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    i <span class=\"token operator\">=</span> <span class=\"token function\">raxLowWalk</span><span class=\"token punctuation\">(</span>rax<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>len<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>parentlink<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>j<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* 如果i == len说明我们walked整个string了. 如果不在compressed key中间，要不就是\n     * 已经有这个key了，要不就是仅仅iskey没被设置。我们只需要重分配节点，分配出来data pointer\n     * 就好 */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> len <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>h<span class=\"token operator\">-></span>iscompr <span class=\"token operator\">||</span> j <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token comment\">/* not in the middle if j is 0 */</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">debugf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"### Insert: node representing key exists\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token comment\">/* Make space for the value pointer if needed. */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>h<span class=\"token operator\">-></span>iskey <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>isnull <span class=\"token operator\">&amp;&amp;</span> overwrite<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            h <span class=\"token operator\">=</span> <span class=\"token function\">raxReallocForData</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 就是把data部分加上</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span> <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>parentlink<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            errno <span class=\"token operator\">=</span> ENOMEM<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/* Update the existing key if there is already one. */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>iskey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>old<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>old <span class=\"token operator\">=</span> <span class=\"token function\">raxGetData</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>overwrite<span class=\"token punctuation\">)</span> <span class=\"token function\">raxSetData</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            errno <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Element already exists. */</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/* Otherwise set the node as a key. Note that raxSetData()\n         * will set h->iskey. */</span>\n        <span class=\"token function\">raxSetData</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 注意这个函数会复制data</span>\n        rax<span class=\"token operator\">-></span>numele<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Element inserted. */</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* 如果我们停在了compressed key的中间，我们需要split它.\n     *\n     * split key有几种情况\n     * 假设node 'h'为\"ANNIBALE\" (也就是说其表示\n     * nodes A -> N -> N -> I -> B -> A -> L -> E 只有'E'后有child, \n     *\n     * 为了用一个比较真实的例子，想想我们的节点也指向另一个压缩节点, 终于一个空结点:\n     *\n     *     \"ANNIBALE\" -> \"SCO\" -> []\n     *\n     * 插入的时候我们可能会遇到如下的情况. Note that all the cases\n     * require the insertion of a non compressed node with exactly two\n     * children, except for the last case which just requires splitting a\n     * compressed node.\n     *\n     * 1) Inserting \"ANNIENTARE\"\n     *\n     *               |B| -> \"ALE\" -> \"SCO\" -> []\n     *     \"ANNI\" -> |-|\n     *               |E| -> (... continue algo ...) \"NTARE\" -> []\n     *\n     * 2) Inserting \"ANNIBALI\"\n     *\n     *                  |E| -> \"SCO\" -> []\n     *     \"ANNIBAL\" -> |-|\n     *                  |I| -> (... continue algo ...) []\n     *\n     * 3) Inserting \"AGO\" (Like case 1, but set iscompr = 0 into original node)\n     *\n     *            |N| -> \"NIBALE\" -> \"SCO\" -> []\n     *     |A| -> |-|\n     *            |G| -> (... continue algo ...) |O| -> []\n     *\n     * 4) Inserting \"CIAO\"\n     *\n     *     |A| -> \"NNIBALE\" -> \"SCO\" -> []\n     *     |-|\n     *     |C| -> (... continue algo ...) \"IAO\" -> []\n     *\n     * 5) Inserting \"ANNI\"\n     *\n     *     \"ANNI\" -> \"BALE\" -> \"SCO\" -> []\n     *\n     * 覆盖了上述所有情况的算法如下.\n     *\n     * ============================= ALGO 1 =============================\n     *\n     * For the above cases 1 to 4, that is, all cases where we stopped in\n     * the middle of a compressed node for a character mismatch, do:\n     *\n     * Let $SPLITPOS be the zero-based index at which, in the\n     * compressed node array of characters, we found the mismatching\n     * character. For example if the node contains \"ANNIBALE\" and we add\n     * \"ANNIENTARE\" the $SPLITPOS is 4, that is, the index at which the\n     * mismatching character is found.\n     *\n     * 1. Save the current compressed node $NEXT pointer (the pointer to the\n     *    child element, that is always present in compressed nodes).\n     *\n     * 2. Create \"split node\" having as child the non common letter\n     *    at the compressed node. The other non common letter (at the key)\n     *    will be added later as we continue the normal insertion algorithm\n     *    at step \"6\".\n     *\n     * 3a. IF $SPLITPOS == 0:\n     *     Replace the old node with the split node, by copying the auxiliary\n     *     data if any. Fix parent's reference. Free old node eventually\n     *     (we still need its data for the next steps of the algorithm).\n     *\n     * 3b. IF $SPLITPOS != 0:\n     *     Trim the compressed node (reallocating it as well) in order to\n     *     contain $splitpos characters. Change chilid pointer in order to link\n     *     to the split node. If new compressed node len is just 1, set\n     *     iscompr to 0 (layout is the same). Fix parent's reference.\n     *\n     * 4a. IF the postfix len (the length of the remaining string of the\n     *     original compressed node after the split character) is non zero,\n     *     create a \"postfix node\". If the postfix node has just one character\n     *     set iscompr to 0, otherwise iscompr to 1. Set the postfix node\n     *     child pointer to $NEXT.\n     *\n     * 4b. IF the postfix len is zero, just use $NEXT as postfix pointer.\n     *\n     * 5. Set child[0] of split node to postfix node.\n     *\n     * 6. Set the split node as the current node, set current index at child[1]\n     *    and continue insertion algorithm as usually.\n     *\n     * ============================= ALGO 2 =============================\n     *\n     * For case 5, that is, if we stopped in the middle of a compressed\n     * node but no mismatch was found, do:\n     *\n     * Let $SPLITPOS be the zero-based index at which, in the\n     * compressed node array of characters, we stopped iterating because\n     * there were no more keys character to match. So in the example of\n     * the node \"ANNIBALE\", addig the string \"ANNI\", the $SPLITPOS is 4.\n     *\n     * 1. Save the current compressed node $NEXT pointer (the pointer to the\n     *    child element, that is always present in compressed nodes).\n     *\n     * 2. Create a \"postfix node\" containing all the characters from $SPLITPOS\n     *    to the end. Use $NEXT as the postfix node child pointer.\n     *    If the postfix node length is 1, set iscompr to 0.\n     *    Set the node as a key with the associated value of the new\n     *    inserted key.\n     *\n     * 3. Trim the current node to contain the first $SPLITPOS characters.\n     *    As usually if the new node length is just 1, set iscompr to 0.\n     *    Take the iskey / associated value as it was in the orignal node.\n     *    Fix the parent's reference.\n     *\n     * 4. Set the postfix node as the only child pointer of the trimmed\n     *    node created at step 1.\n     */</span>\n\n    <span class=\"token comment\">/* ------------------------- ALGORITHM 1 --------------------------- */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>iscompr <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">!=</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">debugf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ALGO 1: Stopped at compressed node %.*s (%p)\\n\"</span><span class=\"token punctuation\">,</span>\n            h<span class=\"token operator\">-></span>size<span class=\"token punctuation\">,</span> h<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">debugf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Still to insert: %.*s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>len<span class=\"token operator\">-</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> s<span class=\"token operator\">+</span>i<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">debugf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Splitting at %d: '%c'\\n\"</span><span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>h<span class=\"token operator\">-></span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">debugf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Other (key) letter is '%c'\\n\"</span><span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* 1: Save next pointer. */</span>\n        raxNode <span class=\"token operator\">*</span><span class=\"token operator\">*</span>childfield <span class=\"token operator\">=</span> <span class=\"token function\">raxNodeLastChildPtr</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        raxNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>next<span class=\"token punctuation\">,</span>childfield<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">debugf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Next is %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">debugf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"iskey %d\\n\"</span><span class=\"token punctuation\">,</span> h<span class=\"token operator\">-></span>iskey<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>iskey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debugf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"key value is %p\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">raxGetData</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/* Set the length of the additional nodes we will need. */</span>\n        size_t trimmedlen <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n        size_t postfixlen <span class=\"token operator\">=</span> h<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> j <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">int</span> split_node_is_key <span class=\"token operator\">=</span> <span class=\"token operator\">!</span>trimmedlen <span class=\"token operator\">&amp;&amp;</span> h<span class=\"token operator\">-></span>iskey <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>h<span class=\"token operator\">-></span>isnull<span class=\"token punctuation\">;</span>\n        size_t nodesize<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* 2: Create the split node. Also allocate the other nodes we'll need\n         *    ASAP, so that it will be simpler to handle OOM. */</span>\n        raxNode <span class=\"token operator\">*</span>splitnode <span class=\"token operator\">=</span> <span class=\"token function\">raxNewNode</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> split_node_is_key<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        raxNode <span class=\"token operator\">*</span>trimmed <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n        raxNode <span class=\"token operator\">*</span>postfix <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>trimmedlen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            nodesize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>raxNode<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>trimmedlen<span class=\"token operator\">+</span><span class=\"token function\">raxPadding</span><span class=\"token punctuation\">(</span>trimmedlen<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>\n                       <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>raxNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>iskey <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>h<span class=\"token operator\">-></span>isnull<span class=\"token punctuation\">)</span> nodesize <span class=\"token operator\">+=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            trimmed <span class=\"token operator\">=</span> <span class=\"token function\">rax_malloc</span><span class=\"token punctuation\">(</span>nodesize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postfixlen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            nodesize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>raxNode<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>postfixlen<span class=\"token operator\">+</span><span class=\"token function\">raxPadding</span><span class=\"token punctuation\">(</span>postfixlen<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>\n                       <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>raxNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            postfix <span class=\"token operator\">=</span> <span class=\"token function\">rax_malloc</span><span class=\"token punctuation\">(</span>nodesize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/* OOM? Abort now that the tree is untouched. */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>splitnode <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span>\n            <span class=\"token punctuation\">(</span>trimmedlen <span class=\"token operator\">&amp;&amp;</span> trimmed <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span>\n            <span class=\"token punctuation\">(</span>postfixlen <span class=\"token operator\">&amp;&amp;</span> postfix <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">rax_free</span><span class=\"token punctuation\">(</span>splitnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">rax_free</span><span class=\"token punctuation\">(</span>trimmed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">rax_free</span><span class=\"token punctuation\">(</span>postfix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            errno <span class=\"token operator\">=</span> ENOMEM<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        splitnode<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> h<span class=\"token operator\">-></span>data<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/* 3a: Replace the old node with the split node. */</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>iskey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ndata <span class=\"token operator\">=</span> <span class=\"token function\">raxGetData</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">raxSetData</span><span class=\"token punctuation\">(</span>splitnode<span class=\"token punctuation\">,</span>ndata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>parentlink<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>splitnode<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>splitnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/* 3b: Trim the compressed node. */</span>\n            trimmed<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>trimmed<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span>h<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            trimmed<span class=\"token operator\">-></span>iscompr <span class=\"token operator\">=</span> j <span class=\"token operator\">></span> <span class=\"token number\">1</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            trimmed<span class=\"token operator\">-></span>iskey <span class=\"token operator\">=</span> h<span class=\"token operator\">-></span>iskey<span class=\"token punctuation\">;</span>\n            trimmed<span class=\"token operator\">-></span>isnull <span class=\"token operator\">=</span> h<span class=\"token operator\">-></span>isnull<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>iskey <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>h<span class=\"token operator\">-></span>isnull<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>ndata <span class=\"token operator\">=</span> <span class=\"token function\">raxGetData</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">raxSetData</span><span class=\"token punctuation\">(</span>trimmed<span class=\"token punctuation\">,</span>ndata<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            raxNode <span class=\"token operator\">*</span><span class=\"token operator\">*</span>cp <span class=\"token operator\">=</span> <span class=\"token function\">raxNodeLastChildPtr</span><span class=\"token punctuation\">(</span>trimmed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>splitnode<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>splitnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>parentlink<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>trimmed<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>trimmed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            parentlink <span class=\"token operator\">=</span> cp<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Set parentlink to splitnode parent. */</span>\n            rax<span class=\"token operator\">-></span>numnodes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/* 4: Create the postfix node: what remains of the original\n         * compressed node after the split. */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postfixlen<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/* 4a: create a postfix node. */</span>\n            postfix<span class=\"token operator\">-></span>iskey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            postfix<span class=\"token operator\">-></span>isnull <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            postfix<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> postfixlen<span class=\"token punctuation\">;</span>\n            postfix<span class=\"token operator\">-></span>iscompr <span class=\"token operator\">=</span> postfixlen <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>postfix<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span>h<span class=\"token operator\">-></span>data<span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span>postfixlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            raxNode <span class=\"token operator\">*</span><span class=\"token operator\">*</span>cp <span class=\"token operator\">=</span> <span class=\"token function\">raxNodeLastChildPtr</span><span class=\"token punctuation\">(</span>postfix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>next<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            rax<span class=\"token operator\">-></span>numnodes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/* 4b: just use next as postfix node. */</span>\n            postfix <span class=\"token operator\">=</span> next<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/* 5: Set splitnode first child as the postfix node. */</span>\n        raxNode <span class=\"token operator\">*</span><span class=\"token operator\">*</span>splitchild <span class=\"token operator\">=</span> <span class=\"token function\">raxNodeLastChildPtr</span><span class=\"token punctuation\">(</span>splitnode<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>splitchild<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>postfix<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>postfix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* 6. Continue insertion: this will cause the splitnode to\n         * get a new child (the non common character at the currently\n         * inserted key). */</span>\n        <span class=\"token function\">rax_free</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        h <span class=\"token operator\">=</span> splitnode<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>iscompr <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">==</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* ------------------------- ALGORITHM 2 --------------------------- */</span>\n        <span class=\"token function\">debugf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ALGO 2: Stopped at compressed node %.*s (%p) j = %d\\n\"</span><span class=\"token punctuation\">,</span>\n            h<span class=\"token operator\">-></span>size<span class=\"token punctuation\">,</span> h<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>h<span class=\"token punctuation\">,</span> j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* Allocate postfix &amp; trimmed nodes ASAP to fail for OOM gracefully. */</span>\n        size_t postfixlen <span class=\"token operator\">=</span> h<span class=\"token operator\">-></span>size <span class=\"token operator\">-</span> j<span class=\"token punctuation\">;</span>\n        size_t nodesize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>raxNode<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>postfixlen<span class=\"token operator\">+</span><span class=\"token function\">raxPadding</span><span class=\"token punctuation\">(</span>postfixlen<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>\n                          <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>raxNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>data <span class=\"token operator\">!=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> nodesize <span class=\"token operator\">+=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        raxNode <span class=\"token operator\">*</span>postfix <span class=\"token operator\">=</span> <span class=\"token function\">rax_malloc</span><span class=\"token punctuation\">(</span>nodesize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        nodesize <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>raxNode<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>j<span class=\"token operator\">+</span><span class=\"token function\">raxPadding</span><span class=\"token punctuation\">(</span>j<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>raxNode<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>iskey <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span>h<span class=\"token operator\">-></span>isnull<span class=\"token punctuation\">)</span> nodesize <span class=\"token operator\">+=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        raxNode <span class=\"token operator\">*</span>trimmed <span class=\"token operator\">=</span> <span class=\"token function\">rax_malloc</span><span class=\"token punctuation\">(</span>nodesize<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>postfix <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">||</span> trimmed <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">rax_free</span><span class=\"token punctuation\">(</span>postfix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">rax_free</span><span class=\"token punctuation\">(</span>trimmed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            errno <span class=\"token operator\">=</span> ENOMEM<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/* 1: Save next pointer. */</span>\n        raxNode <span class=\"token operator\">*</span><span class=\"token operator\">*</span>childfield <span class=\"token operator\">=</span> <span class=\"token function\">raxNodeLastChildPtr</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        raxNode <span class=\"token operator\">*</span>next<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>next<span class=\"token punctuation\">,</span>childfield<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* 2: Create the postfix node. */</span>\n        postfix<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> postfixlen<span class=\"token punctuation\">;</span>\n        postfix<span class=\"token operator\">-></span>iscompr <span class=\"token operator\">=</span> postfixlen <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        postfix<span class=\"token operator\">-></span>iskey <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        postfix<span class=\"token operator\">-></span>isnull <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>postfix<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span>h<span class=\"token operator\">-></span>data<span class=\"token operator\">+</span>j<span class=\"token punctuation\">,</span>postfixlen<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">raxSetData</span><span class=\"token punctuation\">(</span>postfix<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        raxNode <span class=\"token operator\">*</span><span class=\"token operator\">*</span>cp <span class=\"token operator\">=</span> <span class=\"token function\">raxNodeLastChildPtr</span><span class=\"token punctuation\">(</span>postfix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>next<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>next<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        rax<span class=\"token operator\">-></span>numnodes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* 3: Trim the compressed node. */</span>\n        trimmed<span class=\"token operator\">-></span>size <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n        trimmed<span class=\"token operator\">-></span>iscompr <span class=\"token operator\">=</span> j <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        trimmed<span class=\"token operator\">-></span>iskey <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        trimmed<span class=\"token operator\">-></span>isnull <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>trimmed<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span>h<span class=\"token operator\">-></span>data<span class=\"token punctuation\">,</span>j<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>parentlink<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>trimmed<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>trimmed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>iskey<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>aux <span class=\"token operator\">=</span> <span class=\"token function\">raxGetData</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token function\">raxSetData</span><span class=\"token punctuation\">(</span>trimmed<span class=\"token punctuation\">,</span>aux<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token comment\">/* Fix the trimmed node child pointer to point to\n         * the postfix node. */</span>\n        cp <span class=\"token operator\">=</span> <span class=\"token function\">raxNodeLastChildPtr</span><span class=\"token punctuation\">(</span>trimmed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>cp<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>postfix<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>postfix<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* Finish! We don't need to continue with the insertion\n         * algorithm for ALGO 2. The key is already inserted. */</span>\n        rax<span class=\"token operator\">-></span>numele<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">rax_free</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Key inserted. */</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">/* We walked the radix tree as far as we could, but still there are left\n     * chars in our string. We need to insert the missing nodes. */</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        raxNode <span class=\"token operator\">*</span>child<span class=\"token punctuation\">;</span>\n\n        <span class=\"token comment\">/* If this node is going to have a single child, and there\n         * are other characters, so that that would result in a chain\n         * of single-childed nodes, turn it into a compressed node. */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> len<span class=\"token operator\">-</span>i <span class=\"token operator\">></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debugf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inserting compressed node\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            size_t comprsize <span class=\"token operator\">=</span> len<span class=\"token operator\">-</span>i<span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>comprsize <span class=\"token operator\">></span> RAX_NODE_MAX_SIZE<span class=\"token punctuation\">)</span>\n                comprsize <span class=\"token operator\">=</span> RAX_NODE_MAX_SIZE<span class=\"token punctuation\">;</span>\n            raxNode <span class=\"token operator\">*</span>newh <span class=\"token operator\">=</span> <span class=\"token function\">raxCompressNode</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span>s<span class=\"token operator\">+</span>i<span class=\"token punctuation\">,</span>comprsize<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>child<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newh <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">goto</span> oom<span class=\"token punctuation\">;</span>\n            h <span class=\"token operator\">=</span> newh<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>parentlink<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            parentlink <span class=\"token operator\">=</span> <span class=\"token function\">raxNodeLastChildPtr</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            i <span class=\"token operator\">+=</span> comprsize<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token function\">debugf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Inserting normal node\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            raxNode <span class=\"token operator\">*</span><span class=\"token operator\">*</span>new_parentlink<span class=\"token punctuation\">;</span>\n            raxNode <span class=\"token operator\">*</span>newh <span class=\"token operator\">=</span> <span class=\"token function\">raxAddChild</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>child<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>new_parentlink<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newh <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">goto</span> oom<span class=\"token punctuation\">;</span>\n            h <span class=\"token operator\">=</span> newh<span class=\"token punctuation\">;</span>\n            <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>parentlink<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            parentlink <span class=\"token operator\">=</span> new_parentlink<span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n        rax<span class=\"token operator\">-></span>numnodes<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        h <span class=\"token operator\">=</span> child<span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    raxNode <span class=\"token operator\">*</span>newh <span class=\"token operator\">=</span> <span class=\"token function\">raxReallocForData</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>newh <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">goto</span> oom<span class=\"token punctuation\">;</span>\n    h <span class=\"token operator\">=</span> newh<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>h<span class=\"token operator\">-></span>iskey<span class=\"token punctuation\">)</span> rax<span class=\"token operator\">-></span>numele<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">raxSetData</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">,</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>parentlink<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Element inserted. */</span>\n\noom<span class=\"token operator\">:</span>\n    <span class=\"token comment\">/* This code path handles out of memory after part of the sub-tree was\n     * already modified. Set the node as a key, and then remove it. However we\n     * do that only if the node is a terminal node, otherwise if the OOM\n     * happened reallocating a node in the middle, we don't need to free\n     * anything. */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>size <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        h<span class=\"token operator\">-></span>isnull <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        h<span class=\"token operator\">-></span>iskey <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n        rax<span class=\"token operator\">-></span>numele<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Compensate the next remove. */</span>\n        <span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token function\">raxRemove</span><span class=\"token punctuation\">(</span>rax<span class=\"token punctuation\">,</span>s<span class=\"token punctuation\">,</span>i<span class=\"token punctuation\">,</span><span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    errno <span class=\"token operator\">=</span> ENOMEM<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Low level function用于walks the tree来查找长'len'的's'。\n * 如果返回值等于'len'，说明找到了's'对应的node（虽然可能node-&lt;iskey为0,\n * 或者是compressed node的中间，也就是'splitpos'非0）\n *\n * 如果返回值不等于'len', 说明有mismatch导致的early stop\n *\n * 如果传入的'stopnode'非NULL，结束时的节点会被存在'*stopnode'中。\n * 这个节点在parent中的link会存在'*plink' if not NULL. 如果结束在了\n * compressed node, '*splitpos'返回compressed node中搜索结束的位置\n * 从而方便得知应该在哪里进行分割。注意是这种情况，'*splitpos'永远为整数，\n * 为匹配到的最后的char之后的序号。\n *\n * 如果*splitpos为zero, 这意味着当前节点就是key (也就是, 不需要用任何compressed node\n * 中的char，parent已经对应完了). */</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> size_t <span class=\"token function\">raxLowWalk</span><span class=\"token punctuation\">(</span>rax <span class=\"token operator\">*</span>rax<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> raxNode <span class=\"token operator\">*</span><span class=\"token operator\">*</span>stopnode<span class=\"token punctuation\">,</span> raxNode <span class=\"token operator\">*</span><span class=\"token operator\">*</span><span class=\"token operator\">*</span>plink<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>splitpos<span class=\"token punctuation\">,</span> raxStack <span class=\"token operator\">*</span>ts<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    raxNode <span class=\"token operator\">*</span>h <span class=\"token operator\">=</span> rax<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span>\n    raxNode <span class=\"token operator\">*</span><span class=\"token operator\">*</span>parentlink <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>rax<span class=\"token operator\">-></span>head<span class=\"token punctuation\">;</span>\n\n    size_t i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Position in the string. */</span>\n    size_t j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Position in the node children (or bytes if compressed).*/</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>size <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">debugnode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lookup current node\"</span><span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>v <span class=\"token operator\">=</span> h<span class=\"token operator\">-></span>data<span class=\"token punctuation\">;</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>iscompr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> h<span class=\"token operator\">-></span>size <span class=\"token operator\">&amp;&amp;</span> i <span class=\"token operator\">&lt;</span> len<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">,</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">!=</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">!=</span> h<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 说明没匹配完</span>\n        <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token comment\">/* Even when h->size is large, linear scan provides good\n             * performances compared to other approaches that are in theory\n             * more sounding, like performing a binary search. */</span>\n            <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> j <span class=\"token operator\">&lt;</span> h<span class=\"token operator\">-></span>size<span class=\"token punctuation\">;</span> j<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v<span class=\"token punctuation\">[</span>j<span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> s<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            <span class=\"token punctuation\">}</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>j <span class=\"token operator\">==</span> h<span class=\"token operator\">-></span>size<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n            i<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">)</span> <span class=\"token function\">raxStackPush</span><span class=\"token punctuation\">(</span>ts<span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Save stack of parent nodes. */</span>\n        raxNode <span class=\"token operator\">*</span><span class=\"token operator\">*</span>children <span class=\"token operator\">=</span> <span class=\"token function\">raxNodeFirstChildPtr</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>h<span class=\"token operator\">-></span>iscompr<span class=\"token punctuation\">)</span> j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* Compressed node only child is at index 0. */</span>\n        <span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>h<span class=\"token punctuation\">,</span>children<span class=\"token operator\">+</span>j<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这里为啥不用等于</span>\n        parentlink <span class=\"token operator\">=</span> children<span class=\"token operator\">+</span>j<span class=\"token punctuation\">;</span>\n        j <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">/* If the new node is compressed and we do not\n                  iterate again (since i == l) set the split\n                  position to 0 to signal this node represents\n                  the searched key. */</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">debugnode</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"Lookup stop node is\"</span><span class=\"token punctuation\">,</span>h<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>stopnode<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>stopnode <span class=\"token operator\">=</span> h<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>plink<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>plink <span class=\"token operator\">=</span> parentlink<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>splitpos <span class=\"token operator\">&amp;&amp;</span> h<span class=\"token operator\">-></span>iscompr<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>splitpos <span class=\"token operator\">=</span> j<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> i<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">/* Return the pointer to the first child pointer. */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> raxNodeFirstChildPtr(n) ((raxNode**) ( \\\n    (n)->data + \\\n    (n)->size + \\\n    raxPadding((n)->size)))</span></code></pre></div>","frontmatter":{"title":"Redis源码阅读 —— 基数树","date":null,"tags":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/drafts/redis-source-code-reading-radis-tree/"}}}