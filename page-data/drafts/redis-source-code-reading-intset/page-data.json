{"componentChunkName":"component---src-templates-blog-post-js","path":"/drafts/redis-source-code-reading-intset/","webpackCompilationHash":"a5e4f8556e8086fddcf0","result":{"data":{"markdownRemark":{"html":"<p>今天来看一下整数集合结构的实现。这个结构主要位于<code class=\"language-text\">intset.h</code>和<code class=\"language-text\">intset.c</code>。</p>\n<h2>整数集合 (intset)</h2>\n<p>主要的数据结构很简单：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">intset</span> <span class=\"token punctuation\">{</span>\n    uint32_t encoding<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 记录编码模式</span>\n    uint32_t length<span class=\"token punctuation\">;</span>    <span class=\"token comment\">// 长度</span>\n    int8_t contents<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 存储的数据</span>\n<span class=\"token punctuation\">}</span> intset<span class=\"token punctuation\">;</span></code></pre></div>\n<p>虽然<code class=\"language-text\">contents</code>是<code class=\"language-text\">int8</code>但是不存储<code class=\"language-text\">int8</code>。<code class=\"language-text\">encoding</code>值为<code class=\"language-text\">INTSET_ENC_INT16</code>的时候存储的是<code class=\"language-text\">int16_t</code>，<code class=\"language-text\">encoding</code>为<code class=\"language-text\">INTSET_ENC_INT32</code>时存<code class=\"language-text\">int32_t</code>，同理，<code class=\"language-text\">INTSET_ENC_INT64</code>对应<code class=\"language-text\">int64_t</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* Note that these encodings are ordered, so:\n * INTSET_ENC_INT16 &lt; INTSET_ENC_INT32 &lt; INTSET_ENC_INT64. */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> INTSET_ENC_INT16 (sizeof(int16_t))</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> INTSET_ENC_INT32 (sizeof(int32_t))</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> INTSET_ENC_INT64 (sizeof(int64_t))</span></code></pre></div>\n<h3>升级</h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// intset.c</span>\n<span class=\"token comment\">/* Upgrades the intset to a larger encoding and inserts the given integer. */</span>\n<span class=\"token keyword\">static</span> intset <span class=\"token operator\">*</span><span class=\"token function\">intsetUpgradeAndAdd</span><span class=\"token punctuation\">(</span>intset <span class=\"token operator\">*</span>is<span class=\"token punctuation\">,</span> int64_t value<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    uint8_t curenc <span class=\"token operator\">=</span> <span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>is<span class=\"token operator\">-></span>encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    uint8_t newenc <span class=\"token operator\">=</span> <span class=\"token function\">_intsetValueEncoding</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> length <span class=\"token operator\">=</span> <span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>is<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> prepend <span class=\"token operator\">=</span> value <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span> <span class=\"token operator\">?</span> <span class=\"token number\">1</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* First set new encoding and resize */</span>\n    is<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> <span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>newenc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    is <span class=\"token operator\">=</span> <span class=\"token function\">intsetResize</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span><span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>is<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Upgrade back-to-front so we don't overwrite values.\n     * Note that the \"prepend\" variable is used to make sure we have an empty\n     * space at either the beginning or the end of the intset. */</span>\n    <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>length<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_intsetSet</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span>length<span class=\"token operator\">+</span>prepend<span class=\"token punctuation\">,</span><span class=\"token function\">_intsetGetEncoded</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span>length<span class=\"token punctuation\">,</span>curenc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Set the value at the beginning or the end. */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>prepend<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">_intsetSet</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token function\">_intsetSet</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span><span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>is<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    is<span class=\"token operator\">-></span>length <span class=\"token operator\">=</span> <span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span><span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>is<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>首先判断一下新的<code class=\"language-text\">encoding</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// intset.c</span>\n<span class=\"token comment\">/* Return the required encoding for the provided value. */</span>\n<span class=\"token keyword\">static</span> uint8_t <span class=\"token function\">_intsetValueEncoding</span><span class=\"token punctuation\">(</span>int64_t v<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">&lt;</span> INT32_MIN <span class=\"token operator\">||</span> v <span class=\"token operator\">></span> INT32_MAX<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> INTSET_ENC_INT64<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>v <span class=\"token operator\">&lt;</span> INT16_MIN <span class=\"token operator\">||</span> v <span class=\"token operator\">></span> INT16_MAX<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">return</span> INTSET_ENC_INT32<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">else</span>\n        <span class=\"token keyword\">return</span> INTSET_ENC_INT16<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>然后调用一下<code class=\"language-text\">intsetResize</code>，注意那里进行了<code class=\"language-text\">+1</code>是因为只有插入新元素的时候需要Upgrade，所以还要为新元素预留。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> intset <span class=\"token operator\">*</span><span class=\"token function\">intsetResize</span><span class=\"token punctuation\">(</span>intset <span class=\"token operator\">*</span>is<span class=\"token punctuation\">,</span> uint32_t len<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    uint32_t size <span class=\"token operator\">=</span> len<span class=\"token operator\">*</span><span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>is<span class=\"token operator\">-></span>encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    is <span class=\"token operator\">=</span> <span class=\"token function\">zrealloc</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>intset<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span>size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3><code class=\"language-text\">intsetNew</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// intset.c</span>\n<span class=\"token comment\">/* Create an empty intset. */</span>\nintset <span class=\"token operator\">*</span><span class=\"token function\">intsetNew</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    intset <span class=\"token operator\">*</span>is <span class=\"token operator\">=</span> <span class=\"token function\">zmalloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>intset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    is<span class=\"token operator\">-></span>encoding <span class=\"token operator\">=</span> <span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>INTSET_ENC_INT16<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    is<span class=\"token operator\">-></span>length <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<h3><code class=\"language-text\">intsetAdd</code></h3>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/* Insert an integer in the intset */</span>\nintset <span class=\"token operator\">*</span><span class=\"token function\">intsetAdd</span><span class=\"token punctuation\">(</span>intset <span class=\"token operator\">*</span>is<span class=\"token punctuation\">,</span> int64_t value<span class=\"token punctuation\">,</span> uint8_t <span class=\"token operator\">*</span>success<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    uint8_t valenc <span class=\"token operator\">=</span> <span class=\"token function\">_intsetValueEncoding</span><span class=\"token punctuation\">(</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    uint32_t pos<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>success <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">/* Upgrade encoding if necessary. If we need to upgrade, we know that\n     * this value should be either appended (if > 0) or prepended (if &lt; 0),\n     * because it lies outside the range of existing values. */</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>valenc <span class=\"token operator\">></span> <span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>is<span class=\"token operator\">-></span>encoding<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* This always succeeds, so we don't need to curry *success. */</span>\n        <span class=\"token keyword\">return</span> <span class=\"token function\">intsetUpgradeAndAdd</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">/* Abort if the value is already present in the set.\n         * This call will populate \"pos\" with the right position to insert\n         * the value when it cannot be found. */</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">intsetSearch</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">,</span><span class=\"token operator\">&amp;</span>pos<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>success<span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span>success <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n        <span class=\"token punctuation\">}</span>\n\n        is <span class=\"token operator\">=</span> <span class=\"token function\">intsetResize</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span><span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>is<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pos <span class=\"token operator\">&lt;</span> <span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>is<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token function\">intsetMoveTail</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">,</span>pos<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token function\">_intsetSet</span><span class=\"token punctuation\">(</span>is<span class=\"token punctuation\">,</span>pos<span class=\"token punctuation\">,</span>value<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    is<span class=\"token operator\">-></span>length <span class=\"token operator\">=</span> <span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span><span class=\"token function\">intrev32ifbe</span><span class=\"token punctuation\">(</span>is<span class=\"token operator\">-></span>length<span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span> is<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","frontmatter":{"title":"Redis源码阅读 —— 整数集合","date":null,"tags":null}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/drafts/redis-source-code-reading-intset/"}}}