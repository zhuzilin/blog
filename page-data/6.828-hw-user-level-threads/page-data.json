{"componentChunkName":"component---src-templates-blog-post-js","path":"/6.828-hw-user-level-threads/","webpackCompilationHash":"33fe87ef523f76924f80","result":{"data":{"markdownRemark":{"html":"<p>本次作业会处理一个简单的用户的thread包，用于实现context switching.</p>\n<h2>Switching threads</h2>\n<p>下载<code class=\"language-text\">uthread.c</code>和<code class=\"language-text\">uthread_switch.S</code>，然后修改xv6的<code class=\"language-text\">Makefile</code></p>\n<p>需要写的代码在<code class=\"language-text\">uthread_switch.S</code>里。</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">\t.text\n\n/* Switch from current_thread to next_thread. Make next_thread\n * the current_thread, and set next_thread to 0.\n * Use eax as a temporary register; it is caller saved.\n */\n\t.globl thread_switch\nthread_switch:\n\t/* YOUR CODE HERE */\n\t# right now, the stack pointer points at stack of current_thread\n\tpushal  # save all registers\n\t# switch to next_thread\n\tmovl next_thread, %eax\n\tmovl %eax, current_thread\n\tmovl $0, next_thread\n\tmovl (%eax), %esp  # load stack address of next_thread\n\tpopal\n\tret\t\t\t\t/* pop return address from stack */</code></pre></div>\n<p>注意这里面的使用了<code class=\"language-text\">uthread.c</code>中的结构：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">thread</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span>        sp<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* saved stack pointer */</span>\n  <span class=\"token keyword\">char</span> stack<span class=\"token punctuation\">[</span>STACK_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* the thread's stack */</span>\n  <span class=\"token keyword\">int</span>        state<span class=\"token punctuation\">;</span>             <span class=\"token comment\">/* FREE, RUNNING, RUNNABLE */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p><code class=\"language-text\">next_thread</code>和<code class=\"language-text\">current_thread</code>都是<code class=\"language-text\">struct thread *</code>。然后一个stack的结构在<code class=\"language-text\">thread_create()</code>函数中体现了：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span> \n<span class=\"token function\">thread_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  thread_p t<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">=</span> all_thread<span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> all_thread <span class=\"token operator\">+</span> MAX_THREAD<span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> FREE<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  t<span class=\"token operator\">-></span>sp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>stack <span class=\"token operator\">+</span> STACK_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// set sp to the top of the stack</span>\n  t<span class=\"token operator\">-></span>sp <span class=\"token operator\">-=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>                              <span class=\"token comment\">// space for return address</span>\n  <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>func<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// push return address on stack</span>\n  t<span class=\"token operator\">-></span>sp <span class=\"token operator\">-=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>                             <span class=\"token comment\">// space for registers that thread_switch expects</span>\n  t<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNABLE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>也就是最上面是32byte用于<code class=\"language-text\">pushal</code>和<code class=\"language-text\">popal</code>，再上面就是线程对应的函数。</p>\n<p>然后就运行就好了，注意运行的时候要加上<code class=\"language-text\">CPUS=1</code></p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> CPUS<span class=\"token operator\">=</span>1 qemu-nox\nqemu-system-i386 -nographic -drive file<span class=\"token operator\">=</span>fs.img,index<span class=\"token operator\">=</span>1,media<span class=\"token operator\">=</span>disk,format<span class=\"token operator\">=</span>raw -drive file<span class=\"token operator\">=</span>xv6.img,index<span class=\"token operator\">=</span>0,media<span class=\"token operator\">=</span>disk,format<span class=\"token operator\">=</span>raw -smp 1 -m 512\nxv6<span class=\"token punctuation\">..</span>.\ncpu0: starting 0\nsb: size 1000 nblocks 941 ninodes 200 nlog 30 logstart 2 inodestart 32 bmap start 58\ninit: starting sh\n$ uthread\nmy thread running\nmy thread 0x2DC8\nmy thread running\nmy thread 0x4DD0\nmy thread running\n<span class=\"token punctuation\">..</span>.</code></pre></div>\n<p>这次的作业相当于补全了一个用户的thread库。这个库都体现在了<code class=\"language-text\">uthread.c</code>中，为了之后查找方便，列在下面：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"types.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"stat.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"user.h\"</span></span>\n\n<span class=\"token comment\">/* Possible states of a thread; */</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> FREE        0x0</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> RUNNING     0x1</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> RUNNABLE    0x2</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STACK_SIZE  8192</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MAX_THREAD  4</span>\n\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">thread</span> thread_t<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>thread_p<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">typedef</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">mutex</span> mutex_t<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>mutex_p<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">thread</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span>        sp<span class=\"token punctuation\">;</span>                <span class=\"token comment\">/* saved stack pointer */</span>\n  <span class=\"token keyword\">char</span> stack<span class=\"token punctuation\">[</span>STACK_SIZE<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">/* the thread's stack */</span>\n  <span class=\"token keyword\">int</span>        state<span class=\"token punctuation\">;</span>             <span class=\"token comment\">/* FREE, RUNNING, RUNNABLE */</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">static</span> thread_t all_thread<span class=\"token punctuation\">[</span>MAX_THREAD<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nthread_p  current_thread<span class=\"token punctuation\">;</span>\nthread_p  next_thread<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">thread_switch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span> \n<span class=\"token function\">thread_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// main() is thread 0, which will make the first invocation to</span>\n  <span class=\"token comment\">// thread_schedule().  it needs a stack so that the first thread_switch() can</span>\n  <span class=\"token comment\">// save thread 0's state.  thread_schedule() won't run the main thread ever</span>\n  <span class=\"token comment\">// again, because its state is set to RUNNING, and thread_schedule() selects</span>\n  <span class=\"token comment\">// a RUNNABLE thread.</span>\n  current_thread <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>all_thread<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  current_thread<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNING<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> \n<span class=\"token function\">thread_schedule</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  thread_p t<span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* Find another runnable thread. */</span>\n  next_thread <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">=</span> all_thread<span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> all_thread <span class=\"token operator\">+</span> MAX_THREAD<span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> RUNNABLE <span class=\"token operator\">&amp;&amp;</span> t <span class=\"token operator\">!=</span> current_thread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      next_thread <span class=\"token operator\">=</span> t<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">>=</span> all_thread <span class=\"token operator\">+</span> MAX_THREAD <span class=\"token operator\">&amp;&amp;</span> current_thread<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> RUNNABLE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">/* The current thread is the only runnable thread; run it. */</span>\n    next_thread <span class=\"token operator\">=</span> current_thread<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>next_thread <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">2</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"thread_schedule: no runnable threads\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>current_thread <span class=\"token operator\">!=</span> next_thread<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>         <span class=\"token comment\">/* switch threads?  */</span>\n    next_thread<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNING<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">thread_switch</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span>\n    next_thread <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> \n<span class=\"token function\">thread_create</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  thread_p t<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>t <span class=\"token operator\">=</span> all_thread<span class=\"token punctuation\">;</span> t <span class=\"token operator\">&lt;</span> all_thread <span class=\"token operator\">+</span> MAX_THREAD<span class=\"token punctuation\">;</span> t<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> FREE<span class=\"token punctuation\">)</span> <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  t<span class=\"token operator\">-></span>sp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>stack <span class=\"token operator\">+</span> STACK_SIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// set sp to the top of the stack</span>\n  t<span class=\"token operator\">-></span>sp <span class=\"token operator\">-=</span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>                              <span class=\"token comment\">// space for return address</span>\n  <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>t<span class=\"token operator\">-></span>sp<span class=\"token punctuation\">)</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>func<span class=\"token punctuation\">;</span>           <span class=\"token comment\">// push return address on stack</span>\n  t<span class=\"token operator\">-></span>sp <span class=\"token operator\">-=</span> <span class=\"token number\">32</span><span class=\"token punctuation\">;</span>                             <span class=\"token comment\">// space for registers that thread_switch expects</span>\n  t<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNABLE<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> \n<span class=\"token function\">thread_yield</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  current_thread<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNABLE<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">thread_schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> \n<span class=\"token function\">mythread</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"my thread running\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">100</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"my thread 0x%x\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span> current_thread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">thread_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">printf</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"my thread: exit\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  current_thread<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> FREE<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">thread_schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n\n<span class=\"token keyword\">int</span> \n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span> \n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">thread_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">thread_create</span><span class=\"token punctuation\">(</span>mythread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">thread_create</span><span class=\"token punctuation\">(</span>mythread<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">thread_schedule</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>相当于是thread主动进行yield来进行切换。</p>","frontmatter":{"title":"6.828 Homework User-Level thread","date":"2019-03-25T11:46:00.000Z","tags":["OS","6.828"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/6.828-hw-user-level-threads/"}}}