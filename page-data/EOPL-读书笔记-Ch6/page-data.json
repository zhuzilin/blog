{"componentChunkName":"component---src-templates-blog-post-js","path":"/EOPL-读书笔记-Ch6/","result":{"data":{"markdownRemark":{"html":"<p>继续看 EOPL。</p>\n<h2>Ch6 Continuation-Passing Style</h2>\n<p>在 Ch5，我们通过重写解释器，把所有的函数都改为了 tail call，从而保证在任何时间，解释器的 control context 都是有限的。我们将这种情况称为 iterative control behavior。我们通过传入 continuation 为了参数来实现的这一特性，这种编程方式被称为 continuation-passing style（CPS）。</p>\n<p>本章将搭建一套把任意程序转化为迭代性的方法，也是将程序转化为 continuation-passing style。</p>\n<h3>6.1 Writing Programs in Continuation-Passing Style</h3>\n<p>考虑 Ch5 最初提到的 <code class=\"language-text\">fact</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span></span><span class=\"token punctuation\">)</span></span>\n  \t<span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">zero</span>? n<span class=\"token punctuation\">)</span> <span class=\"token number\">1</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> n <span class=\"token punctuation\">(</span><span class=\"token car\">fact</span> <span class=\"token punctuation\">(</span><span class=\"token car\">-</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>一个 CPS 的写法会是：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span></span><span class=\"token punctuation\">)</span></span>\n  \t<span class=\"token punctuation\">(</span><span class=\"token car\">fact/k</span> n <span class=\"token punctuation\">(</span><span class=\"token car\">end-cont</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact/k\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">zero</span>? n<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> cont <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">fact/k</span> <span class=\"token punctuation\">(</span><span class=\"token car\">-</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">fact1-cont</span> n cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>其中：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">end-cont</span><span class=\"token punctuation\">)</span> val<span class=\"token punctuation\">)</span> = val\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">fact1-cont</span> n cont<span class=\"token punctuation\">)</span> val<span class=\"token punctuation\">)</span>\n= <span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> cont <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> n val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>我们可以用如下的方法定义 continuation 和 <code class=\"language-text\">apply-cont</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define-datatype</span> continuation continuation?\n  <span class=\"token punctuation\">(</span><span class=\"token car\">end-cont</span><span class=\"token punctuation\">)</span>\n  <span class=\"token punctuation\">(</span><span class=\"token car\">fact1-cont</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">n</span> integer?<span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">cont</span> continuation?<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> apply-cont\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">cont</span> <span class=\"token argument variable\">val</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">cases</span> continuation cont\n      <span class=\"token punctuation\">(</span><span class=\"token car\">end-cont</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> val<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">fact1-cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">saved-n</span> saved-cont<span class=\"token punctuation\">)</span>\n      \t<span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> saved-cont <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> saved-n val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>我们也可以在这种实现上做不同的变换，例如 registerize（应该是和 5.3 里面的方法对应，我还没看...），或者 trampoline，见书中图 6.1 和图 6.2。不过本章更关心的是 procedural representation，在这种情况下，应该实现为：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> end-cont\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"></span><span class=\"token punctuation\">)</span></span>\n  \t<span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">val</span></span><span class=\"token punctuation\">)</span></span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact1-cont\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span> <span class=\"token argument variable\">saved-cont</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">val</span></span><span class=\"token punctuation\">)</span></span>\n    \t<span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> saved-cont <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> n val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> apply-cont\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">cont</span> <span class=\"token argument variable\">val</span></span><span class=\"token punctuation\">)</span></span>\n  \t<span class=\"token punctuation\">(</span><span class=\"token car\">cont</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>根据 procedural representation，我们还可以更进一步，把原程序中的 <code class=\"language-text\">(apply-cont cont val)</code> 直接写成 <code class=\"language-text\">(cont val)</code>，这个过程称为 inline。inline 后，<code class=\"language-text\">fact</code> 变成了：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span></span><span class=\"token punctuation\">)</span></span>\n  \t<span class=\"token punctuation\">(</span><span class=\"token car\">fact/k</span> n <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">val</span></span><span class=\"token punctuation\">)</span></span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact/k\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">zero</span>? n<span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">cont</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">fact/k</span> <span class=\"token punctuation\">(</span><span class=\"token car\">-</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">val</span></span><span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">(</span><span class=\"token car\">cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> n val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>我们可以这么理解 <code class=\"language-text\">fact/k</code>：</p>\n<blockquote>\n<p>If <code class=\"language-text\">n</code> is zero, send <code class=\"language-text\">1</code> to the continuation. Otherwise, evaluate <code class=\"language-text\">fact</code> of <code class=\"language-text\">n−1</code> in a continuation that calls the result val, and then sends to the continuation the value <code class=\"language-text\">(* n val)</code>.</p>\n</blockquote>\n<p>我们还可以对 <code class=\"language-text\">fib</code> 进行类似的变换，这里就不记录了。一个更明显的例子如下，从：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">x</span></span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">zero</span>? x<span class=\"token punctuation\">)</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">=</span> x <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">f</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">=</span> x <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">+</span> <span class=\"token number\">22</span> <span class=\"token punctuation\">(</span><span class=\"token car\">f</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">=</span> x <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">g</span> <span class=\"token number\">22</span> <span class=\"token punctuation\">(</span><span class=\"token car\">f</span> x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">=</span> x <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">+</span> <span class=\"token punctuation\">(</span><span class=\"token car\">f</span> x<span class=\"token punctuation\">)</span> <span class=\"token number\">33</span> <span class=\"token punctuation\">(</span><span class=\"token car\">g</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">else</span> <span class=\"token punctuation\">(</span><span class=\"token car\">h</span> <span class=\"token punctuation\">(</span><span class=\"token car\">f</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">-</span> <span class=\"token number\">44</span> y<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">g</span> y<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>转化为：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">x</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n  <span class=\"token punctuation\">(</span><span class=\"token keyword\">cond</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">zero</span>? x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">cont</span> <span class=\"token number\">17</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">=</span> x <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">f</span> x cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">=</span> x <span class=\"token number\">2</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">f</span> x <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">v1</span></span><span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">(</span><span class=\"token car\">cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">+</span> <span class=\"token number\">22</span> v1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">=</span> x <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">f</span> x <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">v1</span></span><span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">(</span><span class=\"token car\">g</span> <span class=\"token number\">22</span> v1 cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">=</span> x <span class=\"token number\">4</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">f</span> x <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">v1</span></span><span class=\"token punctuation\">)</span></span>\n                    <span class=\"token punctuation\">(</span><span class=\"token car\">g</span> y <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">v2</span></span><span class=\"token punctuation\">)</span></span>\n                      <span class=\"token punctuation\">(</span><span class=\"token car\">cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">+</span> v1 <span class=\"token number\">33</span> v2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">else</span> <span class=\"token punctuation\">(</span><span class=\"token car\">f</span> x <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">v1</span></span><span class=\"token punctuation\">)</span></span>\n                 <span class=\"token punctuation\">(</span><span class=\"token car\">g</span> y <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">v2</span></span><span class=\"token punctuation\">)</span></span>\n                   <span class=\"token punctuation\">(</span><span class=\"token car\">h</span> v1 <span class=\"token punctuation\">(</span><span class=\"token car\">-</span> <span class=\"token number\">44</span> y<span class=\"token punctuation\">)</span> v2 cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>经过归纳，我们得到了如下的方法：</p>\n<ul>\n<li><strong>The CPS Recipe</strong></li>\n</ul>\n<p>To convert a program to continuation-passing style</p>\n<ol>\n<li>Pass each procedure an extra parameter (typically <code class=\"language-text\">cont</code> or <code class=\"language-text\">k</code>).</li>\n<li>Whenever the procedure returns a constant or variable, return that value to the continuation instead, as we did with <code class=\"language-text\">(cont 17)</code> above.</li>\n<li>Whenever a procedure call occurs in a tail position, call the procedure with the same continuation <code class=\"language-text\">cont</code>.</li>\n<li>Whenever a procedure call occurs in an operand position, evaluate the procedure call in a new continuation that gives a name to the result and continues with the computation.</li>\n</ol>\n<p>有的时候，我们可以找到更好的表达方式，例如回到 <code class=\"language-text\">fact</code> 的 continuation：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> end-cont\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"></span><span class=\"token punctuation\">)</span></span>\n  \t<span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">val</span></span><span class=\"token punctuation\">)</span></span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact1-cont\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n  \t<span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">val</span></span><span class=\"token punctuation\">)</span></span> <span class=\"token punctuation\">(</span><span class=\"token car\">cont</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> n val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> apply-cont\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">cont</span> <span class=\"token argument variable\">val</span></span><span class=\"token punctuation\">)</span></span>\n  \t<span class=\"token punctuation\">(</span><span class=\"token car\">cont</span> val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>我们可以观察到所有的 continuation 都是在结果上乘个数，所以可以转化为：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> end-cont\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"></span><span class=\"token punctuation\">)</span></span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact1-cont\n\t<span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n  \t<span class=\"token punctuation\">(</span><span class=\"token car\">*</span> cont n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> apply-cont\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">cont</span> <span class=\"token argument variable\">val</span></span><span class=\"token punctuation\">)</span></span>\n  \t<span class=\"token punctuation\">(</span><span class=\"token car\">*</span> cont val<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>从而把 <code class=\"language-text\">fact</code> 转化为了：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span></span><span class=\"token punctuation\">)</span></span>\n  \t<span class=\"token punctuation\">(</span><span class=\"token car\">fact/k</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> fact/k\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">n</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">zero</span>? n<span class=\"token punctuation\">)</span>\n      cont\n      <span class=\"token punctuation\">(</span><span class=\"token car\">fact/k</span> <span class=\"token punctuation\">(</span><span class=\"token car\">-</span> n <span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">*</span> cont n<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这和很久之前提到过的 <code class=\"language-text\">fact-iter</code> 是相同的。所以我们可以意识到，accumulator 实际上就是 continuation 的一种表示形式。很多经典优化方法实际上也是这个思路。</p>\n<h3>6.2 Tail Form</h3>\n<p>为了转化为 CPS，我们选择了类似于 LETREC 的语言，称为 CPS-IN，其语法如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">Program :<span class=\"token lisp-property property\">:=</span> InpExp\n\t\t\t\t\t\ta-program <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span><span class=\"token punctuation\">)</span>\nInpExp :<span class=\"token lisp-property property\">:=</span> Number\n\t\t\t\t\t const-exp <span class=\"token punctuation\">(</span><span class=\"token car\">num</span><span class=\"token punctuation\">)</span>\nInpExp :<span class=\"token lisp-property property\">:=</span> -<span class=\"token punctuation\">(</span><span class=\"token car\">InpExp</span> , InpExp<span class=\"token punctuation\">)</span>\n\t\t\t\t\t diff-exp <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span> exp2<span class=\"token punctuation\">)</span>\nInpExp :<span class=\"token lisp-property property\">:=</span> zero?<span class=\"token punctuation\">(</span><span class=\"token car\">InpExp</span><span class=\"token punctuation\">)</span>\n\t\t\t\t\t zero?-exp <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span><span class=\"token punctuation\">)</span>\nInpExp :<span class=\"token lisp-property property\">:=</span> if InpExp then InpExp else InpExp\n\t\t\t\t\t if-exp <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span> exp2 exp3<span class=\"token punctuation\">)</span>\nInpExp :<span class=\"token lisp-property property\">:=</span> Identifier\n\t\t\t\t\t var-exp <span class=\"token punctuation\">(</span><span class=\"token car\">var</span><span class=\"token punctuation\">)</span>\nInpExp :<span class=\"token lisp-property property\">:=</span> let Identifier = InpExp in InpExp\n\t\t\t\t\t let-exp <span class=\"token punctuation\">(</span><span class=\"token car\">var</span> exp1 body<span class=\"token punctuation\">)</span>\nInpExp :<span class=\"token lisp-property property\">:=</span> letrec {Identifier <span class=\"token punctuation\">(</span><span class=\"token car\">{Identifier}</span>∗<span class=\"token punctuation\">(</span>,<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> = InpExp}∗ in InpExp\n\t\t\t\t\t letrec-exp <span class=\"token punctuation\">(</span><span class=\"token car\">p-names</span> b-varss p-bodies letrec-body<span class=\"token punctuation\">)</span>\nInpExp :<span class=\"token lisp-property property\">:=</span> proc <span class=\"token punctuation\">(</span><span class=\"token car\">{Identifier}</span>∗<span class=\"token punctuation\">(</span>,<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> InpExp\n\t\t\t\t\t proc-exp <span class=\"token punctuation\">(</span><span class=\"token car\">vars</span> body<span class=\"token punctuation\">)</span>\nInpExp :<span class=\"token lisp-property property\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token car\">InpExp</span> {InpExp}∗<span class=\"token punctuation\">)</span>\n\t\t\t\t\t call-exp <span class=\"token punctuation\">(</span><span class=\"token car\">rator</span> rands<span class=\"token punctuation\">)</span></code></pre></div>\n<p>对于 CPS 来说，区分 Operand position 和 Tail position 是非常重要的。下面就是 CPS-IN 语言中不同位置的意义：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token comment\">; O 表示 operand，T 表示 tail</span>\nzero?<span class=\"token punctuation\">(</span><span class=\"token car\">O</span><span class=\"token punctuation\">)</span>\n-<span class=\"token punctuation\">(</span><span class=\"token car\">O</span>, O<span class=\"token punctuation\">)</span>\nif O then T else T\nlet Var = O in T\nletrec {Var <span class=\"token punctuation\">(</span><span class=\"token car\">{Var}</span>∗<span class=\"token punctuation\">(</span>,<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> = T}∗ in T\nproc <span class=\"token punctuation\">(</span><span class=\"token car\">{Var}</span> ∗ <span class=\"token punctuation\">(</span>,<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> T\n<span class=\"token punctuation\">(</span><span class=\"token car\">O</span> O <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> <span class=\"token punctuation\">.</span> O <span class=\"token punctuation\">)</span></code></pre></div>\n<p>我们根据这种特点制作 CPS-OUT。CPS-OUT 的语言为 CPS-IN 的子集，但是用的是不同的语法：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">Program :<span class=\"token lisp-property property\">:=</span> TfExp\n            a-program <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span><span class=\"token punctuation\">)</span>\nSimpleExp :<span class=\"token lisp-property property\">:=</span> Number\n              const-exp <span class=\"token punctuation\">(</span><span class=\"token car\">num</span><span class=\"token punctuation\">)</span>\nSimpleExp :<span class=\"token lisp-property property\">:=</span> Identifier\n              var-exp <span class=\"token punctuation\">(</span><span class=\"token car\">var</span><span class=\"token punctuation\">)</span>\nSimpleExp :<span class=\"token lisp-property property\">:=</span> -<span class=\"token punctuation\">(</span><span class=\"token car\">SimpleExp</span> , SimpleExp<span class=\"token punctuation\">)</span>\n              cps-diff-exp <span class=\"token punctuation\">(</span><span class=\"token car\">simple1</span> simple2<span class=\"token punctuation\">)</span>\nSimpleExp :<span class=\"token lisp-property property\">:=</span> zero?<span class=\"token punctuation\">(</span><span class=\"token car\">SimpleExp</span><span class=\"token punctuation\">)</span>\n              cps-zero?-exp <span class=\"token punctuation\">(</span><span class=\"token car\">simple1</span><span class=\"token punctuation\">)</span>\nSimpleExp :<span class=\"token lisp-property property\">:=</span> proc <span class=\"token punctuation\">(</span><span class=\"token car\">{Identifier}</span>∗<span class=\"token punctuation\">)</span> TfExp\n              cps-proc-exp <span class=\"token punctuation\">(</span><span class=\"token car\">vars</span> body<span class=\"token punctuation\">)</span>\nTfExp :<span class=\"token lisp-property property\">:=</span> SimpleExp\n          simple-exp->exp <span class=\"token punctuation\">(</span><span class=\"token car\">simple-exp1</span><span class=\"token punctuation\">)</span>\nTfExp :<span class=\"token lisp-property property\">:=</span> let Identifier = SimpleExp in TfExp\n          cps-let-exp <span class=\"token punctuation\">(</span><span class=\"token car\">var</span> simple1 body<span class=\"token punctuation\">)</span>\nTfExp :<span class=\"token lisp-property property\">:=</span> letrec {Identifier <span class=\"token punctuation\">(</span><span class=\"token car\">{Identifier}</span>∗<span class=\"token punctuation\">(</span>,<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> = TfExp}∗ in TfExp\n          cps-letrec-exp <span class=\"token punctuation\">(</span><span class=\"token car\">p-names</span> b-varss p-bodies body<span class=\"token punctuation\">)</span>\nTfExp :<span class=\"token lisp-property property\">:=</span> if SimpleExp then TfExp else TfExp\n          cps-if-exp <span class=\"token punctuation\">(</span><span class=\"token car\">simple1</span> body1 body2<span class=\"token punctuation\">)</span>\nTfExp :<span class=\"token lisp-property property\">:=</span> <span class=\"token punctuation\">(</span><span class=\"token car\">SimpleExp</span> {SimpleExp}∗<span class=\"token punctuation\">)</span>\n          cps-call-exp <span class=\"token punctuation\">(</span><span class=\"token car\">rator</span> rands<span class=\"token punctuation\">)</span></code></pre></div>\n<p>从上面的语法可以看出，CPS-OUT 有两种 nonterminal，<code class=\"language-text\">SimpleExp</code> 和 <code class=\"language-text\">TfExp</code>。其中 <code class=\"language-text\">SimpleExp</code> 中不包含任何函数调用，从而使 <code class=\"language-text\">TfExp</code> 中只有 tail call。</p>\n<p>CPS-OUT 的解释器如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\"><span class=\"token comment\">; value-of/k : TfExp × Env × Cont → FinalAnswer</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> value-of/k\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">exp</span> <span class=\"token argument variable\">env</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">cases</span> tfexp exp\n      <span class=\"token punctuation\">(</span><span class=\"token car\">simple-exp->exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">simple</span><span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">apply-cont</span> cont\n        \t<span class=\"token punctuation\">(</span><span class=\"token car\">value-of-simple-exp</span> simple env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">let-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">var</span> rhs body<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">val</span> <span class=\"token punctuation\">(</span><span class=\"token car\">value-of-simple-exp</span> rhs env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> body\n            <span class=\"token punctuation\">(</span><span class=\"token car\">extend-env</span> <span class=\"token punctuation\">(</span><span class=\"token car\">list</span> var<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token car\">list</span> val<span class=\"token punctuation\">)</span> env<span class=\"token punctuation\">)</span>\n            cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">letrec-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">p-names</span> b-varss p-bodies letrec-body<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> letrec-body\n          <span class=\"token punctuation\">(</span><span class=\"token car\">extend-env-rec**</span> p-names b-varss p-bodies env<span class=\"token punctuation\">)</span>\n          cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">if-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">simple1</span> body1 body2<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token car\">expval->bool</span> <span class=\"token punctuation\">(</span><span class=\"token car\">value-of-simple-exp</span> simple1 env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> body1 env cont<span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> body2 env cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n      <span class=\"token punctuation\">(</span><span class=\"token car\">call-exp</span> <span class=\"token punctuation\">(</span><span class=\"token car\">rator</span> rands<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token keyword\">let</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token car\">rator-proc</span>\n          \t\t\t<span class=\"token punctuation\">(</span><span class=\"token car\">expval->proc</span> <span class=\"token punctuation\">(</span><span class=\"token car\">value-of-simple-exp</span> rator env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          \t\t<span class=\"token punctuation\">(</span><span class=\"token car\">rand-vals</span>\n                <span class=\"token punctuation\">(</span><span class=\"token car\">map</span>\n                  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">simple</span></span><span class=\"token punctuation\">)</span></span>\n                  \t<span class=\"token punctuation\">(</span><span class=\"token car\">value-of-simple-exp</span> simple env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                  rands<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n          <span class=\"token punctuation\">(</span><span class=\"token car\">apply-procedure/k</span> rator-proc rand-vals cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\n<span class=\"token comment\">; apply-procedure : Proc × ExpVal → ExpVal</span>\n<span class=\"token punctuation\">(</span><span class=\"token car\">define</span> apply-procedure/k\n  <span class=\"token punctuation\">(</span><span class=\"token lambda\"><span class=\"token keyword\">lambda</span> <span class=\"token punctuation\">(</span><span class=\"token arguments\"><span class=\"token argument variable\">proc1</span> <span class=\"token argument variable\">args</span> <span class=\"token argument variable\">cont</span></span><span class=\"token punctuation\">)</span></span>\n    <span class=\"token punctuation\">(</span><span class=\"token car\">cases</span> proc proc1\n      <span class=\"token punctuation\">(</span><span class=\"token car\">procedure</span> <span class=\"token punctuation\">(</span><span class=\"token car\">vars</span> body saved-env<span class=\"token punctuation\">)</span>\n        <span class=\"token punctuation\">(</span><span class=\"token car\">value-of/k</span> body\n          <span class=\"token punctuation\">(</span><span class=\"token car\">extend-env*</span> vars args saved-env<span class=\"token punctuation\">)</span>\n          cont<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>这其中的 <code class=\"language-text\">value-of-simple-exp</code> 是不需要函数调用就能计算的。</p>\n<p>（不明白的一点是，CPS-OUT 不就不能对两个 <code class=\"language-text\">TfExp</code> 做 <code class=\"language-text\">diff</code> 或者 <code class=\"language-text\">zero?</code> 了吗？？？）</p>\n<p>重要的一点是，这个函数没有引入任何新的 continuation，所以我们可以简单的把这个参数删掉。</p>\n<h3>6.3 Converting to Continuation-Passing Style</h3>\n<p>这一节我们将介绍该如何把 CPS-IN 中的算法转化为 CPS-OUT。</p>\n<h3>6.4 Modeling Computational Effects</h3>\n<p>CPS 的另一个重要应用是能显示展示 computational effect。</p>\n<p>在 CPS 中，我们认为一个 simple expression 是没有 effect 的，原因是 simple expression 里面没有函数调用，而函数调用可能不会 terminate（自然也就是有可能引发 effect）。</p>\n<p>本节我们重点研究 3 种 effect：printing, a store (using the explicit reference model) 以及 nonstandard control flow。</p>\n<p>首先是 print。我们在 CPS-IN 同加入：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">InpExp :<span class=\"token lisp-property property\">:=</span> print <span class=\"token punctuation\">(</span><span class=\"token car\">InpExp</span><span class=\"token punctuation\">)</span>\n           print-exp <span class=\"token punctuation\">(</span><span class=\"token car\">exp1</span><span class=\"token punctuation\">)</span></code></pre></div>\n<p>然后在 CPS-OUT 中加入 <code class=\"language-text\">printk</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"lisp\"><pre class=\"language-lisp\"><code class=\"language-lisp\">TfExp :<span class=\"token lisp-property property\">:=</span> printk <span class=\"token punctuation\">(</span><span class=\"token car\">SimpleExp</span><span class=\"token punctuation\">)</span> <span class=\"token comment\">; TfExp</span>\n\t\t\t\t\tcps-printk-exp <span class=\"token punctuation\">(</span><span class=\"token car\">simple-exp1</span> body<span class=\"token punctuation\">)</span></code></pre></div>\n<p>因为会有 effect，所以 <code class=\"language-text\">printk</code> 必须是 <code class=\"language-text\">TfExp</code> 而非 <code class=\"language-text\">SimpleExp</code>，并且只能出现在 tail position。</p>","frontmatter":{"title":"EOPL 读书笔记 Ch6","date":"2021-05-06T23:30:00.000Z","tags":["PL"]}}},"pageContext":{"slug":"/EOPL-读书笔记-Ch6/"}},"staticQueryHashes":["3159585216"]}