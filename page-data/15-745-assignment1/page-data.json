{"componentChunkName":"component---src-templates-blog-post-js","path":"/15-745-assignment1/","webpackCompilationHash":"5e8a56000f330ee4e5bc","result":{"data":{"markdownRemark":{"html":"<h2>1 Introduction</h2>\n<p>讲作业应该怎么交的，跳过</p>\n<h2>2 LLVM project</h2>\n<h2>2.1 Obtaining the System Image</h2>\n<p>安装virtualbox 5.2以及对应版本的增强功能。</p>\n<p>从<a href=\"http://www.cs.cmu.edu/~15745/vm-images/15745-S19Lubuntu.ova%E4%B8%8B%E8%BD%BD%E4%BD%9C%E4%B8%9A%E9%9C%80%E8%A6%81%E7%9A%84image%E5%B9%B6%E6%8A%8A%E7%9B%B8%E5%85%B3%E4%BB%A3%E7%A0%81%E6%94%BE%E5%9C%A8%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E9%87%8C%E3%80%82%E6%B3%A8%E6%84%8F%E5%A6%82%E6%9E%9C%E8%A6%81%E4%BD%BF%E7%94%A8%E5%85%B1%E4%BA%AB%E6%96%87%E4%BB%B6%E5%A4%B9%E3%80%81%E5%85%B1%E4%BA%AB%E7%B2%98%E8%B4%B4%E6%9D%BF%E4%B9%8B%E7%B1%BB%E7%9A%84%E5%8A%9F%E8%83%BD%E9%9C%80%E8%A6%81%E5%AE%89%E8%A3%85virtualbox%E7%9A%84%E5%A2%9E%E5%BC%BA%E5%8A%9F%E8%83%BD%E3%80%82\">http://www.cs.cmu.edu/~15745/vm-images/15745-S19Lubuntu.ova下载作业需要的image并把相关代码放在共享文件夹里。注意如果要使用共享文件夹、共享粘贴板之类的功能需要安装virtualbox的增强功能。</a></p>\n<h2>2.2 Create a Pass</h2>\n<p>把<code class=\"language-text\">loop.c</code>复制到<code class=\"language-text\">FunctionInfo/loop.c</code>，并将其编译为LLVM bytecode object (<code class=\"language-text\">loop.bc</code>)</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">clang -O -emit-llvm -c loop.c \nllvm-dis loop.bc  <span class=\"token comment\"># Generate disassembly of LLVM bytecode</span></code></pre></div>\n<p>The original code <code class=\"language-text\">loop.c</code> is:</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> g<span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">int</span> g_incr <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  g <span class=\"token operator\">+=</span> c<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> g<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> loop <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> a<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> b<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> ret <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> a<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> b<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n   g_incr <span class=\"token punctuation\">(</span>c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> ret <span class=\"token operator\">+</span> g<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>编译好的<code class=\"language-text\">loop.ll</code>文件如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">; ModuleID = &#39;loop.bc&#39;\nsource_filename = &quot;loop.c&quot;\ntarget datalayout = &quot;e-m:e-p:32:32-f64:32:64-f80:32-n8:16:32-S128&quot;\ntarget triple = &quot;i686-pc-linux-gnu&quot;\n\n@g = common local_unnamed_addr global i32 0, align 4\n\n; Function Attrs: norecurse nounwind\ndefine i32 @g_incr(i32 %c) local_unnamed_addr #0 {\nentry:\n  %0 = load i32, i32* @g, align 4, !tbaa !3\n  %add = add nsw i32 %0, %c\n  store i32 %add, i32* @g, align 4, !tbaa !3\n  ret i32 %add\n}\n\n; Function Attrs: norecurse nounwind\ndefine i32 @loop(i32 %a, i32 %b, i32 %c) local_unnamed_addr #0 {\nentry:\n  %cmp4 = icmp sgt i32 %b, %a\n  %0 = load i32, i32* @g, align 4, !tbaa !3\n  br i1 %cmp4, label %for.body.lr.ph, label %for.end\n\nfor.body.lr.ph:                                   ; preds = %entry\n  %1 = sub i32 %b, %a\n  %2 = mul i32 %1, %c\n  %3 = add i32 %0, %2\n  store i32 %3, i32* @g, align 4, !tbaa !3\n  br label %for.end\n\nfor.end:                                          ; preds = %for.body.lr.ph, %entry\n  %.lcssa = phi i32 [ %3, %for.body.lr.ph ], [ %0, %entry ]\n  ret i32 %.lcssa\n}\n\nattributes #0 = { norecurse nounwind &quot;correctly-rounded-divide-sqrt-fp-math&quot;=&quot;false&quot; &quot;disable-tail-calls&quot;=&quot;false&quot; &quot;less-precise-fpmad&quot;=&quot;false&quot; &quot;no-frame-pointer-elim&quot;=&quot;false&quot; &quot;no-infs-fp-math&quot;=&quot;false&quot; &quot;no-jump-tables&quot;=&quot;false&quot; &quot;no-nans-fp-math&quot;=&quot;false&quot; &quot;no-signed-zeros-fp-math&quot;=&quot;false&quot; &quot;no-trapping-math&quot;=&quot;false&quot; &quot;stack-protector-buffer-size&quot;=&quot;8&quot; &quot;target-cpu&quot;=&quot;pentium4&quot; &quot;target-features&quot;=&quot;+fxsr,+mmx,+sse,+sse2,+x87&quot; &quot;unsafe-fp-math&quot;=&quot;false&quot; &quot;use-soft-float&quot;=&quot;false&quot; }\n\n!llvm.module.flags = !{!0, !1}\n!llvm.ident = !{!2}\n\n!0 = !{i32 1, !&quot;NumRegisterParameters&quot;, i32 0}\n!1 = !{i32 1, !&quot;wchar_size&quot;, i32 4}\n!2 = !{!&quot;clang version 5.0.1 (tags/RELEASE_501/final)&quot;}\n!3 = !{!4, !4, i64 0}\n!4 = !{!&quot;int&quot;, !5, i64 0}\n!5 = !{!&quot;omnipotent char&quot;, !6, i64 0}\n!6 = !{!&quot;Simple C/C++ TBAA&quot;}</code></pre></div>\n<p>然后运行<code class=\"language-text\">FunctionInfo</code> pass,</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>  <span class=\"token comment\"># to create FunctionInfo.so</span>\n$ opt -load ./FunctionInfo.so -function-info loop.bc -o out\n15745 Function Information Pass</code></pre></div>\n<p>注意这里的<code class=\"language-text\">-function-info</code>是通过<code class=\"language-text\">FunctionInfo.cpp</code>中的这一行注册的：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token keyword\">static</span> RegisterPass<span class=\"token operator\">&lt;</span>FunctionInfo<span class=\"token operator\">></span> <span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function-info\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"15745: Function Information\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>2.3 Analysis Passes</h2>\n<h3>2.3.1 Function Information</h3>\n<p>下面我们需要修改<code class=\"language-text\">FunctionInfo.cpp</code>了，在此之前，需要先学一下llvm中怎么写一个pass。因为作业使用的是llvm 5.0，所以可以看<a href=\"https://releases.llvm.org/5.0.1/docs/WritingAnLLVMPass.html\">这里</a>。了解了<code class=\"language-text\">FunctionPass</code>的简单内容，就可以来写代码了。这部分就是要输出函数的基本信息，还是很简单的。代码如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 15-745 S18 Assignment 1: FunctionInfo.cpp</span>\n<span class=\"token comment\">// Group:</span>\n<span class=\"token comment\">////////////////////////////////////////////////////////////////////////////////</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Pass.h\"</span>  </span><span class=\"token comment\">// for writing a pass</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/Function.h\"</span>  </span><span class=\"token comment\">// we are operating on Function</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/InstVisitor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Support/raw_ostream.h\"</span>  </span><span class=\"token comment\">// for some printing</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> llvm<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// use a anonymous namespace to make variables only visible here</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">FunctionInfo</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> FunctionPass <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// for now, know that FunctionPass operates on a function at a time</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> ID<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// declare pass identifier used by LLVM to identify pass</span>\n    <span class=\"token function\">FunctionInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">FunctionPass</span><span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">FunctionInfo</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// We don't modify the program, so we preserve all analyses</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getAnalysisUsage</span><span class=\"token punctuation\">(</span>AnalysisUsage <span class=\"token operator\">&amp;</span>AU<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> override <span class=\"token punctuation\">{</span>\n      AU<span class=\"token punctuation\">.</span><span class=\"token function\">setPreservesAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Do some initialization</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">doInitialization</span><span class=\"token punctuation\">(</span>Module <span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span> override <span class=\"token punctuation\">{</span>\n      <span class=\"token comment\">// errs() &lt;&lt; \"15745 Function Information Pass\\n\"; // TODO: remove this.</span>\n      <span class=\"token function\">outs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Name,\\tArgs,\\tCalls,\\tBlocks,\\tInsns\\n\"</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Print output for each function</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">runOnFunction</span><span class=\"token punctuation\">(</span>Function <span class=\"token operator\">&amp;</span>F<span class=\"token punctuation\">)</span> override <span class=\"token punctuation\">{</span>\n      std<span class=\"token operator\">::</span>string name <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      std<span class=\"token operator\">::</span>string args <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span><span class=\"token function\">isVarArg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> <span class=\"token string\">\"*\"</span> <span class=\"token operator\">:</span> std<span class=\"token operator\">::</span><span class=\"token function\">to_string</span><span class=\"token punctuation\">(</span>F<span class=\"token punctuation\">.</span><span class=\"token function\">arg_size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">uint64_t</span> calls <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span><span class=\"token function\">getEntryCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">hasValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">?</span> F<span class=\"token punctuation\">.</span><span class=\"token function\">getEntryCount</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      size_t blocks <span class=\"token operator\">=</span> F<span class=\"token punctuation\">.</span><span class=\"token function\">getBasicBlockList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      size_t instructions <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock <span class=\"token operator\">&amp;</span>BB <span class=\"token operator\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        instructions <span class=\"token operator\">+=</span> BB<span class=\"token punctuation\">.</span><span class=\"token function\">getInstList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">size</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n\n      <span class=\"token function\">outs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> name <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> args <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> calls <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> blocks <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\",\\t\"</span> <span class=\"token operator\">&lt;&lt;</span> instructions <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// LLVM uses the address of this static member to identify the pass, so the</span>\n<span class=\"token comment\">// initialization value is unimportant.</span>\n<span class=\"token keyword\">char</span> FunctionInfo<span class=\"token operator\">::</span>ID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// the 4 arguments means:</span>\n<span class=\"token comment\">// 1: command line argument</span>\n<span class=\"token comment\">// 2: name</span>\n<span class=\"token comment\">// 3: if a pass walks CFG without modifying it then the third argument is set to true;</span>\n<span class=\"token comment\">// 4: if a pass is an analysis pass, for example dominator tree pass, then true is supplied as the fourth argument.</span>\n<span class=\"token keyword\">static</span> RegisterPass<span class=\"token operator\">&lt;</span>FunctionInfo<span class=\"token operator\">></span> <span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"function-info\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"15745: Function Information\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>之后输出如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span>\n$ opt -load ./FunctionInfo.so -function-info loop.bc -o out\nName,\tArgs,\tCalls,\tBlocks,\tInsns\ng_incr,\t1,\t0,\t1,\t4\nloop,\t3,\t0,\t3,\t10</code></pre></div>\n<h3>2.3.2 Local Optimization</h3>\n<p>写过简单的pass之后，我们来进行优化。</p>\n<p>首先需要看龙书的8.5.4 The Use of Algebraic Identities。这里主要提了3种代码优化方式：</p>\n<ul>\n<li>algebraic identity: 就是<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>+</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">+0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">+</span><span class=\"mord\">0</span></span></span></span>， <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>−</mo><mn>0</mn></mrow><annotation encoding=\"application/x-tex\">-0</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">−</span><span class=\"mord\">0</span></span></span></span>， <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>∗</mo><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">*1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">∗</span><span class=\"mord\">1</span></span></span></span>， <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi mathvariant=\"normal\">/</mi><mn>1</mn></mrow><annotation encoding=\"application/x-tex\">/1</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord\">/</span><span class=\"mord\">1</span></span></span></span>这样可以省略的优化。</li>\n<li>strength reduction: 把贵的运算转变为便宜的，比如把<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><msup><mi>x</mi><mn>2</mn></msup></mrow><annotation encoding=\"application/x-tex\">x^2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.8141079999999999em;vertical-align:0em;\"></span><span class=\"mord\"><span class=\"mord mathdefault\">x</span><span class=\"msupsub\"><span class=\"vlist-t\"><span class=\"vlist-r\"><span class=\"vlist\" style=\"height:0.8141079999999999em;\"><span style=\"top:-3.063em;margin-right:0.05em;\"><span class=\"pstrut\" style=\"height:2.7em;\"></span><span class=\"sizing reset-size6 size3 mtight\"><span class=\"mord mtight\">2</span></span></span></span></span></span></span></span></span></span></span>变为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>∗</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x*x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.46528em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">∗</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>，<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mn>2</mn><mo>×</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">2\\times x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.72777em;vertical-align:-0.08333em;\"></span><span class=\"mord\">2</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>变为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>+</mo><mi>x</mi></mrow><annotation encoding=\"application/x-tex\">x+x</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">+</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.43056em;vertical-align:0em;\"></span><span class=\"mord mathdefault\">x</span></span></span></span>, <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mi mathvariant=\"normal\">/</mi><mn>2</mn></mrow><annotation encoding=\"application/x-tex\">x/2</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:1em;vertical-align:-0.25em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mord\">/</span><span class=\"mord\">2</span></span></span></span>变为<span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mi>x</mi><mo>×</mo><mn>0.5</mn></mrow><annotation encoding=\"application/x-tex\">x\\times0.5</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.66666em;vertical-align:-0.08333em;\"></span><span class=\"mord mathdefault\">x</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span><span class=\"mbin\">×</span><span class=\"mspace\" style=\"margin-right:0.2222222222222222em;\"></span></span><span class=\"base\"><span class=\"strut\" style=\"height:0.64444em;vertical-align:0em;\"></span><span class=\"mord\">0</span><span class=\"mord\">.</span><span class=\"mord\">5</span></span></span></span></li>\n<li>constant folding: 把常数预先计算出来。</li>\n</ul>\n<p>实现如下：</p>\n<div class=\"gatsby-highlight\" data-language=\"cpp\"><pre class=\"language-cpp\"><code class=\"language-cpp\"><span class=\"token comment\">// 15-745 S18 Assignment 1: LocalOpts.cpp</span>\n<span class=\"token comment\">// Group:</span>\n<span class=\"token comment\">////////////////////////////////////////////////////////////////////////////////</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Pass.h\"</span>  </span><span class=\"token comment\">// for writing a pass</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/Function.h\"</span>  </span><span class=\"token comment\">// we are operating on Function</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/InstVisitor.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/Constants.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/Instructions.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/IR/InstrTypes.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Support/raw_ostream.h\"</span>  </span><span class=\"token comment\">// for some printing</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">\"llvm/Transforms/Utils/BasicBlockUtils.h\"</span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;iostream></span></span>\n\n<span class=\"token keyword\">using</span> <span class=\"token keyword\">namespace</span> llvm<span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">namespace</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// use a anonymous namespace to make variables only visible here</span>\n  <span class=\"token keyword\">class</span> <span class=\"token class-name\">LocalOpts</span> <span class=\"token operator\">:</span> <span class=\"token keyword\">public</span> FunctionPass <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// for now, know that FunctionPass operates on a function at a time</span>\n  <span class=\"token keyword\">public</span><span class=\"token operator\">:</span>\n    <span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> ID<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// declare pass identifier used by LLVM to identify pass</span>\n    <span class=\"token function\">LocalOpts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">:</span> <span class=\"token function\">FunctionPass</span><span class=\"token punctuation\">(</span>ID<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n    <span class=\"token operator\">~</span><span class=\"token function\">LocalOpts</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// We don't modify the program, so we preserve all analyses</span>\n    <span class=\"token keyword\">void</span> <span class=\"token function\">getAnalysisUsage</span><span class=\"token punctuation\">(</span>AnalysisUsage <span class=\"token operator\">&amp;</span>AU<span class=\"token punctuation\">)</span> <span class=\"token keyword\">const</span> override <span class=\"token punctuation\">{</span>\n      AU<span class=\"token punctuation\">.</span><span class=\"token function\">setPreservesAll</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Do some initialization</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">doInitialization</span><span class=\"token punctuation\">(</span>Module <span class=\"token operator\">&amp;</span>M<span class=\"token punctuation\">)</span> override <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"15745 Local Optimization Pass\\n\"</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// TODO: remove this.</span>\n\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Print output for each function</span>\n    <span class=\"token keyword\">bool</span> <span class=\"token function\">runOnFunction</span><span class=\"token punctuation\">(</span>Function <span class=\"token operator\">&amp;</span>F<span class=\"token punctuation\">)</span> override <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">errs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Function \"</span> <span class=\"token operator\">&lt;&lt;</span> F<span class=\"token punctuation\">.</span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> numAlgIdentity <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> numConstFold <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">int</span> numStrengthRed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">outs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"before: \"</span> <span class=\"token operator\">&lt;&lt;</span> F <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock <span class=\"token operator\">&amp;</span>BB <span class=\"token operator\">:</span> F<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>BasicBlock<span class=\"token operator\">::</span>iterator iter <span class=\"token operator\">=</span> BB<span class=\"token punctuation\">.</span><span class=\"token function\">begin</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> iter <span class=\"token operator\">!=</span> BB<span class=\"token punctuation\">.</span><span class=\"token function\">end</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token operator\">++</span>iter<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n          <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>BinaryOperator<span class=\"token operator\">*</span> binaryI <span class=\"token operator\">=</span> dyn_cast<span class=\"token operator\">&lt;</span>BinaryOperator<span class=\"token operator\">></span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>iter<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n            Value<span class=\"token operator\">*</span> left <span class=\"token operator\">=</span> binaryI<span class=\"token operator\">-></span><span class=\"token function\">getOperand</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            Value<span class=\"token operator\">*</span> right <span class=\"token operator\">=</span> binaryI<span class=\"token operator\">-></span><span class=\"token function\">getOperand</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ConstantInt<span class=\"token operator\">*</span> constIntA <span class=\"token operator\">=</span> dyn_cast<span class=\"token operator\">&lt;</span>ConstantInt<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            ConstantInt<span class=\"token operator\">*</span> constIntB <span class=\"token operator\">=</span> dyn_cast<span class=\"token operator\">&lt;</span>ConstantInt<span class=\"token operator\">></span><span class=\"token punctuation\">(</span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n            <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constIntA <span class=\"token operator\">&amp;&amp;</span> constIntB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// constant fold</span>\n              <span class=\"token keyword\">const</span> APInt<span class=\"token operator\">&amp;</span> constIntValA <span class=\"token operator\">=</span> constIntA<span class=\"token operator\">-></span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">const</span> APInt<span class=\"token operator\">&amp;</span> constIntValB <span class=\"token operator\">=</span> constIntB<span class=\"token operator\">-></span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n              ConstantInt<span class=\"token operator\">*</span> evalConst <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>binaryI<span class=\"token operator\">-></span><span class=\"token function\">getOpcode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>Add<span class=\"token operator\">:</span>\n                  evalConst <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>constIntA<span class=\"token operator\">-></span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> constIntValA <span class=\"token operator\">+</span> constIntValB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>Sub<span class=\"token operator\">:</span>\n                  evalConst <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>constIntA<span class=\"token operator\">-></span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> constIntValA <span class=\"token operator\">-</span> constIntValB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>Mul<span class=\"token operator\">:</span>\n                  evalConst <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>constIntA<span class=\"token operator\">-></span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> constIntValA <span class=\"token operator\">*</span> constIntValB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>SDiv<span class=\"token operator\">:</span>\n                  evalConst <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>constIntA<span class=\"token operator\">-></span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> constIntValA<span class=\"token punctuation\">.</span><span class=\"token function\">sdiv</span><span class=\"token punctuation\">(</span>constIntValB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>UDiv<span class=\"token operator\">:</span>\n                  evalConst <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>constIntA<span class=\"token operator\">-></span><span class=\"token function\">getContext</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> constIntValA<span class=\"token punctuation\">.</span><span class=\"token function\">udiv</span><span class=\"token punctuation\">(</span>constIntValB<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                  <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>evalConst<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token function\">outs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Constant Fold: \"</span> <span class=\"token operator\">&lt;&lt;</span> binaryI<span class=\"token operator\">-></span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> \\\n                       <span class=\"token operator\">&lt;&lt;</span> constIntValA<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> <span class=\"token operator\">&lt;&lt;</span> constIntValB<span class=\"token punctuation\">.</span><span class=\"token function\">toString</span><span class=\"token punctuation\">(</span><span class=\"token number\">10</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n                <span class=\"token function\">ReplaceInstWithValue</span><span class=\"token punctuation\">(</span>BB<span class=\"token punctuation\">.</span><span class=\"token function\">getInstList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">,</span> evalConst<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                <span class=\"token operator\">--</span>iter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this is crucial!!!</span>\n                numConstFold<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// algebraic identity</span>\n              ConstantInt<span class=\"token operator\">*</span> constTerm <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n              Value<span class=\"token operator\">*</span> otherTerm <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n              Value<span class=\"token operator\">*</span> eval <span class=\"token operator\">=</span> <span class=\"token keyword\">nullptr</span><span class=\"token punctuation\">;</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constIntA<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                constTerm <span class=\"token operator\">=</span> constIntA<span class=\"token punctuation\">;</span>\n                otherTerm <span class=\"token operator\">=</span> right<span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constIntB<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                constTerm <span class=\"token operator\">=</span> constIntB<span class=\"token punctuation\">;</span>\n                otherTerm <span class=\"token operator\">=</span> left<span class=\"token punctuation\">;</span>\n              <span class=\"token punctuation\">}</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constTerm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>binaryI<span class=\"token operator\">-></span><span class=\"token function\">getOpcode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>Add<span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constTerm<span class=\"token operator\">-></span><span class=\"token function\">isZero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                      eval <span class=\"token operator\">=</span> otherTerm<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>Sub<span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constIntA <span class=\"token operator\">&amp;&amp;</span> constIntA<span class=\"token operator\">-></span><span class=\"token function\">isZero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                      eval <span class=\"token operator\">=</span> constIntB<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>Mul<span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constTerm<span class=\"token operator\">-></span><span class=\"token function\">isOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                      eval <span class=\"token operator\">=</span> otherTerm<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constTerm<span class=\"token operator\">-></span><span class=\"token function\">isZero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                      eval <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>constTerm<span class=\"token operator\">-></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constTerm<span class=\"token operator\">-></span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPowerOf2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// strength reduction</span>\n                      <span class=\"token keyword\">const</span> <span class=\"token keyword\">int64_t</span> constIntVal <span class=\"token operator\">=</span> constTerm<span class=\"token operator\">-></span><span class=\"token function\">getSExtValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      Value<span class=\"token operator\">*</span> shiftVal <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>constTerm<span class=\"token operator\">-></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>constIntVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token function\">ReplaceInstWithInst</span><span class=\"token punctuation\">(</span>BB<span class=\"token punctuation\">.</span><span class=\"token function\">getInstList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">,</span> BinaryOperator<span class=\"token operator\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Instruction<span class=\"token operator\">::</span>Shl<span class=\"token punctuation\">,</span> otherTerm<span class=\"token punctuation\">,</span> shiftVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      iter<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                      numStrengthRed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>SDiv<span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constIntB <span class=\"token operator\">&amp;&amp;</span> constIntB<span class=\"token operator\">-></span><span class=\"token function\">isOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                      eval <span class=\"token operator\">=</span> constIntA<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constIntA <span class=\"token operator\">&amp;&amp;</span> constIntA<span class=\"token operator\">-></span><span class=\"token function\">isZero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                      eval <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>constTerm<span class=\"token operator\">-></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constTerm<span class=\"token operator\">-></span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPowerOf2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// strength reduction</span>\n                      <span class=\"token keyword\">const</span> <span class=\"token keyword\">int64_t</span> constIntVal <span class=\"token operator\">=</span> constTerm<span class=\"token operator\">-></span><span class=\"token function\">getSExtValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      Value<span class=\"token operator\">*</span> shiftVal <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>constTerm<span class=\"token operator\">-></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>constIntVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token function\">ReplaceInstWithInst</span><span class=\"token punctuation\">(</span>BB<span class=\"token punctuation\">.</span><span class=\"token function\">getInstList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">,</span> BinaryOperator<span class=\"token operator\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Instruction<span class=\"token operator\">::</span>AShr<span class=\"token punctuation\">,</span> otherTerm<span class=\"token punctuation\">,</span> shiftVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      iter<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                      numStrengthRed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>UDiv<span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constIntB <span class=\"token operator\">&amp;&amp;</span> constIntB<span class=\"token operator\">-></span><span class=\"token function\">isOne</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                      eval <span class=\"token operator\">=</span> constIntA<span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constIntA <span class=\"token operator\">&amp;&amp;</span> constIntA<span class=\"token operator\">-></span><span class=\"token function\">isZero</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n                      eval <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>constTerm<span class=\"token operator\">-></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>constTerm<span class=\"token operator\">-></span><span class=\"token function\">getValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">.</span><span class=\"token function\">isPowerOf2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// strength reduction</span>\n                      <span class=\"token keyword\">const</span> <span class=\"token keyword\">int64_t</span> constIntVal <span class=\"token operator\">=</span> constTerm<span class=\"token operator\">-></span><span class=\"token function\">getSExtValue</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      Value<span class=\"token operator\">*</span> shiftVal <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>constTerm<span class=\"token operator\">-></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">log2</span><span class=\"token punctuation\">(</span>constIntVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      <span class=\"token function\">ReplaceInstWithInst</span><span class=\"token punctuation\">(</span>BB<span class=\"token punctuation\">.</span><span class=\"token function\">getInstList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">,</span> BinaryOperator<span class=\"token operator\">::</span><span class=\"token function\">Create</span><span class=\"token punctuation\">(</span>Instruction<span class=\"token operator\">::</span>LShr<span class=\"token punctuation\">,</span> otherTerm<span class=\"token punctuation\">,</span> shiftVal<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                      iter<span class=\"token operator\">--</span><span class=\"token punctuation\">;</span>\n                      numStrengthRed<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token punctuation\">}</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n                <span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>binaryI<span class=\"token operator\">-></span><span class=\"token function\">getOpcode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>Sub<span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span>\n                      eval <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>SDiv<span class=\"token operator\">:</span>\n                  <span class=\"token keyword\">case</span> Instruction<span class=\"token operator\">::</span>UDiv<span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>left <span class=\"token operator\">==</span> right<span class=\"token punctuation\">)</span>\n                      eval <span class=\"token operator\">=</span> ConstantInt<span class=\"token operator\">::</span><span class=\"token function\">get</span><span class=\"token punctuation\">(</span>left<span class=\"token operator\">-></span><span class=\"token function\">getType</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">true</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n                    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n              <span class=\"token punctuation\">}</span>\n              <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>eval<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n                  <span class=\"token function\">outs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Algebraic Identity: \"</span> <span class=\"token operator\">&lt;&lt;</span> binaryI<span class=\"token operator\">-></span><span class=\"token function\">getName</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\" \"</span> \\\n                        <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token function\">ReplaceInstWithValue</span><span class=\"token punctuation\">(</span>BB<span class=\"token punctuation\">.</span><span class=\"token function\">getInstList</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> iter<span class=\"token punctuation\">,</span> eval<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n                  <span class=\"token operator\">--</span>iter<span class=\"token punctuation\">;</span> <span class=\"token comment\">// this is crucial!!!</span>\n                  numAlgIdentity<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n                <span class=\"token punctuation\">}</span>\n            <span class=\"token punctuation\">}</span>\n          <span class=\"token punctuation\">}</span>\n        <span class=\"token punctuation\">}</span>\n      <span class=\"token punctuation\">}</span>\n      <span class=\"token function\">outs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"after: \"</span> <span class=\"token operator\">&lt;&lt;</span> F <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">outs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">outs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"Transformations applied:\\n\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">outs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  Algebraic identities: \"</span> <span class=\"token operator\">&lt;&lt;</span> numAlgIdentity <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">outs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  Constant folding: \"</span> <span class=\"token operator\">&lt;&lt;</span> numConstFold <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">outs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"  Stength reduction: \"</span> <span class=\"token operator\">&lt;&lt;</span> numStrengthRed <span class=\"token operator\">&lt;&lt;</span> <span class=\"token string\">\"\\n\"</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// LLVM uses the address of this static member to identify the pass, so the</span>\n<span class=\"token comment\">// initialization value is unimportant.</span>\n<span class=\"token keyword\">char</span> LocalOpts<span class=\"token operator\">::</span>ID <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token comment\">// the 4 arguments means:</span>\n<span class=\"token comment\">// 1: command line argument</span>\n<span class=\"token comment\">// 2: name</span>\n<span class=\"token comment\">// 3: if a pass walks CFG without modifying it then the third argument is set to true;</span>\n<span class=\"token comment\">// 4: if a pass is an analysis pass, for example dominator tree pass, then true is supplied as the fourth argument.</span>\n<span class=\"token keyword\">static</span> RegisterPass<span class=\"token operator\">&lt;</span>LocalOpts<span class=\"token operator\">></span> <span class=\"token function\">X</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"local-opts\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"15745: Local Optimization\"</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">,</span> <span class=\"token boolean\">false</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>3 Homework Questions</h2>\n<h2>3.1 CFG Basics</h2>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">--------B1--------\n\tx = 50\n\ty = 8\n\tz = 234\n--------B2--------\nL1: if (x &lt; z) { goto L2 }\n--------B3--------\n\tx = x + 1\n\tgoto L1\n--------B4--------\nL2: y = 89\n--------B5--------\n\tif (z &gt; x) { goto L3 }\n--------B6--------\n\tz = 65\n\treturn z\n--------B7--------\nL3: y = x + 1\n\tif (z &lt; x) { goto L4 }\n--------B8--------\n\tx = 25\n--------B9--------\nL4: y = x + z\n\tswitch (y) { 334: goto L5 | default: goto L6 }\n--------B10-------\nL5: print(&quot;failure&quot;)\nL6: y = 65\n\treturn y</code></pre></div>\n<h2>3.2 Available Expressions</h2>\n<p><img src=\"https://i.imgur.com/mPg6Nqb.png\" alt=\"figure2\"></p>\n<table>\n<thead>\n<tr>\n<th>BB</th>\n<th>GEN</th>\n<th>KILL</th>\n<th>IN</th>\n<th>OUT</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>1</td>\n<td>c+d, b*d</td>\n<td></td>\n<td></td>\n<td>c+d, b*d</td>\n</tr>\n<tr>\n<td>2</td>\n<td>e+b, c+a</td>\n<td>c+d</td>\n<td>c+d, b*d</td>\n<td>e+b, c+a, b*d</td>\n</tr>\n<tr>\n<td>3</td>\n<td>b+a, a+d</td>\n<td>e+b, c+a</td>\n<td>e+b, c+a, b*d</td>\n<td>b+a, a+d, b*d</td>\n</tr>\n<tr>\n<td>4</td>\n<td>c*c, b+d</td>\n<td></td>\n<td>e+b, c+a, b*d</td>\n<td>c*c, b+d, e+b, c+a, b*d</td>\n</tr>\n<tr>\n<td>5</td>\n<td>i+2</td>\n<td></td>\n<td>c*c, b+d, e+b, c+a, b*d, b+a, a+d</td>\n<td>c*c, b+d, e+b, c+a, b*d, b+a, a+d, i+2</td>\n</tr>\n</tbody>\n</table>","frontmatter":{"title":"15-745 spring 2019 assigment1","date":"2019-10-16T12:16:00.000Z","tags":["compiler","llvm","15-745"]}}},"pageContext":{"isCreatedByStatefulCreatePages":false,"slug":"/15-745-assignment1/"}}}