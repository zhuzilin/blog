{"expireTime":9007200818315814000,"key":"transformer-remark-markdown-html-ast-b2cb3ef8295fb15dbc0c797a6998790d-gatsby-remark-katexgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这里会记录阅读6.828课程lecture note的我的个人笔记。可能会中英混杂，不是很适合外人阅读，也请见谅。","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":58,"offset":58}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":58,"offset":58}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Lecture 10: Processes, threads, and scheduling","position":{"start":{"line":4,"column":4,"offset":63},"end":{"line":4,"column":50,"offset":109}}}],"position":{"start":{"line":4,"column":1,"offset":60},"end":{"line":4,"column":50,"offset":109}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"之前的一次作业基本上都是阅读代码和回答问题，所以就不单独列出来了。本讲的内容非常建议按照要求先阅读xv6-book的对应部分。","position":{"start":{"line":6,"column":1,"offset":111},"end":{"line":6,"column":64,"offset":174}}}],"position":{"start":{"line":6,"column":1,"offset":111},"end":{"line":6,"column":64,"offset":174}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Process scheduling","position":{"start":{"line":8,"column":5,"offset":180},"end":{"line":8,"column":23,"offset":198}}}],"position":{"start":{"line":8,"column":1,"offset":176},"end":{"line":8,"column":23,"offset":198}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"什么是进程：","position":{"start":{"line":10,"column":1,"offset":200},"end":{"line":10,"column":7,"offset":206}}}],"position":{"start":{"line":10,"column":1,"offset":200},"end":{"line":10,"column":7,"offset":206}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"进程是an abstract virtual machine，仿佛其有自己的CPU和内存，并不受其他进程影响。主要是为了isolation。","position":{"start":{"line":12,"column":1,"offset":208},"end":{"line":12,"column":71,"offset":278}}}],"position":{"start":{"line":12,"column":1,"offset":208},"end":{"line":12,"column":71,"offset":278}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"进程的主要API有：","position":{"start":{"line":14,"column":1,"offset":280},"end":{"line":14,"column":11,"offset":290}}}],"position":{"start":{"line":14,"column":1,"offset":280},"end":{"line":14,"column":11,"offset":290}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  fork\n  exec\n  exit\n  wait\n  kill\n  sbrk\n  getpid</code></pre></div>","position":{"start":{"line":16,"column":1,"offset":292},"end":{"line":24,"column":4,"offset":351}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们的挑战是很多时候，进程数比内核数多。这个时候我们就要用名叫time-sharing（分时）的方法，伴随以scheduling和context switch。","position":{"start":{"line":26,"column":1,"offset":353},"end":{"line":26,"column":81,"offset":433}}}],"position":{"start":{"line":26,"column":1,"offset":353},"end":{"line":26,"column":81,"offset":433}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们的主要目标是：","position":{"start":{"line":28,"column":1,"offset":435},"end":{"line":28,"column":10,"offset":444}}}],"position":{"start":{"line":28,"column":1,"offset":435},"end":{"line":28,"column":10,"offset":444}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"transparent to user processes (kernel对于用户应用不可见)","position":{"start":{"line":30,"column":3,"offset":448},"end":{"line":30,"column":50,"offset":495}}}],"position":{"start":{"line":30,"column":1,"offset":446},"end":{"line":30,"column":50,"offset":495}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"pre-emptive for user processes","position":{"start":{"line":31,"column":3,"offset":498},"end":{"line":31,"column":33,"offset":528}}}],"position":{"start":{"line":31,"column":1,"offset":496},"end":{"line":31,"column":33,"offset":528}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"pre-emptive for kernel (帮助系统作响应)","position":{"start":{"line":32,"column":3,"offset":531},"end":{"line":32,"column":35,"offset":563}}}],"position":{"start":{"line":32,"column":1,"offset":529},"end":{"line":32,"column":35,"offset":563}}},{"type":"text","value":"\n"}],"position":{"start":{"line":30,"column":1,"offset":446},"end":{"line":32,"column":35,"offset":563}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"xv6的解决方案是每个进程1个 user thread，1个kernel thread，每个处理器1个scheduler thread","position":{"start":{"line":34,"column":1,"offset":565},"end":{"line":34,"column":68,"offset":632}}}],"position":{"start":{"line":34,"column":1,"offset":565},"end":{"line":34,"column":68,"offset":632}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"什么是线程：","position":{"start":{"line":36,"column":1,"offset":634},"end":{"line":36,"column":7,"offset":640}}}],"position":{"start":{"line":36,"column":1,"offset":634},"end":{"line":36,"column":7,"offset":640}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"a CPU core executing (with register and stack)","position":{"start":{"line":38,"column":3,"offset":644},"end":{"line":38,"column":49,"offset":690}}}],"position":{"start":{"line":38,"column":1,"offset":642},"end":{"line":38,"column":49,"offset":690}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"a saved set of registers and a stack that could execute","position":{"start":{"line":39,"column":3,"offset":693},"end":{"line":39,"column":58,"offset":748}}}],"position":{"start":{"line":39,"column":1,"offset":691},"end":{"line":39,"column":58,"offset":748}}},{"type":"text","value":"\n"}],"position":{"start":{"line":38,"column":1,"offset":642},"end":{"line":39,"column":58,"offset":748}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"xv6的进程切换的概况：","position":{"start":{"line":41,"column":1,"offset":750},"end":{"line":41,"column":13,"offset":762}}}],"position":{"start":{"line":41,"column":1,"offset":750},"end":{"line":41,"column":13,"offset":762}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"https://i.imgur.com/33o9uPP.png","alt":"context switch"},"children":[],"position":{"start":{"line":43,"column":1,"offset":764},"end":{"line":43,"column":51,"offset":814}}}],"position":{"start":{"line":43,"column":1,"offset":764},"end":{"line":43,"column":51,"offset":814}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"user -> kernel thread (via system call or timer)","position":{"start":{"line":45,"column":3,"offset":818},"end":{"line":45,"column":51,"offset":866}}}],"position":{"start":{"line":45,"column":1,"offset":816},"end":{"line":45,"column":51,"offset":866}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"kernel thread yields, due to pre-emption or waiting for I/O","position":{"start":{"line":46,"column":3,"offset":869},"end":{"line":46,"column":62,"offset":928}}}],"position":{"start":{"line":46,"column":1,"offset":867},"end":{"line":46,"column":62,"offset":928}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"kernel thread -> scheduler thread","position":{"start":{"line":47,"column":3,"offset":931},"end":{"line":47,"column":36,"offset":964}}}],"position":{"start":{"line":47,"column":1,"offset":929},"end":{"line":47,"column":36,"offset":964}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"scheduler thread finds a RUNNABLE kernel thread","position":{"start":{"line":48,"column":3,"offset":967},"end":{"line":48,"column":50,"offset":1014}}}],"position":{"start":{"line":48,"column":1,"offset":965},"end":{"line":48,"column":50,"offset":1014}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"scheduler thread -> kernel thread","position":{"start":{"line":49,"column":3,"offset":1017},"end":{"line":49,"column":36,"offset":1050}}}],"position":{"start":{"line":49,"column":1,"offset":1015},"end":{"line":49,"column":36,"offset":1050}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"kernel thread -> user","position":{"start":{"line":50,"column":3,"offset":1053},"end":{"line":50,"column":24,"offset":1074}}}],"position":{"start":{"line":50,"column":1,"offset":1051},"end":{"line":50,"column":24,"offset":1074}}},{"type":"text","value":"\n"}],"position":{"start":{"line":45,"column":1,"offset":816},"end":{"line":50,"column":24,"offset":1074}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"每个xv6 process都有一个状态","position":{"start":{"line":52,"column":1,"offset":1076},"end":{"line":52,"column":20,"offset":1095}}},{"type":"raw","value":"<code class=\"language-text\">proc-&gt;state</code>","position":{"start":{"line":52,"column":20,"offset":1095},"end":{"line":52,"column":33,"offset":1108}}},{"type":"text","value":"，可以的取值为：","position":{"start":{"line":52,"column":33,"offset":1108},"end":{"line":52,"column":41,"offset":1116}}}],"position":{"start":{"line":52,"column":1,"offset":1076},"end":{"line":52,"column":41,"offset":1116}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  RUNNING\n  RUNNABLE\n  SLEEPING\n  ZOMBIE\n  UNUSED</code></pre></div>","position":{"start":{"line":54,"column":1,"offset":1118},"end":{"line":60,"column":4,"offset":1176}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"注意：","position":{"start":{"line":62,"column":1,"offset":1178},"end":{"line":62,"column":4,"offset":1181}}}],"position":{"start":{"line":62,"column":1,"offset":1178},"end":{"line":62,"column":4,"offset":1181}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"xv6有多个kernel thread，他们共享同一个kernel address space","position":{"start":{"line":64,"column":3,"offset":1185},"end":{"line":64,"column":50,"offset":1232}}}],"position":{"start":{"line":64,"column":1,"offset":1183},"end":{"line":64,"column":50,"offset":1232}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"xv6的每个进程只有1个user thread","position":{"start":{"line":65,"column":3,"offset":1235},"end":{"line":65,"column":26,"offset":1258}}}],"position":{"start":{"line":65,"column":1,"offset":1233},"end":{"line":65,"column":26,"offset":1258}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"像Linux这样的系统支持没个进程多个线程。","position":{"start":{"line":66,"column":3,"offset":1261},"end":{"line":66,"column":25,"offset":1283}}}],"position":{"start":{"line":66,"column":1,"offset":1259},"end":{"line":66,"column":25,"offset":1283}}},{"type":"text","value":"\n"}],"position":{"start":{"line":64,"column":1,"offset":1183},"end":{"line":66,"column":25,"offset":1283}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"context switching是xv6里最难做对的事了。","position":{"start":{"line":68,"column":1,"offset":1285},"end":{"line":68,"column":31,"offset":1315}}}],"position":{"start":{"line":68,"column":1,"offset":1285},"end":{"line":68,"column":31,"offset":1315}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"xv6 code for context switch","position":{"start":{"line":70,"column":5,"offset":1321},"end":{"line":70,"column":32,"offset":1348}}}],"position":{"start":{"line":70,"column":1,"offset":1317},"end":{"line":70,"column":32,"offset":1348}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面让我们来看看xv6的代码来学习一下它是怎么进行context switch的：","position":{"start":{"line":72,"column":1,"offset":1350},"end":{"line":72,"column":42,"offset":1391}}}],"position":{"start":{"line":72,"column":1,"offset":1350},"end":{"line":72,"column":42,"offset":1391}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"进行两次context switch是为了简化cleaning up。","position":{"start":{"line":74,"column":1,"offset":1393},"end":{"line":74,"column":36,"offset":1428}}}],"position":{"start":{"line":74,"column":1,"offset":1393},"end":{"line":74,"column":36,"offset":1428}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"我们没有讲义中提到的","position":{"start":{"line":76,"column":1,"offset":1430},"end":{"line":76,"column":11,"offset":1440}}},{"type":"raw","value":"<code class=\"language-text\">hog.c</code>","position":{"start":{"line":76,"column":11,"offset":1440},"end":{"line":76,"column":18,"offset":1447}}},{"type":"text","value":"，所以没办法用gdb进行调试，不过还是可以跟着调试的路子看代码。","position":{"start":{"line":76,"column":18,"offset":1447},"end":{"line":76,"column":50,"offset":1479}}}],"position":{"start":{"line":76,"column":1,"offset":1430},"end":{"line":76,"column":50,"offset":1479}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"当开始发生context swtich的时候，会先通过时间中断触发","position":{"start":{"line":78,"column":1,"offset":1481},"end":{"line":78,"column":34,"offset":1514}}},{"type":"raw","value":"<code class=\"language-text\">trap()</code>","position":{"start":{"line":78,"column":34,"offset":1514},"end":{"line":78,"column":42,"offset":1522}}},{"type":"text","value":"中的这部分：","position":{"start":{"line":78,"column":42,"offset":1522},"end":{"line":78,"column":48,"offset":1528}}}],"position":{"start":{"line":78,"column":1,"offset":1481},"end":{"line":78,"column":48,"offset":1528}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token comment\">// Force process to give up CPU on clock tick.</span>\n  <span class=\"token comment\">// If interrupts were on while locks held, would need to check nlock.</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> RUNNING <span class=\"token operator\">&amp;&amp;</span>\n     tf<span class=\"token operator\">-></span>trapno <span class=\"token operator\">==</span> T_IRQ0<span class=\"token operator\">+</span>IRQ_TIMER<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":80,"column":1,"offset":1530},"end":{"line":86,"column":4,"offset":1756}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然后进入位于","position":{"start":{"line":88,"column":1,"offset":1758},"end":{"line":88,"column":7,"offset":1764}}},{"type":"raw","value":"<code class=\"language-text\">proc.c</code>","position":{"start":{"line":88,"column":7,"offset":1764},"end":{"line":88,"column":15,"offset":1772}}},{"type":"text","value":"的","position":{"start":{"line":88,"column":15,"offset":1772},"end":{"line":88,"column":16,"offset":1773}}},{"type":"raw","value":"<code class=\"language-text\">yield</code>","position":{"start":{"line":88,"column":16,"offset":1773},"end":{"line":88,"column":23,"offset":1780}}},{"type":"text","value":"：","position":{"start":{"line":88,"column":23,"offset":1780},"end":{"line":88,"column":24,"offset":1781}}}],"position":{"start":{"line":88,"column":1,"offset":1758},"end":{"line":88,"column":24,"offset":1781}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Give up the CPU for one scheduling round.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//DOC: yieldlock</span>\n  <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNABLE<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sched</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":90,"column":1,"offset":1783},"end":{"line":100,"column":4,"offset":1966}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"让当前进程等待之后，进入在同一个文件中的","position":{"start":{"line":102,"column":1,"offset":1968},"end":{"line":102,"column":21,"offset":1988}}},{"type":"raw","value":"<code class=\"language-text\">shed()</code>","position":{"start":{"line":102,"column":21,"offset":1988},"end":{"line":102,"column":29,"offset":1996}}}],"position":{"start":{"line":102,"column":1,"offset":1968},"end":{"line":102,"column":29,"offset":1996}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Enter scheduler.  Must hold only ptable.lock</span>\n<span class=\"token comment\">// and have changed proc->state. Saves and restores</span>\n<span class=\"token comment\">// intena because intena is a property of this</span>\n<span class=\"token comment\">// kernel thread, not this CPU. It should</span>\n<span class=\"token comment\">// be proc->intena and proc->ncli, but that would</span>\n<span class=\"token comment\">// break in the few places where a lock is held but</span>\n<span class=\"token comment\">// there's no process.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">sched</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> intena<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">holding</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sched ptable.lock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ncli <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sched locks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> RUNNING<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sched running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">readeflags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>FL_IF<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sched interruptible\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  intena <span class=\"token operator\">=</span> <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>intena<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">swtch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>context<span class=\"token punctuation\">,</span> <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>scheduler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>intena <span class=\"token operator\">=</span> intena<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":104,"column":1,"offset":1998},"end":{"line":130,"column":4,"offset":2708}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">shed</code>","position":{"start":{"line":132,"column":1,"offset":2710},"end":{"line":132,"column":7,"offset":2716}}},{"type":"text","value":"就是检查一下当前的状态是不是对的。注意这里因为acquire了","position":{"start":{"line":132,"column":7,"offset":2716},"end":{"line":132,"column":38,"offset":2747}}},{"type":"raw","value":"<code class=\"language-text\">ptable.lock</code>","position":{"start":{"line":132,"column":38,"offset":2747},"end":{"line":132,"column":51,"offset":2760}}},{"type":"text","value":"，由于spinlock的特点（见","position":{"start":{"line":132,"column":51,"offset":2760},"end":{"line":132,"column":67,"offset":2776}}},{"type":"raw","value":"<code class=\"language-text\">spinlock.c/aquire()</code>","position":{"start":{"line":132,"column":67,"offset":2776},"end":{"line":132,"column":88,"offset":2797}}},{"type":"text","value":"），cpu的中断应该是处于disabled状态，也就是说第3个判断是由上面两个推测出来的。然后转到","position":{"start":{"line":132,"column":88,"offset":2797},"end":{"line":132,"column":137,"offset":2846}}},{"type":"raw","value":"<code class=\"language-text\">swtch()</code>","position":{"start":{"line":132,"column":137,"offset":2846},"end":{"line":132,"column":146,"offset":2855}}},{"type":"text","value":"（步骤2）。在","position":{"start":{"line":132,"column":146,"offset":2855},"end":{"line":132,"column":153,"offset":2862}}},{"type":"raw","value":"<code class=\"language-text\">swtch.S</code>","position":{"start":{"line":132,"column":153,"offset":2862},"end":{"line":132,"column":162,"offset":2871}}},{"type":"text","value":"中：","position":{"start":{"line":132,"column":162,"offset":2871},"end":{"line":132,"column":164,"offset":2873}}}],"position":{"start":{"line":132,"column":1,"offset":2710},"end":{"line":132,"column":164,"offset":2873}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># Context switch\n#\n#   void swtch(struct context **old, struct context *new);\n# \n# Save the current registers on the stack, creating\n# a struct context, and save its address in *old.\n# Switch stacks to new and pop previously-saved registers.\n\n.globl swtch\nswtch:\n  movl 4(%esp), %eax  # &amp;p-&gt;context\n  movl 8(%esp), %edx  # mycpu()-&gt;scheduler\n\n  # Save old callee-saved registers\n  pushl %ebp\n  pushl %ebx\n  pushl %esi\n  pushl %edi\n\n  # Switch stacks\n  movl %esp, (%eax)\n  movl %edx, %esp\n\n  # Load new callee-saved registers\n  popl %edi\n  popl %esi\n  popl %ebx\n  popl %ebp\n  ret</code></pre></div>","position":{"start":{"line":134,"column":1,"offset":2875},"end":{"line":164,"column":4,"offset":3469}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">swtch</code>","position":{"start":{"line":166,"column":1,"offset":3471},"end":{"line":166,"column":8,"offset":3478}}},{"type":"text","value":"不清楚thread的信息，其只是保存切换前的一些寄存器，切换到了","position":{"start":{"line":166,"column":8,"offset":3478},"end":{"line":166,"column":40,"offset":3510}}},{"type":"raw","value":"<code class=\"language-text\">mycpu()-&gt;scheduler</code>","position":{"start":{"line":166,"column":40,"offset":3510},"end":{"line":166,"column":60,"offset":3530}}},{"type":"text","value":"这个处理器的scheduler thread里（通过切换","position":{"start":{"line":166,"column":60,"offset":3530},"end":{"line":166,"column":88,"offset":3558}}},{"type":"raw","value":"<code class=\"language-text\">%esp</code>","position":{"start":{"line":166,"column":88,"offset":3558},"end":{"line":166,"column":94,"offset":3564}}},{"type":"text","value":"），然后把切换后的环境的寄存器恢复回来，然后return。这些保存和恢复的寄存器就是context。","position":{"start":{"line":166,"column":94,"offset":3564},"end":{"line":166,"column":144,"offset":3614}}}],"position":{"start":{"line":166,"column":1,"offset":3471},"end":{"line":166,"column":144,"offset":3614}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"切换栈使得","position":{"start":{"line":168,"column":1,"offset":3616},"end":{"line":168,"column":6,"offset":3621}}},{"type":"raw","value":"<code class=\"language-text\">swtch</code>","position":{"start":{"line":168,"column":6,"offset":3621},"end":{"line":168,"column":13,"offset":3628}}},{"type":"text","value":"返回会返回到CPU的","position":{"start":{"line":168,"column":13,"offset":3628},"end":{"line":168,"column":23,"offset":3638}}},{"type":"raw","value":"<code class=\"language-text\">scheduler()</code>","position":{"start":{"line":168,"column":23,"offset":3638},"end":{"line":168,"column":36,"offset":3651}}},{"type":"text","value":"中了。这个函数在","position":{"start":{"line":168,"column":36,"offset":3651},"end":{"line":168,"column":44,"offset":3659}}},{"type":"raw","value":"<code class=\"language-text\">proc.c</code>","position":{"start":{"line":168,"column":44,"offset":3659},"end":{"line":168,"column":52,"offset":3667}}},{"type":"text","value":"中","position":{"start":{"line":168,"column":52,"offset":3667},"end":{"line":168,"column":53,"offset":3668}}}],"position":{"start":{"line":168,"column":1,"offset":3616},"end":{"line":168,"column":53,"offset":3668}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Per-CPU process scheduler.</span>\n<span class=\"token comment\">// Each CPU calls scheduler() after setting itself up.</span>\n<span class=\"token comment\">// Scheduler never returns.  It loops, doing:</span>\n<span class=\"token comment\">//  - choose a process to run</span>\n<span class=\"token comment\">//  - swtch to start running that process</span>\n<span class=\"token comment\">//  - eventually that process transfers control</span>\n<span class=\"token comment\">//      via swtch back to the scheduler.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">scheduler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">cpu</span> <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token operator\">-></span>proc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Enable interrupts on this processor.</span>\n    <span class=\"token function\">sti</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Loop over process table looking for process to run.</span>\n    <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">!=</span> RUNNABLE<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Switch to chosen process.  It is the process's job</span>\n      <span class=\"token comment\">// to release ptable.lock and then reacquire it</span>\n      <span class=\"token comment\">// before jumping back to us.</span>\n      c<span class=\"token operator\">-></span>proc <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">switchuvm</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNING<span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">swtch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>scheduler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">switchkvm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Process is done running for now.</span>\n      <span class=\"token comment\">// It should have changed its p->state before coming back.</span>\n      c<span class=\"token operator\">-></span>proc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":170,"column":1,"offset":3670},"end":{"line":213,"column":4,"offset":4759}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"注意会继续从","position":{"start":{"line":215,"column":1,"offset":4761},"end":{"line":215,"column":7,"offset":4767}}},{"type":"raw","value":"<code class=\"language-text\">scheduler</code>","position":{"start":{"line":215,"column":7,"offset":4767},"end":{"line":215,"column":18,"offset":4778}}},{"type":"text","value":"的","position":{"start":{"line":215,"column":18,"offset":4778},"end":{"line":215,"column":19,"offset":4779}}},{"type":"raw","value":"<code class=\"language-text\">swtch</code>","position":{"start":{"line":215,"column":19,"offset":4779},"end":{"line":215,"column":26,"offset":4786}}},{"type":"text","value":"这行继续运行，因为之前就是从这里切换走的。注意前面的","position":{"start":{"line":215,"column":26,"offset":4786},"end":{"line":215,"column":52,"offset":4812}}},{"type":"raw","value":"<code class=\"language-text\">ptable.lock</code>","position":{"start":{"line":215,"column":52,"offset":4812},"end":{"line":215,"column":65,"offset":4825}}},{"type":"text","value":"和","position":{"start":{"line":215,"column":65,"offset":4825},"end":{"line":215,"column":66,"offset":4826}}},{"type":"raw","value":"<code class=\"language-text\">yield</code>","position":{"start":{"line":215,"column":66,"offset":4826},"end":{"line":215,"column":73,"offset":4833}}},{"type":"text","value":"里是一个锁。然后就是运行","position":{"start":{"line":215,"column":73,"offset":4833},"end":{"line":215,"column":85,"offset":4845}}},{"type":"raw","value":"<code class=\"language-text\">switchkvm()</code>","position":{"start":{"line":215,"column":85,"offset":4845},"end":{"line":215,"column":98,"offset":4858}}}],"position":{"start":{"line":215,"column":1,"offset":4761},"end":{"line":215,"column":98,"offset":4858}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Switch h/w page table register to the kernel-only page table,</span>\n<span class=\"token comment\">// for when no process is running.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">switchkvm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>kpgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// switch to the kernel page table</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":217,"column":1,"offset":4860},"end":{"line":225,"column":4,"offset":5051}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"通过","position":{"start":{"line":227,"column":1,"offset":5053},"end":{"line":227,"column":3,"offset":5055}}},{"type":"raw","value":"<code class=\"language-text\">switchkvm</code>","position":{"start":{"line":227,"column":3,"offset":5055},"end":{"line":227,"column":14,"offset":5066}}},{"type":"text","value":"来释放了旧的page table。然后","position":{"start":{"line":227,"column":14,"offset":5066},"end":{"line":227,"column":33,"offset":5085}}},{"type":"raw","value":"<code class=\"language-text\">scheduler</code>","position":{"start":{"line":227,"column":33,"offset":5085},"end":{"line":227,"column":44,"offset":5096}}},{"type":"text","value":"回继续运行，去找下一个","position":{"start":{"line":227,"column":44,"offset":5096},"end":{"line":227,"column":55,"offset":5107}}},{"type":"raw","value":"<code class=\"language-text\">RUNNABLE</code>","position":{"start":{"line":227,"column":55,"offset":5107},"end":{"line":227,"column":65,"offset":5117}}},{"type":"text","value":"的进程，如果没有，就释放","position":{"start":{"line":227,"column":65,"offset":5117},"end":{"line":227,"column":77,"offset":5129}}},{"type":"raw","value":"<code class=\"language-text\">ptable.lock</code>","position":{"start":{"line":227,"column":77,"offset":5129},"end":{"line":227,"column":90,"offset":5142}}},{"type":"text","value":"，看看其他的处理器有没有需要。","position":{"start":{"line":227,"column":90,"offset":5142},"end":{"line":227,"column":105,"offset":5157}}}],"position":{"start":{"line":227,"column":1,"offset":5053},"end":{"line":227,"column":105,"offset":5157}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"如果有可以切换的 （有","position":{"start":{"line":229,"column":1,"offset":5159},"end":{"line":229,"column":12,"offset":5170}}},{"type":"raw","value":"<code class=\"language-text\">RUNNABLE</code>","position":{"start":{"line":229,"column":12,"offset":5170},"end":{"line":229,"column":22,"offset":5180}}},{"type":"text","value":"），就运行","position":{"start":{"line":229,"column":22,"offset":5180},"end":{"line":229,"column":27,"offset":5185}}},{"type":"raw","value":"<code class=\"language-text\">switchuvm</code>","position":{"start":{"line":229,"column":27,"offset":5185},"end":{"line":229,"column":38,"offset":5196}}}],"position":{"start":{"line":229,"column":1,"offset":5159},"end":{"line":229,"column":38,"offset":5196}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Switch TSS and h/w page table to correspond to process p.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">switchuvm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"switchuvm: no process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>kstack <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"switchuvm: no kstack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"switchuvm: no pgdir\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">pushcli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>gdt<span class=\"token punctuation\">[</span>SEG_TSS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">SEG16</span><span class=\"token punctuation\">(</span>STS_T32A<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">,</span>\n                                <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>gdt<span class=\"token punctuation\">[</span>SEG_TSS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">.</span>ss0 <span class=\"token operator\">=</span> SEG_KDATA <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">.</span>esp0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>p<span class=\"token operator\">-></span>kstack <span class=\"token operator\">+</span> KSTACKSIZE<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// setting IOPL=0 in eflags *and* iomb beyond the tss segment limit</span>\n  <span class=\"token comment\">// forbids I/O instructions (e.g., inb and outb) from user space</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">.</span>iomb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ushort<span class=\"token punctuation\">)</span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ltr</span><span class=\"token punctuation\">(</span>SEG_TSS <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// switch to process's address space</span>\n  <span class=\"token function\">popcli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":231,"column":1,"offset":5198},"end":{"line":256,"column":4,"offset":5977}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"把TSS和page table都换成这个进程的。之后就再调用","position":{"start":{"line":258,"column":1,"offset":5979},"end":{"line":258,"column":31,"offset":6009}}},{"type":"raw","value":"<code class=\"language-text\">swtch</code>","position":{"start":{"line":258,"column":31,"offset":6009},"end":{"line":258,"column":38,"offset":6016}}},{"type":"text","value":"切换到这个进程了。注意从这个","position":{"start":{"line":258,"column":38,"offset":6016},"end":{"line":258,"column":52,"offset":6030}}},{"type":"raw","value":"<code class=\"language-text\">swtch</code>","position":{"start":{"line":258,"column":52,"offset":6030},"end":{"line":258,"column":59,"offset":6037}}},{"type":"text","value":"返回的时候，会返回到","position":{"start":{"line":258,"column":59,"offset":6037},"end":{"line":258,"column":69,"offset":6047}}},{"type":"raw","value":"<code class=\"language-text\">sched</code>","position":{"start":{"line":258,"column":69,"offset":6047},"end":{"line":258,"column":76,"offset":6054}}},{"type":"text","value":"的最下面，因为之前的切换就发生于此，然后依次返回","position":{"start":{"line":258,"column":76,"offset":6054},"end":{"line":258,"column":100,"offset":6078}}},{"type":"raw","value":"<code class=\"language-text\">yield</code>","position":{"start":{"line":258,"column":100,"offset":6078},"end":{"line":258,"column":107,"offset":6085}}},{"type":"text","value":", ","position":{"start":{"line":258,"column":107,"offset":6085},"end":{"line":258,"column":109,"offset":6087}}},{"type":"raw","value":"<code class=\"language-text\">trap</code>","position":{"start":{"line":258,"column":109,"offset":6087},"end":{"line":258,"column":115,"offset":6093}}},{"type":"text","value":"...从而继续运行这个进程。","position":{"start":{"line":258,"column":115,"offset":6093},"end":{"line":258,"column":129,"offset":6107}}}],"position":{"start":{"line":258,"column":1,"offset":5979},"end":{"line":258,"column":129,"offset":6107}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"注意，在","position":{"start":{"line":260,"column":1,"offset":6109},"end":{"line":260,"column":5,"offset":6113}}},{"type":"raw","value":"<code class=\"language-text\">yield</code>","position":{"start":{"line":260,"column":5,"offset":6113},"end":{"line":260,"column":12,"offset":6120}}},{"type":"text","value":"中的","position":{"start":{"line":260,"column":12,"offset":6120},"end":{"line":260,"column":14,"offset":6122}}},{"type":"raw","value":"<code class=\"language-text\">acquire</code>","position":{"start":{"line":260,"column":14,"offset":6122},"end":{"line":260,"column":23,"offset":6131}}},{"type":"text","value":"会被另外一个进程里的","position":{"start":{"line":260,"column":23,"offset":6131},"end":{"line":260,"column":33,"offset":6141}}},{"type":"raw","value":"<code class=\"language-text\">yield</code>","position":{"start":{"line":260,"column":33,"offset":6141},"end":{"line":260,"column":40,"offset":6148}}},{"type":"text","value":"的","position":{"start":{"line":260,"column":40,"offset":6148},"end":{"line":260,"column":41,"offset":6149}}},{"type":"raw","value":"<code class=\"language-text\">release</code>","position":{"start":{"line":260,"column":41,"offset":6149},"end":{"line":260,"column":50,"offset":6158}}},{"type":"text","value":"去释放。","position":{"start":{"line":260,"column":50,"offset":6158},"end":{"line":260,"column":54,"offset":6162}}}],"position":{"start":{"line":260,"column":1,"offset":6109},"end":{"line":260,"column":54,"offset":6162}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面是关于这整个步骤的几个问题：","position":{"start":{"line":262,"column":1,"offset":6164},"end":{"line":262,"column":17,"offset":6180}}}],"position":{"start":{"line":262,"column":1,"offset":6164},"end":{"line":262,"column":17,"offset":6180}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"scheduling policy是什么：","position":{"start":{"line":264,"column":3,"offset":6184},"end":{"line":264,"column":24,"offset":6205}}}],"position":{"start":{"line":264,"column":3,"offset":6184},"end":{"line":264,"column":24,"offset":6205}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为是循环运行，所以是Round Robin。除非只有两个进程在同时运行，刚刚","position":{"start":{"line":266,"column":3,"offset":6209},"end":{"line":266,"column":42,"offset":6248}}},{"type":"raw","value":"<code class=\"language-text\">yield</code>","position":{"start":{"line":266,"column":42,"offset":6248},"end":{"line":266,"column":49,"offset":6255}}},{"type":"text","value":"的程序不会被马上运行。","position":{"start":{"line":266,"column":49,"offset":6255},"end":{"line":266,"column":60,"offset":6266}}}],"position":{"start":{"line":266,"column":3,"offset":6209},"end":{"line":266,"column":60,"offset":6266}}},{"type":"text","value":"\n"}],"position":{"start":{"line":264,"column":1,"offset":6182},"end":{"line":267,"column":1,"offset":6267}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为什么","position":{"start":{"line":268,"column":3,"offset":6270},"end":{"line":268,"column":6,"offset":6273}}},{"type":"raw","value":"<code class=\"language-text\">scheduler</code>","position":{"start":{"line":268,"column":6,"offset":6273},"end":{"line":268,"column":17,"offset":6284}}},{"type":"text","value":"会在每个循环后会","position":{"start":{"line":268,"column":17,"offset":6284},"end":{"line":268,"column":25,"offset":6292}}},{"type":"raw","value":"<code class=\"language-text\">release</code>","position":{"start":{"line":268,"column":25,"offset":6292},"end":{"line":268,"column":34,"offset":6301}}},{"type":"text","value":"，循环前会","position":{"start":{"line":268,"column":34,"offset":6301},"end":{"line":268,"column":39,"offset":6306}}},{"type":"raw","value":"<code class=\"language-text\">acquire</code>","position":{"start":{"line":268,"column":39,"offset":6306},"end":{"line":268,"column":48,"offset":6315}}},{"type":"text","value":"。","position":{"start":{"line":268,"column":48,"offset":6315},"end":{"line":268,"column":49,"offset":6316}}}],"position":{"start":{"line":268,"column":3,"offset":6270},"end":{"line":268,"column":49,"offset":6316}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为了让其他的","position":{"start":{"line":270,"column":3,"offset":6320},"end":{"line":270,"column":9,"offset":6326}}},{"type":"element","tagName":"strong","properties":{},"children":[{"type":"text","value":"processor","position":{"start":{"line":270,"column":11,"offset":6328},"end":{"line":270,"column":20,"offset":6337}}}],"position":{"start":{"line":270,"column":9,"offset":6326},"end":{"line":270,"column":22,"offset":6339}}},{"type":"text","value":"可以使用","position":{"start":{"line":270,"column":22,"offset":6339},"end":{"line":270,"column":26,"offset":6343}}},{"type":"raw","value":"<code class=\"language-text\">ptable</code>","position":{"start":{"line":270,"column":26,"offset":6343},"end":{"line":270,"column":34,"offset":6351}}},{"type":"text","value":"。不然如果两个处理器只有1个进程，会导致死锁。原因如下：","position":{"start":{"line":270,"column":34,"offset":6351},"end":{"line":270,"column":62,"offset":6379}}}],"position":{"start":{"line":270,"column":3,"offset":6320},"end":{"line":270,"column":62,"offset":6379}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"假设有cpu A和cpu B，进程p运行在cpu A上。如果cpu B ","position":{"start":{"line":272,"column":3,"offset":6383},"end":{"line":272,"column":39,"offset":6419}}},{"type":"raw","value":"<code class=\"language-text\">acquire</code>","position":{"start":{"line":272,"column":39,"offset":6419},"end":{"line":272,"column":48,"offset":6428}}},{"type":"text","value":"了锁，但不","position":{"start":{"line":272,"column":48,"offset":6428},"end":{"line":272,"column":53,"offset":6433}}},{"type":"raw","value":"<code class=\"language-text\">release</code>","position":{"start":{"line":272,"column":53,"offset":6433},"end":{"line":272,"column":62,"offset":6442}}},{"type":"text","value":"，会导致p在","position":{"start":{"line":272,"column":62,"offset":6442},"end":{"line":272,"column":68,"offset":6448}}},{"type":"raw","value":"<code class=\"language-text\">yield</code>","position":{"start":{"line":272,"column":68,"offset":6448},"end":{"line":272,"column":75,"offset":6455}}},{"type":"text","value":"的时候会无限等待。","position":{"start":{"line":272,"column":75,"offset":6455},"end":{"line":272,"column":84,"offset":6464}}}],"position":{"start":{"line":272,"column":3,"offset":6383},"end":{"line":272,"column":84,"offset":6464}}},{"type":"text","value":"\n"}],"position":{"start":{"line":268,"column":1,"offset":6268},"end":{"line":273,"column":1,"offset":6465}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为什么在","position":{"start":{"line":274,"column":3,"offset":6468},"end":{"line":274,"column":7,"offset":6472}}},{"type":"raw","value":"<code class=\"language-text\">scheduler</code>","position":{"start":{"line":274,"column":7,"offset":6472},"end":{"line":274,"column":18,"offset":6483}}},{"type":"text","value":"里面重启中断？","position":{"start":{"line":274,"column":18,"offset":6483},"end":{"line":274,"column":25,"offset":6490}}}],"position":{"start":{"line":274,"column":3,"offset":6468},"end":{"line":274,"column":25,"offset":6490}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为可能没有","position":{"start":{"line":276,"column":3,"offset":6494},"end":{"line":276,"column":9,"offset":6500}}},{"type":"raw","value":"<code class=\"language-text\">RUNNABLE</code>","position":{"start":{"line":276,"column":9,"offset":6500},"end":{"line":276,"column":19,"offset":6510}}},{"type":"text","value":"进程，如果不重启中断就会一直死循环在","position":{"start":{"line":276,"column":19,"offset":6510},"end":{"line":276,"column":37,"offset":6528}}},{"type":"raw","value":"<code class=\"language-text\">scheduler</code>","position":{"start":{"line":276,"column":37,"offset":6528},"end":{"line":276,"column":48,"offset":6539}}},{"type":"text","value":"里面了。enable interrupt可以让一些在等待I/O的进程能够signal completion","position":{"start":{"line":276,"column":48,"offset":6539},"end":{"line":276,"column":101,"offset":6592}}}],"position":{"start":{"line":276,"column":3,"offset":6494},"end":{"line":276,"column":101,"offset":6592}}},{"type":"text","value":"\n"}],"position":{"start":{"line":274,"column":1,"offset":6466},"end":{"line":277,"column":1,"offset":6593}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为什么是","position":{"start":{"line":278,"column":3,"offset":6596},"end":{"line":278,"column":7,"offset":6600}}},{"type":"raw","value":"<code class=\"language-text\">yield</code>","position":{"start":{"line":278,"column":7,"offset":6600},"end":{"line":278,"column":14,"offset":6607}}},{"type":"text","value":"获取了","position":{"start":{"line":278,"column":14,"offset":6607},"end":{"line":278,"column":17,"offset":6610}}},{"type":"raw","value":"<code class=\"language-text\">ptable.lock</code>","position":{"start":{"line":278,"column":17,"offset":6610},"end":{"line":278,"column":30,"offset":6623}}},{"type":"text","value":"但是","position":{"start":{"line":278,"column":30,"offset":6623},"end":{"line":278,"column":32,"offset":6625}}},{"type":"raw","value":"<code class=\"language-text\">scheduler()</code>","position":{"start":{"line":278,"column":32,"offset":6625},"end":{"line":278,"column":45,"offset":6638}}},{"type":"text","value":"来释放。","position":{"start":{"line":278,"column":45,"offset":6638},"end":{"line":278,"column":49,"offset":6642}}}],"position":{"start":{"line":278,"column":3,"offset":6596},"end":{"line":278,"column":49,"offset":6642}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"注意这是非常不寻常的地方，aquire和release不是在同一个线程里面做的","position":{"start":{"line":280,"column":3,"offset":6646},"end":{"line":280,"column":42,"offset":6685}}}],"position":{"start":{"line":280,"column":3,"offset":6646},"end":{"line":280,"column":42,"offset":6685}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"为什么","position":{"start":{"line":282,"column":3,"offset":6689},"end":{"line":282,"column":6,"offset":6692}}},{"type":"raw","value":"<code class=\"language-text\">swtch</code>","position":{"start":{"line":282,"column":6,"offset":6692},"end":{"line":282,"column":13,"offset":6699}}},{"type":"text","value":"需要hold lock呢？","position":{"start":{"line":282,"column":13,"offset":6699},"end":{"line":282,"column":26,"offset":6712}}}],"position":{"start":{"line":282,"column":3,"offset":6689},"end":{"line":282,"column":26,"offset":6712}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"不然可能会有两个processor都换成了同一个进程","position":{"start":{"line":284,"column":3,"offset":6716},"end":{"line":284,"column":29,"offset":6742}}}],"position":{"start":{"line":284,"column":3,"offset":6716},"end":{"line":284,"column":29,"offset":6742}}},{"type":"text","value":"\n"}],"position":{"start":{"line":278,"column":1,"offset":6594},"end":{"line":285,"column":1,"offset":6743}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">ptable.lock</code>","position":{"start":{"line":286,"column":3,"offset":6746},"end":{"line":286,"column":16,"offset":6759}}},{"type":"text","value":"保护的是如下的几个invariant","position":{"start":{"line":286,"column":16,"offset":6759},"end":{"line":286,"column":34,"offset":6777}}}],"position":{"start":{"line":286,"column":3,"offset":6746},"end":{"line":286,"column":34,"offset":6777}}},{"type":"text","value":"\n"},{"type":"element","tagName":"ul","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"RUNNING过程中，处理器的寄存器存值（而不是在context中）","position":{"start":{"line":288,"column":5,"offset":6783},"end":{"line":288,"column":39,"offset":6817}}}],"position":{"start":{"line":288,"column":3,"offset":6781},"end":{"line":288,"column":39,"offset":6817}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"RUNNABLE过程中，context保存寄存器。且没有处理器使用这个进程的stack","position":{"start":{"line":289,"column":5,"offset":6822},"end":{"line":289,"column":48,"offset":6865}}}],"position":{"start":{"line":289,"column":3,"offset":6820},"end":{"line":289,"column":48,"offset":6865}}},{"type":"text","value":"\n"}],"position":{"start":{"line":288,"column":3,"offset":6781},"end":{"line":289,"column":48,"offset":6865}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"从","position":{"start":{"line":291,"column":3,"offset":6869},"end":{"line":291,"column":4,"offset":6870}}},{"type":"raw","value":"<code class=\"language-text\">yield</code>","position":{"start":{"line":291,"column":4,"offset":6870},"end":{"line":291,"column":11,"offset":6877}}},{"type":"text","value":"到","position":{"start":{"line":291,"column":11,"offset":6877},"end":{"line":291,"column":12,"offset":6878}}},{"type":"raw","value":"<code class=\"language-text\">scheduler</code>","position":{"start":{"line":291,"column":12,"offset":6878},"end":{"line":291,"column":23,"offset":6889}}},{"type":"text","value":"都hold lock保证了关闭中断，所以没有timer会影响","position":{"start":{"line":291,"column":23,"offset":6889},"end":{"line":291,"column":53,"offset":6919}}},{"type":"raw","value":"<code class=\"language-text\">swtch</code>","position":{"start":{"line":291,"column":53,"offset":6919},"end":{"line":291,"column":60,"offset":6926}}},{"type":"text","value":"的save&restore。另一个CPU在过程中不能进行stack switch","position":{"start":{"line":291,"column":60,"offset":6926},"end":{"line":291,"column":100,"offset":6966}}}],"position":{"start":{"line":291,"column":3,"offset":6869},"end":{"line":291,"column":100,"offset":6966}}},{"type":"text","value":"\n"}],"position":{"start":{"line":286,"column":1,"offset":6744},"end":{"line":292,"column":1,"offset":6967}}},{"type":"text","value":"\n"},{"type":"element","tagName":"li","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"kernel thread进行不进行pre-emptive scheduling (就是上面说的这个过程)","position":{"start":{"line":293,"column":3,"offset":6970},"end":{"line":293,"column":56,"offset":7023}}}],"position":{"start":{"line":293,"column":3,"offset":6970},"end":{"line":293,"column":56,"offset":7023}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"从","position":{"start":{"line":295,"column":3,"offset":7027},"end":{"line":295,"column":4,"offset":7028}}},{"type":"raw","value":"<code class=\"language-text\">trap</code>","position":{"start":{"line":295,"column":4,"offset":7028},"end":{"line":295,"column":10,"offset":7034}}},{"type":"text","value":"的条件可以看出来，time interrupt不区分kernel thread还是user-level thread。","position":{"start":{"line":295,"column":10,"offset":7034},"end":{"line":295,"column":69,"offset":7093}}}],"position":{"start":{"line":295,"column":3,"offset":7027},"end":{"line":295,"column":69,"offset":7093}}},{"type":"text","value":"\n"}],"position":{"start":{"line":293,"column":1,"offset":6968},"end":{"line":295,"column":69,"offset":7093}}},{"type":"text","value":"\n"}],"position":{"start":{"line":264,"column":1,"offset":6182},"end":{"line":295,"column":69,"offset":7093}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Thread clean up","position":{"start":{"line":297,"column":5,"offset":7099},"end":{"line":297,"column":20,"offset":7114}}}],"position":{"start":{"line":297,"column":1,"offset":7095},"end":{"line":297,"column":20,"offset":7114}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这里主要看","position":{"start":{"line":299,"column":1,"offset":7116},"end":{"line":299,"column":6,"offset":7121}}},{"type":"raw","value":"<code class=\"language-text\">kill</code>","position":{"start":{"line":299,"column":6,"offset":7121},"end":{"line":299,"column":12,"offset":7127}}},{"type":"text","value":", ","position":{"start":{"line":299,"column":12,"offset":7127},"end":{"line":299,"column":14,"offset":7129}}},{"type":"raw","value":"<code class=\"language-text\">exit</code>","position":{"start":{"line":299,"column":14,"offset":7129},"end":{"line":299,"column":20,"offset":7135}}},{"type":"text","value":", ","position":{"start":{"line":299,"column":20,"offset":7135},"end":{"line":299,"column":22,"offset":7137}}},{"type":"raw","value":"<code class=\"language-text\">wait</code>","position":{"start":{"line":299,"column":22,"offset":7137},"end":{"line":299,"column":28,"offset":7143}}},{"type":"text","value":"这3个进程的API。","position":{"start":{"line":299,"column":28,"offset":7143},"end":{"line":299,"column":38,"offset":7153}}}],"position":{"start":{"line":299,"column":1,"offset":7116},"end":{"line":299,"column":38,"offset":7153}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"首先是","position":{"start":{"line":301,"column":1,"offset":7155},"end":{"line":301,"column":4,"offset":7158}}},{"type":"raw","value":"<code class=\"language-text\">kill</code>","position":{"start":{"line":301,"column":4,"offset":7158},"end":{"line":301,"column":10,"offset":7164}}}],"position":{"start":{"line":301,"column":1,"offset":7155},"end":{"line":301,"column":10,"offset":7164}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Kill the process with the given pid.</span>\n<span class=\"token comment\">// Process won't exit until it returns</span>\n<span class=\"token comment\">// to user space (see trap in trap.c).</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">kill</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> pid<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pid <span class=\"token operator\">==</span> pid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      p<span class=\"token operator\">-></span>killed <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token comment\">// Wake process from sleep if necessary.</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> SLEEPING<span class=\"token punctuation\">)</span>\n        p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNABLE<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":303,"column":1,"offset":7166},"end":{"line":326,"column":4,"offset":7656}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"用这个函数去释放内存什么的太麻烦了，所以是指把","position":{"start":{"line":328,"column":1,"offset":7658},"end":{"line":328,"column":24,"offset":7681}}},{"type":"raw","value":"<code class=\"language-text\">p-&gt;kill</code>","position":{"start":{"line":328,"column":24,"offset":7681},"end":{"line":328,"column":33,"offset":7690}}},{"type":"text","value":"设置为1。然后在","position":{"start":{"line":328,"column":33,"offset":7690},"end":{"line":328,"column":41,"offset":7698}}},{"type":"raw","value":"<code class=\"language-text\">trap</code>","position":{"start":{"line":328,"column":41,"offset":7698},"end":{"line":328,"column":47,"offset":7704}}},{"type":"text","value":"里面","position":{"start":{"line":328,"column":47,"offset":7704},"end":{"line":328,"column":49,"offset":7706}}}],"position":{"start":{"line":328,"column":1,"offset":7658},"end":{"line":328,"column":49,"offset":7706}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>trapno <span class=\"token operator\">==</span> T_SYSCALL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>killed<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>tf <span class=\"token operator\">=</span> tf<span class=\"token punctuation\">;</span>\n    <span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>killed<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":330,"column":1,"offset":7708},"end":{"line":340,"column":4,"offset":7879}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"从而转化为进程自己调用","position":{"start":{"line":342,"column":1,"offset":7881},"end":{"line":342,"column":12,"offset":7892}}},{"type":"raw","value":"<code class=\"language-text\">exit()</code>","position":{"start":{"line":342,"column":12,"offset":7892},"end":{"line":342,"column":20,"offset":7900}}},{"type":"text","value":"，自己来退出。","position":{"start":{"line":342,"column":20,"offset":7900},"end":{"line":342,"column":27,"offset":7907}}}],"position":{"start":{"line":342,"column":1,"offset":7881},"end":{"line":342,"column":27,"offset":7907}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"那么之后就是","position":{"start":{"line":344,"column":1,"offset":7909},"end":{"line":344,"column":7,"offset":7915}}},{"type":"raw","value":"<code class=\"language-text\">exit()</code>","position":{"start":{"line":344,"column":7,"offset":7915},"end":{"line":344,"column":15,"offset":7923}}},{"type":"text","value":"函数：","position":{"start":{"line":344,"column":15,"offset":7923},"end":{"line":344,"column":18,"offset":7926}}}],"position":{"start":{"line":344,"column":1,"offset":7909},"end":{"line":344,"column":18,"offset":7926}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Exit the current process.  Does not return.</span>\n<span class=\"token comment\">// An exited process remains in the zombie state</span>\n<span class=\"token comment\">// until its parent calls wait() to find out it exited.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">exit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>curproc <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> fd<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curproc <span class=\"token operator\">==</span> initproc<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"init exiting\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Close all open files.</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>fd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> fd <span class=\"token operator\">&lt;</span> NOFILE<span class=\"token punctuation\">;</span> fd<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curproc<span class=\"token operator\">-></span>ofile<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">fileclose</span><span class=\"token punctuation\">(</span>curproc<span class=\"token operator\">-></span>ofile<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      curproc<span class=\"token operator\">-></span>ofile<span class=\"token punctuation\">[</span>fd<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token function\">begin_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">iput</span><span class=\"token punctuation\">(</span>curproc<span class=\"token operator\">-></span>cwd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">end_op</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  curproc<span class=\"token operator\">-></span>cwd <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Parent might be sleeping in wait().</span>\n  <span class=\"token function\">wakeup1</span><span class=\"token punctuation\">(</span>curproc<span class=\"token operator\">-></span>parent<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// Pass abandoned children to init.</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>parent <span class=\"token operator\">==</span> curproc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      p<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> initproc<span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> ZOMBIE<span class=\"token punctuation\">)</span>\n        <span class=\"token function\">wakeup1</span><span class=\"token punctuation\">(</span>initproc<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token punctuation\">}</span>\n\n  <span class=\"token comment\">// Jump into the scheduler, never to return.</span>\n  curproc<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> ZOMBIE<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sched</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"zombie exit\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":346,"column":1,"offset":7928},"end":{"line":392,"column":4,"offset":8884}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一个进程自己是不能释放自己的stack的。只能把自己设置为","position":{"start":{"line":394,"column":1,"offset":8886},"end":{"line":394,"column":30,"offset":8915}}},{"type":"raw","value":"<code class=\"language-text\">ZOMBIE</code>","position":{"start":{"line":394,"column":30,"offset":8915},"end":{"line":394,"column":38,"offset":8923}}},{"type":"text","value":"然后切出去让parent进程来清理。","position":{"start":{"line":394,"column":38,"offset":8923},"end":{"line":394,"column":56,"offset":8941}}}],"position":{"start":{"line":394,"column":1,"offset":8886},"end":{"line":394,"column":56,"offset":8941}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">wait</code>","position":{"start":{"line":396,"column":1,"offset":8943},"end":{"line":396,"column":7,"offset":8949}}},{"type":"text","value":"就是用来进行这个最后的处理的：","position":{"start":{"line":396,"column":7,"offset":8949},"end":{"line":396,"column":22,"offset":8964}}}],"position":{"start":{"line":396,"column":1,"offset":8943},"end":{"line":396,"column":22,"offset":8964}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Wait for a child process to exit and return its pid.</span>\n<span class=\"token comment\">// Return -1 if this process has no children.</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">int</span> havekids<span class=\"token punctuation\">,</span> pid<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>curproc <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Scan through table looking for exited children.</span>\n    havekids <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>parent <span class=\"token operator\">!=</span> curproc<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n      havekids <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> ZOMBIE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n        <span class=\"token comment\">// Found one.</span>\n        pid <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>pid<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">kfree</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>kstack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>kstack <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">freevm</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>pid <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>parent <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>killed <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n        p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> UNUSED<span class=\"token punctuation\">;</span>\n        <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token keyword\">return</span> pid<span class=\"token punctuation\">;</span>\n      <span class=\"token punctuation\">}</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// No point waiting if we don't have any children.</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>havekids <span class=\"token operator\">||</span> curproc<span class=\"token operator\">-></span>killed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n\n    <span class=\"token comment\">// Wait for children to exit.  (See wakeup1 call in proc_exit.)</span>\n    <span class=\"token function\">sleep</span><span class=\"token punctuation\">(</span>curproc<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//DOC: wait-sleep</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":398,"column":1,"offset":8966},"end":{"line":442,"column":4,"offset":10009}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">wait</code>","position":{"start":{"line":444,"column":1,"offset":10011},"end":{"line":444,"column":7,"offset":10017}}},{"type":"text","value":"就是一个循环，如果有子进程变成","position":{"start":{"line":444,"column":7,"offset":10017},"end":{"line":444,"column":22,"offset":10032}}},{"type":"raw","value":"<code class=\"language-text\">ZOMBIE</code>","position":{"start":{"line":444,"column":22,"offset":10032},"end":{"line":444,"column":30,"offset":10040}}},{"type":"text","value":"了，那么就清理其内存，并返回这个子进程的","position":{"start":{"line":444,"column":30,"offset":10040},"end":{"line":444,"column":50,"offset":10060}}},{"type":"raw","value":"<code class=\"language-text\">pid</code>","position":{"start":{"line":444,"column":50,"offset":10060},"end":{"line":444,"column":55,"offset":10065}}},{"type":"text","value":"。如果暂时没有就会进入","position":{"start":{"line":444,"column":55,"offset":10065},"end":{"line":444,"column":66,"offset":10076}}},{"type":"raw","value":"<code class=\"language-text\">sleep</code>","position":{"start":{"line":444,"column":66,"offset":10076},"end":{"line":444,"column":73,"offset":10083}}},{"type":"text","value":"，下一讲会讲。","position":{"start":{"line":444,"column":73,"offset":10083},"end":{"line":444,"column":80,"offset":10090}}}],"position":{"start":{"line":444,"column":1,"offset":10011},"end":{"line":444,"column":80,"offset":10090}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":444,"column":80,"offset":10090}}}}