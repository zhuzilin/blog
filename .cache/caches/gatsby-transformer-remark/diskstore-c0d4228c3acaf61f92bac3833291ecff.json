{"expireTime":9007200818315813000,"key":"transformer-remark-markdown-ast-976d9d51f6663ce8eeae496847a1d35e-gatsby-remark-katexgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"注意，在运行lab3之前，需要修改","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":18,"offset":18},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/kernel.ld</code>","position":{"start":{"line":2,"column":18,"offset":18},"end":{"line":2,"column":34,"offset":34},"indent":[]}},{"type":"text","value":"文件中的","position":{"start":{"line":2,"column":34,"offset":34},"end":{"line":2,"column":38,"offset":38},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">bss</code>","position":{"start":{"line":2,"column":38,"offset":38},"end":{"line":2,"column":43,"offset":43},"indent":[]}},{"type":"text","value":"部分为：","position":{"start":{"line":2,"column":43,"offset":43},"end":{"line":2,"column":47,"offset":47},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":47,"offset":47},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">\t.bss : {\n\t\tPROVIDE(edata = .);\n\t\t*(.dynbss)\n\t\t*(.bss .bss.*)\n\t\t*(COMMON)\n\t\tPROVIDE(end = .);\n\t}</code></pre></div>","position":{"start":{"line":4,"column":1,"offset":49},"end":{"line":12,"column":4,"offset":153},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"非常感谢解决了这个问题的同学，解决的原文在","position":{"start":{"line":14,"column":1,"offset":155},"end":{"line":14,"column":22,"offset":176},"indent":[]}},{"type":"link","title":null,"url":"https://zhuanlan.zhihu.com/p/46838542","children":[{"type":"text","value":"这里","position":{"start":{"line":14,"column":23,"offset":177},"end":{"line":14,"column":25,"offset":179},"indent":[]}}],"position":{"start":{"line":14,"column":22,"offset":176},"end":{"line":14,"column":65,"offset":219},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":14,"column":65,"offset":219},"end":{"line":14,"column":66,"offset":220},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":155},"end":{"line":14,"column":66,"offset":220},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Part A: User Environments and Exception Handling","position":{"start":{"line":16,"column":4,"offset":225},"end":{"line":16,"column":52,"offset":273},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":222},"end":{"line":16,"column":52,"offset":273},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"首先我们需要看一下新的","position":{"start":{"line":18,"column":1,"offset":275},"end":{"line":18,"column":12,"offset":286},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">inc/env.h</code>","position":{"start":{"line":18,"column":12,"offset":286},"end":{"line":18,"column":23,"offset":297},"indent":[]}},{"type":"text","value":"文件，其中包含了user environment的基本定义：","position":{"start":{"line":18,"column":23,"offset":297},"end":{"line":18,"column":53,"offset":327},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":275},"end":{"line":18,"column":53,"offset":327},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">typedef</span> int32_t envid_t<span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// An environment ID 'envid_t' has three parts:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// +1+---------------21-----------------+--------10--------+</span>\n<span class=\"token comment\">// |0|          Uniqueifier             |   Environment    |</span>\n<span class=\"token comment\">// | |                                  |      Index       |</span>\n<span class=\"token comment\">// +------------------------------------+------------------+</span>\n<span class=\"token comment\">//                                       \\--- ENVX(eid) --/</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The environment index ENVX(eid) equals the environment's index in the</span>\n<span class=\"token comment\">// 'envs[]' array.  The uniqueifier distinguishes environments that were</span>\n<span class=\"token comment\">// created at different times, but share the same environment index.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// All real environments are greater than 0 (so the sign bit is zero).</span>\n<span class=\"token comment\">// envid_ts less than 0 signify errors.  The envid_t == 0 is special, and</span>\n<span class=\"token comment\">// stands for the current environment.</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> LOG2NENV\t\t10</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> NENV\t\t\t(1 &lt;&lt; LOG2NENV)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENVX(envid)\t\t((envid) &amp; (NENV - 1))</span>\n\n<span class=\"token comment\">// Values of env_status in struct Env</span>\n<span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{</span>\n\tENV_FREE <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n\tENV_DYING<span class=\"token punctuation\">,</span>\n\tENV_RUNNABLE<span class=\"token punctuation\">,</span>\n\tENV_RUNNING<span class=\"token punctuation\">,</span>\n\tENV_NOT_RUNNABLE\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Special environment types</span>\n<span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnvType</span> <span class=\"token punctuation\">{</span>\n\tENV_TYPE_USER <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Trapframe</span> env_tf<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// Saved registers</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>env_link<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Next free Env</span>\n\tenvid_t env_id<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// Unique environment identifier</span>\n\tenvid_t env_parent_id<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// env_id of this env's parent</span>\n\t<span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnvType</span> env_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Indicates special system environments</span>\n\t<span class=\"token keyword\">unsigned</span> env_status<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Status of the environment</span>\n\tuint32_t env_runs<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Number of times environment has run</span>\n\n\t<span class=\"token comment\">// Address space</span>\n\tpde_t <span class=\"token operator\">*</span>env_pgdir<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Kernel virtual address of page dir</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":20,"column":1,"offset":329},"end":{"line":69,"column":4,"offset":1877},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"虽然这个lab只会去创建一个user environment，但是为了之后的lab，需要能够支持多个environment。","position":{"start":{"line":71,"column":1,"offset":1879},"end":{"line":71,"column":63,"offset":1941},"indent":[]}}],"position":{"start":{"line":71,"column":1,"offset":1879},"end":{"line":71,"column":63,"offset":1941},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">kern/env.c</code>","position":{"start":{"line":73,"column":1,"offset":1943},"end":{"line":73,"column":13,"offset":1955},"indent":[]}},{"type":"text","value":"的前几行定义了kernel中的3个和环境相关的重要全局变量：","position":{"start":{"line":73,"column":13,"offset":1955},"end":{"line":73,"column":43,"offset":1985},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":1943},"end":{"line":73,"column":43,"offset":1985},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>envs <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// All environments</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>curenv <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// The current env</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>env_free_list<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// Free environment list</span>\n\t\t\t\t\t<span class=\"token comment\">// (linked by Env->env_link)</span></code></pre></div>","position":{"start":{"line":75,"column":1,"offset":1987},"end":{"line":80,"column":4,"offset":2181},"indent":[1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"当JOS启动的时候，","position":{"start":{"line":82,"column":1,"offset":2183},"end":{"line":82,"column":11,"offset":2193},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">envs</code>","position":{"start":{"line":82,"column":11,"offset":2193},"end":{"line":82,"column":17,"offset":2199},"indent":[]}},{"type":"text","value":"会指向一个","position":{"start":{"line":82,"column":17,"offset":2199},"end":{"line":82,"column":22,"offset":2204},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">struct Env</code>","position":{"start":{"line":82,"column":22,"offset":2204},"end":{"line":82,"column":34,"offset":2216},"indent":[]}},{"type":"text","value":"的数组表示系统中所有的环境。在JOS的设计中，最多有","position":{"start":{"line":82,"column":34,"offset":2216},"end":{"line":82,"column":60,"offset":2242},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">NENV</code>","position":{"start":{"line":82,"column":60,"offset":2242},"end":{"line":82,"column":66,"offset":2248},"indent":[]}},{"type":"text","value":"（1024）个环境（一般远远达不到这个值）。这个数组中会存在一个能够保存这","position":{"start":{"line":82,"column":66,"offset":2248},"end":{"line":82,"column":103,"offset":2285},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">NENV</code>","position":{"start":{"line":82,"column":103,"offset":2285},"end":{"line":82,"column":109,"offset":2291},"indent":[]}},{"type":"text","value":"个环境的数据结构。","position":{"start":{"line":82,"column":109,"offset":2291},"end":{"line":82,"column":118,"offset":2300},"indent":[]}}],"position":{"start":{"line":82,"column":1,"offset":2183},"end":{"line":82,"column":118,"offset":2300},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"就像","position":{"start":{"line":84,"column":1,"offset":2302},"end":{"line":84,"column":3,"offset":2304},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">page_free_list</code>","position":{"start":{"line":84,"column":3,"offset":2304},"end":{"line":84,"column":19,"offset":2320},"indent":[]}},{"type":"text","value":"一样，JOS有一个","position":{"start":{"line":84,"column":19,"offset":2320},"end":{"line":84,"column":28,"offset":2329},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_free_list</code>","position":{"start":{"line":84,"column":28,"offset":2329},"end":{"line":84,"column":43,"offset":2344},"indent":[]}},{"type":"text","value":"用来表示inactive Env，用来进行allocation, deallocation。","position":{"start":{"line":84,"column":43,"offset":2344},"end":{"line":84,"column":89,"offset":2390},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">curenv</code>","position":{"start":{"line":84,"column":89,"offset":2390},"end":{"line":84,"column":97,"offset":2398},"indent":[]}},{"type":"text","value":"是当前正在执行的环境的指针，初始化为","position":{"start":{"line":84,"column":97,"offset":2398},"end":{"line":84,"column":115,"offset":2416},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">NULL</code>","position":{"start":{"line":84,"column":115,"offset":2416},"end":{"line":84,"column":121,"offset":2422},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":84,"column":121,"offset":2422},"end":{"line":84,"column":122,"offset":2423},"indent":[]}}],"position":{"start":{"line":84,"column":1,"offset":2302},"end":{"line":84,"column":122,"offset":2423},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Environment State","position":{"start":{"line":86,"column":5,"offset":2429},"end":{"line":86,"column":22,"offset":2446},"indent":[]}}],"position":{"start":{"line":86,"column":1,"offset":2425},"end":{"line":86,"column":22,"offset":2446},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"回到","position":{"start":{"line":88,"column":1,"offset":2448},"end":{"line":88,"column":3,"offset":2450},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">inc/env.h</code>","position":{"start":{"line":88,"column":3,"offset":2450},"end":{"line":88,"column":14,"offset":2461},"indent":[]}},{"type":"text","value":"，我们来看一下","position":{"start":{"line":88,"column":14,"offset":2461},"end":{"line":88,"column":21,"offset":2468},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Env</code>","position":{"start":{"line":88,"column":21,"offset":2468},"end":{"line":88,"column":26,"offset":2473},"indent":[]}}],"position":{"start":{"line":88,"column":1,"offset":2448},"end":{"line":88,"column":26,"offset":2473},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Trapframe</span> env_tf<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// Saved registers</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>env_link<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Next free Env</span>\n\tenvid_t env_id<span class=\"token punctuation\">;</span>\t\t\t<span class=\"token comment\">// Unique environment identifier</span>\n\tenvid_t env_parent_id<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// env_id of this env's parent</span>\n\t<span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnvType</span> env_type<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Indicates special system environments</span>\n\t<span class=\"token keyword\">unsigned</span> env_status<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Status of the environment</span>\n\tuint32_t env_runs<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Number of times environment has run</span>\n\n\t<span class=\"token comment\">// Address space</span>\n\tpde_t <span class=\"token operator\">*</span>env_pgdir<span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// Kernel virtual address of page dir</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":90,"column":1,"offset":2475},"end":{"line":103,"column":4,"offset":2948},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"对于这些field的更详细的解释是：","position":{"start":{"line":105,"column":1,"offset":2950},"end":{"line":105,"column":19,"offset":2968},"indent":[]}}],"position":{"start":{"line":105,"column":1,"offset":2950},"end":{"line":105,"column":19,"offset":2968},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_tf</code>","position":{"start":{"line":107,"column":3,"offset":2972},"end":{"line":107,"column":11,"offset":2980},"indent":[]}},{"type":"text","value":": 当该环境不运行的时候保存寄存器，比如从user mode到kernel mode的转换过程。","position":{"start":{"line":107,"column":11,"offset":2980},"end":{"line":107,"column":59,"offset":3028},"indent":[]}}],"position":{"start":{"line":107,"column":3,"offset":2972},"end":{"line":107,"column":59,"offset":3028},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":2970},"end":{"line":108,"column":1,"offset":3029},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_link</code>","position":{"start":{"line":109,"column":3,"offset":3032},"end":{"line":109,"column":13,"offset":3042},"indent":[]}},{"type":"text","value":": 指向","position":{"start":{"line":109,"column":13,"offset":3042},"end":{"line":109,"column":17,"offset":3046},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_free_list</code>","position":{"start":{"line":109,"column":17,"offset":3046},"end":{"line":109,"column":32,"offset":3061},"indent":[]}},{"type":"text","value":"里的下一个","position":{"start":{"line":109,"column":32,"offset":3061},"end":{"line":109,"column":37,"offset":3066},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Env</code>","position":{"start":{"line":109,"column":37,"offset":3066},"end":{"line":109,"column":42,"offset":3071},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":109,"column":42,"offset":3071},"end":{"line":109,"column":43,"offset":3072},"indent":[]}}],"position":{"start":{"line":109,"column":3,"offset":3032},"end":{"line":109,"column":43,"offset":3072},"indent":[]}}],"position":{"start":{"line":109,"column":1,"offset":3030},"end":{"line":110,"column":1,"offset":3073},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_id</code>","position":{"start":{"line":111,"column":3,"offset":3076},"end":{"line":111,"column":11,"offset":3084},"indent":[]}},{"type":"text","value":": 保存一个uniquely identifier。注意如果一个环境被释放了，之后又有环境用了这个","position":{"start":{"line":111,"column":11,"offset":3084},"end":{"line":111,"column":60,"offset":3133},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">struct Env</code>","position":{"start":{"line":111,"column":60,"offset":3133},"end":{"line":111,"column":72,"offset":3145},"indent":[]}},{"type":"text","value":"，他们的","position":{"start":{"line":111,"column":72,"offset":3145},"end":{"line":111,"column":76,"offset":3149},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_id</code>","position":{"start":{"line":111,"column":76,"offset":3149},"end":{"line":111,"column":84,"offset":3157},"indent":[]}},{"type":"text","value":"会不同。","position":{"start":{"line":111,"column":84,"offset":3157},"end":{"line":111,"column":88,"offset":3161},"indent":[]}}],"position":{"start":{"line":111,"column":3,"offset":3076},"end":{"line":111,"column":88,"offset":3161},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":3074},"end":{"line":112,"column":1,"offset":3162},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_parent_id</code>","position":{"start":{"line":113,"column":3,"offset":3165},"end":{"line":113,"column":18,"offset":3180},"indent":[]}},{"type":"text","value":":  保存创建了这个环境的环境的","position":{"start":{"line":113,"column":18,"offset":3180},"end":{"line":113,"column":34,"offset":3196},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_id</code>","position":{"start":{"line":113,"column":34,"offset":3196},"end":{"line":113,"column":42,"offset":3204},"indent":[]}},{"type":"text","value":"。从而可以建立一个树，从而方便一些security decision，也就是决定某个环境是否有某个权限。","position":{"start":{"line":113,"column":42,"offset":3204},"end":{"line":113,"column":94,"offset":3256},"indent":[]}}],"position":{"start":{"line":113,"column":3,"offset":3165},"end":{"line":113,"column":94,"offset":3256},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":3163},"end":{"line":114,"column":1,"offset":3257},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_type</code>","position":{"start":{"line":115,"column":3,"offset":3260},"end":{"line":115,"column":13,"offset":3270},"indent":[]}},{"type":"text","value":": 用来区分特殊环境的，普通的都是","position":{"start":{"line":115,"column":13,"offset":3270},"end":{"line":115,"column":30,"offset":3287},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ENV_TYPE_USER</code>","position":{"start":{"line":115,"column":30,"offset":3287},"end":{"line":115,"column":45,"offset":3302},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":115,"column":45,"offset":3302},"end":{"line":115,"column":46,"offset":3303},"indent":[]}}],"position":{"start":{"line":115,"column":3,"offset":3260},"end":{"line":115,"column":46,"offset":3303},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":3258},"end":{"line":116,"column":1,"offset":3304},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_status</code>","position":{"start":{"line":117,"column":3,"offset":3307},"end":{"line":117,"column":15,"offset":3319},"indent":[]}},{"type":"text","value":": 状态，具体取值如下：","position":{"start":{"line":117,"column":15,"offset":3319},"end":{"line":117,"column":27,"offset":3331},"indent":[]}}],"position":{"start":{"line":117,"column":3,"offset":3307},"end":{"line":117,"column":27,"offset":3331},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Values of env_status in struct Env</span>\n<span class=\"token keyword\">enum</span> <span class=\"token punctuation\">{</span>\n\tENV_FREE <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>  <span class=\"token comment\">// inactive, Env在env_free上</span>\n\tENV_DYING<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// zombie, environment, 下次trap到kernel的时候会被释放</span>\n\tENV_RUNNABLE<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// waiting to run</span>\n\tENV_RUNNING<span class=\"token punctuation\">,</span>  <span class=\"token comment\">// currently running</span>\n\tENV_NOT_RUNNABLE  <span class=\"token comment\">// currently active, but not ready to run，如等待IPC</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":119,"column":3,"offset":3335},"end":{"line":128,"column":6,"offset":3648},"indent":[3,3,3,3,3,3,3,3,3]}}],"position":{"start":{"line":117,"column":1,"offset":3305},"end":{"line":129,"column":1,"offset":3649},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_pgdir</code>","position":{"start":{"line":130,"column":3,"offset":3652},"end":{"line":130,"column":14,"offset":3663},"indent":[]}},{"type":"text","value":": 该环境的page directory","position":{"start":{"line":130,"column":14,"offset":3663},"end":{"line":130,"column":34,"offset":3683},"indent":[]}}],"position":{"start":{"line":130,"column":3,"offset":3652},"end":{"line":130,"column":34,"offset":3683},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":3650},"end":{"line":130,"column":34,"offset":3683},"indent":[]}}],"position":{"start":{"line":107,"column":1,"offset":2970},"end":{"line":130,"column":34,"offset":3683},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"同Unix process一样，JOS环境结合了thread与address space。thread用保存的寄存器确定（","position":{"start":{"line":132,"column":1,"offset":3685},"end":{"line":132,"column":62,"offset":3746},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_tf</code>","position":{"start":{"line":132,"column":62,"offset":3746},"end":{"line":132,"column":70,"offset":3754},"indent":[]}},{"type":"text","value":"），address space用","position":{"start":{"line":132,"column":70,"offset":3754},"end":{"line":132,"column":86,"offset":3770},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_pgdir</code>","position":{"start":{"line":132,"column":86,"offset":3770},"end":{"line":132,"column":97,"offset":3781},"indent":[]}},{"type":"text","value":"确定。kernel必须要设置好这两者以成功运行某个环境。","position":{"start":{"line":132,"column":97,"offset":3781},"end":{"line":132,"column":125,"offset":3809},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":3685},"end":{"line":132,"column":125,"offset":3809},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Allocating the Environments Array","position":{"start":{"line":134,"column":5,"offset":3815},"end":{"line":134,"column":38,"offset":3848},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":3811},"end":{"line":134,"column":38,"offset":3848},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"修改","position":{"start":{"line":136,"column":1,"offset":3850},"end":{"line":136,"column":3,"offset":3852},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mem_init</code>","position":{"start":{"line":136,"column":3,"offset":3852},"end":{"line":136,"column":13,"offset":3862},"indent":[]}},{"type":"text","value":"以分配","position":{"start":{"line":136,"column":13,"offset":3862},"end":{"line":136,"column":16,"offset":3865},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">envs</code>","position":{"start":{"line":136,"column":16,"offset":3865},"end":{"line":136,"column":22,"offset":3871},"indent":[]}},{"type":"text","value":"的地址。并把envs映射到kernel page directory的对应位置。","position":{"start":{"line":136,"column":22,"offset":3871},"end":{"line":136,"column":62,"offset":3911},"indent":[]}}],"position":{"start":{"line":136,"column":1,"offset":3850},"end":{"line":136,"column":62,"offset":3911},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 1","position":{"start":{"line":138,"column":5,"offset":3917},"end":{"line":138,"column":15,"offset":3927},"indent":[]}}],"position":{"start":{"line":138,"column":1,"offset":3913},"end":{"line":138,"column":15,"offset":3927},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////</span>\n\t<span class=\"token comment\">// Make 'envs' point to an array of size 'NENV' of 'struct Env'.</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\tenvs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">boot_alloc</span><span class=\"token punctuation\">(</span>NENV<span class=\"token operator\">*</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n    <span class=\"token comment\">//////////////////////////////////////////////////////////////////////</span>\n\t<span class=\"token comment\">// Map the 'envs' array read-only by the user at linear address UENVS</span>\n\t<span class=\"token comment\">// (ie. perm = PTE_U | PTE_P).</span>\n\t<span class=\"token comment\">// Permissions:</span>\n\t<span class=\"token comment\">//    - the new image at UENVS  -- kernel R, user R</span>\n\t<span class=\"token comment\">//    - envs itself -- kernel RW, user NONE</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">,</span> UENVS<span class=\"token punctuation\">,</span> PTSIZE<span class=\"token punctuation\">,</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>envs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":140,"column":1,"offset":3929},"end":{"line":154,"column":4,"offset":4558},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"注意后面的这个映射位置以及大小是参照的JOS的虚拟内存分布。写完之后运行kernel应该会出现好几个succeeded:","position":{"start":{"line":156,"column":1,"offset":4560},"end":{"line":156,"column":61,"offset":4620},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":4560},"end":{"line":156,"column":61,"offset":4620},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">check_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_alloc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_kern_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_installed_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span></code></pre></div>","position":{"start":{"line":158,"column":1,"offset":4622},"end":{"line":165,"column":4,"offset":4825},"indent":[1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Creating and Running Environments","position":{"start":{"line":167,"column":5,"offset":4831},"end":{"line":167,"column":38,"offset":4864},"indent":[]}}],"position":{"start":{"line":167,"column":1,"offset":4827},"end":{"line":167,"column":38,"offset":4864},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"因为现在还没有file system，所以要运行一个用户环境需要让kernel去加载一个静态的二进制image。这些影响都在","position":{"start":{"line":169,"column":1,"offset":4866},"end":{"line":169,"column":63,"offset":4928},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">obj/user/</code>","position":{"start":{"line":169,"column":63,"offset":4928},"end":{"line":169,"column":74,"offset":4939},"indent":[]}},{"type":"text","value":"中，这些在","position":{"start":{"line":169,"column":74,"offset":4939},"end":{"line":169,"column":79,"offset":4944},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/Makefrag</code>","position":{"start":{"line":169,"column":79,"offset":4944},"end":{"line":169,"column":94,"offset":4959},"indent":[]}},{"type":"text","value":"中也有体现：","position":{"start":{"line":169,"column":94,"offset":4959},"end":{"line":169,"column":100,"offset":4965},"indent":[]}}],"position":{"start":{"line":169,"column":1,"offset":4866},"end":{"line":169,"column":100,"offset":4965},"indent":[]}},{"type":"html","lang":"makefile","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"makefile\"><pre class=\"language-makefile\"><code class=\"language-makefile\"><span class=\"token comment\"># Binary program images to embed within the kernel.</span>\n<span class=\"token comment\"># Binary files for LAB3</span>\nKERN_BINFILES <span class=\"token operator\">:=</span>\tuser/hello \\\n\t\t\tuser/buggyhello \\\n\t\t\tuser/buggyhello2 \\\n\t\t\tuser/evilhello \\\n\t\t\tuser/testbss \\\n\t\t\tuser/divzero \\\n\t\t\tuser/breakpoint \\\n\t\t\tuser/softint \\\n\t\t\tuser/badsegment \\\n\t\t\tuser/faultread \\\n\t\t\tuser/faultreadkernel \\\n\t\t\tuser/faultwrite \\\n\t\t\tuser/faultwritekernel\n...\n<span class=\"token comment\"># How to build the kernel itself</span>\n<span class=\"token symbol\"><span class=\"token variable\">$</span>(OBJDIR)/kern/kernel</span><span class=\"token punctuation\">:</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>KERN_OBJFILES<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>KERN_BINFILES<span class=\"token punctuation\">)</span> kern/kernel.ld \\\n\t  <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJDIR<span class=\"token punctuation\">)</span>/.vars.KERN_LDFLAGS\n\t<span class=\"token operator\">@</span>echo + ld <span class=\"token variable\">$@</span>\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>LD<span class=\"token punctuation\">)</span> -o <span class=\"token variable\">$@</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>KERN_LDFLAGS<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>KERN_OBJFILES<span class=\"token punctuation\">)</span> <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>GCC_LIB<span class=\"token punctuation\">)</span> -b binary <span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>KERN_BINFILES<span class=\"token punctuation\">)</span>\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>OBJDUMP<span class=\"token punctuation\">)</span> -S <span class=\"token variable\">$@</span> > <span class=\"token variable\">$@.asm</span>\n\t<span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>V<span class=\"token punctuation\">)</span><span class=\"token variable\">$</span><span class=\"token punctuation\">(</span>NM<span class=\"token punctuation\">)</span> -n <span class=\"token variable\">$@</span> > <span class=\"token variable\">$@.sym</span></code></pre></div>","position":{"start":{"line":171,"column":1,"offset":4967},"end":{"line":195,"column":4,"offset":5642},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"这里的","position":{"start":{"line":197,"column":1,"offset":5644},"end":{"line":197,"column":4,"offset":5647},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">-b binary</code>","position":{"start":{"line":197,"column":4,"offset":5647},"end":{"line":197,"column":15,"offset":5658},"indent":[]}},{"type":"text","value":"表示把文件当成raw unterpreted binary而不是编译器生成的","position":{"start":{"line":197,"column":15,"offset":5658},"end":{"line":197,"column":53,"offset":5696},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">.o</code>","position":{"start":{"line":197,"column":53,"offset":5696},"end":{"line":197,"column":57,"offset":5700},"indent":[]}},{"type":"text","value":"文件。如果查看","position":{"start":{"line":197,"column":57,"offset":5700},"end":{"line":197,"column":64,"offset":5707},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">obj/kern/kernel.sym</code>","position":{"start":{"line":197,"column":64,"offset":5707},"end":{"line":197,"column":85,"offset":5728},"indent":[]}},{"type":"text","value":"，可以看到一系列神奇的symbol","position":{"start":{"line":197,"column":85,"offset":5728},"end":{"line":197,"column":102,"offset":5745},"indent":[]}}],"position":{"start":{"line":197,"column":1,"offset":5644},"end":{"line":197,"column":102,"offset":5745},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">00008acc A _binary_obj_user_hello_size\n00008ad0 A _binary_obj_user_badsegment_size\n00008ad0 A _binary_obj_user_breakpoint_size\n00008ad0 A _binary_obj_user_buggyhello_size\n00008ad0 A _binary_obj_user_evilhello_size\n00008ad0 A _binary_obj_user_faultread_size\n00008ad0 A _binary_obj_user_faultwrite_size\n00008ad0 A _binary_obj_user_softint_size\n00008ad8 A _binary_obj_user_faultreadkernel_size\n00008ad8 A _binary_obj_user_faultwritekernel_size\n00008ae4 A _binary_obj_user_divzero_size\n00008ae8 A _binary_obj_user_testbss_size\n00008aec A _binary_obj_user_buggyhello2_size</code></pre></div>","position":{"start":{"line":199,"column":1,"offset":5747},"end":{"line":213,"column":4,"offset":6330},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"linker生成了这些symbol以让kernel可以调用这些二进制文件。","position":{"start":{"line":215,"column":1,"offset":6332},"end":{"line":215,"column":38,"offset":6369},"indent":[]}}],"position":{"start":{"line":215,"column":1,"offset":6332},"end":{"line":215,"column":38,"offset":6369},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在","position":{"start":{"line":217,"column":1,"offset":6371},"end":{"line":217,"column":2,"offset":6372},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/init.c</code>","position":{"start":{"line":217,"column":2,"offset":6372},"end":{"line":217,"column":15,"offset":6385},"indent":[]}},{"type":"text","value":"中，","position":{"start":{"line":217,"column":15,"offset":6385},"end":{"line":217,"column":17,"offset":6387},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">i386_init()</code>","position":{"start":{"line":217,"column":17,"offset":6387},"end":{"line":217,"column":30,"offset":6400},"indent":[]}},{"type":"text","value":"函数会调用这些二进制文件中的一个（默认是","position":{"start":{"line":217,"column":30,"offset":6400},"end":{"line":217,"column":50,"offset":6420},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user_hello</code>","position":{"start":{"line":217,"column":50,"offset":6420},"end":{"line":217,"column":62,"offset":6432},"indent":[]}},{"type":"text","value":"）。但是这个函数里面和环境相关的部分都还没有完成，下面就是要填充上这些函数了。","position":{"start":{"line":217,"column":62,"offset":6432},"end":{"line":217,"column":101,"offset":6471},"indent":[]}}],"position":{"start":{"line":217,"column":1,"offset":6371},"end":{"line":217,"column":101,"offset":6471},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 2","position":{"start":{"line":219,"column":5,"offset":6477},"end":{"line":219,"column":15,"offset":6487},"indent":[]}}],"position":{"start":{"line":219,"column":1,"offset":6473},"end":{"line":219,"column":15,"offset":6487},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"完成","position":{"start":{"line":221,"column":1,"offset":6489},"end":{"line":221,"column":3,"offset":6491},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/env.c</code>","position":{"start":{"line":221,"column":3,"offset":6491},"end":{"line":221,"column":15,"offset":6503},"indent":[]}},{"type":"text","value":"中的如下函数：","position":{"start":{"line":221,"column":15,"offset":6503},"end":{"line":221,"column":22,"offset":6510},"indent":[]}}],"position":{"start":{"line":221,"column":1,"offset":6489},"end":{"line":221,"column":22,"offset":6510},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_init()</code>","position":{"start":{"line":223,"column":3,"offset":6514},"end":{"line":223,"column":15,"offset":6526},"indent":[]}}],"position":{"start":{"line":223,"column":3,"offset":6514},"end":{"line":223,"column":15,"offset":6526},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"初始化","position":{"start":{"line":225,"column":3,"offset":6530},"end":{"line":225,"column":6,"offset":6533},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">envs</code>","position":{"start":{"line":225,"column":6,"offset":6533},"end":{"line":225,"column":12,"offset":6539},"indent":[]}},{"type":"text","value":"与","position":{"start":{"line":225,"column":12,"offset":6539},"end":{"line":225,"column":13,"offset":6540},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_free_list</code>","position":{"start":{"line":225,"column":13,"offset":6540},"end":{"line":225,"column":28,"offset":6555},"indent":[]}}],"position":{"start":{"line":225,"column":3,"offset":6530},"end":{"line":225,"column":28,"offset":6555},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Mark all environments in 'envs' as free, set their env_ids to 0,</span>\n<span class=\"token comment\">// and insert them into the env_free_list.</span>\n<span class=\"token comment\">// Make sure the environments are in the free list in the same order</span>\n<span class=\"token comment\">// they are in the envs array (i.e., so that the first call to</span>\n<span class=\"token comment\">// env_alloc() returns envs[0]).</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">env_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Set up envs array</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>envs<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>envs<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tenv_free_list <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span>NENV<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">>=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">--</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tenvs<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>env_link <span class=\"token operator\">=</span> env_free_list<span class=\"token punctuation\">;</span>\n\t\tenv_free_list <span class=\"token operator\">=</span> envs <span class=\"token operator\">+</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// Per-CPU part of the initialization</span>\n\t<span class=\"token function\">env_init_percpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":227,"column":3,"offset":6559},"end":{"line":248,"column":6,"offset":7174},"indent":[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]}},{"type":"paragraph","children":[{"type":"text","value":"注意这里注释要求","position":{"start":{"line":250,"column":3,"offset":7178},"end":{"line":250,"column":11,"offset":7186},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_free_list</code>","position":{"start":{"line":250,"column":11,"offset":7186},"end":{"line":250,"column":26,"offset":7201},"indent":[]}},{"type":"text","value":"顺序和","position":{"start":{"line":250,"column":26,"offset":7201},"end":{"line":250,"column":29,"offset":7204},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">envs</code>","position":{"start":{"line":250,"column":29,"offset":7204},"end":{"line":250,"column":35,"offset":7210},"indent":[]}},{"type":"text","value":"的一样所以这里和","position":{"start":{"line":250,"column":35,"offset":7210},"end":{"line":250,"column":43,"offset":7218},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">page_init</code>","position":{"start":{"line":250,"column":43,"offset":7218},"end":{"line":250,"column":54,"offset":7229},"indent":[]}},{"type":"text","value":"的顺序相反。（不明白为啥...）","position":{"start":{"line":250,"column":54,"offset":7229},"end":{"line":250,"column":70,"offset":7245},"indent":[]}}],"position":{"start":{"line":250,"column":3,"offset":7178},"end":{"line":250,"column":70,"offset":7245},"indent":[]}}],"position":{"start":{"line":223,"column":1,"offset":6512},"end":{"line":251,"column":1,"offset":7246},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_setup_vm()</code>","position":{"start":{"line":252,"column":3,"offset":7249},"end":{"line":252,"column":19,"offset":7265},"indent":[]}}],"position":{"start":{"line":252,"column":3,"offset":7249},"end":{"line":252,"column":19,"offset":7265},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"把初始化","position":{"start":{"line":254,"column":3,"offset":7269},"end":{"line":254,"column":7,"offset":7273},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_pgdir</code>","position":{"start":{"line":254,"column":7,"offset":7273},"end":{"line":254,"column":18,"offset":7284},"indent":[]}},{"type":"text","value":"，并把其中的kernel部分的内存分配好。","position":{"start":{"line":254,"column":18,"offset":7284},"end":{"line":254,"column":39,"offset":7305},"indent":[]}}],"position":{"start":{"line":254,"column":3,"offset":7269},"end":{"line":254,"column":39,"offset":7305},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Initialize the kernel virtual memory layout for environment e.</span>\n<span class=\"token comment\">// Allocate a page directory, set e->env_pgdir accordingly,</span>\n<span class=\"token comment\">// and initialize the kernel portion of the new environment's address space.</span>\n<span class=\"token comment\">// Do NOT (yet) map anything into the user portion</span>\n<span class=\"token comment\">// of the environment's virtual address space.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns 0 on success, &lt; 0 on error.  Errors include:</span>\n<span class=\"token comment\">//\t-E_NO_MEM if page directory or table could not be allocated.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">env_setup_vm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Allocate a page for the page directory</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token function\">page_alloc</span><span class=\"token punctuation\">(</span>ALLOC_ZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Now, set e->env_pgdir and initialize the page directory.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Hint:</span>\n\t<span class=\"token comment\">//    - The VA space of all envs is identical above UTOP</span>\n\t<span class=\"token comment\">//\t(except at UVPT, which we've set below).</span>\n\t<span class=\"token comment\">//\tSee inc/memlayout.h for permissions and layout.</span>\n\t<span class=\"token comment\">//\tCan you use kern_pgdir as a template?  Hint: Yes.</span>\n\t<span class=\"token comment\">//\t(Make sure you got the permissions right in Lab 2.)</span>\n\t<span class=\"token comment\">//    - The initial VA below UTOP is empty.</span>\n\t<span class=\"token comment\">//    - You do not need to make any more calls to page_alloc.</span>\n\t<span class=\"token comment\">//    - Note: In general, pp_ref is not maintained for</span>\n\t<span class=\"token comment\">//\tphysical pages mapped only above UTOP, but env_pgdir</span>\n\t<span class=\"token comment\">//\tis an exception -- you need to increment env_pgdir's</span>\n\t<span class=\"token comment\">//\tpp_ref for env_free to work correctly.</span>\n\t<span class=\"token comment\">//    - The functions in kern/pmap.h are handy.</span>\n\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\te<span class=\"token operator\">-></span>env_pgdir <span class=\"token operator\">=</span> <span class=\"token function\">page2kva</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tp<span class=\"token operator\">-></span>pp_ref<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> kern_pgdir<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// UVPT maps the env's own page table read-only.</span>\n\t<span class=\"token comment\">// Permissions: kernel R, user R</span>\n\te<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">[</span><span class=\"token function\">PDX</span><span class=\"token punctuation\">(</span>UVPT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> PTE_P <span class=\"token operator\">|</span> PTE_U<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":256,"column":3,"offset":7309},"end":{"line":302,"column":6,"offset":9000},"indent":[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]}},{"type":"paragraph","children":[{"type":"text","value":"注意这里用内存复制是因为","position":{"start":{"line":304,"column":3,"offset":9004},"end":{"line":304,"column":15,"offset":9016},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot_region_map</code>","position":{"start":{"line":304,"column":15,"offset":9016},"end":{"line":304,"column":32,"offset":9033},"indent":[]}},{"type":"text","value":"是一个静态函数，不能调用。","position":{"start":{"line":304,"column":32,"offset":9033},"end":{"line":304,"column":45,"offset":9046},"indent":[]}}],"position":{"start":{"line":304,"column":3,"offset":9004},"end":{"line":304,"column":45,"offset":9046},"indent":[]}}],"position":{"start":{"line":252,"column":1,"offset":7247},"end":{"line":305,"column":1,"offset":9047},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">region_alloc</code>","position":{"start":{"line":306,"column":3,"offset":9050},"end":{"line":306,"column":17,"offset":9064},"indent":[]}}],"position":{"start":{"line":306,"column":3,"offset":9050},"end":{"line":306,"column":17,"offset":9064},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在当前环境下在虚拟地址","position":{"start":{"line":308,"column":3,"offset":9068},"end":{"line":308,"column":14,"offset":9079},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">va</code>","position":{"start":{"line":308,"column":14,"offset":9079},"end":{"line":308,"column":18,"offset":9083},"indent":[]}},{"type":"text","value":"处分配长为","position":{"start":{"line":308,"column":18,"offset":9083},"end":{"line":308,"column":23,"offset":9088},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">len</code>","position":{"start":{"line":308,"column":23,"offset":9088},"end":{"line":308,"column":28,"offset":9093},"indent":[]}},{"type":"text","value":"的内存。","position":{"start":{"line":308,"column":28,"offset":9093},"end":{"line":308,"column":32,"offset":9097},"indent":[]}}],"position":{"start":{"line":308,"column":3,"offset":9068},"end":{"line":308,"column":32,"offset":9097},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Allocate len bytes of physical memory for environment env,</span>\n<span class=\"token comment\">// and map it at virtual address va in the environment's address space.</span>\n<span class=\"token comment\">// Does not zero or otherwise initialize the mapped pages in any way.</span>\n<span class=\"token comment\">// Pages should be writable by user and kernel.</span>\n<span class=\"token comment\">// Panic if any allocation attempt fails.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">region_alloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token comment\">// (But only if you need it for load_icode.)</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Hint: It is easier to use region_alloc if the caller can pass</span>\n\t<span class=\"token comment\">//   'va' and 'len' values that are not page-aligned.</span>\n\t<span class=\"token comment\">//   You should round va down, and round (va + len) up.</span>\n\t<span class=\"token comment\">//   (Watch out for corner-cases!)</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>v <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span><span class=\"token operator\">*</span> end <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDUP</span><span class=\"token punctuation\">(</span>va <span class=\"token operator\">+</span> len<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> v <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> v <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> <span class=\"token function\">page_alloc</span><span class=\"token punctuation\">(</span>ALLOC_ZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"region_alloc: %e\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">page_insert</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> p<span class=\"token punctuation\">,</span> v<span class=\"token punctuation\">,</span> PTE_U <span class=\"token operator\">|</span> PTE_W <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"region_alloc: %e\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":310,"column":3,"offset":9101},"end":{"line":338,"column":6,"offset":10151},"indent":[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]}}],"position":{"start":{"line":306,"column":1,"offset":9048},"end":{"line":339,"column":1,"offset":10152},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">load_icode()</code>","position":{"start":{"line":340,"column":3,"offset":10155},"end":{"line":340,"column":17,"offset":10169},"indent":[]}}],"position":{"start":{"line":340,"column":3,"offset":10155},"end":{"line":340,"column":17,"offset":10169},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"设置initial program binary, stack与processor flags。如注释所说，主要是模仿","position":{"start":{"line":342,"column":3,"offset":10173},"end":{"line":342,"column":62,"offset":10232},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot/main.c</code>","position":{"start":{"line":342,"column":62,"offset":10232},"end":{"line":342,"column":75,"offset":10245},"indent":[]}},{"type":"text","value":"中的函数。注意需要切换","position":{"start":{"line":342,"column":75,"offset":10245},"end":{"line":342,"column":86,"offset":10256},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pgdir</code>","position":{"start":{"line":342,"column":86,"offset":10256},"end":{"line":342,"column":93,"offset":10263},"indent":[]}},{"type":"text","value":"，因为进入这个函数的时候是kernel mode，但是分配内存要在用户的地址空间分配。","position":{"start":{"line":342,"column":93,"offset":10263},"end":{"line":342,"column":136,"offset":10306},"indent":[]}}],"position":{"start":{"line":342,"column":3,"offset":10173},"end":{"line":342,"column":136,"offset":10306},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Set up the initial program binary, stack, and processor flags</span>\n<span class=\"token comment\">// for a user process.</span>\n<span class=\"token comment\">// This function is ONLY called during kernel initialization,</span>\n<span class=\"token comment\">// before running the first user-mode environment.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// This function loads all loadable segments from the ELF binary image</span>\n<span class=\"token comment\">// into the environment's user memory, starting at the appropriate</span>\n<span class=\"token comment\">// virtual addresses indicated in the ELF program header.</span>\n<span class=\"token comment\">// At the same time it clears to zero any portions of these segments</span>\n<span class=\"token comment\">// that are marked in the program header as being mapped</span>\n<span class=\"token comment\">// but not actually present in the ELF file - i.e., the program's bss section.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// All this is very similar to what our boot loader does, except the boot</span>\n<span class=\"token comment\">// loader also needs to read the code from disk.  Take a look at</span>\n<span class=\"token comment\">// boot/main.c to get ideas.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Finally, this function maps one page for the program's initial stack.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// load_icode panics if it encounters problems.</span>\n<span class=\"token comment\">//  - How might load_icode fail?  What might be wrong with the given input?</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">load_icode</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">,</span> uint8_t <span class=\"token operator\">*</span>binary<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Hints:</span>\n\t<span class=\"token comment\">//  Load each program segment into virtual memory</span>\n\t<span class=\"token comment\">//  at the address specified in the ELF segment header.</span>\n\t<span class=\"token comment\">//  You should only load segments with ph->p_type == ELF_PROG_LOAD.</span>\n\t<span class=\"token comment\">//  Each segment's virtual address can be found in ph->p_va</span>\n\t<span class=\"token comment\">//  and its size in memory can be found in ph->p_memsz.</span>\n\t<span class=\"token comment\">//  The ph->p_filesz bytes from the ELF binary, starting at</span>\n\t<span class=\"token comment\">//  'binary + ph->p_offset', should be copied to virtual address</span>\n\t<span class=\"token comment\">//  ph->p_va.  Any remaining memory bytes should be cleared to zero.</span>\n\t<span class=\"token comment\">//  (The ELF header should have ph->p_filesz &lt;= ph->p_memsz.)</span>\n\t<span class=\"token comment\">//  Use functions from the previous lab to allocate and map pages.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">//  All page protection bits should be user read/write for now.</span>\n\t<span class=\"token comment\">//  ELF segments are not necessarily page-aligned, but you can</span>\n\t<span class=\"token comment\">//  assume for this function that no two segments will touch</span>\n\t<span class=\"token comment\">//  the same virtual page.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">//  You may find a function like region_alloc useful.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">//  Loading the segments is much simpler if you can move data</span>\n\t<span class=\"token comment\">//  directly into the virtual addresses stored in the ELF binary.</span>\n\t<span class=\"token comment\">//  So which page directory should be in force during</span>\n\t<span class=\"token comment\">//  this function?</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">//  You must also do something with the program's entry point,</span>\n\t<span class=\"token comment\">//  to make sure that the environment starts executing there.</span>\n\t<span class=\"token comment\">//  What?  (See env_run() and env_pop_tf() below.)</span>\n\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Elf</span> <span class=\"token operator\">*</span>elfhdr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Elf</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>binary<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>elfhdr<span class=\"token operator\">-></span>e_magic <span class=\"token operator\">!=</span> ELF_MAGIC<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"load_icode: not valid elf file\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Proghdr</span> <span class=\"token operator\">*</span>ph<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>eph<span class=\"token punctuation\">;</span>\n\tph <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Proghdr</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>binary <span class=\"token operator\">+</span> elfhdr<span class=\"token operator\">-></span>e_phoff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\teph <span class=\"token operator\">=</span> ph <span class=\"token operator\">+</span> elfhdr<span class=\"token operator\">-></span>e_phnum<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> ph <span class=\"token operator\">&lt;</span> eph<span class=\"token punctuation\">;</span> ph<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_type <span class=\"token operator\">==</span> ELF_PROG_LOAD<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token function\">region_alloc</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>ph<span class=\"token operator\">-></span>p_va<span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>p_memsz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">memcpy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>binary <span class=\"token operator\">+</span> ph<span class=\"token operator\">-></span>p_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>p_filesz<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\te<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_eip <span class=\"token operator\">=</span> elfhdr<span class=\"token operator\">-></span>e_entry<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Now map one page for the program's initial stack</span>\n\t<span class=\"token comment\">// at virtual address USTACKTOP - PGSIZE.</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token function\">region_alloc</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>USTACKTOP <span class=\"token operator\">-</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":344,"column":3,"offset":10310},"end":{"line":418,"column":6,"offset":13542},"indent":[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]}}],"position":{"start":{"line":340,"column":1,"offset":10153},"end":{"line":419,"column":1,"offset":13543},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_create</code>","position":{"start":{"line":420,"column":3,"offset":13546},"end":{"line":420,"column":15,"offset":13558},"indent":[]}}],"position":{"start":{"line":420,"column":3,"offset":13546},"end":{"line":420,"column":15,"offset":13558},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"就是结合上面的两个函数，先","position":{"start":{"line":422,"column":3,"offset":13562},"end":{"line":422,"column":16,"offset":13575},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_alloc</code>","position":{"start":{"line":422,"column":16,"offset":13575},"end":{"line":422,"column":27,"offset":13586},"indent":[]}},{"type":"text","value":"再","position":{"start":{"line":422,"column":27,"offset":13586},"end":{"line":422,"column":28,"offset":13587},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">load_icode</code>","position":{"start":{"line":422,"column":28,"offset":13587},"end":{"line":422,"column":40,"offset":13599},"indent":[]}}],"position":{"start":{"line":422,"column":3,"offset":13562},"end":{"line":422,"column":40,"offset":13599},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Allocates a new env with env_alloc, loads the named elf</span>\n<span class=\"token comment\">// binary into it with load_icode, and sets its env_type.</span>\n<span class=\"token comment\">// This function is ONLY called during kernel initialization,</span>\n<span class=\"token comment\">// before running the first user-mode environment.</span>\n<span class=\"token comment\">// The new env's parent ID is set to 0.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">env_create</span><span class=\"token punctuation\">(</span>uint8_t <span class=\"token operator\">*</span>binary<span class=\"token punctuation\">,</span> <span class=\"token keyword\">enum</span> <span class=\"token class-name\">EnvType</span> type<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">env_alloc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"env_create: %e\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">load_icode</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">,</span> binary<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_type <span class=\"token operator\">=</span> type<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":424,"column":3,"offset":13603},"end":{"line":442,"column":6,"offset":14141},"indent":[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]}}],"position":{"start":{"line":420,"column":1,"offset":13544},"end":{"line":443,"column":1,"offset":14142},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_run()</code>","position":{"start":{"line":444,"column":3,"offset":14145},"end":{"line":444,"column":14,"offset":14156},"indent":[]}}],"position":{"start":{"line":444,"column":3,"offset":14145},"end":{"line":444,"column":14,"offset":14156},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"按照注释的要求一步一步写就好了。注意别忘了最开始","position":{"start":{"line":446,"column":3,"offset":14160},"end":{"line":446,"column":27,"offset":14184},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">curenv</code>","position":{"start":{"line":446,"column":27,"offset":14184},"end":{"line":446,"column":35,"offset":14192},"indent":[]}},{"type":"text","value":"可能是","position":{"start":{"line":446,"column":35,"offset":14192},"end":{"line":446,"column":38,"offset":14195},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">NULL</code>","position":{"start":{"line":446,"column":38,"offset":14195},"end":{"line":446,"column":44,"offset":14201},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":446,"column":44,"offset":14201},"end":{"line":446,"column":45,"offset":14202},"indent":[]}}],"position":{"start":{"line":446,"column":3,"offset":14160},"end":{"line":446,"column":45,"offset":14202},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Context switch from curenv to env e.</span>\n<span class=\"token comment\">// Note: if this is the first call to env_run, curenv is NULL.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// This function does not return.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">env_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Step 1: If this is a context switch (a new environment is running):</span>\n\t<span class=\"token comment\">//\t   1. Set the current environment (if any) back to</span>\n\t<span class=\"token comment\">//\t      ENV_RUNNABLE if it is ENV_RUNNING (think about</span>\n\t<span class=\"token comment\">//\t      what other states it can be in),</span>\n\t<span class=\"token comment\">//\t   2. Set 'curenv' to the new environment,</span>\n\t<span class=\"token comment\">//\t   3. Set its status to ENV_RUNNING,</span>\n\t<span class=\"token comment\">//\t   4. Update its 'env_runs' counter,</span>\n\t<span class=\"token comment\">//\t   5. Use lcr3() to switch to its address space.</span>\n\t<span class=\"token comment\">// Step 2: Use env_pop_tf() to restore the environment's</span>\n\t<span class=\"token comment\">//\t   registers and drop into user mode in the</span>\n\t<span class=\"token comment\">//\t   environment.</span>\n\n\t<span class=\"token comment\">// Hint: This function loads the new environment's state from</span>\n\t<span class=\"token comment\">//\te->env_tf.  Go back through the code you wrote above</span>\n\t<span class=\"token comment\">//\tand make sure you have set the relevant parts of</span>\n\t<span class=\"token comment\">//\te->env_tf to sensible values.</span>\n\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curenv <span class=\"token operator\">&amp;&amp;</span> curenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">==</span> ENV_RUNNING<span class=\"token punctuation\">)</span>\n\t\tcurenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_RUNNABLE<span class=\"token punctuation\">;</span>\n\tcurenv <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_RUNNING<span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_runs<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">env_pop_tf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// panic(\"env_run not yet implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":448,"column":3,"offset":14206},"end":{"line":484,"column":6,"offset":15494},"indent":[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]}}],"position":{"start":{"line":444,"column":1,"offset":14143},"end":{"line":484,"column":6,"offset":15494},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":223,"column":1,"offset":6512},"end":{"line":484,"column":6,"offset":15494},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"完成了这几步之后运行当启动kernel的时候会进行如下操作：","position":{"start":{"line":486,"column":1,"offset":15496},"end":{"line":486,"column":31,"offset":15526},"indent":[]}}],"position":{"start":{"line":486,"column":1,"offset":15496},"end":{"line":486,"column":31,"offset":15526},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"start (","position":{"start":{"line":488,"column":3,"offset":15530},"end":{"line":488,"column":10,"offset":15537},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/entry.S</code>","position":{"start":{"line":488,"column":10,"offset":15537},"end":{"line":488,"column":24,"offset":15551},"indent":[]}},{"type":"text","value":")：kernel的entry，也就是boot loader加载kernel的entry","position":{"start":{"line":488,"column":24,"offset":15551},"end":{"line":488,"column":67,"offset":15594},"indent":[]}}],"position":{"start":{"line":488,"column":3,"offset":15530},"end":{"line":488,"column":67,"offset":15594},"indent":[]}}],"position":{"start":{"line":488,"column":1,"offset":15528},"end":{"line":488,"column":67,"offset":15594},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">i386_init</code>","position":{"start":{"line":489,"column":3,"offset":15597},"end":{"line":489,"column":14,"offset":15608},"indent":[]}},{"type":"text","value":"(","position":{"start":{"line":489,"column":14,"offset":15608},"end":{"line":489,"column":15,"offset":15609},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/init.c</code>","position":{"start":{"line":489,"column":15,"offset":15609},"end":{"line":489,"column":28,"offset":15622},"indent":[]}},{"type":"text","value":")：上面的entry调用了这个函数，对kernel进行初始化","position":{"start":{"line":489,"column":28,"offset":15622},"end":{"line":489,"column":58,"offset":15652},"indent":[]}}],"position":{"start":{"line":489,"column":3,"offset":15597},"end":{"line":489,"column":58,"offset":15652},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">cons_init</code>","position":{"start":{"line":490,"column":5,"offset":15657},"end":{"line":490,"column":16,"offset":15668},"indent":[]}},{"type":"text","value":"：初始化console","position":{"start":{"line":490,"column":16,"offset":15668},"end":{"line":490,"column":27,"offset":15679},"indent":[]}}],"position":{"start":{"line":490,"column":5,"offset":15657},"end":{"line":490,"column":27,"offset":15679},"indent":[]}}],"position":{"start":{"line":490,"column":3,"offset":15655},"end":{"line":490,"column":27,"offset":15679},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">mem_init</code>","position":{"start":{"line":491,"column":5,"offset":15684},"end":{"line":491,"column":15,"offset":15694},"indent":[]}},{"type":"text","value":"：初始化kernel address space","position":{"start":{"line":491,"column":15,"offset":15694},"end":{"line":491,"column":39,"offset":15718},"indent":[]}}],"position":{"start":{"line":491,"column":5,"offset":15684},"end":{"line":491,"column":39,"offset":15718},"indent":[]}}],"position":{"start":{"line":491,"column":3,"offset":15682},"end":{"line":491,"column":39,"offset":15718},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_init</code>","position":{"start":{"line":492,"column":5,"offset":15723},"end":{"line":492,"column":15,"offset":15733},"indent":[]}},{"type":"text","value":"：初始化所有的环境","position":{"start":{"line":492,"column":15,"offset":15733},"end":{"line":492,"column":24,"offset":15742},"indent":[]}}],"position":{"start":{"line":492,"column":5,"offset":15723},"end":{"line":492,"column":24,"offset":15742},"indent":[]}}],"position":{"start":{"line":492,"column":3,"offset":15721},"end":{"line":492,"column":24,"offset":15742},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">trap_init</code>","position":{"start":{"line":493,"column":5,"offset":15747},"end":{"line":493,"column":16,"offset":15758},"indent":[]}},{"type":"text","value":" (still incomplete at this point)：初始化中断","position":{"start":{"line":493,"column":16,"offset":15758},"end":{"line":493,"column":55,"offset":15797},"indent":[]}}],"position":{"start":{"line":493,"column":5,"offset":15747},"end":{"line":493,"column":55,"offset":15797},"indent":[]}}],"position":{"start":{"line":493,"column":3,"offset":15745},"end":{"line":493,"column":55,"offset":15797},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_create</code>","position":{"start":{"line":494,"column":5,"offset":15802},"end":{"line":494,"column":17,"offset":15814},"indent":[]}},{"type":"text","value":"：创建一个用户环境","position":{"start":{"line":494,"column":17,"offset":15814},"end":{"line":494,"column":26,"offset":15823},"indent":[]}}],"position":{"start":{"line":494,"column":5,"offset":15802},"end":{"line":494,"column":26,"offset":15823},"indent":[]}}],"position":{"start":{"line":494,"column":3,"offset":15800},"end":{"line":494,"column":26,"offset":15823},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_run</code>","position":{"start":{"line":495,"column":5,"offset":15828},"end":{"line":495,"column":14,"offset":15837},"indent":[]}},{"type":"text","value":"：运行用户环境","position":{"start":{"line":495,"column":14,"offset":15837},"end":{"line":495,"column":21,"offset":15844},"indent":[]}}],"position":{"start":{"line":495,"column":5,"offset":15828},"end":{"line":495,"column":21,"offset":15844},"indent":[]}}],"position":{"start":{"line":495,"column":3,"offset":15826},"end":{"line":495,"column":21,"offset":15844},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">env_pop_tf</code>","position":{"start":{"line":496,"column":7,"offset":15851},"end":{"line":496,"column":19,"offset":15863},"indent":[]}},{"type":"text","value":"：从trapframe中还原这个用户环境所需要的寄存器状态。","position":{"start":{"line":496,"column":19,"offset":15863},"end":{"line":496,"column":49,"offset":15893},"indent":[]}}],"position":{"start":{"line":496,"column":7,"offset":15851},"end":{"line":496,"column":49,"offset":15893},"indent":[]}}],"position":{"start":{"line":496,"column":5,"offset":15849},"end":{"line":496,"column":49,"offset":15893},"indent":[]}}],"position":{"start":{"line":490,"column":3,"offset":15655},"end":{"line":496,"column":49,"offset":15893},"indent":[3,3,3,3,3,5]}}],"position":{"start":{"line":489,"column":1,"offset":15595},"end":{"line":496,"column":49,"offset":15893},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":488,"column":1,"offset":15528},"end":{"line":496,"column":49,"offset":15893},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"完成了exercise 2之后因为并没有初始化中断，所以会在","position":{"start":{"line":498,"column":1,"offset":15895},"end":{"line":498,"column":31,"offset":15925},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user_hello</code>","position":{"start":{"line":498,"column":31,"offset":15925},"end":{"line":498,"column":43,"offset":15937},"indent":[]}},{"type":"text","value":"第一次进行system call的时候报triple fault的错。这是因为：When the CPU discovers that it is not set up to handle this system call interrupt, it will generate a general protection exception, find that it can't handle that, generate a double fault exception, find that it can't handle that either, and finally give up with what's known as a \"triple fault\".","position":{"start":{"line":498,"column":43,"offset":15937},"end":{"line":498,"column":379,"offset":16273},"indent":[]}}],"position":{"start":{"line":498,"column":1,"offset":15895},"end":{"line":498,"column":379,"offset":16273},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们可以使用gdb来检测是否进入了用户环境，在","position":{"start":{"line":500,"column":1,"offset":16275},"end":{"line":500,"column":24,"offset":16298},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_pop_tf</code>","position":{"start":{"line":500,"column":24,"offset":16298},"end":{"line":500,"column":36,"offset":16310},"indent":[]}},{"type":"text","value":"中加断点之后逐步运行可以发现其会运行至地址为","position":{"start":{"line":500,"column":36,"offset":16310},"end":{"line":500,"column":58,"offset":16332},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0x800020</code>","position":{"start":{"line":500,"column":58,"offset":16332},"end":{"line":500,"column":68,"offset":16342},"indent":[]}},{"type":"text","value":"（可能会有出入）的指令，也就是进入了user mode。然后在","position":{"start":{"line":500,"column":68,"offset":16342},"end":{"line":500,"column":99,"offset":16373},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">int $0x30</code>","position":{"start":{"line":500,"column":99,"offset":16373},"end":{"line":500,"column":110,"offset":16384},"indent":[]}},{"type":"text","value":"处加断点，之后再运行1步就会进入triple fault了。","position":{"start":{"line":500,"column":110,"offset":16384},"end":{"line":500,"column":140,"offset":16414},"indent":[]}}],"position":{"start":{"line":500,"column":1,"offset":16275},"end":{"line":500,"column":140,"offset":16414},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Handling Interrupts and Exceptions","position":{"start":{"line":502,"column":5,"offset":16420},"end":{"line":502,"column":39,"offset":16454},"indent":[]}}],"position":{"start":{"line":502,"column":1,"offset":16416},"end":{"line":502,"column":39,"offset":16454},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们来完成中断部分。","position":{"start":{"line":504,"column":1,"offset":16456},"end":{"line":504,"column":11,"offset":16466},"indent":[]}}],"position":{"start":{"line":504,"column":1,"offset":16456},"end":{"line":504,"column":11,"offset":16466},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 3","position":{"start":{"line":506,"column":5,"offset":16472},"end":{"line":506,"column":15,"offset":16482},"indent":[]}}],"position":{"start":{"line":506,"column":1,"offset":16468},"end":{"line":506,"column":15,"offset":16482},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"读书，在这里就不记录了。","position":{"start":{"line":508,"column":1,"offset":16484},"end":{"line":508,"column":13,"offset":16496},"indent":[]}}],"position":{"start":{"line":508,"column":1,"offset":16484},"end":{"line":508,"column":13,"offset":16496},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Basics of Protected Control Transfer","position":{"start":{"line":510,"column":5,"offset":16502},"end":{"line":510,"column":41,"offset":16538},"indent":[]}}],"position":{"start":{"line":510,"column":1,"offset":16498},"end":{"line":510,"column":41,"offset":16538},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Exeception和interrupt都是protected control transfer，其在用户代码不能干涉kernel的情况下，让处理器进入kernel mode。在intel的术语中，interrupt是由处理器外部的异步事件，如IO引起的，而exception是同步运行的代码引起的，如除0或者page fault。","position":{"start":{"line":512,"column":1,"offset":16540},"end":{"line":512,"column":167,"offset":16706},"indent":[]}}],"position":{"start":{"line":512,"column":1,"offset":16540},"end":{"line":512,"column":167,"offset":16706},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"之前提到过，为了能够做到protected，处理器的中断机制让用户只能进入几个固定的kernel位置。在","position":{"start":{"line":514,"column":1,"offset":16708},"end":{"line":514,"column":53,"offset":16760},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">x86</code>","position":{"start":{"line":514,"column":53,"offset":16760},"end":{"line":514,"column":58,"offset":16765},"indent":[]}},{"type":"text","value":"中，由2种机制可以确保这种protection。","position":{"start":{"line":514,"column":58,"offset":16765},"end":{"line":514,"column":82,"offset":16789},"indent":[]}}],"position":{"start":{"line":514,"column":1,"offset":16708},"end":{"line":514,"column":82,"offset":16789},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"The Interrupt Descriptor Table （IDT）","position":{"start":{"line":516,"column":5,"offset":16795},"end":{"line":516,"column":41,"offset":16831},"indent":[]}}],"position":{"start":{"line":516,"column":3,"offset":16793},"end":{"line":516,"column":43,"offset":16833},"indent":[]}}],"position":{"start":{"line":516,"column":3,"offset":16793},"end":{"line":516,"column":43,"offset":16833},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"一个在kernel private memory中的表，记录了0~255这256种不同的中断的","position":{"start":{"line":518,"column":3,"offset":16837},"end":{"line":518,"column":50,"offset":16884},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">EIP</code>","position":{"start":{"line":518,"column":50,"offset":16884},"end":{"line":518,"column":55,"offset":16889},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":518,"column":55,"offset":16889},"end":{"line":518,"column":56,"offset":16890},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">CS</code>","position":{"start":{"line":518,"column":56,"offset":16890},"end":{"line":518,"column":60,"offset":16894},"indent":[]}},{"type":"text","value":"，前者是中断进入的kernel code的位置，后者是中断的privilege level（在JOS中都是0，也就是kernel mode）。","position":{"start":{"line":518,"column":60,"offset":16894},"end":{"line":518,"column":131,"offset":16965},"indent":[]}}],"position":{"start":{"line":518,"column":3,"offset":16837},"end":{"line":518,"column":131,"offset":16965},"indent":[]}}],"position":{"start":{"line":516,"column":1,"offset":16791},"end":{"line":519,"column":1,"offset":16966},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"strong","children":[{"type":"text","value":"The Task State Segment （TSS）","position":{"start":{"line":520,"column":5,"offset":16971},"end":{"line":520,"column":33,"offset":16999},"indent":[]}}],"position":{"start":{"line":520,"column":3,"offset":16969},"end":{"line":520,"column":35,"offset":17001},"indent":[]}}],"position":{"start":{"line":520,"column":3,"offset":16969},"end":{"line":520,"column":35,"offset":17001},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"用于存放中断前的old processor state，用于中断之后还原状态。注意这部分也是存储在kernel stack中的。","position":{"start":{"line":522,"column":3,"offset":17005},"end":{"line":522,"column":67,"offset":17069},"indent":[]}}],"position":{"start":{"line":522,"column":3,"offset":17005},"end":{"line":522,"column":67,"offset":17069},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"尽管TSS很大，可以有很多功用，JOS仅仅记录中断转移到的kernel stack。处理器用","position":{"start":{"line":524,"column":3,"offset":17073},"end":{"line":524,"column":49,"offset":17119},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ESP0</code>","position":{"start":{"line":524,"column":49,"offset":17119},"end":{"line":524,"column":55,"offset":17125},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":524,"column":55,"offset":17125},"end":{"line":524,"column":56,"offset":17126},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">SS0</code>","position":{"start":{"line":524,"column":56,"offset":17126},"end":{"line":524,"column":61,"offset":17131},"indent":[]}},{"type":"text","value":"来定义kernel mode，且JOS中不使用TSS的其他field。","position":{"start":{"line":524,"column":61,"offset":17131},"end":{"line":524,"column":96,"offset":17166},"indent":[]}}],"position":{"start":{"line":524,"column":3,"offset":17073},"end":{"line":524,"column":96,"offset":17166},"indent":[]}}],"position":{"start":{"line":520,"column":1,"offset":16967},"end":{"line":524,"column":96,"offset":17166},"indent":[1,1,1,1]}}],"position":{"start":{"line":516,"column":1,"offset":16791},"end":{"line":524,"column":96,"offset":17166},"indent":[1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Types of Exceptions and Interrupts","position":{"start":{"line":526,"column":5,"offset":17172},"end":{"line":526,"column":39,"offset":17206},"indent":[]}}],"position":{"start":{"line":526,"column":1,"offset":17168},"end":{"line":526,"column":39,"offset":17206},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"大于31的中断为software interrupt或hardware interrupt，前者是可以用","position":{"start":{"line":528,"column":1,"offset":17208},"end":{"line":528,"column":53,"offset":17260},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">int</code>","position":{"start":{"line":528,"column":53,"offset":17260},"end":{"line":528,"column":58,"offset":17265},"indent":[]}},{"type":"text","value":"指令进入，后者是外部硬件发出的。","position":{"start":{"line":528,"column":58,"offset":17265},"end":{"line":528,"column":74,"offset":17281},"indent":[]}}],"position":{"start":{"line":528,"column":1,"offset":17208},"end":{"line":528,"column":74,"offset":17281},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在这节里，我们会拓展JOS使其可以处理它自己产生的0~31中断。之后一节我们会处理48(","position":{"start":{"line":530,"column":1,"offset":17283},"end":{"line":530,"column":45,"offset":17327},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0x30</code>","position":{"start":{"line":530,"column":45,"offset":17327},"end":{"line":530,"column":51,"offset":17333},"indent":[]}},{"type":"text","value":")，也就是system call，注意这个48是随机选的。lab4里面我们会处理硬件中断。","position":{"start":{"line":530,"column":51,"offset":17333},"end":{"line":530,"column":96,"offset":17378},"indent":[]}}],"position":{"start":{"line":530,"column":1,"offset":17283},"end":{"line":530,"column":96,"offset":17378},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"An Example","position":{"start":{"line":532,"column":5,"offset":17384},"end":{"line":532,"column":15,"offset":17394},"indent":[]}}],"position":{"start":{"line":532,"column":1,"offset":17380},"end":{"line":532,"column":15,"offset":17394},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"例如，代码中出现了除0，那么：","position":{"start":{"line":534,"column":1,"offset":17396},"end":{"line":534,"column":16,"offset":17411},"indent":[]}}],"position":{"start":{"line":534,"column":1,"offset":17396},"end":{"line":534,"column":16,"offset":17411},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"processor会通过TSS中的","position":{"start":{"line":536,"column":4,"offset":17416},"end":{"line":536,"column":21,"offset":17433},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ESP0</code>","position":{"start":{"line":536,"column":21,"offset":17433},"end":{"line":536,"column":27,"offset":17439},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":536,"column":27,"offset":17439},"end":{"line":536,"column":28,"offset":17440},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">SS0</code>","position":{"start":{"line":536,"column":28,"offset":17440},"end":{"line":536,"column":33,"offset":17445},"indent":[]}},{"type":"text","value":"来切换到kernel stack。在JOS中，这两个值分别是","position":{"start":{"line":536,"column":33,"offset":17445},"end":{"line":536,"column":63,"offset":17475},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">GD_KD</code>","position":{"start":{"line":536,"column":63,"offset":17475},"end":{"line":536,"column":70,"offset":17482},"indent":[]}},{"type":"text","value":"与","position":{"start":{"line":536,"column":70,"offset":17482},"end":{"line":536,"column":71,"offset":17483},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">KSTACKTOP</code>","position":{"start":{"line":536,"column":71,"offset":17483},"end":{"line":536,"column":82,"offset":17494},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":536,"column":82,"offset":17494},"end":{"line":536,"column":83,"offset":17495},"indent":[]}}],"position":{"start":{"line":536,"column":4,"offset":17416},"end":{"line":536,"column":83,"offset":17495},"indent":[]}}],"position":{"start":{"line":536,"column":1,"offset":17413},"end":{"line":537,"column":1,"offset":17496},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"处理器会把exception parameter推进kernel stack，其地址始于","position":{"start":{"line":538,"column":4,"offset":17500},"end":{"line":538,"column":48,"offset":17544},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">KSTACKTOP</code>","position":{"start":{"line":538,"column":48,"offset":17544},"end":{"line":538,"column":59,"offset":17555},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":538,"column":59,"offset":17555},"end":{"line":538,"column":60,"offset":17556},"indent":[]}}],"position":{"start":{"line":538,"column":4,"offset":17500},"end":{"line":538,"column":60,"offset":17556},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span> KSTACKTOP             \n<span class=\"token operator\">|</span> <span class=\"token number\">0x00000</span> <span class=\"token operator\">|</span> old SS   <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">4</span>\n<span class=\"token operator\">|</span>      old ESP       <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">8</span>\n<span class=\"token operator\">|</span>     old EFLAGS     <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">12</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">0x00000</span> <span class=\"token operator\">|</span> old CS   <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">16</span>\n<span class=\"token operator\">|</span>      old EIP       <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">20</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span> ESP \n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>             </code></pre></div>","position":{"start":{"line":540,"column":4,"offset":17561},"end":{"line":548,"column":7,"offset":17854},"indent":[4,4,4,4,4,4,4,4]}}],"position":{"start":{"line":538,"column":1,"offset":17497},"end":{"line":549,"column":1,"offset":17855},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对于除0这种情况，在","position":{"start":{"line":550,"column":4,"offset":17859},"end":{"line":550,"column":14,"offset":17869},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">x86</code>","position":{"start":{"line":550,"column":14,"offset":17869},"end":{"line":550,"column":19,"offset":17874},"indent":[]}},{"type":"text","value":"中对应的是vector 0，处理器会读取IDT中entry 0，并设置对应的","position":{"start":{"line":550,"column":19,"offset":17874},"end":{"line":550,"column":57,"offset":17912},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">CS:IP</code>","position":{"start":{"line":550,"column":57,"offset":17912},"end":{"line":550,"column":64,"offset":17919},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":550,"column":64,"offset":17919},"end":{"line":550,"column":65,"offset":17920},"indent":[]}}],"position":{"start":{"line":550,"column":4,"offset":17859},"end":{"line":550,"column":65,"offset":17920},"indent":[]}}],"position":{"start":{"line":550,"column":1,"offset":17856},"end":{"line":551,"column":1,"offset":17921},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"最后会运行这个exception对应的handler，例如结束程序。","position":{"start":{"line":552,"column":4,"offset":17925},"end":{"line":552,"column":38,"offset":17959},"indent":[]}}],"position":{"start":{"line":552,"column":4,"offset":17925},"end":{"line":552,"column":38,"offset":17959},"indent":[]}}],"position":{"start":{"line":552,"column":1,"offset":17922},"end":{"line":552,"column":38,"offset":17959},"indent":[]}}],"position":{"start":{"line":536,"column":1,"offset":17413},"end":{"line":552,"column":38,"offset":17959},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"对于一些特殊的exception，除了会推入上述的5个words，处理器还会退入error code。可以阅读80386的manual来查看不同的error code意味着什么。","position":{"start":{"line":554,"column":1,"offset":17961},"end":{"line":554,"column":90,"offset":18050},"indent":[]}}],"position":{"start":{"line":554,"column":1,"offset":17961},"end":{"line":554,"column":90,"offset":18050},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span> KSTACKTOP             \n<span class=\"token operator\">|</span> <span class=\"token number\">0x00000</span> <span class=\"token operator\">|</span> old SS   <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">4</span>\n<span class=\"token operator\">|</span>      old ESP       <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">8</span>\n<span class=\"token operator\">|</span>     old EFLAGS     <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">12</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">0x00000</span> <span class=\"token operator\">|</span> old CS   <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">16</span>\n<span class=\"token operator\">|</span>      old EIP       <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">20</span>\n<span class=\"token operator\">|</span>     error code     <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">24</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span> ESP\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>             </code></pre></div>","position":{"start":{"line":556,"column":1,"offset":18052},"end":{"line":565,"column":4,"offset":18354},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Nested Exceptions and Interrupts","position":{"start":{"line":567,"column":5,"offset":18360},"end":{"line":567,"column":37,"offset":18392},"indent":[]}}],"position":{"start":{"line":567,"column":1,"offset":18356},"end":{"line":567,"column":37,"offset":18392},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"中断即可以在user mode中产生，也可以从kernel mode中产生。但是","position":{"start":{"line":569,"column":1,"offset":18394},"end":{"line":569,"column":41,"offset":18434},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">x86</code>","position":{"start":{"line":569,"column":41,"offset":18434},"end":{"line":569,"column":46,"offset":18439},"indent":[]}},{"type":"text","value":"处理器只会在从user到kernel的过程中自动保存old register state。如果发生中断时已经在kernel里了，CPU只会继续向同样的kernel stack中推入值，从而使kernel可以处理嵌套的中断。","position":{"start":{"line":569,"column":46,"offset":18439},"end":{"line":569,"column":157,"offset":18550},"indent":[]}}],"position":{"start":{"line":569,"column":1,"offset":18394},"end":{"line":569,"column":157,"offset":18550},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"具体来说，因为不需要换栈，所以就不需要保存","position":{"start":{"line":571,"column":1,"offset":18552},"end":{"line":571,"column":22,"offset":18573},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">SS</code>","position":{"start":{"line":571,"column":22,"offset":18573},"end":{"line":571,"column":26,"offset":18577},"indent":[]}},{"type":"text","value":"与","position":{"start":{"line":571,"column":26,"offset":18577},"end":{"line":571,"column":27,"offset":18578},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ESP</code>","position":{"start":{"line":571,"column":27,"offset":18578},"end":{"line":571,"column":32,"offset":18583},"indent":[]}},{"type":"text","value":"，所以handler眼中的第二个中断对应的stack就会是这样：","position":{"start":{"line":571,"column":32,"offset":18583},"end":{"line":571,"column":64,"offset":18615},"indent":[]}}],"position":{"start":{"line":571,"column":1,"offset":18552},"end":{"line":571,"column":64,"offset":18615},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span> <span class=\"token operator\">&lt;</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span> old ESP\n<span class=\"token operator\">|</span>     old EFLAGS     <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">4</span>\n<span class=\"token operator\">|</span> <span class=\"token number\">0x00000</span> <span class=\"token operator\">|</span> old CS   <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">8</span>\n<span class=\"token operator\">|</span>      old EIP       <span class=\"token operator\">|</span>     \" <span class=\"token operator\">-</span> <span class=\"token number\">12</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span> </code></pre></div>","position":{"start":{"line":573,"column":1,"offset":18617},"end":{"line":579,"column":4,"offset":18786},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Setting Up the IDT","position":{"start":{"line":581,"column":5,"offset":18792},"end":{"line":581,"column":23,"offset":18810},"indent":[]}}],"position":{"start":{"line":581,"column":1,"offset":18788},"end":{"line":581,"column":23,"offset":18810},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们来设置0~31的IDT。我们需要用到的一些定义在","position":{"start":{"line":583,"column":1,"offset":18812},"end":{"line":583,"column":27,"offset":18838},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">inc/trap.h</code>","position":{"start":{"line":583,"column":27,"offset":18838},"end":{"line":583,"column":39,"offset":18850},"indent":[]}},{"type":"text","value":"与","position":{"start":{"line":583,"column":39,"offset":18850},"end":{"line":583,"column":40,"offset":18851},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/trap.h</code>","position":{"start":{"line":583,"column":40,"offset":18851},"end":{"line":583,"column":53,"offset":18864},"indent":[]}},{"type":"text","value":"中。","position":{"start":{"line":583,"column":53,"offset":18864},"end":{"line":583,"column":55,"offset":18866},"indent":[]}}],"position":{"start":{"line":583,"column":1,"offset":18812},"end":{"line":583,"column":55,"offset":18866},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"注意，0~31中的有一些中断已经被intel保留了，所以处理器永远都不会产生这些中断，怎么处理都行。","position":{"start":{"line":585,"column":1,"offset":18868},"end":{"line":585,"column":51,"offset":18918},"indent":[]}}],"position":{"start":{"line":585,"column":1,"offset":18868},"end":{"line":585,"column":51,"offset":18918},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"整个的控制方式应该如下：","position":{"start":{"line":587,"column":1,"offset":18920},"end":{"line":587,"column":13,"offset":18932},"indent":[]}}],"position":{"start":{"line":587,"column":1,"offset":18920},"end":{"line":587,"column":13,"offset":18932},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">      IDT                   trapentry<span class=\"token punctuation\">.</span>S         trap<span class=\"token punctuation\">.</span>c\n   \n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>                        \n<span class=\"token operator\">|</span>   <span class=\"token operator\">&amp;</span>handler1    <span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">-></span> handler1<span class=\"token operator\">:</span>          trap <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Trapframe</span> <span class=\"token operator\">*</span>tf<span class=\"token punctuation\">)</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>             <span class=\"token comment\">// do stuff      {</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>             call trap          <span class=\"token comment\">// handle the exception/interrupt</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>             <span class=\"token comment\">// ...           }</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>   <span class=\"token operator\">&amp;</span>handler2    <span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">></span> handler2<span class=\"token operator\">:</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>            <span class=\"token comment\">// do stuff</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>            call trap\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>            <span class=\"token comment\">// ...</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n       <span class=\"token punctuation\">.</span>\n       <span class=\"token punctuation\">.</span>\n       <span class=\"token punctuation\">.</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span>\n<span class=\"token operator\">|</span>   <span class=\"token operator\">&amp;</span>handlerX    <span class=\"token operator\">|</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">></span> handlerX<span class=\"token operator\">:</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>             <span class=\"token comment\">// do stuff</span>\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>             call trap\n<span class=\"token operator\">|</span>                <span class=\"token operator\">|</span>             <span class=\"token comment\">// ...</span>\n<span class=\"token operator\">+</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token operator\">+</span></code></pre></div>","position":{"start":{"line":589,"column":1,"offset":18934},"end":{"line":612,"column":4,"offset":19724},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"每个中断都应该在","position":{"start":{"line":614,"column":1,"offset":19726},"end":{"line":614,"column":9,"offset":19734},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trapentry.S</code>","position":{"start":{"line":614,"column":9,"offset":19734},"end":{"line":614,"column":22,"offset":19747},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":614,"column":22,"offset":19747},"end":{"line":614,"column":23,"offset":19748},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap_init()</code>","position":{"start":{"line":614,"column":23,"offset":19748},"end":{"line":614,"column":36,"offset":19761},"indent":[]}},{"type":"text","value":"中有其对应的地址。","position":{"start":{"line":614,"column":36,"offset":19761},"end":{"line":614,"column":45,"offset":19770},"indent":[]}}],"position":{"start":{"line":614,"column":1,"offset":19726},"end":{"line":614,"column":45,"offset":19770},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 4","position":{"start":{"line":616,"column":5,"offset":19776},"end":{"line":616,"column":15,"offset":19786},"indent":[]}}],"position":{"start":{"line":616,"column":1,"offset":19772},"end":{"line":616,"column":15,"offset":19786},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"这部分我主要是通过和xv6的对应部分对照着写的。","position":{"start":{"line":618,"column":1,"offset":19788},"end":{"line":618,"column":25,"offset":19812},"indent":[]}}],"position":{"start":{"line":618,"column":1,"offset":19788},"end":{"line":618,"column":25,"offset":19812},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"首先写","position":{"start":{"line":620,"column":1,"offset":19814},"end":{"line":620,"column":4,"offset":19817},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trapentry.S</code>","position":{"start":{"line":620,"column":4,"offset":19817},"end":{"line":620,"column":17,"offset":19830},"indent":[]}},{"type":"text","value":"，这个文件分为两部分，第一是写handler:","position":{"start":{"line":620,"column":17,"offset":19830},"end":{"line":620,"column":40,"offset":19853},"indent":[]}}],"position":{"start":{"line":620,"column":1,"offset":19814},"end":{"line":620,"column":40,"offset":19853},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">/*\n * Lab 3: Your code here for generating entry points for the different traps.\n */\nTRAPHANDLER_NOEC(T_DIVIDE_handler, T_DIVIDE)\nTRAPHANDLER_NOEC(T_DEBUG_handler, T_DEBUG)\nTRAPHANDLER_NOEC(T_NMI_handler, T_NMI)\nTRAPHANDLER_NOEC(T_BRKPT_handler, T_BRKPT)\nTRAPHANDLER_NOEC(T_OFLOW_handler, T_OFLOW)\nTRAPHANDLER_NOEC(T_BOUND_handler, T_BOUND)\nTRAPHANDLER_NOEC(T_ILLOP_handler, T_ILLOP)\nTRAPHANDLER_NOEC(T_DEVICE_handler, T_DEVICE)\nTRAPHANDLER(T_DBLFLT_handler, T_DBLFLT)\nTRAPHANDLER(T_TSS_handler, T_TSS)\nTRAPHANDLER(T_SEGNP_handler, T_SEGNP)\nTRAPHANDLER(T_STACK_handler, T_STACK)\nTRAPHANDLER(T_GPFLT_handler, T_GPFLT)\nTRAPHANDLER(T_PGFLT_handler, T_PGFLT)\nTRAPHANDLER_NOEC(T_FPERR_handler, T_FPERR)\nTRAPHANDLER(T_ALIGN_handler, T_ALIGN)\nTRAPHANDLER_NOEC(T_MCHK_handler, T_MCHK)\nTRAPHANDLER_NOEC(T_SIMDERR_handler, T_SIMDERR)\nTRAPHANDLER_NOEC(T_SYSCALL_handler, T_SYSCALL)</code></pre></div>","position":{"start":{"line":622,"column":1,"offset":19855},"end":{"line":645,"column":4,"offset":20741},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"具体是使用","position":{"start":{"line":647,"column":1,"offset":20743},"end":{"line":647,"column":6,"offset":20748},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">TRAPHANDLER</code>","position":{"start":{"line":647,"column":6,"offset":20748},"end":{"line":647,"column":19,"offset":20761},"indent":[]}},{"type":"text","value":"还是","position":{"start":{"line":647,"column":19,"offset":20761},"end":{"line":647,"column":21,"offset":20763},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">TRAPHANDLER_NOEC</code>","position":{"start":{"line":647,"column":21,"offset":20763},"end":{"line":647,"column":39,"offset":20781},"indent":[]}},{"type":"text","value":"可以对照xv6的","position":{"start":{"line":647,"column":39,"offset":20781},"end":{"line":647,"column":47,"offset":20789},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">vector.S</code>","position":{"start":{"line":647,"column":47,"offset":20789},"end":{"line":647,"column":57,"offset":20799},"indent":[]}},{"type":"text","value":"文件。","position":{"start":{"line":647,"column":57,"offset":20799},"end":{"line":647,"column":60,"offset":20802},"indent":[]}}],"position":{"start":{"line":647,"column":1,"offset":20743},"end":{"line":647,"column":60,"offset":20802},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"然后是写","position":{"start":{"line":649,"column":1,"offset":20804},"end":{"line":649,"column":5,"offset":20808},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">_alltrap</code>","position":{"start":{"line":649,"column":5,"offset":20808},"end":{"line":649,"column":15,"offset":20818},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":649,"column":15,"offset":20818},"end":{"line":649,"column":16,"offset":20819},"indent":[]}}],"position":{"start":{"line":649,"column":1,"offset":20804},"end":{"line":649,"column":16,"offset":20819},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">/*\n * Lab 3: Your code here for _alltraps\n */\n  # vectors.S sends all traps here.\n_alltraps:\n  # Build trap frame.\n  pushl %ds\n  pushl %es\n  pushal\n  \n  # Set up data segments.\n  movw $GD_KD, %ax\n  movw %ax, %ds\n  movw %ax, %es\n\n  # Call trap(tf), where tf=%esp\n  pushl %esp\n  call trap\n  addl $4, %esp\n\n  popal\n  popl %es\n  popl %ds\n  addl $0x8, %esp  # trapno and errcode\n  iret</code></pre></div>","position":{"start":{"line":651,"column":1,"offset":20821},"end":{"line":677,"column":4,"offset":21217},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"注意要对照着","position":{"start":{"line":679,"column":1,"offset":21219},"end":{"line":679,"column":7,"offset":21225},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">inc/trap.h</code>","position":{"start":{"line":679,"column":7,"offset":21225},"end":{"line":679,"column":19,"offset":21237},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":679,"column":19,"offset":21237},"end":{"line":679,"column":21,"offset":21239},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Trapframe</code>","position":{"start":{"line":679,"column":21,"offset":21239},"end":{"line":679,"column":32,"offset":21250},"indent":[]}},{"type":"text","value":"的定义来写，同时要参照xv6中的","position":{"start":{"line":679,"column":32,"offset":21250},"end":{"line":679,"column":48,"offset":21266},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trapasm.S</code>","position":{"start":{"line":679,"column":48,"offset":21266},"end":{"line":679,"column":59,"offset":21277},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":679,"column":59,"offset":21277},"end":{"line":679,"column":60,"offset":21278},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">x86.h</code>","position":{"start":{"line":679,"column":60,"offset":21278},"end":{"line":679,"column":67,"offset":21285},"indent":[]}},{"type":"text","value":"(有trapframe的定义)来写。最后是","position":{"start":{"line":679,"column":67,"offset":21285},"end":{"line":679,"column":88,"offset":21306},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap_init()</code>","position":{"start":{"line":679,"column":88,"offset":21306},"end":{"line":679,"column":101,"offset":21319},"indent":[]}},{"type":"text","value":"。因为在","position":{"start":{"line":679,"column":101,"offset":21319},"end":{"line":679,"column":105,"offset":21323},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trapentry.S</code>","position":{"start":{"line":679,"column":105,"offset":21323},"end":{"line":679,"column":118,"offset":21336},"indent":[]}},{"type":"text","value":"中只有函数名是全局变量，所以只能重复性的写很多...","position":{"start":{"line":679,"column":118,"offset":21336},"end":{"line":679,"column":144,"offset":21362},"indent":[]}}],"position":{"start":{"line":679,"column":1,"offset":21219},"end":{"line":679,"column":144,"offset":21362},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">void\ntrap_init(void)\n{\n\textern struct Segdesc gdt[];\n\n\t// LAB 3: Your code here.\n\tvoid T_DIVIDE_handler();\n\tvoid T_DEBUG_handler();\n\tvoid T_NMI_handler();\n\tvoid T_BRKPT_handler();\n\tvoid T_OFLOW_handler();\n\tvoid T_BOUND_handler();\n\tvoid T_ILLOP_handler();\n\tvoid T_DEVICE_handler();\n\tvoid T_DBLFLT_handler();\n\tvoid T_TSS_handler();\n\tvoid T_SEGNP_handler();\n\tvoid T_STACK_handler();\n\tvoid T_GPFLT_handler();\n\tvoid T_PGFLT_handler();\n\tvoid T_FPERR_handler();\n\tvoid T_ALIGN_handler();\n\tvoid T_MCHK_handler();\n\tvoid T_SIMDERR_handler();\n\tvoid T_SYSCALL_handler();\n\tSETGATE(idt[T_DIVIDE], 1, GD_KT, T_DIVIDE_handler, 0);\n\tSETGATE(idt[T_DEBUG], 1, GD_KT, T_DEBUG_handler, 0);\n\tSETGATE(idt[T_NMI], 1, GD_KT, T_NMI_handler, 0);\n\tSETGATE(idt[T_BRKPT], 1, GD_KT, T_BRKPT_handler, 0);\n\tSETGATE(idt[T_OFLOW], 1, GD_KT, T_OFLOW_handler, 0);\n\tSETGATE(idt[T_BOUND], 1, GD_KT, T_BOUND_handler, 0);\n\tSETGATE(idt[T_ILLOP], 1, GD_KT, T_ILLOP_handler, 0);\n\tSETGATE(idt[T_DEVICE], 1, GD_KT, T_DEVICE_handler, 0);\n\tSETGATE(idt[T_DBLFLT], 1, GD_KT, T_DBLFLT_handler, 0);\n\tSETGATE(idt[T_TSS], 1, GD_KT, T_TSS_handler, 0);\n\tSETGATE(idt[T_SEGNP], 1, GD_KT, T_SEGNP_handler, 0);\n\tSETGATE(idt[T_STACK], 1, GD_KT, T_STACK_handler, 0);\n\tSETGATE(idt[T_GPFLT], 1, GD_KT, T_GPFLT_handler, 0);\n\tSETGATE(idt[T_PGFLT], 1, GD_KT, T_PGFLT_handler, 0);\n\tSETGATE(idt[T_FPERR], 1, GD_KT, T_FPERR_handler, 0);\n\tSETGATE(idt[T_ALIGN], 1, GD_KT, T_ALIGN_handler, 0);\n\tSETGATE(idt[T_MCHK], 1, GD_KT, T_MCHK_handler, 0);\n\tSETGATE(idt[T_SIMDERR], 1, GD_KT, T_SIMDERR_handler, 0);\n\tSETGATE(idt[T_SYSCALL], 0, GD_KT, T_SYSCALL_handler, 3);\n\t// Per-CPU setup \n\ttrap_init_percpu();\n}</code></pre></div>","position":{"start":{"line":681,"column":1,"offset":21364},"end":{"line":729,"column":4,"offset":23009},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后运行","position":{"start":{"line":731,"column":1,"offset":23011},"end":{"line":731,"column":5,"offset":23015},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">make grade</code>","position":{"start":{"line":731,"column":5,"offset":23015},"end":{"line":731,"column":17,"offset":23027},"indent":[]}},{"type":"text","value":"，就通过了Part A。注意这里的代码虽然可以通过lab3，但是到lab4会出问题...因为其","position":{"start":{"line":731,"column":17,"offset":23027},"end":{"line":731,"column":64,"offset":23074},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">istrap</code>","position":{"start":{"line":731,"column":64,"offset":23074},"end":{"line":731,"column":72,"offset":23082},"indent":[]}},{"type":"text","value":"参数的问题，详情请见lab4。","position":{"start":{"line":731,"column":72,"offset":23082},"end":{"line":731,"column":87,"offset":23097},"indent":[]}}],"position":{"start":{"line":731,"column":1,"offset":23011},"end":{"line":731,"column":87,"offset":23097},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"回答两个问题：","position":{"start":{"line":733,"column":1,"offset":23099},"end":{"line":733,"column":8,"offset":23106},"indent":[]}}],"position":{"start":{"line":733,"column":1,"offset":23099},"end":{"line":733,"column":8,"offset":23106},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"为什么要每个中断一个handler？那样就不能分开设置","position":{"start":{"line":735,"column":3,"offset":23110},"end":{"line":735,"column":30,"offset":23137},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">SETGATE</code>","position":{"start":{"line":735,"column":30,"offset":23137},"end":{"line":735,"column":39,"offset":23146},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":735,"column":39,"offset":23146},"end":{"line":735,"column":41,"offset":23148},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trapit</code>","position":{"start":{"line":735,"column":41,"offset":23148},"end":{"line":735,"column":49,"offset":23156},"indent":[]}},{"type":"text","value":"了，也就是不能区分exception和interruption了，同时也不能给不同的中断设置不同的中断等级了。","position":{"start":{"line":735,"column":49,"offset":23156},"end":{"line":735,"column":104,"offset":23211},"indent":[]}}],"position":{"start":{"line":735,"column":3,"offset":23110},"end":{"line":735,"column":104,"offset":23211},"indent":[]}}],"position":{"start":{"line":735,"column":1,"offset":23108},"end":{"line":735,"column":104,"offset":23211},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"为什么","position":{"start":{"line":736,"column":3,"offset":23214},"end":{"line":736,"column":6,"offset":23217},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user/softint</code>","position":{"start":{"line":736,"column":6,"offset":23217},"end":{"line":736,"column":20,"offset":23231},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":736,"column":20,"offset":23231},"end":{"line":736,"column":22,"offset":23233},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">int $14</code>","position":{"start":{"line":736,"column":22,"offset":23233},"end":{"line":736,"column":31,"offset":23242},"indent":[]}},{"type":"text","value":"会进入vector 13？14的privilege level是0，也就是user不能调用，在上面的代码中不是","position":{"start":{"line":736,"column":31,"offset":23242},"end":{"line":736,"column":86,"offset":23297},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">$30</code>","position":{"start":{"line":736,"column":86,"offset":23297},"end":{"line":736,"column":91,"offset":23302},"indent":[]}},{"type":"text","value":"都会被识别为general protection fault，也就是中断13。","position":{"start":{"line":736,"column":91,"offset":23302},"end":{"line":736,"column":130,"offset":23341},"indent":[]}}],"position":{"start":{"line":736,"column":3,"offset":23214},"end":{"line":736,"column":130,"offset":23341},"indent":[]}}],"position":{"start":{"line":736,"column":1,"offset":23212},"end":{"line":736,"column":130,"offset":23341},"indent":[]}}],"position":{"start":{"line":735,"column":1,"offset":23108},"end":{"line":736,"column":130,"offset":23341},"indent":[1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Part B: Page Faults, Breakpoints Exceptions, and System Calls","position":{"start":{"line":738,"column":4,"offset":23346},"end":{"line":738,"column":65,"offset":23407},"indent":[]}}],"position":{"start":{"line":738,"column":1,"offset":23343},"end":{"line":738,"column":65,"offset":23407},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"处理其他的中断。","position":{"start":{"line":740,"column":1,"offset":23409},"end":{"line":740,"column":9,"offset":23417},"indent":[]}}],"position":{"start":{"line":740,"column":1,"offset":23409},"end":{"line":740,"column":9,"offset":23417},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Handling Page Faults","position":{"start":{"line":742,"column":5,"offset":23423},"end":{"line":742,"column":25,"offset":23443},"indent":[]}}],"position":{"start":{"line":742,"column":1,"offset":23419},"end":{"line":742,"column":25,"offset":23443},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"处理page fault，也就是14。当发生page fault的时候，处理器会把产生错误的地址存在","position":{"start":{"line":744,"column":1,"offset":23445},"end":{"line":744,"column":51,"offset":23495},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">CR2</code>","position":{"start":{"line":744,"column":51,"offset":23495},"end":{"line":744,"column":56,"offset":23500},"indent":[]}},{"type":"text","value":"寄存器中。","position":{"start":{"line":744,"column":56,"offset":23500},"end":{"line":744,"column":61,"offset":23505},"indent":[]}}],"position":{"start":{"line":744,"column":1,"offset":23445},"end":{"line":744,"column":61,"offset":23505},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 5","position":{"start":{"line":746,"column":5,"offset":23511},"end":{"line":746,"column":15,"offset":23521},"indent":[]}}],"position":{"start":{"line":746,"column":1,"offset":23507},"end":{"line":746,"column":15,"offset":23521},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在","position":{"start":{"line":748,"column":1,"offset":23523},"end":{"line":748,"column":2,"offset":23524},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap_dispatch()</code>","position":{"start":{"line":748,"column":2,"offset":23524},"end":{"line":748,"column":19,"offset":23541},"indent":[]}},{"type":"text","value":"里面加入","position":{"start":{"line":748,"column":19,"offset":23541},"end":{"line":748,"column":23,"offset":23545},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">page_fault_handler()</code>","position":{"start":{"line":748,"column":23,"offset":23545},"end":{"line":748,"column":45,"offset":23567},"indent":[]}}],"position":{"start":{"line":748,"column":1,"offset":23523},"end":{"line":748,"column":45,"offset":23567},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">trap_dispatch</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Trapframe</span> <span class=\"token operator\">*</span>tf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Handle processor exceptions.</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_trapno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> T_PGFLT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">page_fault_handler</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// Unexpected trap: The user process or the kernel has a bug.</span>\n\t<span class=\"token function\">print_trapframe</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_cs <span class=\"token operator\">==</span> GD_KT<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"unhandled trap in kernel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">env_destroy</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":750,"column":1,"offset":23569},"end":{"line":772,"column":4,"offset":23983},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"The Breakpoint Exception","position":{"start":{"line":774,"column":5,"offset":23989},"end":{"line":774,"column":29,"offset":24013},"indent":[]}}],"position":{"start":{"line":774,"column":1,"offset":23985},"end":{"line":774,"column":29,"offset":24013},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 6","position":{"start":{"line":776,"column":5,"offset":24019},"end":{"line":776,"column":15,"offset":24029},"indent":[]}}],"position":{"start":{"line":776,"column":1,"offset":24015},"end":{"line":776,"column":15,"offset":24029},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"对于断点中断，需要调用的是","position":{"start":{"line":778,"column":1,"offset":24031},"end":{"line":778,"column":14,"offset":24044},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/monitor.c</code>","position":{"start":{"line":778,"column":14,"offset":24044},"end":{"line":778,"column":30,"offset":24060},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":778,"column":30,"offset":24060},"end":{"line":778,"column":32,"offset":24062},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">monitor</code>","position":{"start":{"line":778,"column":32,"offset":24062},"end":{"line":778,"column":41,"offset":24071},"indent":[]}},{"type":"text","value":"函数，不过注意，因为","position":{"start":{"line":778,"column":41,"offset":24071},"end":{"line":778,"column":51,"offset":24081},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">breakpoint.c</code>","position":{"start":{"line":778,"column":51,"offset":24081},"end":{"line":778,"column":65,"offset":24095},"indent":[]}},{"type":"text","value":"中是通过直接触法来进行测试的，所以需要把断点的等级调为3","position":{"start":{"line":778,"column":65,"offset":24095},"end":{"line":778,"column":93,"offset":24123},"indent":[]}}],"position":{"start":{"line":778,"column":1,"offset":24031},"end":{"line":778,"column":93,"offset":24123},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">SETGATE(idt[T_BRKPT], 1, GD_KT, T_BRKPT_handler, 3);</code></pre></div>","position":{"start":{"line":780,"column":1,"offset":24125},"end":{"line":782,"column":4,"offset":24193},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后","position":{"start":{"line":784,"column":1,"offset":24195},"end":{"line":784,"column":3,"offset":24197},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap_dispatch</code>","position":{"start":{"line":784,"column":3,"offset":24197},"end":{"line":784,"column":18,"offset":24212},"indent":[]}},{"type":"text","value":"为：","position":{"start":{"line":784,"column":18,"offset":24212},"end":{"line":784,"column":20,"offset":24214},"indent":[]}}],"position":{"start":{"line":784,"column":1,"offset":24195},"end":{"line":784,"column":20,"offset":24214},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_trapno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> T_PGFLT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">page_fault_handler</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> T_BRKPT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">monitor</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":786,"column":1,"offset":24216},"end":{"line":797,"column":4,"offset":24370},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"System calls","position":{"start":{"line":799,"column":5,"offset":24376},"end":{"line":799,"column":17,"offset":24388},"indent":[]}}],"position":{"start":{"line":799,"column":1,"offset":24372},"end":{"line":799,"column":17,"offset":24388},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在JOS中，我们使用","position":{"start":{"line":801,"column":1,"offset":24390},"end":{"line":801,"column":11,"offset":24400},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">int $0x30</code>","position":{"start":{"line":801,"column":11,"offset":24400},"end":{"line":801,"column":22,"offset":24411},"indent":[]}},{"type":"text","value":"来进行system call。应用会自己把system call需要的参数以及其编号川籍来，所以kernel就不需要去操作用户环境或者instruction stream了。system call number会在","position":{"start":{"line":801,"column":22,"offset":24411},"end":{"line":801,"column":129,"offset":24518},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">%eax</code>","position":{"start":{"line":801,"column":129,"offset":24518},"end":{"line":801,"column":135,"offset":24524},"indent":[]}},{"type":"text","value":"， 参数（前5个）会在 ","position":{"start":{"line":801,"column":135,"offset":24524},"end":{"line":801,"column":147,"offset":24536},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">%edx</code>","position":{"start":{"line":801,"column":147,"offset":24536},"end":{"line":801,"column":153,"offset":24542},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":801,"column":153,"offset":24542},"end":{"line":801,"column":155,"offset":24544},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">%ecx</code>","position":{"start":{"line":801,"column":155,"offset":24544},"end":{"line":801,"column":161,"offset":24550},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":801,"column":161,"offset":24550},"end":{"line":801,"column":163,"offset":24552},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">%ebx</code>","position":{"start":{"line":801,"column":163,"offset":24552},"end":{"line":801,"column":169,"offset":24558},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":801,"column":169,"offset":24558},"end":{"line":801,"column":171,"offset":24560},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">%edi</code>","position":{"start":{"line":801,"column":171,"offset":24560},"end":{"line":801,"column":177,"offset":24566},"indent":[]}},{"type":"text","value":", 和 ","position":{"start":{"line":801,"column":177,"offset":24566},"end":{"line":801,"column":181,"offset":24570},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">%esi</code>","position":{"start":{"line":801,"column":181,"offset":24570},"end":{"line":801,"column":187,"offset":24576},"indent":[]}},{"type":"text","value":"。同样，kernel会把返回值存在","position":{"start":{"line":801,"column":187,"offset":24576},"end":{"line":801,"column":204,"offset":24593},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">%eax</code>","position":{"start":{"line":801,"column":204,"offset":24593},"end":{"line":801,"column":210,"offset":24599},"indent":[]}},{"type":"text","value":"中。","position":{"start":{"line":801,"column":210,"offset":24599},"end":{"line":801,"column":212,"offset":24601},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">syscall</code>","position":{"start":{"line":801,"column":212,"offset":24601},"end":{"line":801,"column":221,"offset":24610},"indent":[]}},{"type":"text","value":"函数在","position":{"start":{"line":801,"column":221,"offset":24610},"end":{"line":801,"column":224,"offset":24613},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lb/syscall.c</code>","position":{"start":{"line":801,"column":224,"offset":24613},"end":{"line":801,"column":238,"offset":24627},"indent":[]}},{"type":"text","value":"中。","position":{"start":{"line":801,"column":238,"offset":24627},"end":{"line":801,"column":240,"offset":24629},"indent":[]}}],"position":{"start":{"line":801,"column":1,"offset":24390},"end":{"line":801,"column":240,"offset":24629},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">inline</span> int32_t\n<span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> num<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> check<span class=\"token punctuation\">,</span> uint32_t a1<span class=\"token punctuation\">,</span> uint32_t a2<span class=\"token punctuation\">,</span> uint32_t a3<span class=\"token punctuation\">,</span> uint32_t a4<span class=\"token punctuation\">,</span> uint32_t a5<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tint32_t ret<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Generic system call: pass system call number in AX,</span>\n\t<span class=\"token comment\">// up to five parameters in DX, CX, BX, DI, SI.</span>\n\t<span class=\"token comment\">// Interrupt kernel with T_SYSCALL.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// The \"volatile\" tells the assembler not to optimize</span>\n\t<span class=\"token comment\">// this instruction away just because we don't use the</span>\n\t<span class=\"token comment\">// return value.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// The last clause tells the assembler that this can</span>\n\t<span class=\"token comment\">// potentially change the condition codes and arbitrary</span>\n\t<span class=\"token comment\">// memory locations.</span>\n\n\t<span class=\"token keyword\">asm</span> <span class=\"token keyword\">volatile</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"int %1\\n\"</span>\n\t\t     <span class=\"token operator\">:</span> <span class=\"token string\">\"=a\"</span> <span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span>\n\t\t     <span class=\"token operator\">:</span> <span class=\"token string\">\"i\"</span> <span class=\"token punctuation\">(</span>T_SYSCALL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t       <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">(</span>num<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t       <span class=\"token string\">\"d\"</span> <span class=\"token punctuation\">(</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t       <span class=\"token string\">\"c\"</span> <span class=\"token punctuation\">(</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t       <span class=\"token string\">\"b\"</span> <span class=\"token punctuation\">(</span>a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t       <span class=\"token string\">\"D\"</span> <span class=\"token punctuation\">(</span>a4<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t       <span class=\"token string\">\"S\"</span> <span class=\"token punctuation\">(</span>a5<span class=\"token punctuation\">)</span>\n\t\t     <span class=\"token operator\">:</span> <span class=\"token string\">\"cc\"</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"memory\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>check <span class=\"token operator\">&amp;&amp;</span> ret <span class=\"token operator\">></span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"syscall %d returned %d (> 0)\"</span><span class=\"token punctuation\">,</span> num<span class=\"token punctuation\">,</span> ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":803,"column":1,"offset":24631},"end":{"line":837,"column":4,"offset":25485},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"上面的这种写法叫gcc内联汇编，感兴趣的同学可以取查一下。","position":{"start":{"line":839,"column":1,"offset":25487},"end":{"line":839,"column":30,"offset":25516},"indent":[]}}],"position":{"start":{"line":839,"column":1,"offset":25487},"end":{"line":839,"column":30,"offset":25516},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"注意这里的和xv6的对比，明显JOS比xv6要简单很多，并没有通过用户的stack(","position":{"start":{"line":841,"column":1,"offset":25518},"end":{"line":841,"column":43,"offset":25560},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">esp</code>","position":{"start":{"line":841,"column":43,"offset":25560},"end":{"line":841,"column":48,"offset":25565},"indent":[]}},{"type":"text","value":")来掏出来参数，而且JOS也没有","position":{"start":{"line":841,"column":48,"offset":25565},"end":{"line":841,"column":64,"offset":25581},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">myproc</code>","position":{"start":{"line":841,"column":64,"offset":25581},"end":{"line":841,"column":72,"offset":25589},"indent":[]}},{"type":"text","value":"这样一个全局状态。","position":{"start":{"line":841,"column":72,"offset":25589},"end":{"line":841,"column":81,"offset":25598},"indent":[]}}],"position":{"start":{"line":841,"column":1,"offset":25518},"end":{"line":841,"column":81,"offset":25598},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 7","position":{"start":{"line":843,"column":5,"offset":25604},"end":{"line":843,"column":15,"offset":25614},"indent":[]}}],"position":{"start":{"line":843,"column":1,"offset":25600},"end":{"line":843,"column":15,"offset":25614},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"加入system call的handler。由于我们已经加过了基本设置，所以只需要修改","position":{"start":{"line":845,"column":1,"offset":25616},"end":{"line":845,"column":44,"offset":25659},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap_dispatch()</code>","position":{"start":{"line":845,"column":44,"offset":25659},"end":{"line":845,"column":61,"offset":25676},"indent":[]}},{"type":"text","value":"与","position":{"start":{"line":845,"column":61,"offset":25676},"end":{"line":845,"column":62,"offset":25677},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/syscall.c</code>","position":{"start":{"line":845,"column":62,"offset":25677},"end":{"line":845,"column":78,"offset":25693},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":845,"column":78,"offset":25693},"end":{"line":845,"column":80,"offset":25695},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">syscall()</code>","position":{"start":{"line":845,"column":80,"offset":25695},"end":{"line":845,"column":91,"offset":25706},"indent":[]}},{"type":"text","value":"了。","position":{"start":{"line":845,"column":91,"offset":25706},"end":{"line":845,"column":93,"offset":25708},"indent":[]}}],"position":{"start":{"line":845,"column":1,"offset":25616},"end":{"line":845,"column":93,"offset":25708},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"首先是","position":{"start":{"line":847,"column":1,"offset":25710},"end":{"line":847,"column":4,"offset":25713},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap_dispatch()</code>","position":{"start":{"line":847,"column":4,"offset":25713},"end":{"line":847,"column":21,"offset":25730},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":847,"column":21,"offset":25730},"end":{"line":847,"column":22,"offset":25731},"indent":[]}}],"position":{"start":{"line":847,"column":1,"offset":25710},"end":{"line":847,"column":22,"offset":25731},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_trapno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> T_PGFLT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">page_fault_handler</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> T_BRKPT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">monitor</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> T_SYSCALL<span class=\"token operator\">:</span>\n\t\t\ttf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_eax <span class=\"token operator\">=</span> <span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span>\n\t\t\t\ttf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_eax<span class=\"token punctuation\">,</span> tf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_edx<span class=\"token punctuation\">,</span>\n\t\t\t\ttf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_ecx<span class=\"token punctuation\">,</span> tf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_ebx<span class=\"token punctuation\">,</span>\n\t\t\t\ttf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_edi<span class=\"token punctuation\">,</span> tf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">.</span>reg_esi\n\t\t\t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":849,"column":1,"offset":25733},"end":{"line":867,"column":4,"offset":26093},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"注意别忘了用返回值更新","position":{"start":{"line":869,"column":1,"offset":26095},"end":{"line":869,"column":12,"offset":26106},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">eax</code>","position":{"start":{"line":869,"column":12,"offset":26106},"end":{"line":869,"column":17,"offset":26111},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":869,"column":17,"offset":26111},"end":{"line":869,"column":18,"offset":26112},"indent":[]}}],"position":{"start":{"line":869,"column":1,"offset":26095},"end":{"line":869,"column":18,"offset":26112},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"其次是","position":{"start":{"line":871,"column":1,"offset":26114},"end":{"line":871,"column":4,"offset":26117},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">syscall()</code>","position":{"start":{"line":871,"column":4,"offset":26117},"end":{"line":871,"column":15,"offset":26128},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":871,"column":15,"offset":26128},"end":{"line":871,"column":16,"offset":26129},"indent":[]}}],"position":{"start":{"line":871,"column":1,"offset":26114},"end":{"line":871,"column":16,"offset":26129},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Dispatches to the correct kernel function, passing the arguments.</span>\nint32_t\n<span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span>uint32_t syscallno<span class=\"token punctuation\">,</span> uint32_t a1<span class=\"token punctuation\">,</span> uint32_t a2<span class=\"token punctuation\">,</span> uint32_t a3<span class=\"token punctuation\">,</span> uint32_t a4<span class=\"token punctuation\">,</span> uint32_t a5<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Call the function corresponding to the 'syscallno' parameter.</span>\n\t<span class=\"token comment\">// Return any appropriate return value.</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\n\t<span class=\"token comment\">// panic(\"syscall not implemented\");</span>\n\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>syscallno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> SYS_cputs<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">sys_cputs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_cgetc<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_cgetc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_getenvid<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_getenvid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_env_destroy<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_env_destroy</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>envid_t<span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":873,"column":1,"offset":26131},"end":{"line":898,"column":4,"offset":26762},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"User-mode startup","position":{"start":{"line":900,"column":5,"offset":26768},"end":{"line":900,"column":22,"offset":26785},"indent":[]}}],"position":{"start":{"line":900,"column":1,"offset":26764},"end":{"line":900,"column":22,"offset":26785},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"用户应用会从","position":{"start":{"line":902,"column":1,"offset":26787},"end":{"line":902,"column":7,"offset":26793},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lib/entry</code>","position":{"start":{"line":902,"column":7,"offset":26793},"end":{"line":902,"column":18,"offset":26804},"indent":[]}},{"type":"text","value":"进入，然后调用","position":{"start":{"line":902,"column":18,"offset":26804},"end":{"line":902,"column":25,"offset":26811},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lib/libmain.c</code>","position":{"start":{"line":902,"column":25,"offset":26811},"end":{"line":902,"column":40,"offset":26826},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":902,"column":40,"offset":26826},"end":{"line":902,"column":42,"offset":26828},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">libmain()</code>","position":{"start":{"line":902,"column":42,"offset":26828},"end":{"line":902,"column":53,"offset":26839},"indent":[]}},{"type":"text","value":"，之后","position":{"start":{"line":902,"column":53,"offset":26839},"end":{"line":902,"column":56,"offset":26842},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">libmain</code>","position":{"start":{"line":902,"column":56,"offset":26842},"end":{"line":902,"column":65,"offset":26851},"indent":[]}},{"type":"text","value":"会调用","position":{"start":{"line":902,"column":65,"offset":26851},"end":{"line":902,"column":68,"offset":26854},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">umain</code>","position":{"start":{"line":902,"column":68,"offset":26854},"end":{"line":902,"column":75,"offset":26861},"indent":[]}},{"type":"text","value":"也就是进入了比如","position":{"start":{"line":902,"column":75,"offset":26861},"end":{"line":902,"column":83,"offset":26869},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">hello</code>","position":{"start":{"line":902,"column":83,"offset":26869},"end":{"line":902,"column":90,"offset":26876},"indent":[]}},{"type":"text","value":"这样的函数中。我们希望能够在用户应用中使用","position":{"start":{"line":902,"column":90,"offset":26876},"end":{"line":902,"column":111,"offset":26897},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">thisenv</code>","position":{"start":{"line":902,"column":111,"offset":26897},"end":{"line":902,"column":120,"offset":26906},"indent":[]}},{"type":"text","value":"也就是当前的环境状态。由于我们已经有了","position":{"start":{"line":902,"column":120,"offset":26906},"end":{"line":902,"column":139,"offset":26925},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_getenvid()</code>","position":{"start":{"line":902,"column":139,"offset":26925},"end":{"line":902,"column":155,"offset":26941},"indent":[]}},{"type":"text","value":"这样的函数，这个函数在","position":{"start":{"line":902,"column":155,"offset":26941},"end":{"line":902,"column":166,"offset":26952},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lib/syscall.c</code>","position":{"start":{"line":902,"column":166,"offset":26952},"end":{"line":902,"column":181,"offset":26967},"indent":[]}},{"type":"text","value":"中被声明，用来掉system call中的","position":{"start":{"line":902,"column":181,"offset":26967},"end":{"line":902,"column":202,"offset":26988},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">SYS_getenvid</code>","position":{"start":{"line":902,"column":202,"offset":26988},"end":{"line":902,"column":216,"offset":27002},"indent":[]}},{"type":"text","value":"。有了","position":{"start":{"line":902,"column":216,"offset":27002},"end":{"line":902,"column":219,"offset":27005},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">envid</code>","position":{"start":{"line":902,"column":219,"offset":27005},"end":{"line":902,"column":226,"offset":27012},"indent":[]}},{"type":"text","value":"之后，因为从","position":{"start":{"line":902,"column":226,"offset":27012},"end":{"line":902,"column":232,"offset":27018},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">inc/env.h</code>","position":{"start":{"line":902,"column":232,"offset":27018},"end":{"line":902,"column":243,"offset":27029},"indent":[]}},{"type":"text","value":"中得知：","position":{"start":{"line":902,"column":243,"offset":27029},"end":{"line":902,"column":247,"offset":27033},"indent":[]}}],"position":{"start":{"line":902,"column":1,"offset":26787},"end":{"line":902,"column":247,"offset":27033},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// An environment ID 'envid_t' has three parts:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// +1+---------------21-----------------+--------10--------+</span>\n<span class=\"token comment\">// |0|          Uniqueifier             |   Environment    |</span>\n<span class=\"token comment\">// | |                                  |      Index       |</span>\n<span class=\"token comment\">// +------------------------------------+------------------+</span>\n<span class=\"token comment\">//                                       \\--- ENVX(eid) --/</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The environment index ENVX(eid) equals the environment's index in the</span>\n<span class=\"token comment\">// 'envs[]' array.  The uniqueifier distinguishes environments that were</span>\n<span class=\"token comment\">// created at different times, but share the same environment index.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// All real environments are greater than 0 (so the sign bit is zero).</span>\n<span class=\"token comment\">// envid_ts less than 0 signify errors.  The envid_t == 0 is special, and</span>\n<span class=\"token comment\">// stands for the current environment.</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> LOG2NENV\t\t10</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> NENV\t\t\t(1 &lt;&lt; LOG2NENV)</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ENVX(envid)\t\t((envid) &amp; (NENV - 1))</span></code></pre></div>","position":{"start":{"line":904,"column":1,"offset":27035},"end":{"line":924,"column":4,"offset":27900},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"我们只需要取后10位就可以得到当前环境在","position":{"start":{"line":926,"column":1,"offset":27902},"end":{"line":926,"column":21,"offset":27922},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">envs</code>","position":{"start":{"line":926,"column":21,"offset":27922},"end":{"line":926,"column":27,"offset":27928},"indent":[]}},{"type":"text","value":"中的序号了，所以有：","position":{"start":{"line":926,"column":27,"offset":27928},"end":{"line":926,"column":37,"offset":27938},"indent":[]}}],"position":{"start":{"line":926,"column":1,"offset":27902},"end":{"line":926,"column":37,"offset":27938},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">thisenv <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>envs<span class=\"token punctuation\">[</span><span class=\"token function\">ENVX</span><span class=\"token punctuation\">(</span><span class=\"token function\">sys_getenvid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":928,"column":1,"offset":27940},"end":{"line":930,"column":4,"offset":27987},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Page faults and memory protection","position":{"start":{"line":932,"column":5,"offset":27993},"end":{"line":932,"column":38,"offset":28026},"indent":[]}}],"position":{"start":{"line":932,"column":1,"offset":27989},"end":{"line":932,"column":38,"offset":28026},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"内存保护是操作系统非常重要的一部分，也是保证bug不能破坏其他程序或者kernel的一个重要手段。","position":{"start":{"line":934,"column":1,"offset":28028},"end":{"line":934,"column":50,"offset":28077},"indent":[]}}],"position":{"start":{"line":934,"column":1,"offset":28028},"end":{"line":934,"column":50,"offset":28077},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"操作系统通常通过硬件来实现内存保护。OS让硬件知道哪些虚拟地址是可以访问的，哪些不行。当一个程序试图访问非法地址的之后，处理器会trap。如果问题可以结局，那么kernel就会解决这个问题并让程序继续运行，如果不行，那么程序就不会继续运行。","position":{"start":{"line":936,"column":1,"offset":28079},"end":{"line":936,"column":121,"offset":28199},"indent":[]}}],"position":{"start":{"line":936,"column":1,"offset":28079},"end":{"line":936,"column":121,"offset":28199},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"一个常见的解决方法是自动扩充stack。一般默认就分配一个page作为用户的stack，如果触发了page fault，就自动再进行分配。","position":{"start":{"line":938,"column":1,"offset":28201},"end":{"line":938,"column":70,"offset":28270},"indent":[]}}],"position":{"start":{"line":938,"column":1,"offset":28201},"end":{"line":938,"column":70,"offset":28270},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"system call会导致一个很有趣的问题。很多system call允许用户传指针进kernel，这些指针会指向读写的buffer。这种做法有两个问题：","position":{"start":{"line":940,"column":1,"offset":28272},"end":{"line":940,"column":79,"offset":28350},"indent":[]}}],"position":{"start":{"line":940,"column":1,"offset":28272},"end":{"line":940,"column":79,"offset":28350},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"kernel中的page fault会比user program中的严重许多。如果kernel中的page fault不能解决，那么就会panic整个系统。但是事实上，在上面谈到的问题里，那些buffer带来的page fault是user program的，而不是kernel的。","position":{"start":{"line":942,"column":3,"offset":28354},"end":{"line":942,"column":144,"offset":28495},"indent":[]}}],"position":{"start":{"line":942,"column":3,"offset":28354},"end":{"line":942,"column":144,"offset":28495},"indent":[]}}],"position":{"start":{"line":942,"column":1,"offset":28352},"end":{"line":942,"column":144,"offset":28495},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"kernel往往有更强的权限，上面的这个system call可能会泄露一些kernel的private memory。","position":{"start":{"line":943,"column":3,"offset":28498},"end":{"line":943,"column":63,"offset":28558},"indent":[]}}],"position":{"start":{"line":943,"column":3,"offset":28498},"end":{"line":943,"column":63,"offset":28558},"indent":[]}}],"position":{"start":{"line":943,"column":1,"offset":28496},"end":{"line":943,"column":63,"offset":28558},"indent":[]}}],"position":{"start":{"line":942,"column":1,"offset":28352},"end":{"line":943,"column":63,"offset":28558},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"基于这两个原因，我们需要很谨慎的处理传进kernel的指针。","position":{"start":{"line":945,"column":1,"offset":28560},"end":{"line":945,"column":31,"offset":28590},"indent":[]}}],"position":{"start":{"line":945,"column":1,"offset":28560},"end":{"line":945,"column":31,"offset":28590},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们讲用一个机制来解决这两个问题。当程序向kernel传递指针的时候，kernel会检查该指针是不是在用户地址内，以及对应的page table允许内存操作。这样，kernel就不会因为dereference用户指针导致page fault了。","position":{"start":{"line":947,"column":1,"offset":28592},"end":{"line":947,"column":123,"offset":28714},"indent":[]}}],"position":{"start":{"line":947,"column":1,"offset":28592},"end":{"line":947,"column":123,"offset":28714},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 9","position":{"start":{"line":949,"column":5,"offset":28720},"end":{"line":949,"column":15,"offset":28730},"indent":[]}}],"position":{"start":{"line":949,"column":1,"offset":28716},"end":{"line":949,"column":15,"offset":28730},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"首先给","position":{"start":{"line":951,"column":1,"offset":28732},"end":{"line":951,"column":4,"offset":28735},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap</code>","position":{"start":{"line":951,"column":4,"offset":28735},"end":{"line":951,"column":10,"offset":28741},"indent":[]}},{"type":"text","value":"中加上page fault在kernel mode，直接","position":{"start":{"line":951,"column":10,"offset":28741},"end":{"line":951,"column":38,"offset":28769},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">panic</code>","position":{"start":{"line":951,"column":38,"offset":28769},"end":{"line":951,"column":45,"offset":28776},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":951,"column":45,"offset":28776},"end":{"line":951,"column":46,"offset":28777},"indent":[]}}],"position":{"start":{"line":951,"column":1,"offset":28732},"end":{"line":951,"column":46,"offset":28777},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token keyword\">switch</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_trapno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> T_PGFLT<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_cs <span class=\"token operator\">&amp;</span> <span class=\"token number\">0x3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"page fault in kernel\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">page_fault_handler</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":953,"column":1,"offset":28779},"end":{"line":960,"column":4,"offset":28932},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"之后补全","position":{"start":{"line":962,"column":1,"offset":28934},"end":{"line":962,"column":5,"offset":28938},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/pmap.c</code>","position":{"start":{"line":962,"column":5,"offset":28938},"end":{"line":962,"column":18,"offset":28951},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":962,"column":18,"offset":28951},"end":{"line":962,"column":20,"offset":28953},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user_mem_check</code>","position":{"start":{"line":962,"column":20,"offset":28953},"end":{"line":962,"column":36,"offset":28969},"indent":[]}},{"type":"text","value":"：","position":{"start":{"line":962,"column":36,"offset":28969},"end":{"line":962,"column":37,"offset":28970},"indent":[]}}],"position":{"start":{"line":962,"column":1,"offset":28934},"end":{"line":962,"column":37,"offset":28970},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Check that an environment is allowed to access the range of memory</span>\n<span class=\"token comment\">// [va, va+len) with permissions 'perm | PTE_P'.</span>\n<span class=\"token comment\">// Normally 'perm' will contain PTE_U at least, but this is not required.</span>\n<span class=\"token comment\">// 'va' and 'len' need not be page-aligned; you must test every page that</span>\n<span class=\"token comment\">// contains any of that range.  You will test either 'len/PGSIZE',</span>\n<span class=\"token comment\">// 'len/PGSIZE + 1', or 'len/PGSIZE + 2' pages.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// A user program can access a virtual address if (1) the address is below</span>\n<span class=\"token comment\">// ULIM, and (2) the page table gives it permission.  These are exactly</span>\n<span class=\"token comment\">// the tests you should implement here.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If there is an error, set the 'user_mem_check_addr' variable to the first</span>\n<span class=\"token comment\">// erroneous virtual address.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns 0 if the user program can access this range of addresses,</span>\n<span class=\"token comment\">// and -E_FAULT otherwise.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">user_mem_check</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>env<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\tuintptr_t v <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tuintptr_t end <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDUP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>va <span class=\"token operator\">+</span> len<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span>v <span class=\"token operator\">&lt;</span> end<span class=\"token punctuation\">;</span> v <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpte_t <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> <span class=\"token function\">pgdir_walk</span><span class=\"token punctuation\">(</span>env<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>v<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pte <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte <span class=\"token operator\">&amp;</span> perm<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> perm<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>v <span class=\"token operator\">&lt;</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">)</span>\n\t\t\t\tuser_mem_check_addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">else</span>\n\t\t\t\tuser_mem_check_addr <span class=\"token operator\">=</span> v<span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_FAULT<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":964,"column":1,"offset":28972},"end":{"line":1000,"column":4,"offset":30240},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"注意需要返回的是这区间里的第一个地址，所以如果","position":{"start":{"line":1002,"column":1,"offset":30242},"end":{"line":1002,"column":24,"offset":30265},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">v</code>","position":{"start":{"line":1002,"column":24,"offset":30265},"end":{"line":1002,"column":27,"offset":30268},"indent":[]}},{"type":"text","value":"比","position":{"start":{"line":1002,"column":27,"offset":30268},"end":{"line":1002,"column":28,"offset":30269},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">va</code>","position":{"start":{"line":1002,"column":28,"offset":30269},"end":{"line":1002,"column":32,"offset":30273},"indent":[]}},{"type":"text","value":"小，返回的应该是","position":{"start":{"line":1002,"column":32,"offset":30273},"end":{"line":1002,"column":40,"offset":30281},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">va</code>","position":{"start":{"line":1002,"column":40,"offset":30281},"end":{"line":1002,"column":44,"offset":30285},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":1002,"column":44,"offset":30285},"end":{"line":1002,"column":45,"offset":30286},"indent":[]}}],"position":{"start":{"line":1002,"column":1,"offset":30242},"end":{"line":1002,"column":45,"offset":30286},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"然后修改","position":{"start":{"line":1004,"column":1,"offset":30288},"end":{"line":1004,"column":5,"offset":30292},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">syscall.c</code>","position":{"start":{"line":1004,"column":5,"offset":30292},"end":{"line":1004,"column":16,"offset":30303},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":1004,"column":16,"offset":30303},"end":{"line":1004,"column":18,"offset":30305},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_cputs</code>","position":{"start":{"line":1004,"column":18,"offset":30305},"end":{"line":1004,"column":29,"offset":30316},"indent":[]}},{"type":"text","value":"以检查指针。","position":{"start":{"line":1004,"column":29,"offset":30316},"end":{"line":1004,"column":35,"offset":30322},"indent":[]}}],"position":{"start":{"line":1004,"column":1,"offset":30288},"end":{"line":1004,"column":35,"offset":30322},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">sys_cputs</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>s<span class=\"token punctuation\">,</span> size_t len<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Check that the user has permission to read memory [s, s+len).</span>\n\t<span class=\"token comment\">// Destroy the environment if not.</span>\n\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token function\">user_mem_assert</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> PTE_U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Print the string supplied by the user.</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%.*s\"</span><span class=\"token punctuation\">,</span> len<span class=\"token punctuation\">,</span> s<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1006,"column":1,"offset":30324},"end":{"line":1018,"column":4,"offset":30625},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"之后，为了在","position":{"start":{"line":1020,"column":1,"offset":30627},"end":{"line":1020,"column":7,"offset":30633},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">breakpoint</code>","position":{"start":{"line":1020,"column":7,"offset":30633},"end":{"line":1020,"column":19,"offset":30645},"indent":[]}},{"type":"text","value":"中实现","position":{"start":{"line":1020,"column":19,"offset":30645},"end":{"line":1020,"column":22,"offset":30648},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">backtrace</code>","position":{"start":{"line":1020,"column":22,"offset":30648},"end":{"line":1020,"column":33,"offset":30659},"indent":[]}},{"type":"text","value":"功能，在","position":{"start":{"line":1020,"column":33,"offset":30659},"end":{"line":1020,"column":37,"offset":30663},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/kdebug.c</code>","position":{"start":{"line":1020,"column":37,"offset":30663},"end":{"line":1020,"column":52,"offset":30678},"indent":[]}},{"type":"text","value":"的","position":{"start":{"line":1020,"column":52,"offset":30678},"end":{"line":1020,"column":53,"offset":30679},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">debuginfo_eip()</code>","position":{"start":{"line":1020,"column":53,"offset":30679},"end":{"line":1020,"column":70,"offset":30696},"indent":[]}},{"type":"text","value":"中加入如下代码：","position":{"start":{"line":1020,"column":70,"offset":30696},"end":{"line":1020,"column":78,"offset":30704},"indent":[]}}],"position":{"start":{"line":1020,"column":1,"offset":30627},"end":{"line":1020,"column":78,"offset":30704},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">// Find the relevant set of stabs</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>=</span> ULIM<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tstabs <span class=\"token operator\">=</span> __STAB_BEGIN__<span class=\"token punctuation\">;</span>\n\t\tstab_end <span class=\"token operator\">=</span> __STAB_END__<span class=\"token punctuation\">;</span>\n\t\tstabstr <span class=\"token operator\">=</span> __STABSTR_BEGIN__<span class=\"token punctuation\">;</span>\n\t\tstabstr_end <span class=\"token operator\">=</span> __STABSTR_END__<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// The user-application linker script, user/user.ld,</span>\n\t\t<span class=\"token comment\">// puts information about the application's stabs (equivalent</span>\n\t\t<span class=\"token comment\">// to __STAB_BEGIN__, __STAB_END__, __STABSTR_BEGIN__, and</span>\n\t\t<span class=\"token comment\">// __STABSTR_END__) in a structure located at virtual address</span>\n\t\t<span class=\"token comment\">// USTABDATA.</span>\n\t\t<span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">UserStabData</span> <span class=\"token operator\">*</span>usd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">UserStabData</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> USTABDATA<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Make sure this memory is valid.</span>\n\t\t<span class=\"token comment\">// Return -1 if it is not.  Hint: Call user_mem_check.</span>\n\t\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">user_mem_check</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>usd<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UserStabData</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t\tstabs <span class=\"token operator\">=</span> usd<span class=\"token operator\">-></span>stabs<span class=\"token punctuation\">;</span>\n\t\tstab_end <span class=\"token operator\">=</span> usd<span class=\"token operator\">-></span>stab_end<span class=\"token punctuation\">;</span>\n\t\tstabstr <span class=\"token operator\">=</span> usd<span class=\"token operator\">-></span>stabstr<span class=\"token punctuation\">;</span>\n\t\tstabstr_end <span class=\"token operator\">=</span> usd<span class=\"token operator\">-></span>stabstr_end<span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Make sure the STABS and string table memory is valid.</span>\n\t\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">user_mem_check</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stabs<span class=\"token punctuation\">,</span> stab_end <span class=\"token operator\">-</span> stabs<span class=\"token punctuation\">,</span> PTE_U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">user_mem_check</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>stabstr<span class=\"token punctuation\">,</span> stabstr_end <span class=\"token operator\">-</span> stabstr<span class=\"token punctuation\">,</span> PTE_U<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1022,"column":1,"offset":30706},"end":{"line":1055,"column":4,"offset":31823},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"之后运行","position":{"start":{"line":1057,"column":1,"offset":31825},"end":{"line":1057,"column":5,"offset":31829},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">make run-breakpoint-nox</code>","position":{"start":{"line":1057,"column":5,"offset":31829},"end":{"line":1057,"column":30,"offset":31854},"indent":[]}},{"type":"text","value":"进入中断之后，如果运行","position":{"start":{"line":1057,"column":30,"offset":31854},"end":{"line":1057,"column":41,"offset":31865},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">bracktrack</code>","position":{"start":{"line":1057,"column":41,"offset":31865},"end":{"line":1057,"column":53,"offset":31877},"indent":[]}},{"type":"text","value":"就会有如下结果：","position":{"start":{"line":1057,"column":53,"offset":31877},"end":{"line":1057,"column":61,"offset":31885},"indent":[]}}],"position":{"start":{"line":1057,"column":1,"offset":31825},"end":{"line":1057,"column":61,"offset":31885},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">K<span class=\"token operator\">></span> backtrace\nStack backtrace:\n  ebp efffff00  eip f0100ad7  args 00000001 efffff28 f01d2000 f0106781 f011af48\n      kern/monitor.c:151: monitor+353\n  ebp efffff80  eip f010429b  args f01d2000 efffffbc f0150508 00000092 f011afd8\n      kern/trap.c:191: trap+282\n  ebp efffffb0  eip f0104389  args efffffbc 00000000 00000000 eebfdfc0 efffffdc\n      kern/trapentry.S:87: <span class=\"token operator\">&lt;</span>unknown<span class=\"token operator\">></span>+0\n  ebp eebfdfc0  eip 00800087  args 00000000 00000000 eebfdff0 00800058 00000000\n      lib/libmain.c:25: libmain+78\n  ebp eebfdff0  eip 00800031  args 00000000 00000000Incoming TRAP frame at 0xeffffe64\nkernel panic at kern/trap.c:187: page fault <span class=\"token keyword\">in</span> kernel</code></pre></div>","position":{"start":{"line":1059,"column":1,"offset":31887},"end":{"line":1072,"column":4,"offset":32532},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"这里为什么没有搞懂。。。","position":{"start":{"line":1074,"column":1,"offset":32534},"end":{"line":1074,"column":13,"offset":32546},"indent":[]}}],"position":{"start":{"line":1074,"column":1,"offset":32534},"end":{"line":1074,"column":13,"offset":32546},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 10","position":{"start":{"line":1076,"column":5,"offset":32552},"end":{"line":1076,"column":16,"offset":32563},"indent":[]}}],"position":{"start":{"line":1076,"column":1,"offset":32548},"end":{"line":1076,"column":16,"offset":32563},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"当完成exercise 9的时候，exercise 10自动完成了。9和10的唯一区别就是传入的指针，一个是未分配的，另外一个是传入了对应kernel部分的地址，这两者都可以用上面的检查方法搞定。","position":{"start":{"line":1078,"column":1,"offset":32565},"end":{"line":1078,"column":99,"offset":32663},"indent":[]}}],"position":{"start":{"line":1078,"column":1,"offset":32565},"end":{"line":1078,"column":99,"offset":32663},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"最后来运行一下","position":{"start":{"line":1080,"column":1,"offset":32665},"end":{"line":1080,"column":8,"offset":32672},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">make grade</code>","position":{"start":{"line":1080,"column":8,"offset":32672},"end":{"line":1080,"column":20,"offset":32684},"indent":[]}},{"type":"text","value":"：","position":{"start":{"line":1080,"column":20,"offset":32684},"end":{"line":1080,"column":21,"offset":32685},"indent":[]}}],"position":{"start":{"line":1080,"column":1,"offset":32665},"end":{"line":1080,"column":21,"offset":32685},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">divzero: OK <span class=\"token punctuation\">(</span>1.0s<span class=\"token punctuation\">)</span>\nsoftint: OK <span class=\"token punctuation\">(</span>0.9s<span class=\"token punctuation\">)</span>\nbadsegment: OK <span class=\"token punctuation\">(</span>1.0s<span class=\"token punctuation\">)</span>\nPart A score: 30/30\n\nfaultread: OK <span class=\"token punctuation\">(</span>1.0s<span class=\"token punctuation\">)</span>\nfaultreadkernel: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nfaultwrite: OK <span class=\"token punctuation\">(</span>1.1s<span class=\"token punctuation\">)</span>\nfaultwritekernel: OK <span class=\"token punctuation\">(</span>1.8s<span class=\"token punctuation\">)</span>\nbreakpoint: OK <span class=\"token punctuation\">(</span>1.1s<span class=\"token punctuation\">)</span>\ntestbss: OK <span class=\"token punctuation\">(</span>1.9s<span class=\"token punctuation\">)</span>\nhello: OK <span class=\"token punctuation\">(</span>2.1s<span class=\"token punctuation\">)</span>\nbuggyhello: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nbuggyhello2: OK <span class=\"token punctuation\">(</span>2.2s<span class=\"token punctuation\">)</span>\nevilhello: OK <span class=\"token punctuation\">(</span>1.8s<span class=\"token punctuation\">)</span>\nPart B score: 50/50\n\nScore: 80/80</code></pre></div>","position":{"start":{"line":1082,"column":1,"offset":32687},"end":{"line":1101,"column":4,"offset":33035},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":1103,"column":1,"offset":33037}}}}