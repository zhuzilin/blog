{"expireTime":9007200818315813000,"key":"transformer-remark-markdown-ast-5148cc8ebd1f988c60a25458bc6568ff-gatsby-remark-katexgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"这里会记录阅读6.828课程lecture note的我的个人笔记。可能会中英混杂，不是很适合外人阅读，也请见谅。","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":58,"offset":58},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":58,"offset":58},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Lecture 2: x86 and PC architecture","position":{"start":{"line":4,"column":4,"offset":63},"end":{"line":4,"column":38,"offset":97},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":60},"end":{"line":4,"column":38,"offset":97},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"PC architecture","position":{"start":{"line":6,"column":5,"offset":103},"end":{"line":6,"column":20,"offset":118},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":99},"end":{"line":6,"column":20,"offset":118},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"一个完整的CPU有：","position":{"start":{"line":8,"column":1,"offset":120},"end":{"line":8,"column":11,"offset":130},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":120},"end":{"line":8,"column":11,"offset":130},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"x86 CPU与其寄存器，执行单元和内存管理部分","position":{"start":{"line":10,"column":3,"offset":134},"end":{"line":10,"column":27,"offset":158},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":134},"end":{"line":10,"column":27,"offset":158},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":132},"end":{"line":10,"column":27,"offset":158},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"CPU chip pins, include address and data signals","position":{"start":{"line":11,"column":3,"offset":161},"end":{"line":11,"column":50,"offset":208},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":161},"end":{"line":11,"column":50,"offset":208},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":159},"end":{"line":11,"column":50,"offset":208},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"memory","position":{"start":{"line":12,"column":3,"offset":211},"end":{"line":12,"column":9,"offset":217},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":211},"end":{"line":12,"column":9,"offset":217},"indent":[]}}],"position":{"start":{"line":12,"column":1,"offset":209},"end":{"line":12,"column":9,"offset":217},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"disk","position":{"start":{"line":13,"column":3,"offset":220},"end":{"line":13,"column":7,"offset":224},"indent":[]}}],"position":{"start":{"line":13,"column":3,"offset":220},"end":{"line":13,"column":7,"offset":224},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":218},"end":{"line":13,"column":7,"offset":224},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"keyboard","position":{"start":{"line":14,"column":3,"offset":227},"end":{"line":14,"column":11,"offset":235},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":227},"end":{"line":14,"column":11,"offset":235},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":225},"end":{"line":14,"column":11,"offset":235},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"display","position":{"start":{"line":15,"column":3,"offset":238},"end":{"line":15,"column":10,"offset":245},"indent":[]}}],"position":{"start":{"line":15,"column":3,"offset":238},"end":{"line":15,"column":10,"offset":245},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":236},"end":{"line":15,"column":10,"offset":245},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"其他资源：BIOS, ROM, clock, ...","position":{"start":{"line":16,"column":3,"offset":248},"end":{"line":16,"column":29,"offset":274},"indent":[]}}],"position":{"start":{"line":16,"column":3,"offset":248},"end":{"line":16,"column":29,"offset":274},"indent":[]}}],"position":{"start":{"line":16,"column":1,"offset":246},"end":{"line":16,"column":29,"offset":274},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":132},"end":{"line":16,"column":29,"offset":274},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"我们从零来一步一步得到一个CPU:","position":{"start":{"line":18,"column":1,"offset":276},"end":{"line":18,"column":18,"offset":293},"indent":[]}}],"position":{"start":{"line":18,"column":1,"offset":276},"end":{"line":18,"column":18,"offset":293},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"可以把CPU就想成一个无穷循环","position":{"start":{"line":20,"column":3,"offset":297},"end":{"line":20,"column":18,"offset":312},"indent":[]}}],"position":{"start":{"line":20,"column":3,"offset":297},"end":{"line":20,"column":18,"offset":312},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":295},"end":{"line":20,"column":18,"offset":312},"indent":[]}}],"position":{"start":{"line":20,"column":1,"offset":295},"end":{"line":20,"column":18,"offset":312},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n\trun next instruction\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":22,"column":1,"offset":314},"end":{"line":26,"column":4,"offset":355},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"之后加入如AX, BX, CX, DX这样的register，他们速度非常快。","position":{"start":{"line":28,"column":1,"offset":357},"end":{"line":28,"column":40,"offset":396},"indent":[]}}],"position":{"start":{"line":28,"column":1,"offset":357},"end":{"line":28,"column":40,"offset":396},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"加入内存","position":{"start":{"line":30,"column":3,"offset":400},"end":{"line":30,"column":7,"offset":404},"indent":[]}}],"position":{"start":{"line":30,"column":3,"offset":400},"end":{"line":30,"column":7,"offset":404},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":398},"end":{"line":30,"column":7,"offset":404},"indent":[]}}],"position":{"start":{"line":30,"column":1,"offset":398},"end":{"line":30,"column":7,"offset":404},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"内存，通过CPU sends out address on address lines (wires, one bit per wire)(这个是memory bus嘛？)，以读写数据。","position":{"start":{"line":32,"column":1,"offset":406},"end":{"line":32,"column":94,"offset":499},"indent":[]}}],"position":{"start":{"line":32,"column":1,"offset":406},"end":{"line":32,"column":94,"offset":499},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">movl  %eax, %edx   # edx = eax; register mode\nmovl $0x123 %edx   # edx = 0x123; immediate\nmovl 0x123, %edx   # edx = *(int32_t*)0x123; direct\nmovl (%ebx), %edx  # edx = *(int32_t*)ebx; indirect\nmovl 4(%ebx), %edx # edx = *(int32_t*)(ebx+4); displaced</code></pre></div>","position":{"start":{"line":34,"column":1,"offset":501},"end":{"line":40,"column":4,"offset":767},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"上面几行具体的address mode的解释可以看","position":{"start":{"line":42,"column":1,"offset":769},"end":{"line":42,"column":26,"offset":794},"indent":[]}},{"type":"link","title":null,"url":"https://www.tutorialspoint.com/assembly_programming/assembly_addressing_modes.htm","children":[{"type":"text","value":"这里","position":{"start":{"line":42,"column":27,"offset":795},"end":{"line":42,"column":29,"offset":797},"indent":[]}}],"position":{"start":{"line":42,"column":26,"offset":794},"end":{"line":42,"column":113,"offset":881},"indent":[]}},{"type":"text","value":"。大致区别是：","position":{"start":{"line":42,"column":113,"offset":881},"end":{"line":42,"column":120,"offset":888},"indent":[]}}],"position":{"start":{"line":42,"column":1,"offset":769},"end":{"line":42,"column":120,"offset":888},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"register mode: 寄存器到寄存器","position":{"start":{"line":44,"column":4,"offset":893},"end":{"line":44,"column":26,"offset":915},"indent":[]}}],"position":{"start":{"line":44,"column":4,"offset":893},"end":{"line":44,"column":26,"offset":915},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":890},"end":{"line":44,"column":26,"offset":915},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"immediate mode: 指令里头带的常数到寄存器","position":{"start":{"line":45,"column":4,"offset":919},"end":{"line":45,"column":32,"offset":947},"indent":[]}}],"position":{"start":{"line":45,"column":4,"offset":919},"end":{"line":45,"column":32,"offset":947},"indent":[]}}],"position":{"start":{"line":45,"column":1,"offset":916},"end":{"line":45,"column":32,"offset":947},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"后面几种都是计算到内存位置的","position":{"start":{"line":46,"column":4,"offset":951},"end":{"line":46,"column":18,"offset":965},"indent":[]}}],"position":{"start":{"line":46,"column":4,"offset":951},"end":{"line":46,"column":18,"offset":965},"indent":[]}}],"position":{"start":{"line":46,"column":1,"offset":948},"end":{"line":47,"column":1,"offset":966},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"address registers (栈与和栈类似的东西)","position":{"start":{"line":48,"column":3,"offset":969},"end":{"line":48,"column":32,"offset":998},"indent":[]}}],"position":{"start":{"line":48,"column":3,"offset":969},"end":{"line":48,"column":32,"offset":998},"indent":[]}}],"position":{"start":{"line":48,"column":1,"offset":967},"end":{"line":48,"column":32,"offset":998},"indent":[]}}],"position":{"start":{"line":44,"column":1,"offset":890},"end":{"line":48,"column":32,"offset":998},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"为了满足如上需求，就需要有address registers，也就是SP, BP, SI, DI这样的register。","position":{"start":{"line":50,"column":1,"offset":1000},"end":{"line":50,"column":61,"offset":1060},"indent":[]}}],"position":{"start":{"line":50,"column":1,"offset":1000},"end":{"line":50,"column":61,"offset":1060},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"读取指令","position":{"start":{"line":52,"column":3,"offset":1064},"end":{"line":52,"column":7,"offset":1068},"indent":[]}}],"position":{"start":{"line":52,"column":3,"offset":1064},"end":{"line":52,"column":7,"offset":1068},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1062},"end":{"line":52,"column":7,"offset":1068},"indent":[]}}],"position":{"start":{"line":52,"column":1,"offset":1062},"end":{"line":52,"column":7,"offset":1068},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"需要注意，instructions是存在内存中的，用EIP指向instruction，每执行一个就会增加EIP，而CALL, RET, JMP等汇编指令可以改变IP。","position":{"start":{"line":54,"column":1,"offset":1070},"end":{"line":54,"column":84,"offset":1153},"indent":[]}}],"position":{"start":{"line":54,"column":1,"offset":1070},"end":{"line":54,"column":84,"offset":1153},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"FLAGS","position":{"start":{"line":56,"column":3,"offset":1157},"end":{"line":56,"column":8,"offset":1162},"indent":[]}}],"position":{"start":{"line":56,"column":3,"offset":1157},"end":{"line":56,"column":8,"offset":1162},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1155},"end":{"line":56,"column":8,"offset":1162},"indent":[]}}],"position":{"start":{"line":56,"column":1,"offset":1155},"end":{"line":56,"column":8,"offset":1162},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"除了以上内容，我们还需要条件语句进行conditional jump，这就需要FLAGS，有各种各样的FLAGS。","position":{"start":{"line":58,"column":1,"offset":1164},"end":{"line":58,"column":58,"offset":1221},"indent":[]}}],"position":{"start":{"line":58,"column":1,"offset":1164},"end":{"line":58,"column":58,"offset":1221},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"I/O","position":{"start":{"line":60,"column":3,"offset":1225},"end":{"line":60,"column":6,"offset":1228},"indent":[]}}],"position":{"start":{"line":60,"column":3,"offset":1225},"end":{"line":60,"column":6,"offset":1228},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1223},"end":{"line":60,"column":6,"offset":1228},"indent":[]}}],"position":{"start":{"line":60,"column":1,"offset":1223},"end":{"line":60,"column":6,"offset":1228},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"有了以上功能的CPU仍然是一个没什么意思的程序，因为其没有IO。","position":{"start":{"line":62,"column":1,"offset":1230},"end":{"line":62,"column":33,"offset":1262},"indent":[]}}],"position":{"start":{"line":62,"column":1,"offset":1230},"end":{"line":62,"column":33,"offset":1262},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// write a byte to line printer</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> DATA_PORT    0x378</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> STATUS_PORT  0x379</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span>   BUSY 0x80</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> CONTROL_PORT 0x37A</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span>   STROBE 0x01</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">lpt_putc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> c<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">/* wait for printer to consume previous byte */</span>\n  <span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">inb</span><span class=\"token punctuation\">(</span>STATUS_PORT<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> BUSY<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* put the byte on the parallel lines */</span>\n  <span class=\"token function\">outb</span><span class=\"token punctuation\">(</span>DATA_PORT<span class=\"token punctuation\">,</span> c<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">/* tell the printer to look at the data */</span>\n  <span class=\"token function\">outb</span><span class=\"token punctuation\">(</span>CONTROL_PORT<span class=\"token punctuation\">,</span> STROBE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">outb</span><span class=\"token punctuation\">(</span>CONTROL_PORT<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":64,"column":1,"offset":1264},"end":{"line":85,"column":4,"offset":1715},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"上面的这段代码是传统的PC architecture: use dedicated I/O space. ","position":{"start":{"line":87,"column":1,"offset":1717},"end":{"line":87,"column":54,"offset":1770},"indent":[]}}],"position":{"start":{"line":87,"column":1,"offset":1717},"end":{"line":87,"column":54,"offset":1770},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"没太看懂，但是感觉这里的outb和inb和manul里的是不同的。。。","position":{"start":{"line":89,"column":1,"offset":1772},"end":{"line":89,"column":36,"offset":1807},"indent":[]}}],"position":{"start":{"line":89,"column":1,"offset":1772},"end":{"line":89,"column":36,"offset":1807},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":" 这种方式有如下的几个特点：","position":{"start":{"line":91,"column":1,"offset":1809},"end":{"line":91,"column":15,"offset":1823},"indent":[]}}],"position":{"start":{"line":91,"column":1,"offset":1809},"end":{"line":91,"column":15,"offset":1823},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"和memory access类似，但是需要set I/O signal (代码里面的strobe是这个signal？)","position":{"start":{"line":93,"column":3,"offset":1827},"end":{"line":93,"column":62,"offset":1886},"indent":[]}}],"position":{"start":{"line":93,"column":3,"offset":1827},"end":{"line":93,"column":62,"offset":1886},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":1825},"end":{"line":93,"column":62,"offset":1886},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"只有1024 I/O address，(1024是0x3ff，所以和上面PORT挺对应的)。","position":{"start":{"line":94,"column":3,"offset":1889},"end":{"line":94,"column":49,"offset":1935},"indent":[]}}],"position":{"start":{"line":94,"column":3,"offset":1889},"end":{"line":94,"column":49,"offset":1935},"indent":[]}}],"position":{"start":{"line":94,"column":1,"offset":1887},"end":{"line":94,"column":49,"offset":1935},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"需要特殊的指令（IN, OUT）","position":{"start":{"line":95,"column":3,"offset":1938},"end":{"line":95,"column":19,"offset":1954},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":1938},"end":{"line":95,"column":19,"offset":1954},"indent":[]}}],"position":{"start":{"line":95,"column":1,"offset":1936},"end":{"line":95,"column":19,"offset":1954},"indent":[]}}],"position":{"start":{"line":93,"column":1,"offset":1825},"end":{"line":95,"column":19,"offset":1954},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"而现在都是用Memory-Mapped I/O，大致就是把I/O装置当成物理内存之外扩充的一部分内存，从而把I/O就当成内存用。每个PORT耶直接映射到了内存地址上。","position":{"start":{"line":97,"column":1,"offset":1956},"end":{"line":97,"column":84,"offset":2039},"indent":[]}}],"position":{"start":{"line":97,"column":1,"offset":1956},"end":{"line":97,"column":84,"offset":2039},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"其特点是：","position":{"start":{"line":99,"column":1,"offset":2041},"end":{"line":99,"column":6,"offset":2046},"indent":[]}}],"position":{"start":{"line":99,"column":1,"offset":2041},"end":{"line":99,"column":6,"offset":2046},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Use normal physical memory addresses","position":{"start":{"line":101,"column":3,"offset":2050},"end":{"line":101,"column":39,"offset":2086},"indent":[]}}],"position":{"start":{"line":101,"column":3,"offset":2050},"end":{"line":101,"column":39,"offset":2086},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Gets around limited size of I/O address space","position":{"start":{"line":102,"column":5,"offset":2091},"end":{"line":102,"column":50,"offset":2136},"indent":[]}}],"position":{"start":{"line":102,"column":5,"offset":2091},"end":{"line":102,"column":50,"offset":2136},"indent":[]}}],"position":{"start":{"line":102,"column":3,"offset":2089},"end":{"line":102,"column":50,"offset":2136},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"No need for special instructions","position":{"start":{"line":103,"column":5,"offset":2141},"end":{"line":103,"column":37,"offset":2173},"indent":[]}}],"position":{"start":{"line":103,"column":5,"offset":2141},"end":{"line":103,"column":37,"offset":2173},"indent":[]}}],"position":{"start":{"line":103,"column":3,"offset":2139},"end":{"line":103,"column":37,"offset":2173},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"System controller routes to appropriate device","position":{"start":{"line":104,"column":5,"offset":2178},"end":{"line":104,"column":51,"offset":2224},"indent":[]}}],"position":{"start":{"line":104,"column":5,"offset":2178},"end":{"line":104,"column":51,"offset":2224},"indent":[]}}],"position":{"start":{"line":104,"column":3,"offset":2176},"end":{"line":104,"column":51,"offset":2224},"indent":[]}}],"position":{"start":{"line":102,"column":3,"offset":2089},"end":{"line":104,"column":51,"offset":2224},"indent":[3,3]}}],"position":{"start":{"line":101,"column":1,"offset":2048},"end":{"line":104,"column":51,"offset":2224},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Works like \"magic'' memory:","position":{"start":{"line":105,"column":3,"offset":2227},"end":{"line":105,"column":30,"offset":2254},"indent":[]}}],"position":{"start":{"line":105,"column":3,"offset":2227},"end":{"line":105,"column":30,"offset":2254},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"emphasis","children":[{"type":"text","value":"Addressed","position":{"start":{"line":106,"column":6,"offset":2260},"end":{"line":106,"column":15,"offset":2269},"indent":[]}}],"position":{"start":{"line":106,"column":5,"offset":2259},"end":{"line":106,"column":16,"offset":2270},"indent":[]}},{"type":"text","value":" and ","position":{"start":{"line":106,"column":16,"offset":2270},"end":{"line":106,"column":21,"offset":2275},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"accessed","position":{"start":{"line":106,"column":22,"offset":2276},"end":{"line":106,"column":30,"offset":2284},"indent":[]}}],"position":{"start":{"line":106,"column":21,"offset":2275},"end":{"line":106,"column":31,"offset":2285},"indent":[]}},{"type":"text","value":" like memory, but ...","position":{"start":{"line":106,"column":31,"offset":2285},"end":{"line":106,"column":52,"offset":2306},"indent":[]}}],"position":{"start":{"line":106,"column":5,"offset":2259},"end":{"line":106,"column":52,"offset":2306},"indent":[]}}],"position":{"start":{"line":106,"column":3,"offset":2257},"end":{"line":106,"column":52,"offset":2306},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"... does not ","position":{"start":{"line":107,"column":5,"offset":2311},"end":{"line":107,"column":18,"offset":2324},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"behave","position":{"start":{"line":107,"column":19,"offset":2325},"end":{"line":107,"column":25,"offset":2331},"indent":[]}}],"position":{"start":{"line":107,"column":18,"offset":2324},"end":{"line":107,"column":26,"offset":2332},"indent":[]}},{"type":"text","value":" like memory!","position":{"start":{"line":107,"column":26,"offset":2332},"end":{"line":107,"column":39,"offset":2345},"indent":[]}}],"position":{"start":{"line":107,"column":5,"offset":2311},"end":{"line":107,"column":39,"offset":2345},"indent":[]}}],"position":{"start":{"line":107,"column":3,"offset":2309},"end":{"line":107,"column":39,"offset":2345},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Reads and writes can have ","position":{"start":{"line":108,"column":5,"offset":2350},"end":{"line":108,"column":31,"offset":2376},"indent":[]}},{"type":"html","value":"<code class=\"language-text\"></code>","position":{"start":{"line":108,"column":31,"offset":2376},"end":{"line":108,"column":33,"offset":2378},"indent":[]}},{"type":"text","value":"side effects''","position":{"start":{"line":108,"column":33,"offset":2378},"end":{"line":108,"column":47,"offset":2392},"indent":[]}}],"position":{"start":{"line":108,"column":5,"offset":2350},"end":{"line":108,"column":47,"offset":2392},"indent":[]}}],"position":{"start":{"line":108,"column":3,"offset":2348},"end":{"line":108,"column":47,"offset":2392},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Read results can change due to external events","position":{"start":{"line":109,"column":5,"offset":2397},"end":{"line":109,"column":51,"offset":2443},"indent":[]}}],"position":{"start":{"line":109,"column":5,"offset":2397},"end":{"line":109,"column":51,"offset":2443},"indent":[]}}],"position":{"start":{"line":109,"column":3,"offset":2395},"end":{"line":109,"column":51,"offset":2443},"indent":[]}}],"position":{"start":{"line":106,"column":3,"offset":2257},"end":{"line":109,"column":51,"offset":2443},"indent":[3,3,3]}}],"position":{"start":{"line":105,"column":1,"offset":2225},"end":{"line":110,"column":1,"offset":2444},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"如何使用不止2^16bytes的内存","position":{"start":{"line":111,"column":3,"offset":2447},"end":{"line":111,"column":21,"offset":2465},"indent":[]}}],"position":{"start":{"line":111,"column":3,"offset":2447},"end":{"line":111,"column":21,"offset":2465},"indent":[]}}],"position":{"start":{"line":111,"column":1,"offset":2445},"end":{"line":111,"column":21,"offset":2465},"indent":[]}}],"position":{"start":{"line":101,"column":1,"offset":2048},"end":{"line":111,"column":21,"offset":2465},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"虽然IP只有16位，但是加入了CS之后就可以有20位了。","position":{"start":{"line":113,"column":1,"offset":2467},"end":{"line":113,"column":29,"offset":2495},"indent":[]}}],"position":{"start":{"line":113,"column":1,"offset":2467},"end":{"line":113,"column":29,"offset":2495},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"注意，这个20位的情况只出现在","position":{"start":{"line":115,"column":1,"offset":2497},"end":{"line":115,"column":16,"offset":2512},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Protected_mode","children":[{"type":"text","value":"real mode","position":{"start":{"line":115,"column":17,"offset":2513},"end":{"line":115,"column":26,"offset":2522},"indent":[]}}],"position":{"start":{"line":115,"column":16,"offset":2512},"end":{"line":115,"column":73,"offset":2569},"indent":[]}},{"type":"text","value":"，也就是一个用于兼容之前的16位cpu用的。这个模式没有任何保护，只能访问1M内存，可以直接访问BIOS及周边内存，现在只有在boot的过程中才是用这种情况。而之后下面提到支持32位地址之后，在Boot完成之后，会转化为","position":{"start":{"line":115,"column":73,"offset":2569},"end":{"line":115,"column":183,"offset":2679},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Protected_mode","children":[{"type":"text","value":"protected mode","position":{"start":{"line":115,"column":184,"offset":2680},"end":{"line":115,"column":198,"offset":2694},"indent":[]}}],"position":{"start":{"line":115,"column":183,"offset":2679},"end":{"line":115,"column":245,"offset":2741},"indent":[]}},{"type":"text","value":"，就直接只用一个32位的","position":{"start":{"line":115,"column":245,"offset":2741},"end":{"line":115,"column":257,"offset":2753},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">eip</code>","position":{"start":{"line":115,"column":257,"offset":2753},"end":{"line":115,"column":262,"offset":2758},"indent":[]}},{"type":"text","value":"寄存器了。","position":{"start":{"line":115,"column":262,"offset":2758},"end":{"line":115,"column":267,"offset":2763},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":2497},"end":{"line":115,"column":267,"offset":2763},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"希望有超过16位的address","position":{"start":{"line":117,"column":3,"offset":2767},"end":{"line":117,"column":19,"offset":2783},"indent":[]}}],"position":{"start":{"line":117,"column":3,"offset":2767},"end":{"line":117,"column":19,"offset":2783},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":2765},"end":{"line":117,"column":19,"offset":2783},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":2765},"end":{"line":117,"column":19,"offset":2783},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"80386首次支持32位地址。Boot的时候是16位，通过","position":{"start":{"line":119,"column":1,"offset":2785},"end":{"line":119,"column":30,"offset":2814},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot.s</code>","position":{"start":{"line":119,"column":30,"offset":2814},"end":{"line":119,"column":38,"offset":2822},"indent":[]}},{"type":"text","value":"转换为32位。","position":{"start":{"line":119,"column":38,"offset":2822},"end":{"line":119,"column":45,"offset":2829},"indent":[]}}],"position":{"start":{"line":119,"column":1,"offset":2785},"end":{"line":119,"column":45,"offset":2829},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"其寄存器也都是32位的，所以叫EAX而不是AX了。在32位模式下，通过前面加0x66前缀来toggle between 16-bit and 32-bit。而","position":{"start":{"line":121,"column":1,"offset":2831},"end":{"line":121,"column":80,"offset":2910},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot.s</code>","position":{"start":{"line":121,"column":80,"offset":2910},"end":{"line":121,"column":88,"offset":2918},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":121,"column":88,"offset":2918},"end":{"line":121,"column":90,"offset":2920},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">.code32</code>","position":{"start":{"line":121,"column":90,"offset":2920},"end":{"line":121,"column":99,"offset":2929},"indent":[]}},{"type":"text","value":"正是做的这一点。如：","position":{"start":{"line":121,"column":99,"offset":2929},"end":{"line":121,"column":109,"offset":2939},"indent":[]}}],"position":{"start":{"line":121,"column":1,"offset":2831},"end":{"line":121,"column":109,"offset":2939},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">b8 cd ab\t\t16-bit CPU,  AX &lt;- 0xabcd\nb8 34 12 cd ab  32-bit CPU, EAX &lt;- 0xabcd1234\n66 b8 cd ab\t\t32-bit CPU,  AX &lt;- 0xabcd</code></pre></div>","position":{"start":{"line":123,"column":1,"offset":2941},"end":{"line":127,"column":4,"offset":3077},"indent":[1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"x86 Physical Memory Map","position":{"start":{"line":129,"column":5,"offset":3083},"end":{"line":129,"column":28,"offset":3106},"indent":[]}}],"position":{"start":{"line":129,"column":1,"offset":3079},"end":{"line":129,"column":28,"offset":3106},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"The physical address space mostly looks like ordinary RAM","position":{"start":{"line":131,"column":3,"offset":3110},"end":{"line":131,"column":60,"offset":3167},"indent":[]}}],"position":{"start":{"line":131,"column":3,"offset":3110},"end":{"line":131,"column":60,"offset":3167},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":3108},"end":{"line":131,"column":60,"offset":3167},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Except some low-memory addresses actually refer to other things","position":{"start":{"line":132,"column":3,"offset":3170},"end":{"line":132,"column":66,"offset":3233},"indent":[]}}],"position":{"start":{"line":132,"column":3,"offset":3170},"end":{"line":132,"column":66,"offset":3233},"indent":[]}}],"position":{"start":{"line":132,"column":1,"offset":3168},"end":{"line":132,"column":66,"offset":3233},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Writes to VGA memory appear on the screen","position":{"start":{"line":133,"column":3,"offset":3236},"end":{"line":133,"column":44,"offset":3277},"indent":[]}}],"position":{"start":{"line":133,"column":3,"offset":3236},"end":{"line":133,"column":44,"offset":3277},"indent":[]}}],"position":{"start":{"line":133,"column":1,"offset":3234},"end":{"line":133,"column":44,"offset":3277},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Reset or power-on jumps to ROM at 0xfffffff0 (so must be ROM at top...)","position":{"start":{"line":134,"column":3,"offset":3280},"end":{"line":134,"column":74,"offset":3351},"indent":[]}}],"position":{"start":{"line":134,"column":3,"offset":3280},"end":{"line":134,"column":74,"offset":3351},"indent":[]}}],"position":{"start":{"line":134,"column":1,"offset":3278},"end":{"line":134,"column":74,"offset":3351},"indent":[]}}],"position":{"start":{"line":131,"column":1,"offset":3108},"end":{"line":134,"column":74,"offset":3351},"indent":[1,1,1]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">+------------------+  &lt;- 0xFFFFFFFF (4GB)\n|      32-bit      |\n|  memory mapped   |\n|     devices      |\n|                  |\n/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n\n/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n|                  |\n|      Unused      |\n|                  |\n+------------------+  &lt;- depends on amount of RAM\n|                  |\n|                  |\n| Extended Memory  |\n|                  |\n|                  |\n+------------------+  &lt;- 0x00100000 (1MB)\n|     BIOS ROM     |\n+------------------+  &lt;- 0x000F0000 (960KB)\n|  16-bit devices, |\n|  expansion ROMs  |\n+------------------+  &lt;- 0x000C0000 (768KB)\n|   VGA Display    |\n+------------------+  &lt;- 0x000A0000 (640KB)\n|                  |\n|    Low Memory    |\n|                  |\n+------------------+  &lt;- 0x00000000</code></pre></div>","position":{"start":{"line":136,"column":1,"offset":3353},"end":{"line":166,"column":4,"offset":4104},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"这里的图在lab1中出现过，在lab1中有更详细的讲解。","position":{"start":{"line":168,"column":1,"offset":4106},"end":{"line":168,"column":29,"offset":4134},"indent":[]}}],"position":{"start":{"line":168,"column":1,"offset":4106},"end":{"line":168,"column":29,"offset":4134},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"x86 Instruction Set","position":{"start":{"line":170,"column":5,"offset":4140},"end":{"line":170,"column":24,"offset":4159},"indent":[]}}],"position":{"start":{"line":170,"column":1,"offset":4136},"end":{"line":170,"column":24,"offset":4159},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"对于本课使用的AT&T(gcc/gas) syntax: op src, dst。","position":{"start":{"line":172,"column":1,"offset":4161},"end":{"line":172,"column":42,"offset":4202},"indent":[]}}],"position":{"start":{"line":172,"column":1,"offset":4161},"end":{"line":172,"column":42,"offset":4202},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"使用b, w, l来表示不同大小的操作。","position":{"start":{"line":174,"column":1,"offset":4204},"end":{"line":174,"column":21,"offset":4224},"indent":[]}}],"position":{"start":{"line":174,"column":1,"offset":4204},"end":{"line":174,"column":21,"offset":4224},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"data movement: MOV, PUSH, POP, ...","position":{"start":{"line":176,"column":3,"offset":4228},"end":{"line":176,"column":37,"offset":4262},"indent":[]}}],"position":{"start":{"line":176,"column":3,"offset":4228},"end":{"line":176,"column":37,"offset":4262},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":4226},"end":{"line":176,"column":37,"offset":4262},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"arithmetic: TEST, SHL, ADD, AND, ...","position":{"start":{"line":177,"column":3,"offset":4265},"end":{"line":177,"column":39,"offset":4301},"indent":[]}}],"position":{"start":{"line":177,"column":3,"offset":4265},"end":{"line":177,"column":39,"offset":4301},"indent":[]}}],"position":{"start":{"line":177,"column":1,"offset":4263},"end":{"line":177,"column":39,"offset":4301},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"i/o: IN, OUT, ...","position":{"start":{"line":178,"column":3,"offset":4304},"end":{"line":178,"column":20,"offset":4321},"indent":[]}}],"position":{"start":{"line":178,"column":3,"offset":4304},"end":{"line":178,"column":20,"offset":4321},"indent":[]}}],"position":{"start":{"line":178,"column":1,"offset":4302},"end":{"line":178,"column":20,"offset":4321},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"control: JMP, JZ, JNZ, CALL, RET","position":{"start":{"line":179,"column":3,"offset":4324},"end":{"line":179,"column":35,"offset":4356},"indent":[]}}],"position":{"start":{"line":179,"column":3,"offset":4324},"end":{"line":179,"column":35,"offset":4356},"indent":[]}}],"position":{"start":{"line":179,"column":1,"offset":4322},"end":{"line":179,"column":35,"offset":4356},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"string: REP MOVSB, ...","position":{"start":{"line":180,"column":3,"offset":4359},"end":{"line":180,"column":25,"offset":4381},"indent":[]}}],"position":{"start":{"line":180,"column":3,"offset":4359},"end":{"line":180,"column":25,"offset":4381},"indent":[]}}],"position":{"start":{"line":180,"column":1,"offset":4357},"end":{"line":180,"column":25,"offset":4381},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"system: IRET, INT","position":{"start":{"line":181,"column":3,"offset":4384},"end":{"line":181,"column":20,"offset":4401},"indent":[]}}],"position":{"start":{"line":181,"column":3,"offset":4384},"end":{"line":181,"column":20,"offset":4401},"indent":[]}}],"position":{"start":{"line":181,"column":1,"offset":4382},"end":{"line":181,"column":20,"offset":4401},"indent":[]}}],"position":{"start":{"line":176,"column":1,"offset":4226},"end":{"line":181,"column":20,"offset":4401},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"gcc x86 calling conventions","position":{"start":{"line":183,"column":4,"offset":4406},"end":{"line":183,"column":31,"offset":4433},"indent":[]}}],"position":{"start":{"line":183,"column":1,"offset":4403},"end":{"line":183,"column":31,"offset":4433},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"这里主要讲解了如何调用函数，也就是如何使用栈。","position":{"start":{"line":185,"column":1,"offset":4435},"end":{"line":185,"column":24,"offset":4458},"indent":[]}}],"position":{"start":{"line":185,"column":1,"offset":4435},"end":{"line":185,"column":24,"offset":4458},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">pushl %eax   &lt;=&gt; subl $4, %esp # esp -= 4\n\t\t\t     movl %eax, (%esp) # *(esp) = eax\npopl %eax    &lt;=&gt; movl (%esp), %eax # eax = *(esp)\n\t\t\t     addl $4, %esp # esp += 4\ncall 0x12345 &lt;=&gt; pushl %eip(*) # 存起来call指令的地址\n\t\t\t\t movl $0x12345, %eip(*) # 下一个指令执行函数\nret \t\t &lt;=&gt; popl %eip(*) # 回到call指令\n# (*) mean it is not real instruction</code></pre></div>","position":{"start":{"line":187,"column":1,"offset":4460},"end":{"line":196,"column":4,"offset":4800},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"GCC dictates 该如何使用栈. 在x86上，caller和callee之间的协议(Contract)如下:","position":{"start":{"line":198,"column":1,"offset":4802},"end":{"line":198,"column":59,"offset":4860},"indent":[]}}],"position":{"start":{"line":198,"column":1,"offset":4802},"end":{"line":198,"column":59,"offset":4860},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"在函数的入口处 (i.e. just after call):","position":{"start":{"line":200,"column":3,"offset":4864},"end":{"line":200,"column":34,"offset":4895},"indent":[]}}],"position":{"start":{"line":200,"column":3,"offset":4864},"end":{"line":200,"column":34,"offset":4895},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"%eip 指向函数的首个指令的地址","position":{"start":{"line":201,"column":5,"offset":4900},"end":{"line":201,"column":22,"offset":4917},"indent":[]}}],"position":{"start":{"line":201,"column":5,"offset":4900},"end":{"line":201,"column":22,"offset":4917},"indent":[]}}],"position":{"start":{"line":201,"column":3,"offset":4898},"end":{"line":201,"column":22,"offset":4917},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"%esp+4 指首个参数（其实就是首个参数被push了）","position":{"start":{"line":202,"column":5,"offset":4922},"end":{"line":202,"column":33,"offset":4950},"indent":[]}}],"position":{"start":{"line":202,"column":5,"offset":4922},"end":{"line":202,"column":33,"offset":4950},"indent":[]}}],"position":{"start":{"line":202,"column":3,"offset":4920},"end":{"line":202,"column":33,"offset":4950},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"%esp 指向返回地址（return address）","position":{"start":{"line":203,"column":5,"offset":4955},"end":{"line":203,"column":32,"offset":4982},"indent":[]}}],"position":{"start":{"line":203,"column":5,"offset":4955},"end":{"line":203,"column":32,"offset":4982},"indent":[]}}],"position":{"start":{"line":203,"column":3,"offset":4953},"end":{"line":203,"column":32,"offset":4982},"indent":[]}}],"position":{"start":{"line":201,"column":3,"offset":4898},"end":{"line":203,"column":32,"offset":4982},"indent":[3,3]}}],"position":{"start":{"line":200,"column":1,"offset":4862},"end":{"line":203,"column":32,"offset":4982},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"运行ret指令之后（函数返回之后）:","position":{"start":{"line":204,"column":3,"offset":4985},"end":{"line":204,"column":21,"offset":5003},"indent":[]}}],"position":{"start":{"line":204,"column":3,"offset":4985},"end":{"line":204,"column":21,"offset":5003},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"%eip 包含%esp的值，也就是返回地址","position":{"start":{"line":205,"column":5,"offset":5008},"end":{"line":205,"column":26,"offset":5029},"indent":[]}}],"position":{"start":{"line":205,"column":5,"offset":5008},"end":{"line":205,"column":26,"offset":5029},"indent":[]}}],"position":{"start":{"line":205,"column":3,"offset":5006},"end":{"line":205,"column":26,"offset":5029},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"%esp 因为重新被addl 4, 所以指向首个参数","position":{"start":{"line":206,"column":5,"offset":5034},"end":{"line":206,"column":31,"offset":5060},"indent":[]}}],"position":{"start":{"line":206,"column":5,"offset":5034},"end":{"line":206,"column":31,"offset":5060},"indent":[]}}],"position":{"start":{"line":206,"column":3,"offset":5032},"end":{"line":206,"column":31,"offset":5060},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"函数可能有trashed argument（没懂什么意思）","position":{"start":{"line":207,"column":5,"offset":5065},"end":{"line":207,"column":34,"offset":5094},"indent":[]}}],"position":{"start":{"line":207,"column":5,"offset":5065},"end":{"line":207,"column":34,"offset":5094},"indent":[]}}],"position":{"start":{"line":207,"column":3,"offset":5063},"end":{"line":207,"column":34,"offset":5094},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"%eax (and %edx, if return type is 64-bit) 存有返回值 (or trash if function is ","position":{"start":{"line":208,"column":5,"offset":5099},"end":{"line":208,"column":78,"offset":5172},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">void</code>","position":{"start":{"line":208,"column":78,"offset":5172},"end":{"line":208,"column":84,"offset":5178},"indent":[]}},{"type":"text","value":")","position":{"start":{"line":208,"column":84,"offset":5178},"end":{"line":208,"column":85,"offset":5179},"indent":[]}}],"position":{"start":{"line":208,"column":5,"offset":5099},"end":{"line":208,"column":85,"offset":5179},"indent":[]}}],"position":{"start":{"line":208,"column":3,"offset":5097},"end":{"line":208,"column":85,"offset":5179},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"%eax, %edx (above), and %ecx may be trashed","position":{"start":{"line":209,"column":5,"offset":5184},"end":{"line":209,"column":48,"offset":5227},"indent":[]}}],"position":{"start":{"line":209,"column":5,"offset":5184},"end":{"line":209,"column":48,"offset":5227},"indent":[]}}],"position":{"start":{"line":209,"column":3,"offset":5182},"end":{"line":209,"column":48,"offset":5227},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"%ebp, %ebx, %esi, %edi must contain contents from time of ","position":{"start":{"line":210,"column":5,"offset":5232},"end":{"line":210,"column":63,"offset":5290},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">call</code>","position":{"start":{"line":210,"column":63,"offset":5290},"end":{"line":210,"column":69,"offset":5296},"indent":[]}},{"type":"text","value":"（比如ebx是输入参数，ebp是caller的frame address）","position":{"start":{"line":210,"column":69,"offset":5296},"end":{"line":210,"column":106,"offset":5333},"indent":[]}}],"position":{"start":{"line":210,"column":5,"offset":5232},"end":{"line":210,"column":106,"offset":5333},"indent":[]}}],"position":{"start":{"line":210,"column":3,"offset":5230},"end":{"line":210,"column":106,"offset":5333},"indent":[]}}],"position":{"start":{"line":205,"column":3,"offset":5006},"end":{"line":210,"column":106,"offset":5333},"indent":[3,3,3,3,3]}}],"position":{"start":{"line":204,"column":1,"offset":4983},"end":{"line":210,"column":106,"offset":5333},"indent":[1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Terminology:","position":{"start":{"line":211,"column":3,"offset":5336},"end":{"line":211,"column":15,"offset":5348},"indent":[]}}],"position":{"start":{"line":211,"column":3,"offset":5336},"end":{"line":211,"column":15,"offset":5348},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"%eax, %ecx, %edx are \"caller save\" registers","position":{"start":{"line":212,"column":5,"offset":5353},"end":{"line":212,"column":49,"offset":5397},"indent":[]}}],"position":{"start":{"line":212,"column":5,"offset":5353},"end":{"line":212,"column":49,"offset":5397},"indent":[]}}],"position":{"start":{"line":212,"column":3,"offset":5351},"end":{"line":212,"column":49,"offset":5397},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"%ebp, %ebx, %esi, %edi are \"callee save\" registers","position":{"start":{"line":213,"column":5,"offset":5402},"end":{"line":213,"column":55,"offset":5452},"indent":[]}}],"position":{"start":{"line":213,"column":5,"offset":5402},"end":{"line":213,"column":55,"offset":5452},"indent":[]}}],"position":{"start":{"line":213,"column":3,"offset":5400},"end":{"line":213,"column":55,"offset":5452},"indent":[]}}],"position":{"start":{"line":212,"column":3,"offset":5351},"end":{"line":213,"column":55,"offset":5452},"indent":[3]}}],"position":{"start":{"line":211,"column":1,"offset":5334},"end":{"line":213,"column":55,"offset":5452},"indent":[1,1]}}],"position":{"start":{"line":200,"column":1,"offset":4862},"end":{"line":213,"column":55,"offset":5452},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"这里原note中写的非常清楚，应仔细阅读。","position":{"start":{"line":215,"column":1,"offset":5454},"end":{"line":215,"column":22,"offset":5475},"indent":[]}}],"position":{"start":{"line":215,"column":1,"offset":5454},"end":{"line":215,"column":22,"offset":5475},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"只要不违反上述contract，Function什么都可以做，根据习惯，GCC会：","position":{"start":{"line":217,"column":1,"offset":5477},"end":{"line":217,"column":42,"offset":5518},"indent":[]}}],"position":{"start":{"line":217,"column":1,"offset":5477},"end":{"line":217,"column":42,"offset":5518},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"each function has a stack frame marked by %ebp, %esp","position":{"start":{"line":219,"column":3,"offset":5522},"end":{"line":219,"column":55,"offset":5574},"indent":[]}}],"position":{"start":{"line":219,"column":3,"offset":5522},"end":{"line":219,"column":55,"offset":5574},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">     +------------+   |\n     | arg 2      |   \\\n     +------------+    &gt;- previous function&#39;s stack frame\n     | arg 1      |   /\n     +------------+   |\n     | ret %eip   |   /\n     +============+   \n     | saved %ebp |   \\\n%ebp-&gt; +------------+   |\n     |            |   |\n     |   local    |   \\\n     | variables, |    &gt;- current function&#39;s stack frame\n     |    etc.    |   /\n     |            |   |\n     |            |   |\n%esp-&gt; +------------+   /</code></pre></div>","position":{"start":{"line":221,"column":3,"offset":5578},"end":{"line":238,"column":6,"offset":6101},"indent":[5,5,5,5,5,5,5,5,3,5,5,5,5,5,5,3,3]}}],"position":{"start":{"line":219,"column":1,"offset":5520},"end":{"line":239,"column":1,"offset":6102},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"可以通过移动%esp来增大减小（应该就是通过push和pop，那到底有没有一个frame大小作为限制呢？）","position":{"start":{"line":240,"column":3,"offset":6105},"end":{"line":240,"column":56,"offset":6158},"indent":[]}}],"position":{"start":{"line":240,"column":3,"offset":6105},"end":{"line":240,"column":56,"offset":6158},"indent":[]}}],"position":{"start":{"line":240,"column":1,"offset":6103},"end":{"line":241,"column":1,"offset":6159},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"%ebp指向之前函数的%ebp，从而形成链（可以看后面两部分的代码）","position":{"start":{"line":242,"column":3,"offset":6162},"end":{"line":242,"column":37,"offset":6196},"indent":[]}}],"position":{"start":{"line":242,"column":3,"offset":6162},"end":{"line":242,"column":37,"offset":6196},"indent":[]}}],"position":{"start":{"line":242,"column":1,"offset":6160},"end":{"line":243,"column":1,"offset":6197},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"function prologue:","position":{"start":{"line":244,"column":3,"offset":6200},"end":{"line":244,"column":21,"offset":6218},"indent":[]}}],"position":{"start":{"line":244,"column":3,"offset":6200},"end":{"line":244,"column":21,"offset":6218},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">pushl %ebp  # 把当前的frame address存在esp对应的地址里\nmovl %esp, %ebp\t # 把现在的esp的值存在ebp里，\n\t\t\t\t # 可以理解为*(ebp) = ebp_old\n\t\t\t\t # 从而组成了一个frame address的链</code></pre></div>","position":{"start":{"line":246,"column":3,"offset":6222},"end":{"line":251,"column":6,"offset":6385},"indent":[3,3,3,3,3]}},{"type":"paragraph","children":[{"type":"text","value":"or","position":{"start":{"line":253,"column":3,"offset":6389},"end":{"line":253,"column":5,"offset":6391},"indent":[]}}],"position":{"start":{"line":253,"column":3,"offset":6389},"end":{"line":253,"column":5,"offset":6391},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">enter $0, $0</code></pre></div>","position":{"start":{"line":255,"column":3,"offset":6395},"end":{"line":257,"column":6,"offset":6427},"indent":[3,3]}},{"type":"paragraph","children":[{"type":"text","value":"enter usually not used: 4 bytes vs 3 for pushl+movl, not on hardware fast-path anymore","position":{"start":{"line":259,"column":3,"offset":6431},"end":{"line":259,"column":89,"offset":6517},"indent":[]}}],"position":{"start":{"line":259,"column":3,"offset":6431},"end":{"line":259,"column":89,"offset":6517},"indent":[]}}],"position":{"start":{"line":244,"column":1,"offset":6198},"end":{"line":260,"column":1,"offset":6518},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"function epilogue can easily find return EIP on stack:","position":{"start":{"line":261,"column":3,"offset":6521},"end":{"line":261,"column":57,"offset":6575},"indent":[]}}],"position":{"start":{"line":261,"column":3,"offset":6521},"end":{"line":261,"column":57,"offset":6575},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">movl %ebp, %esp # esp = ebp，注意这时*(ebp) = ebp_old\npopl %ebp # 把*(ebp)也就是ebp_old重新赋给ebp, ebp = *(ebp)\n\t\t  # 同时esp也恢复到调用这个函数之前的值</code></pre></div>","position":{"start":{"line":263,"column":3,"offset":6579},"end":{"line":267,"column":6,"offset":6728},"indent":[3,3,3,3]}},{"type":"paragraph","children":[{"type":"text","value":"or","position":{"start":{"line":269,"column":3,"offset":6732},"end":{"line":269,"column":5,"offset":6734},"indent":[]}}],"position":{"start":{"line":269,"column":3,"offset":6732},"end":{"line":269,"column":5,"offset":6734},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">leave\t</code></pre></div>","position":{"start":{"line":271,"column":3,"offset":6738},"end":{"line":273,"column":6,"offset":6764},"indent":[3,3]}},{"type":"paragraph","children":[{"type":"text","value":"leave used often because it's 1 byte, vs 3 for movl+popl","position":{"start":{"line":275,"column":3,"offset":6768},"end":{"line":275,"column":59,"offset":6824},"indent":[]}}],"position":{"start":{"line":275,"column":3,"offset":6768},"end":{"line":275,"column":59,"offset":6824},"indent":[]}}],"position":{"start":{"line":261,"column":1,"offset":6519},"end":{"line":275,"column":59,"offset":6824},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":219,"column":1,"offset":5520},"end":{"line":275,"column":59,"offset":6824},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"这里有一个简单的调用的例子：","position":{"start":{"line":277,"column":1,"offset":6826},"end":{"line":277,"column":15,"offset":6840},"indent":[]}}],"position":{"start":{"line":277,"column":1,"offset":6826},"end":{"line":277,"column":15,"offset":6840},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"C code","position":{"start":{"line":279,"column":3,"offset":6844},"end":{"line":279,"column":9,"offset":6850},"indent":[]}}],"position":{"start":{"line":279,"column":3,"offset":6844},"end":{"line":279,"column":9,"offset":6850},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> <span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">f</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span>x<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\n<span class=\"token keyword\">int</span> <span class=\"token function\">g</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> x<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span> <span class=\"token keyword\">return</span> x<span class=\"token operator\">+</span><span class=\"token number\">3</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">}</span>\t\t</code></pre></div>","position":{"start":{"line":281,"column":3,"offset":6854},"end":{"line":285,"column":6,"offset":6965},"indent":[3,3,3,3]}}],"position":{"start":{"line":279,"column":1,"offset":6842},"end":{"line":286,"column":1,"offset":6966},"indent":[1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"assembler","position":{"start":{"line":287,"column":3,"offset":6969},"end":{"line":287,"column":12,"offset":6978},"indent":[]}}],"position":{"start":{"line":287,"column":3,"offset":6969},"end":{"line":287,"column":12,"offset":6978},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">_main:\n\t\t\t\tprologue\n\tpushl %ebp\n\tmovl %esp, %ebp\n\t\t\t\tbody\n\tpushl $8 # 在调用前，把8，也就是参数推进栈\n  call _f # 调用\n  addl $1, %eax # 返回值存在eax中\n  \t\t\tepilogue\n\tmovl %ebp, %esp\n\tpopl %ebp\n\tret\n_f:\n\t\t\t\tprologue\n\tpushl %ebp # ebp为main的frame address\n\tmovl %esp, %ebp # ebp为f的frame address，指向main的\n\t\t\t\tbody\n\tpushl 8(%esp) # 这里的8(%esp)是x的地址对应的值，是调用函数前放进去的\n\t\t\t\t  # 把传入的x再次放入栈中\n\tcall _g\n\t\t\t\tepilogue\n\tmovl %ebp, %esp\n\tpopl %ebp\n\tret\n\n_g:\n\t\t\t\tprologue\n\tpushl %ebp\n\tmovl %esp, %ebp\n\t\t\t\tsave %ebx\n\tpushl %ebx # 这里不懂。。。\n\t\t\t\tbody\n\tmovl 8(%ebp), %ebx # 取出传入的x\n\taddl $3, %ebx\n\tmovl %ebx, %eax # 把计算结果存给eax\n\t\t\t\trestore %ebx\n\tpopl %ebx\n\t\t\t\tepilogue\n\tmovl %ebp, %esp\n\tpopl %ebp\n\tret</code></pre></div>","position":{"start":{"line":289,"column":3,"offset":6982},"end":{"line":331,"column":6,"offset":7737},"indent":[3,3,3,3,3,3,5,5,5,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]}},{"type":"paragraph","children":[{"type":"text","value":"注意，如果使用","position":{"start":{"line":333,"column":3,"offset":7741},"end":{"line":333,"column":10,"offset":7748},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">objdump -d</code>","position":{"start":{"line":333,"column":10,"offset":7748},"end":{"line":333,"column":22,"offset":7760},"indent":[]}},{"type":"text","value":"进行反汇编，会有出入。","position":{"start":{"line":333,"column":22,"offset":7760},"end":{"line":333,"column":33,"offset":7771},"indent":[]}}],"position":{"start":{"line":333,"column":3,"offset":7741},"end":{"line":333,"column":33,"offset":7771},"indent":[]}}],"position":{"start":{"line":287,"column":1,"offset":6967},"end":{"line":334,"column":1,"offset":7772},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Super-small ","position":{"start":{"line":335,"column":3,"offset":7775},"end":{"line":335,"column":15,"offset":7787},"indent":[]}},{"type":"text","value":"_","position":{"start":{"line":335,"column":15,"offset":7787},"end":{"line":335,"column":17,"offset":7789},"indent":[]}},{"type":"text","value":"g:","position":{"start":{"line":335,"column":17,"offset":7789},"end":{"line":335,"column":19,"offset":7791},"indent":[]}}],"position":{"start":{"line":335,"column":3,"offset":7775},"end":{"line":335,"column":19,"offset":7791},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">_g:\n\tmovl 4(%esp), %eax\n\taddl $3, %eax\n\tret</code></pre></div>","position":{"start":{"line":337,"column":3,"offset":7795},"end":{"line":342,"column":6,"offset":7864},"indent":[3,3,3,3,3]}}],"position":{"start":{"line":335,"column":1,"offset":7773},"end":{"line":342,"column":6,"offset":7864},"indent":[1,1,1,1,1,1,1]}}],"position":{"start":{"line":279,"column":1,"offset":6842},"end":{"line":342,"column":6,"offset":7864},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"编译","position":{"start":{"line":344,"column":1,"offset":7866},"end":{"line":344,"column":3,"offset":7868},"indent":[]}}],"position":{"start":{"line":344,"column":1,"offset":7866},"end":{"line":344,"column":3,"offset":7868},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"编译语言的方式可以见我之前的帖子How is python run.","position":{"start":{"line":346,"column":1,"offset":7870},"end":{"line":346,"column":35,"offset":7904},"indent":[]}}],"position":{"start":{"line":346,"column":1,"offset":7870},"end":{"line":346,"column":35,"offset":7904},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"PC emulation","position":{"start":{"line":348,"column":5,"offset":7910},"end":{"line":348,"column":17,"offset":7922},"indent":[]}}],"position":{"start":{"line":348,"column":1,"offset":7906},"end":{"line":348,"column":17,"offset":7922},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"The Bochs emulator(和qemu是不同的软件，不过差不多) works by","position":{"start":{"line":350,"column":1,"offset":7924},"end":{"line":350,"column":47,"offset":7970},"indent":[]}}],"position":{"start":{"line":350,"column":1,"offset":7924},"end":{"line":350,"column":47,"offset":7970},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"和PC做完全一样的事","position":{"start":{"line":352,"column":3,"offset":7974},"end":{"line":352,"column":13,"offset":7984},"indent":[]}}],"position":{"start":{"line":352,"column":3,"offset":7974},"end":{"line":352,"column":13,"offset":7984},"indent":[]}}],"position":{"start":{"line":352,"column":1,"offset":7972},"end":{"line":352,"column":13,"offset":7984},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"全部只用软件实现","position":{"start":{"line":353,"column":3,"offset":7987},"end":{"line":353,"column":11,"offset":7995},"indent":[]}}],"position":{"start":{"line":353,"column":3,"offset":7987},"end":{"line":353,"column":11,"offset":7995},"indent":[]}}],"position":{"start":{"line":353,"column":1,"offset":7985},"end":{"line":353,"column":11,"offset":7995},"indent":[]}}],"position":{"start":{"line":352,"column":1,"offset":7972},"end":{"line":353,"column":11,"offset":7995},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"而实际上只是host的一个普通进程。","position":{"start":{"line":355,"column":1,"offset":7997},"end":{"line":355,"column":19,"offset":8015},"indent":[]}}],"position":{"start":{"line":355,"column":1,"offset":7997},"end":{"line":355,"column":19,"offset":8015},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"用进程的存储来模拟硬件状态，如：","position":{"start":{"line":357,"column":1,"offset":8017},"end":{"line":357,"column":17,"offset":8033},"indent":[]}}],"position":{"start":{"line":357,"column":1,"offset":8017},"end":{"line":357,"column":17,"offset":8033},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"把寄存器存为全局变量","position":{"start":{"line":359,"column":3,"offset":8037},"end":{"line":359,"column":13,"offset":8047},"indent":[]}}],"position":{"start":{"line":359,"column":3,"offset":8037},"end":{"line":359,"column":13,"offset":8047},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">int32_t regs<span class=\"token punctuation\">[</span><span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> REG_EAX 1;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> REG_EBX 2;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> REG_ECX 3;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nint32_t eip<span class=\"token punctuation\">;</span>\nint16_t segregs<span class=\"token punctuation\">[</span><span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":361,"column":3,"offset":8051},"end":{"line":370,"column":6,"offset":8192},"indent":[3,3,3,3,3,3,3,3,3]}}],"position":{"start":{"line":359,"column":1,"offset":8035},"end":{"line":371,"column":1,"offset":8193},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"用一个数组模拟物理内存。","position":{"start":{"line":372,"column":3,"offset":8196},"end":{"line":372,"column":15,"offset":8208},"indent":[]}}],"position":{"start":{"line":372,"column":3,"offset":8196},"end":{"line":372,"column":15,"offset":8208},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">char</span> mem<span class=\"token punctuation\">[</span><span class=\"token number\">256</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">]</span>         </code></pre></div>","position":{"start":{"line":374,"column":3,"offset":8212},"end":{"line":376,"column":6,"offset":8257},"indent":[3,3]}}],"position":{"start":{"line":372,"column":1,"offset":8194},"end":{"line":376,"column":6,"offset":8257},"indent":[1,1,1,1]}}],"position":{"start":{"line":359,"column":1,"offset":8035},"end":{"line":376,"column":6,"offset":8257},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"通过死循环来执行指令（可以和上面的CPU最开始对比）","position":{"start":{"line":378,"column":1,"offset":8259},"end":{"line":378,"column":27,"offset":8285},"indent":[]}}],"position":{"start":{"line":378,"column":1,"offset":8259},"end":{"line":378,"column":27,"offset":8285},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">read_instruction</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span><span class=\"token function\">decode_instruction_opcode</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> OPCODE_ADD<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">int</span> src <span class=\"token operator\">=</span> <span class=\"token function\">decode_src_reg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> dst <span class=\"token operator\">=</span> <span class=\"token function\">decode_dst_reg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tregs<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> regs<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> regs<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> OPCODE_SUB<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">int</span> src <span class=\"token operator\">=</span> <span class=\"token function\">decode_src_reg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">int</span> dst <span class=\"token operator\">=</span> <span class=\"token function\">decode_dst_reg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\tregs<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> regs<span class=\"token punctuation\">[</span>dst<span class=\"token punctuation\">]</span> <span class=\"token operator\">-</span> regs<span class=\"token punctuation\">[</span>src<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\t<span class=\"token punctuation\">}</span>\n\teip <span class=\"token operator\">+=</span> instruction_length<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":380,"column":1,"offset":8287},"end":{"line":398,"column":4,"offset":8664},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"内存的布局和实际上的物理内存一样（分成lower, BIOS, extension...）","position":{"start":{"line":400,"column":1,"offset":8666},"end":{"line":400,"column":46,"offset":8711},"indent":[]}}],"position":{"start":{"line":400,"column":1,"offset":8666},"end":{"line":400,"column":46,"offset":8711},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> KB\t\t1024</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MB\t\t1024*1024</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> LOW_MEMORY\t640*KB</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> EXT_MEMORY\t10*MB</span>\n\nuint8_t low_mem<span class=\"token punctuation\">[</span>LOW_MEMORY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nuint8_t ext_mem<span class=\"token punctuation\">[</span>EXT_MEMORY<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nuint8_t bios_rom<span class=\"token punctuation\">[</span><span class=\"token number\">64</span><span class=\"token operator\">*</span>KB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\nuint8_t <span class=\"token function\">read_byte</span><span class=\"token punctuation\">(</span>uint32_t phys_addr<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>phys_addr <span class=\"token operator\">&lt;</span> LOW_MEMORY<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> low_mem<span class=\"token punctuation\">[</span>phys_addr<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>phys_addr <span class=\"token operator\">>=</span> <span class=\"token number\">960</span><span class=\"token operator\">*</span>KB <span class=\"token operator\">&amp;&amp;</span> phys_addr <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>MB<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> rom_bios<span class=\"token punctuation\">[</span>phys_addr <span class=\"token operator\">-</span> <span class=\"token number\">960</span><span class=\"token operator\">*</span>KB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>phys_addr <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>MB <span class=\"token operator\">&amp;&amp;</span> phys_addr <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>MB<span class=\"token operator\">+</span>EXT_MEMORY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">return</span> ext_mem<span class=\"token punctuation\">[</span>phys_addr<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">*</span>MB<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">write_byte</span><span class=\"token punctuation\">(</span>uint32_t phys_addr<span class=\"token punctuation\">,</span> uint8_t val<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>phys_addr <span class=\"token operator\">&lt;</span> LOW_MEMORY<span class=\"token punctuation\">)</span>\n\t\tlow_mem<span class=\"token punctuation\">[</span>phys_addr<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>phys_addr <span class=\"token operator\">>=</span> <span class=\"token number\">960</span><span class=\"token operator\">*</span>KB <span class=\"token operator\">&amp;&amp;</span> phys_addr <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>MB<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token punctuation\">;</span> <span class=\"token comment\">/* ignore attempted write to ROM! */</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>phys_addr <span class=\"token operator\">>=</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>MB <span class=\"token operator\">&amp;&amp;</span> phys_addr <span class=\"token operator\">&lt;</span> <span class=\"token number\">1</span><span class=\"token operator\">*</span>MB<span class=\"token operator\">+</span>EXT_MEMORY<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\text_mem<span class=\"token punctuation\">[</span>phys_addr<span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token operator\">*</span>MB<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> val<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">else</span> <span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">}</span>\n\t</code></pre></div>","position":{"start":{"line":402,"column":1,"offset":8713},"end":{"line":433,"column":4,"offset":9503},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"通过检查对“特殊”内存及I/O space的访问并按照真是情况进行模拟来模拟I/O等，如,","position":{"start":{"line":435,"column":1,"offset":9505},"end":{"line":435,"column":46,"offset":9550},"indent":[]}}],"position":{"start":{"line":435,"column":1,"offset":9505},"end":{"line":435,"column":46,"offset":9550},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"把对模拟的硬盘的读写转化成对host机上的文件的读写。","position":{"start":{"line":437,"column":3,"offset":9554},"end":{"line":437,"column":30,"offset":9581},"indent":[]}}],"position":{"start":{"line":437,"column":3,"offset":9554},"end":{"line":437,"column":30,"offset":9581},"indent":[]}}],"position":{"start":{"line":437,"column":1,"offset":9552},"end":{"line":437,"column":30,"offset":9581},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对模拟VGA硬件的写入转化为drawing into an X window","position":{"start":{"line":438,"column":3,"offset":9584},"end":{"line":438,"column":41,"offset":9622},"indent":[]}}],"position":{"start":{"line":438,"column":3,"offset":9584},"end":{"line":438,"column":41,"offset":9622},"indent":[]}}],"position":{"start":{"line":438,"column":1,"offset":9582},"end":{"line":438,"column":41,"offset":9622},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"模拟的键盘读入转化为reads from X input event queue","position":{"start":{"line":439,"column":3,"offset":9625},"end":{"line":439,"column":43,"offset":9665},"indent":[]}}],"position":{"start":{"line":439,"column":3,"offset":9625},"end":{"line":439,"column":43,"offset":9665},"indent":[]}}],"position":{"start":{"line":439,"column":1,"offset":9623},"end":{"line":439,"column":43,"offset":9665},"indent":[]}}],"position":{"start":{"line":437,"column":1,"offset":9552},"end":{"line":439,"column":43,"offset":9665},"indent":[1,1]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":441,"column":1,"offset":9667}}}}