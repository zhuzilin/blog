{"expireTime":9007200818315813000,"key":"transformer-remark-markdown-html-ast-e5af2e00d1e30b59838bec1e089191d3-gatsby-remark-katexgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Part 1: Physical Page Management","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":36,"offset":36}}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":36,"offset":36}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"写一个physical page allocator。注意分配出来的","position":{"start":{"line":4,"column":1,"offset":38},"end":{"line":4,"column":35,"offset":72}}},{"type":"raw","value":"<code class=\"language-text\">pages</code>","position":{"start":{"line":4,"column":35,"offset":72},"end":{"line":4,"column":42,"offset":79}}},{"type":"text","value":"就是表示了整个物理内存，但是记录的是每个page对应的虚拟地址。用物理地址来找到对应的page，然后用这个page的虚拟地址来得到其实际存的东西。","position":{"start":{"line":4,"column":42,"offset":79},"end":{"line":4,"column":115,"offset":152}}}],"position":{"start":{"line":4,"column":1,"offset":38},"end":{"line":4,"column":115,"offset":152}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这里的内存初始化就是为了让物理内存有这样的结构：","position":{"start":{"line":6,"column":1,"offset":154},"end":{"line":6,"column":25,"offset":178}}}],"position":{"start":{"line":6,"column":1,"offset":154},"end":{"line":6,"column":25,"offset":178}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"element","tagName":"img","properties":{"src":"http://lzz5235.github.io/assets/pic/235.png","alt":"virtual address"},"children":[],"position":{"start":{"line":8,"column":1,"offset":180},"end":{"line":8,"column":64,"offset":243}}}],"position":{"start":{"line":8,"column":1,"offset":180},"end":{"line":8,"column":64,"offset":243}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Exercise 1","position":{"start":{"line":10,"column":5,"offset":249},"end":{"line":10,"column":15,"offset":259}}}],"position":{"start":{"line":10,"column":1,"offset":245},"end":{"line":10,"column":15,"offset":259}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"需要修改如下几个函数：","position":{"start":{"line":12,"column":1,"offset":261},"end":{"line":12,"column":12,"offset":272}}}],"position":{"start":{"line":12,"column":1,"offset":261},"end":{"line":12,"column":12,"offset":272}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">boot_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">mem_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>only up to the call to <span class=\"token function\">check_page_free_list</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">page_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">page_free</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":14,"column":1,"offset":274},"end":{"line":20,"column":4,"offset":392}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"首先是","position":{"start":{"line":22,"column":1,"offset":394},"end":{"line":22,"column":4,"offset":397}}},{"type":"raw","value":"<code class=\"language-text\">boot_alloc()</code>","position":{"start":{"line":22,"column":4,"offset":397},"end":{"line":22,"column":18,"offset":411}}},{"type":"text","value":"：","position":{"start":{"line":22,"column":18,"offset":411},"end":{"line":22,"column":19,"offset":412}}}],"position":{"start":{"line":22,"column":1,"offset":394},"end":{"line":22,"column":19,"offset":412}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// This simple physical memory allocator is used only while JOS is setting</span>\n<span class=\"token comment\">// up its virtual memory system.  page_alloc() is the real allocator.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If n>0, allocates enough pages of contiguous physical memory to hold 'n'</span>\n<span class=\"token comment\">// bytes.  Doesn't initialize the memory.  Returns a kernel virtual address.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If n==0, returns the address of the next free page without allocating</span>\n<span class=\"token comment\">// anything.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If we're out of memory, boot_alloc should panic.</span>\n<span class=\"token comment\">// This function may ONLY be used during initialization,</span>\n<span class=\"token comment\">// before the page_free_list list has been set up.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">boot_alloc</span><span class=\"token punctuation\">(</span>uint32_t n<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">static</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>nextfree<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// virtual address of next byte of free memory</span>\n\t<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>result<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Initialize nextfree if this is the first time.</span>\n\t<span class=\"token comment\">// 'end' is a magic symbol automatically generated by the linker,</span>\n\t<span class=\"token comment\">// which points to the end of the kernel's bss segment:</span>\n\t<span class=\"token comment\">// the first virtual address that the linker did *not* assign</span>\n\t<span class=\"token comment\">// to any kernel code or global variables.</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>nextfree<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span> end<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\tnextfree <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDUP</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> end<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// Allocate a chunk large enough to hold 'n' bytes, then update</span>\n\t<span class=\"token comment\">// nextfree.  Make sure nextfree is kept aligned</span>\n\t<span class=\"token comment\">// to a multiple of PGSIZE.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// LAB 2: Your code here.</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>n <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> nextfree<span class=\"token punctuation\">;</span>\n  result <span class=\"token operator\">=</span> nextfree<span class=\"token punctuation\">;</span>\n  nextfree <span class=\"token operator\">+=</span> <span class=\"token function\">ROUNDUP</span><span class=\"token punctuation\">(</span>n<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> result<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":24,"column":1,"offset":414},"end":{"line":64,"column":4,"offset":1752}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"从注释里面可以看出，这里是分配物理内存，分配的就是连续的内存，所以直接加就好了。注意这个函数返回的是VA，所以如果需要使用物理内存，就要用","position":{"start":{"line":66,"column":1,"offset":1754},"end":{"line":66,"column":70,"offset":1823}}},{"type":"raw","value":"<code class=\"language-text\">PADDR()</code>","position":{"start":{"line":66,"column":70,"offset":1823},"end":{"line":66,"column":79,"offset":1832}}},{"type":"text","value":"这个宏。","position":{"start":{"line":66,"column":79,"offset":1832},"end":{"line":66,"column":83,"offset":1836}}}],"position":{"start":{"line":66,"column":1,"offset":1754},"end":{"line":66,"column":83,"offset":1836}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"之后是","position":{"start":{"line":68,"column":1,"offset":1838},"end":{"line":68,"column":4,"offset":1841}}},{"type":"raw","value":"<code class=\"language-text\">mem_init()</code>","position":{"start":{"line":68,"column":4,"offset":1841},"end":{"line":68,"column":16,"offset":1853}}},{"type":"text","value":"，注意这个函数只设置好kernel部分的内存。","position":{"start":{"line":68,"column":16,"offset":1853},"end":{"line":68,"column":39,"offset":1876}}},{"type":"raw","value":"<code class=\"language-text\">mem_init</code>","position":{"start":{"line":68,"column":39,"offset":1876},"end":{"line":68,"column":49,"offset":1886}}},{"type":"text","value":"先分配了kernel的page directory。","position":{"start":{"line":68,"column":49,"offset":1886},"end":{"line":68,"column":75,"offset":1912}}}],"position":{"start":{"line":68,"column":1,"offset":1838},"end":{"line":68,"column":75,"offset":1912}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//////////////////////////////////////////////////////////////////////</span>\n<span class=\"token comment\">// Allocate an array of npages 'struct PageInfo's and store it in 'pages'.</span>\n<span class=\"token comment\">// The kernel uses this array to keep track of physical pages: for</span>\n<span class=\"token comment\">// each physical page, there is a corresponding struct PageInfo in this</span>\n<span class=\"token comment\">// array.  'npages' is the number of physical pages in memory.  Use memset</span>\n<span class=\"token comment\">// to initialize all fields of each struct PageInfo to 0.</span>\n<span class=\"token comment\">// Your code goes here:</span>\n  pages <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">boot_alloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>npages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pages<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span><span class=\"token punctuation\">)</span><span class=\"token operator\">*</span>npages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":70,"column":1,"offset":1914},"end":{"line":80,"column":4,"offset":2489}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在这之后，我们需要操作的就是","position":{"start":{"line":82,"column":1,"offset":2491},"end":{"line":82,"column":15,"offset":2505}}},{"type":"raw","value":"<code class=\"language-text\">PageInfo</code>","position":{"start":{"line":82,"column":15,"offset":2505},"end":{"line":82,"column":25,"offset":2515}}},{"type":"text","value":"这个","position":{"start":{"line":82,"column":25,"offset":2515},"end":{"line":82,"column":27,"offset":2517}}},{"type":"raw","value":"<code class=\"language-text\">struct</code>","position":{"start":{"line":82,"column":27,"offset":2517},"end":{"line":82,"column":35,"offset":2525}}},{"type":"text","value":"了","position":{"start":{"line":82,"column":35,"offset":2525},"end":{"line":82,"column":36,"offset":2526}}}],"position":{"start":{"line":82,"column":1,"offset":2491},"end":{"line":82,"column":36,"offset":2526}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\n * Page descriptor structures, mapped at UPAGES.\n * Read/write to the kernel, read-only to user programs.\n *\n * Each struct PageInfo stores metadata for one physical page.\n * Is it NOT the physical page itself, but there is a one-to-one\n * correspondence between physical pages and struct PageInfo's.\n * You can map a struct PageInfo * to the corresponding physical address\n * with page2pa() in kern/pmap.h.\n */</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Next page on the free list.</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>pp_link<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// pp_ref is the count of pointers (usually in page table entries)</span>\n\t<span class=\"token comment\">// to this page, for pages allocated using page_alloc.</span>\n\t<span class=\"token comment\">// Pages allocated at boot time using pmap.c's</span>\n\t<span class=\"token comment\">// boot_alloc do not have valid reference count fields.</span>\n\n\tuint16_t pp_ref<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":84,"column":1,"offset":2528},"end":{"line":106,"column":4,"offset":3280}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这个结构记录了一个page的meta data，其中保存了下一个free page的地址与这个page被ref的次数。而实际page的物理内存，用其和","position":{"start":{"line":108,"column":1,"offset":3282},"end":{"line":108,"column":76,"offset":3357}}},{"type":"raw","value":"<code class=\"language-text\">pages</code>","position":{"start":{"line":108,"column":76,"offset":3357},"end":{"line":108,"column":83,"offset":3364}}},{"type":"text","value":"这个变量的地址的距离来衡量，之后用到的","position":{"start":{"line":108,"column":83,"offset":3364},"end":{"line":108,"column":102,"offset":3383}}},{"type":"raw","value":"<code class=\"language-text\">page2kva</code>","position":{"start":{"line":108,"column":102,"offset":3383},"end":{"line":108,"column":112,"offset":3393}}},{"type":"text","value":"会看到。","position":{"start":{"line":108,"column":112,"offset":3393},"end":{"line":108,"column":116,"offset":3397}}}],"position":{"start":{"line":108,"column":1,"offset":3282},"end":{"line":108,"column":116,"offset":3397}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然后我们来修改","position":{"start":{"line":110,"column":1,"offset":3399},"end":{"line":110,"column":8,"offset":3406}}},{"type":"raw","value":"<code class=\"language-text\">page_init</code>","position":{"start":{"line":110,"column":8,"offset":3406},"end":{"line":110,"column":19,"offset":3417}}}],"position":{"start":{"line":110,"column":1,"offset":3399},"end":{"line":110,"column":19,"offset":3417}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Initialize page structure and memory free list.</span>\n<span class=\"token comment\">// After this is done, NEVER use boot_alloc again.  ONLY use the page</span>\n<span class=\"token comment\">// allocator functions below to allocate and deallocate physical</span>\n<span class=\"token comment\">// memory via the page_free_list.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">page_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// The example code here marks all physical pages as free.</span>\n\t<span class=\"token comment\">// However this is not truly the case.  What memory is free?</span>\n\t<span class=\"token comment\">//  1) Mark physical page 0 as in use.</span>\n\t<span class=\"token comment\">//     This way we preserve the real-mode IDT and BIOS structures</span>\n\t<span class=\"token comment\">//     in case we ever need them.  (Currently we don't, but...)</span>\n\t<span class=\"token comment\">//  2) The rest of base memory, [PGSIZE, npages_basemem * PGSIZE)</span>\n\t<span class=\"token comment\">//     is free.</span>\n\t<span class=\"token comment\">//  3) Then comes the IO hole [IOPHYSMEM, EXTPHYSMEM), which must</span>\n\t<span class=\"token comment\">//     never be allocated.</span>\n\t<span class=\"token comment\">//  4) Then extended memory [EXTPHYSMEM, ...).</span>\n\t<span class=\"token comment\">//     Some of it is in use, some is free. Where is the kernel</span>\n\t<span class=\"token comment\">//     in physical memory?  Which pages are already in use for</span>\n\t<span class=\"token comment\">//     page tables and other data structures?</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Change the code to reflect this.</span>\n\t<span class=\"token comment\">// NB: DO NOT actually touch the physical memory corresponding to</span>\n\t<span class=\"token comment\">// free pages!</span>\n\tsize_t i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> npages_basemem<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tpages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pp_ref <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tpages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pp_link <span class=\"token operator\">=</span> page_free_list<span class=\"token punctuation\">;</span>\n\t\tpage_free_list <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span><span class=\"token function\">boot_alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>PGSIZE<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> npages<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pp_ref <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\tpages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pp_link <span class=\"token operator\">=</span> page_free_list<span class=\"token punctuation\">;</span>\n\tpage_free_list <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":112,"column":1,"offset":3419},"end":{"line":151,"column":4,"offset":4794}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"因为kernel是分配在extended memory里面，加上mem_init的前面分配的page dir以及相关的内存，所以后一部分应该跳过这些地方。然后","position":{"start":{"line":153,"column":1,"offset":4796},"end":{"line":153,"column":80,"offset":4875}}},{"type":"raw","value":"<code class=\"language-text\">PADDR</code>","position":{"start":{"line":153,"column":80,"offset":4875},"end":{"line":153,"column":87,"offset":4882}}},{"type":"text","value":"就是把kernel里面的VA转化为PA。","position":{"start":{"line":153,"column":87,"offset":4882},"end":{"line":153,"column":107,"offset":4902}}}],"position":{"start":{"line":153,"column":1,"offset":4796},"end":{"line":153,"column":107,"offset":4902}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然后写","position":{"start":{"line":155,"column":1,"offset":4904},"end":{"line":155,"column":4,"offset":4907}}},{"type":"raw","value":"<code class=\"language-text\">page_alloc</code>","position":{"start":{"line":155,"column":4,"offset":4907},"end":{"line":155,"column":16,"offset":4919}}},{"type":"text","value":"，从","position":{"start":{"line":155,"column":16,"offset":4919},"end":{"line":155,"column":18,"offset":4921}}},{"type":"raw","value":"<code class=\"language-text\">page_free_list</code>","position":{"start":{"line":155,"column":18,"offset":4921},"end":{"line":155,"column":34,"offset":4937}}},{"type":"text","value":"里面提取出来下一个非空的page","position":{"start":{"line":155,"column":34,"offset":4937},"end":{"line":155,"column":50,"offset":4953}}}],"position":{"start":{"line":155,"column":1,"offset":4904},"end":{"line":155,"column":50,"offset":4953}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Allocates a physical page.  If (alloc_flags &amp; ALLOC_ZERO), fills the entire</span>\n<span class=\"token comment\">// returned physical page with '\\0' bytes.  Does NOT increment the reference</span>\n<span class=\"token comment\">// count of the page - the caller must do these if necessary (either explicitly</span>\n<span class=\"token comment\">// or via page_insert).</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Be sure to set the pp_link field of the allocated page to NULL so</span>\n<span class=\"token comment\">// page_free can check for double-free bugs.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns NULL if out of free memory.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Hint: use page2kva and memset</span>\n<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> alloc_flags<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Fill this function in</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>ret <span class=\"token operator\">=</span> page_free_list<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>page_free_list<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  page_free_list <span class=\"token operator\">=</span> ret<span class=\"token operator\">-></span>pp_link<span class=\"token punctuation\">;</span>\n  ret<span class=\"token operator\">-></span>pp_link <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>alloc_flags <span class=\"token operator\">&amp;</span> ALLOC_ZERO<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span><span class=\"token function\">page2kva</span><span class=\"token punctuation\">(</span>ret<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> ret<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":157,"column":1,"offset":4955},"end":{"line":182,"column":4,"offset":5712}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"注意这里面的","position":{"start":{"line":184,"column":1,"offset":5714},"end":{"line":184,"column":7,"offset":5720}}},{"type":"raw","value":"<code class=\"language-text\">page2kva</code>","position":{"start":{"line":184,"column":7,"offset":5720},"end":{"line":184,"column":17,"offset":5730}}},{"type":"text","value":"函数是把一个page的PageInfo地址转化为其对应的kernel VA，具体的做法就是看pp是pages后面的第几个","position":{"start":{"line":184,"column":17,"offset":5730},"end":{"line":184,"column":77,"offset":5790}}},{"type":"raw","value":"<code class=\"language-text\">PageInfo</code>","position":{"start":{"line":184,"column":77,"offset":5790},"end":{"line":184,"column":87,"offset":5800}}},{"type":"text","value":"，然后这个序号就是这个page的物理内存的前20位，因为是对齐的，所以后12位都是0，得到这个物理地址之后，加","position":{"start":{"line":184,"column":87,"offset":5800},"end":{"line":184,"column":142,"offset":5855}}},{"type":"raw","value":"<code class=\"language-text\">KERNBASE</code>","position":{"start":{"line":184,"column":142,"offset":5855},"end":{"line":184,"column":152,"offset":5865}}},{"type":"text","value":"就找到了这个page的物虚拟内存。注意这里把取出来的","position":{"start":{"line":184,"column":152,"offset":5865},"end":{"line":184,"column":178,"offset":5891}}},{"type":"raw","value":"<code class=\"language-text\">ret</code>","position":{"start":{"line":184,"column":178,"offset":5891},"end":{"line":184,"column":183,"offset":5896}}},{"type":"text","value":"的后面变为空了，这个举动单纯就是用来在","position":{"start":{"line":184,"column":183,"offset":5896},"end":{"line":184,"column":202,"offset":5915}}},{"type":"raw","value":"<code class=\"language-text\">page_free</code>","position":{"start":{"line":184,"column":202,"offset":5915},"end":{"line":184,"column":213,"offset":5926}}},{"type":"text","value":"里面进行检查的。","position":{"start":{"line":184,"column":213,"offset":5926},"end":{"line":184,"column":221,"offset":5934}}}],"position":{"start":{"line":184,"column":1,"offset":5714},"end":{"line":184,"column":221,"offset":5934}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然后最后一个","position":{"start":{"line":186,"column":1,"offset":5936},"end":{"line":186,"column":7,"offset":5942}}},{"type":"raw","value":"<code class=\"language-text\">page_free</code>","position":{"start":{"line":186,"column":7,"offset":5942},"end":{"line":186,"column":18,"offset":5953}}},{"type":"text","value":"。","position":{"start":{"line":186,"column":18,"offset":5953},"end":{"line":186,"column":19,"offset":5954}}}],"position":{"start":{"line":186,"column":1,"offset":5936},"end":{"line":186,"column":19,"offset":5954}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Return a page to the free list.</span>\n<span class=\"token comment\">// (This function should only be called when pp->pp_ref reaches 0.)</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">page_free</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>pp<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Fill this function in</span>\n\t<span class=\"token comment\">// Hint: You may want to panic if pp->pp_ref is nonzero or</span>\n\t<span class=\"token comment\">// pp->pp_link is not NULL.</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pp<span class=\"token operator\">-></span>pp_ref <span class=\"token operator\">||</span> pp<span class=\"token operator\">-></span>pp_link<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"pp free error.\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  pp<span class=\"token operator\">-></span>pp_link <span class=\"token operator\">=</span> page_free_list<span class=\"token punctuation\">;</span>\n  page_free_list <span class=\"token operator\">=</span> pp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":188,"column":1,"offset":5956},"end":{"line":203,"column":4,"offset":6341}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"写完这部分之后，启动时会是这样：","position":{"start":{"line":205,"column":1,"offset":6343},"end":{"line":205,"column":17,"offset":6359}}}],"position":{"start":{"line":205,"column":1,"offset":6343},"end":{"line":205,"column":17,"offset":6359}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">check_page_free_list() succeeded!\ncheck_page_alloc() succeeded!</code></pre></div>","position":{"start":{"line":207,"column":1,"offset":6361},"end":{"line":210,"column":4,"offset":6432}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Part 2: Virtual Memory","position":{"start":{"line":212,"column":4,"offset":6437},"end":{"line":212,"column":26,"offset":6459}}}],"position":{"start":{"line":212,"column":1,"offset":6434},"end":{"line":212,"column":26,"offset":6459}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Exercise 2","position":{"start":{"line":214,"column":5,"offset":6465},"end":{"line":214,"column":15,"offset":6475}}}],"position":{"start":{"line":214,"column":1,"offset":6461},"end":{"line":214,"column":15,"offset":6475}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"读书的部分，先跳过去。","position":{"start":{"line":216,"column":1,"offset":6477},"end":{"line":216,"column":12,"offset":6488}}}],"position":{"start":{"line":216,"column":1,"offset":6477},"end":{"line":216,"column":12,"offset":6488}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Virtual, Linear, and Physical Addresses","position":{"start":{"line":218,"column":5,"offset":6494},"end":{"line":218,"column":44,"offset":6533}}}],"position":{"start":{"line":218,"column":1,"offset":6490},"end":{"line":218,"column":44,"offset":6533}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">           Selector  +--------------+         +-----------+\n          ----------&gt;|              |         |           |\n                     | Segmentation |         |  Paging   |\nSoftware             |              |--------&gt;|           |----------&gt;  RAM\n            Offset   |  Mechanism   |         | Mechanism |\n          ----------&gt;|              |         |           |\n                     +--------------+         +-----------+\n            Virtual                   Linear                Physical</code></pre></div>","position":{"start":{"line":220,"column":1,"offset":6535},"end":{"line":230,"column":4,"offset":7048}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"在x86里面，虚拟内存由segment selector和offset within the segment组成。linear address是先用segment translation解释过的结果，之后再通过page translation得到物理内存。","position":{"start":{"line":232,"column":1,"offset":7050},"end":{"line":232,"column":129,"offset":7178}}}],"position":{"start":{"line":232,"column":1,"offset":7050},"end":{"line":232,"column":129,"offset":7178}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一个C语言中的指针实际上是offset，在","position":{"start":{"line":234,"column":1,"offset":7180},"end":{"line":234,"column":22,"offset":7201}}},{"type":"raw","value":"<code class=\"language-text\">boot/boot.S</code>","position":{"start":{"line":234,"column":22,"offset":7201},"end":{"line":234,"column":35,"offset":7214}}},{"type":"text","value":"里面，我们用Global Descriptor Table(GDT)来有效的把segment selector给废了","position":{"start":{"line":234,"column":35,"offset":7214},"end":{"line":234,"column":93,"offset":7272}}}],"position":{"start":{"line":234,"column":1,"offset":7180},"end":{"line":234,"column":93,"offset":7272}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">gdt:\n  SEG_NULL\t\t\t\t# null seg\n  SEG(STA_X|STA_R, 0x0, 0xffffffff)\t# code seg\n  SEG(STA_W, 0x0, 0xffffffff)\t        # data seg</code></pre></div>","position":{"start":{"line":236,"column":1,"offset":7274},"end":{"line":241,"column":4,"offset":7415}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"所以linear address在JOS中就是等于offset。在lab 3中我们可能会设置一点segmentation以设置隐私等级，但是对于内存翻译，在JOS中我们可以忽略segmentation mechanism并只考虑page translation。","position":{"start":{"line":243,"column":1,"offset":7417},"end":{"line":243,"column":132,"offset":7548}}}],"position":{"start":{"line":243,"column":1,"offset":7417},"end":{"line":243,"column":132,"offset":7548}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"回忆在lab 1的part3，我们使用在","position":{"start":{"line":245,"column":1,"offset":7550},"end":{"line":245,"column":21,"offset":7570}}},{"type":"raw","value":"<code class=\"language-text\">kern/entrypgdir.c</code>","position":{"start":{"line":245,"column":21,"offset":7570},"end":{"line":245,"column":40,"offset":7589}}},{"type":"text","value":"硬编码的一个page table来把物理内存中前4MB的内存进行了映射，从而让kernel能够从","position":{"start":{"line":245,"column":40,"offset":7589},"end":{"line":245,"column":88,"offset":7637}}},{"type":"raw","value":"<code class=\"language-text\">0xf0100000</code>","position":{"start":{"line":245,"column":88,"offset":7637},"end":{"line":245,"column":100,"offset":7649}}},{"type":"text","value":"开始运行，即使其实际上是在","position":{"start":{"line":245,"column":100,"offset":7649},"end":{"line":245,"column":113,"offset":7662}}},{"type":"raw","value":"<code class=\"language-text\">0x00100000</code>","position":{"start":{"line":245,"column":113,"offset":7662},"end":{"line":245,"column":125,"offset":7674}}},{"type":"text","value":"的物理内存加载的。我们现在就会映射整个的256MB的物理内存，从虚拟内存","position":{"start":{"line":245,"column":125,"offset":7674},"end":{"line":245,"column":161,"offset":7710}}},{"type":"raw","value":"<code class=\"language-text\">0xf0000000</code>","position":{"start":{"line":245,"column":161,"offset":7710},"end":{"line":245,"column":173,"offset":7722}}},{"type":"text","value":"开始，并映射到一些位置。","position":{"start":{"line":245,"column":173,"offset":7722},"end":{"line":245,"column":185,"offset":7734}}}],"position":{"start":{"line":245,"column":1,"offset":7550},"end":{"line":245,"column":185,"offset":7734}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Exercise 3","position":{"start":{"line":247,"column":5,"offset":7740},"end":{"line":247,"column":15,"offset":7750}}}],"position":{"start":{"line":247,"column":1,"offset":7736},"end":{"line":247,"column":15,"offset":7750}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"一些gdb和qemu的一些指令。","position":{"start":{"line":249,"column":1,"offset":7752},"end":{"line":249,"column":17,"offset":7768}}}],"position":{"start":{"line":249,"column":1,"offset":7752},"end":{"line":249,"column":17,"offset":7768}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"之前在","position":{"start":{"line":251,"column":1,"offset":7770},"end":{"line":251,"column":4,"offset":7773}}},{"type":"raw","value":"<code class=\"language-text\">boot.S</code>","position":{"start":{"line":251,"column":4,"offset":7773},"end":{"line":251,"column":12,"offset":7781}}},{"type":"text","value":"我们提到过protected mode，就是在这个文件里头做的第一件事。所有的内存引用都会被翻译为虚拟内存，之后用MMU翻译为物理内存。所以说所有C中的指针都是虚拟地址。","position":{"start":{"line":251,"column":12,"offset":7781},"end":{"line":251,"column":97,"offset":7866}}}],"position":{"start":{"line":251,"column":1,"offset":7770},"end":{"line":251,"column":97,"offset":7866}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"JOS的kernel经常需要直接把地址当成整数来操作，也就是不去探究地址里存了什么。为了方便文档记录，JOS用两个类型来记录地址：","position":{"start":{"line":253,"column":1,"offset":7868},"end":{"line":253,"column":66,"offset":7933}}},{"type":"raw","value":"<code class=\"language-text\">uintptr_t</code>","position":{"start":{"line":253,"column":66,"offset":7933},"end":{"line":253,"column":77,"offset":7944}}},{"type":"text","value":"用来表示虚拟地址，","position":{"start":{"line":253,"column":77,"offset":7944},"end":{"line":253,"column":86,"offset":7953}}},{"type":"raw","value":"<code class=\"language-text\">physaddr_t</code>","position":{"start":{"line":253,"column":86,"offset":7953},"end":{"line":253,"column":98,"offset":7965}}},{"type":"text","value":"表示物理内存，他们实际上就是","position":{"start":{"line":253,"column":98,"offset":7965},"end":{"line":253,"column":112,"offset":7979}}},{"type":"raw","value":"<code class=\"language-text\">uint32_t</code>","position":{"start":{"line":253,"column":112,"offset":7979},"end":{"line":253,"column":122,"offset":7989}}},{"type":"text","value":"，所以从编译器的角度并不会阻止这两个类型之中的相互赋值，而且如果直接dereference回报错，需要类型转换。对于","position":{"start":{"line":253,"column":122,"offset":7989},"end":{"line":253,"column":180,"offset":8047}}},{"type":"raw","value":"<code class=\"language-text\">uintptr_t</code>","position":{"start":{"line":253,"column":180,"offset":8047},"end":{"line":253,"column":191,"offset":8058}}},{"type":"text","value":"可以转化为指针类型进行dereference，而对于物理地址，不能直接dereference。","position":{"start":{"line":253,"column":191,"offset":8058},"end":{"line":253,"column":238,"offset":8105}}}],"position":{"start":{"line":253,"column":1,"offset":7868},"end":{"line":253,"column":238,"offset":8105}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"简而言之：","position":{"start":{"line":255,"column":1,"offset":8107},"end":{"line":255,"column":6,"offset":8112}}}],"position":{"start":{"line":255,"column":1,"offset":8107},"end":{"line":255,"column":6,"offset":8112}}},{"type":"text","value":"\n"},{"type":"element","tagName":"table","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"thead","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"th","properties":{"align":null},"children":[{"type":"text","value":"C type","position":{"start":{"line":257,"column":3,"offset":8116},"end":{"line":257,"column":9,"offset":8122}}}],"position":{"start":{"line":257,"column":3,"offset":8116},"end":{"line":257,"column":15,"offset":8128}}},{"type":"text","value":"\n"},{"type":"element","tagName":"th","properties":{"align":null},"children":[{"type":"text","value":"Address type","position":{"start":{"line":257,"column":18,"offset":8131},"end":{"line":257,"column":30,"offset":8143}}}],"position":{"start":{"line":257,"column":18,"offset":8131},"end":{"line":257,"column":30,"offset":8143}}},{"type":"text","value":"\n"}],"position":{"start":{"line":257,"column":1,"offset":8114},"end":{"line":257,"column":32,"offset":8145}}},{"type":"text","value":"\n"}],"position":{"start":{"line":257,"column":1,"offset":8114},"end":{"line":257,"column":32,"offset":8145}}},{"type":"text","value":"\n"},{"type":"element","tagName":"tbody","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"raw","value":"<code class=\"language-text\">T*</code>","position":{"start":{"line":259,"column":3,"offset":8180},"end":{"line":259,"column":7,"offset":8184}}}],"position":{"start":{"line":259,"column":3,"offset":8180},"end":{"line":259,"column":15,"offset":8192}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"Virtual","position":{"start":{"line":259,"column":18,"offset":8195},"end":{"line":259,"column":25,"offset":8202}}}],"position":{"start":{"line":259,"column":18,"offset":8195},"end":{"line":259,"column":30,"offset":8207}}},{"type":"text","value":"\n"}],"position":{"start":{"line":259,"column":1,"offset":8178},"end":{"line":259,"column":32,"offset":8209}}},{"type":"text","value":"\n"},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"raw","value":"<code class=\"language-text\">uintptr_t</code>","position":{"start":{"line":260,"column":3,"offset":8212},"end":{"line":260,"column":14,"offset":8223}}}],"position":{"start":{"line":260,"column":3,"offset":8212},"end":{"line":260,"column":15,"offset":8224}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"Virtual","position":{"start":{"line":260,"column":18,"offset":8227},"end":{"line":260,"column":25,"offset":8234}}}],"position":{"start":{"line":260,"column":18,"offset":8227},"end":{"line":260,"column":30,"offset":8239}}},{"type":"text","value":"\n"}],"position":{"start":{"line":260,"column":1,"offset":8210},"end":{"line":260,"column":32,"offset":8241}}},{"type":"text","value":"\n"},{"type":"element","tagName":"tr","properties":{},"children":[{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"raw","value":"<code class=\"language-text\">physaddr_t</code>","position":{"start":{"line":261,"column":3,"offset":8244},"end":{"line":261,"column":15,"offset":8256}}}],"position":{"start":{"line":261,"column":3,"offset":8244},"end":{"line":261,"column":15,"offset":8256}}},{"type":"text","value":"\n"},{"type":"element","tagName":"td","properties":{"align":null},"children":[{"type":"text","value":"Physical","position":{"start":{"line":261,"column":18,"offset":8259},"end":{"line":261,"column":26,"offset":8267}}}],"position":{"start":{"line":261,"column":18,"offset":8259},"end":{"line":261,"column":30,"offset":8271}}},{"type":"text","value":"\n"}],"position":{"start":{"line":261,"column":1,"offset":8242},"end":{"line":261,"column":32,"offset":8273}}},{"type":"text","value":"\n"}],"position":{"start":{"line":259,"column":1,"offset":8178},"end":{"line":261,"column":32,"offset":8273}}},{"type":"text","value":"\n"}],"position":{"start":{"line":257,"column":1,"offset":8114},"end":{"line":261,"column":32,"offset":8273}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"JOS kernel经常需要读写只知道物理地址的内存。比如说，mapping a page table可能需要分配物理内存来存储page directory，并对应的呃呃你存。但是kernel不能bypass virtual address translation，所以不能直接load and store物理内存。JOS把所有的从0开始的物理内存映射到从","position":{"start":{"line":263,"column":1,"offset":8275},"end":{"line":263,"column":179,"offset":8453}}},{"type":"raw","value":"<code class=\"language-text\">0xf0000000</code>","position":{"start":{"line":263,"column":179,"offset":8453},"end":{"line":263,"column":191,"offset":8465}}},{"type":"text","value":"开始的虚拟内存是为了帮助kernel读写其只知道物理地址的内存。也就是直接把物理内存加","position":{"start":{"line":263,"column":191,"offset":8465},"end":{"line":263,"column":234,"offset":8508}}},{"type":"raw","value":"<code class=\"language-text\">0xf0000000</code>","position":{"start":{"line":263,"column":234,"offset":8508},"end":{"line":263,"column":246,"offset":8520}}},{"type":"text","value":"从而转化为对应的虚拟内存。应该用","position":{"start":{"line":263,"column":246,"offset":8520},"end":{"line":263,"column":262,"offset":8536}}},{"type":"raw","value":"<code class=\"language-text\">KADDR(pa)</code>","position":{"start":{"line":263,"column":262,"offset":8536},"end":{"line":263,"column":273,"offset":8547}}},{"type":"text","value":"。","position":{"start":{"line":263,"column":273,"offset":8547},"end":{"line":263,"column":274,"offset":8548}}}],"position":{"start":{"line":263,"column":1,"offset":8275},"end":{"line":263,"column":274,"offset":8548}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"有的时候还需要从虚拟地址转化为物理地址，也是相似的，需要减，用","position":{"start":{"line":265,"column":1,"offset":8550},"end":{"line":265,"column":32,"offset":8581}}},{"type":"raw","value":"<code class=\"language-text\">PADDR(va)</code>","position":{"start":{"line":265,"column":32,"offset":8581},"end":{"line":265,"column":43,"offset":8592}}},{"type":"text","value":"。","position":{"start":{"line":265,"column":43,"offset":8592},"end":{"line":265,"column":44,"offset":8593}}}],"position":{"start":{"line":265,"column":1,"offset":8550},"end":{"line":265,"column":44,"offset":8593}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Reference counting","position":{"start":{"line":267,"column":5,"offset":8599},"end":{"line":267,"column":23,"offset":8617}}}],"position":{"start":{"line":267,"column":1,"offset":8595},"end":{"line":267,"column":23,"offset":8617}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"之后的lab，经常会需要把同一个物理地址同时转化为多个虚拟内存。那么就需要对引用进行计数，这也就是","position":{"start":{"line":269,"column":1,"offset":8619},"end":{"line":269,"column":50,"offset":8668}}},{"type":"raw","value":"<code class=\"language-text\">PageInfo</code>","position":{"start":{"line":269,"column":50,"offset":8668},"end":{"line":269,"column":60,"offset":8678}}},{"type":"text","value":"中的","position":{"start":{"line":269,"column":60,"offset":8678},"end":{"line":269,"column":62,"offset":8680}}},{"type":"raw","value":"<code class=\"language-text\">pp_ref</code>","position":{"start":{"line":269,"column":62,"offset":8680},"end":{"line":269,"column":70,"offset":8688}}},{"type":"text","value":"。当这个值为0的时候就可以释放掉了（就像垃圾回收）。换句话说，这个值应该是UTOP下面所有的page tables提及到总次数（UTOP上的内存一般都是kernel相关的，一般都不会释放了，所以不需要对他们计数）。我们也需要记录指向page directory pages的指针数，同时page directory指向page table pages的引用数。","position":{"start":{"line":269,"column":70,"offset":8688},"end":{"line":269,"column":250,"offset":8868}}}],"position":{"start":{"line":269,"column":1,"offset":8619},"end":{"line":269,"column":250,"offset":8868}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"注意用","position":{"start":{"line":271,"column":1,"offset":8870},"end":{"line":271,"column":4,"offset":8873}}},{"type":"raw","value":"<code class=\"language-text\">page_alloc</code>","position":{"start":{"line":271,"column":4,"offset":8873},"end":{"line":271,"column":16,"offset":8885}}},{"type":"text","value":"的时候，分配出来的引用计数都是0，调用完一些函数之后需要手动添加引用数。","position":{"start":{"line":271,"column":16,"offset":8885},"end":{"line":271,"column":52,"offset":8921}}}],"position":{"start":{"line":271,"column":1,"offset":8870},"end":{"line":271,"column":52,"offset":8921}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Page Table Management","position":{"start":{"line":273,"column":5,"offset":8927},"end":{"line":273,"column":26,"offset":8948}}}],"position":{"start":{"line":273,"column":1,"offset":8923},"end":{"line":273,"column":26,"offset":8948}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Exercise 4","position":{"start":{"line":275,"column":5,"offset":8954},"end":{"line":275,"column":15,"offset":8964}}}],"position":{"start":{"line":275,"column":1,"offset":8950},"end":{"line":275,"column":15,"offset":8964}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"修改这些函数：","position":{"start":{"line":277,"column":1,"offset":8966},"end":{"line":277,"column":8,"offset":8973}}}],"position":{"start":{"line":277,"column":1,"offset":8966},"end":{"line":277,"column":8,"offset":8973}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">pgdir_walk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">page_lookup</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">page_remove</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span>\n<span class=\"token function\">page_insert</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span></code></pre></div>","position":{"start":{"line":279,"column":1,"offset":8975},"end":{"line":285,"column":4,"offset":9056}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"首先是","position":{"start":{"line":287,"column":1,"offset":9058},"end":{"line":287,"column":4,"offset":9061}}},{"type":"raw","value":"<code class=\"language-text\">pgdir_walk</code>","position":{"start":{"line":287,"column":4,"offset":9061},"end":{"line":287,"column":16,"offset":9073}}},{"type":"text","value":"，类似于xv6里面的","position":{"start":{"line":287,"column":16,"offset":9073},"end":{"line":287,"column":26,"offset":9083}}},{"type":"raw","value":"<code class=\"language-text\">walkpgdir</code>","position":{"start":{"line":287,"column":26,"offset":9083},"end":{"line":287,"column":37,"offset":9094}}},{"type":"text","value":"。","position":{"start":{"line":287,"column":37,"offset":9094},"end":{"line":287,"column":38,"offset":9095}}}],"position":{"start":{"line":287,"column":1,"offset":9058},"end":{"line":287,"column":38,"offset":9095}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">pte_t <span class=\"token operator\">*</span>\n<span class=\"token function\">pgdir_walk</span><span class=\"token punctuation\">(</span>pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> create<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Fill this function in</span>\n  pde_t <span class=\"token operator\">*</span>pde <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pgdir<span class=\"token punctuation\">[</span><span class=\"token function\">PDX</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pde <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>create<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>pgtab <span class=\"token operator\">=</span> <span class=\"token function\">page_alloc</span><span class=\"token punctuation\">(</span>ALLOC_ZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pgtab<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n    pgtab<span class=\"token operator\">-></span>pp_ref<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>pde <span class=\"token operator\">=</span> <span class=\"token function\">page2pa</span><span class=\"token punctuation\">(</span>pgtab<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> PTE_P <span class=\"token operator\">|</span> PTE_U <span class=\"token operator\">|</span> PTE_W<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span>pte_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token function\">KADDR</span><span class=\"token punctuation\">(</span><span class=\"token function\">PTE_ADDR</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pde<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">PTX</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":289,"column":1,"offset":9097},"end":{"line":306,"column":4,"offset":9501}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这里面的主要逻辑是先用前10位找到va对应的pde，如果需要创建，那么就创建创建一个page，并且把这个page的地址前12位去掉（这就是","position":{"start":{"line":308,"column":1,"offset":9503},"end":{"line":308,"column":70,"offset":9572}}},{"type":"raw","value":"<code class=\"language-text\">page2pa</code>","position":{"start":{"line":308,"column":70,"offset":9572},"end":{"line":308,"column":79,"offset":9581}}},{"type":"text","value":"干的事），然后把空出来的那12位附上值，给pde对应的值付为这个page对应的page table的地址。最后正常的返回。","position":{"start":{"line":308,"column":79,"offset":9581},"end":{"line":308,"column":140,"offset":9642}}}],"position":{"start":{"line":308,"column":1,"offset":9503},"end":{"line":308,"column":140,"offset":9642}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然后是","position":{"start":{"line":310,"column":1,"offset":9644},"end":{"line":310,"column":4,"offset":9647}}},{"type":"raw","value":"<code class=\"language-text\">boot_map_region</code>","position":{"start":{"line":310,"column":4,"offset":9647},"end":{"line":310,"column":21,"offset":9664}}},{"type":"text","value":"，类似于xv6的","position":{"start":{"line":310,"column":21,"offset":9664},"end":{"line":310,"column":29,"offset":9672}}},{"type":"raw","value":"<code class=\"language-text\">mappages</code>","position":{"start":{"line":310,"column":29,"offset":9672},"end":{"line":310,"column":39,"offset":9682}}},{"type":"text","value":"，不过注意这里的size已经是PGSIZE的整数倍了。","position":{"start":{"line":310,"column":39,"offset":9682},"end":{"line":310,"column":66,"offset":9709}}}],"position":{"start":{"line":310,"column":1,"offset":9644},"end":{"line":310,"column":66,"offset":9709}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Map [va, va+size) of virtual address space to physical [pa, pa+size)</span>\n<span class=\"token comment\">// in the page table rooted at pgdir.  Size is a multiple of PGSIZE, and</span>\n<span class=\"token comment\">// va and pa are both page-aligned.</span>\n<span class=\"token comment\">// Use permission bits perm|PTE_P for the entries.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// This function is only intended to set up the ``static'' mappings</span>\n<span class=\"token comment\">// above UTOP. As such, it should *not* change the pp_ref field on the</span>\n<span class=\"token comment\">// mapped pages.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Hint: the TA solution uses pgdir_walk</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span>pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">,</span> uintptr_t va<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">,</span> physaddr_t pa<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Fill this function in</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>uint32_t i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>size<span class=\"token punctuation\">;</span> i<span class=\"token operator\">+=</span>PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pte_t <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> <span class=\"token function\">pgdir_walk</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> pa <span class=\"token operator\">|</span> perm <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">;</span>\n    va <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">;</span>\n    pa <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":312,"column":1,"offset":9711},"end":{"line":334,"column":4,"offset":10449}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"注意这里面","position":{"start":{"line":336,"column":1,"offset":10451},"end":{"line":336,"column":6,"offset":10456}}},{"type":"raw","value":"<code class=\"language-text\">va</code>","position":{"start":{"line":336,"column":6,"offset":10456},"end":{"line":336,"column":10,"offset":10460}}},{"type":"text","value":", ","position":{"start":{"line":336,"column":10,"offset":10460},"end":{"line":336,"column":12,"offset":10462}}},{"type":"raw","value":"<code class=\"language-text\">pa</code>","position":{"start":{"line":336,"column":12,"offset":10462},"end":{"line":336,"column":16,"offset":10466}}},{"type":"text","value":"都是相关于PGSIZE对齐了的，也就是只剩下了20位。","position":{"start":{"line":336,"column":16,"offset":10466},"end":{"line":336,"column":43,"offset":10493}}}],"position":{"start":{"line":336,"column":1,"offset":10451},"end":{"line":336,"column":43,"offset":10493}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"之后是写","position":{"start":{"line":338,"column":1,"offset":10495},"end":{"line":338,"column":5,"offset":10499}}},{"type":"raw","value":"<code class=\"language-text\">page_insert</code>","position":{"start":{"line":338,"column":5,"offset":10499},"end":{"line":338,"column":18,"offset":10512}}},{"type":"text","value":"。","position":{"start":{"line":338,"column":18,"offset":10512},"end":{"line":338,"column":19,"offset":10513}}}],"position":{"start":{"line":338,"column":1,"offset":10495},"end":{"line":338,"column":19,"offset":10513}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span>\n<span class=\"token function\">page_insert</span><span class=\"token punctuation\">(</span>pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>pp<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Fill this function in</span>\n  pte_t <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> <span class=\"token function\">pgdir_walk</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">,</span> true<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pte<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n  pp<span class=\"token operator\">-></span>pp_ref<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">page_remove</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> <span class=\"token function\">page2pa</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> perm <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":340,"column":1,"offset":10515},"end":{"line":354,"column":4,"offset":10813}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"就是用了一下前面的接口。","position":{"start":{"line":356,"column":1,"offset":10815},"end":{"line":356,"column":13,"offset":10827}}}],"position":{"start":{"line":356,"column":1,"offset":10815},"end":{"line":356,"column":13,"offset":10827}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然后是","position":{"start":{"line":358,"column":1,"offset":10829},"end":{"line":358,"column":4,"offset":10832}}},{"type":"raw","value":"<code class=\"language-text\">page_lookup</code>","position":{"start":{"line":358,"column":4,"offset":10832},"end":{"line":358,"column":17,"offset":10845}}},{"type":"text","value":"。","position":{"start":{"line":358,"column":17,"offset":10845},"end":{"line":358,"column":18,"offset":10846}}}],"position":{"start":{"line":358,"column":1,"offset":10829},"end":{"line":358,"column":18,"offset":10846}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">page_lookup</span><span class=\"token punctuation\">(</span>pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> pte_t <span class=\"token operator\">*</span><span class=\"token operator\">*</span>pte_store<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Fill this function in</span>\n  pte_t <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> <span class=\"token function\">pgdir_walk</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">,</span> false<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pte <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pte_store<span class=\"token punctuation\">)</span>\n    <span class=\"token operator\">*</span>pte_store <span class=\"token operator\">=</span> pte<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">return</span> <span class=\"token function\">pa2page</span><span class=\"token punctuation\">(</span><span class=\"token function\">PTE_ADDR</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":360,"column":1,"offset":10848},"end":{"line":372,"column":4,"offset":11124}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"和","position":{"start":{"line":374,"column":1,"offset":11126},"end":{"line":374,"column":2,"offset":11127}}},{"type":"raw","value":"<code class=\"language-text\">page_insert</code>","position":{"start":{"line":374,"column":2,"offset":11127},"end":{"line":374,"column":15,"offset":11140}}},{"type":"text","value":"很像。","position":{"start":{"line":374,"column":15,"offset":11140},"end":{"line":374,"column":18,"offset":11143}}}],"position":{"start":{"line":374,"column":1,"offset":11126},"end":{"line":374,"column":18,"offset":11143}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"raw","value":"<code class=\"language-text\">page_remove</code>","position":{"start":{"line":376,"column":1,"offset":11145},"end":{"line":376,"column":14,"offset":11158}}}],"position":{"start":{"line":376,"column":1,"offset":11145},"end":{"line":376,"column":14,"offset":11158}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">page_remove</span><span class=\"token punctuation\">(</span>pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token comment\">// Fill this function in</span>\n  pte_t <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>pp <span class=\"token operator\">=</span> <span class=\"token function\">pgdir_walk</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>pp<span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">return</span><span class=\"token punctuation\">;</span>\n  <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">page_decref</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">tlb_invalidate</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":378,"column":1,"offset":11160},"end":{"line":391,"column":4,"offset":11396}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"这里面不太好理解的是最后的这个","position":{"start":{"line":393,"column":1,"offset":11398},"end":{"line":393,"column":16,"offset":11413}}},{"type":"raw","value":"<code class=\"language-text\">tlb_invalidate</code>","position":{"start":{"line":393,"column":16,"offset":11413},"end":{"line":393,"column":32,"offset":11429}}},{"type":"text","value":"，这个函数是调用再","position":{"start":{"line":393,"column":32,"offset":11429},"end":{"line":393,"column":41,"offset":11438}}},{"type":"raw","value":"<code class=\"language-text\">x86.h</code>","position":{"start":{"line":393,"column":41,"offset":11438},"end":{"line":393,"column":48,"offset":11445}}},{"type":"text","value":"中的","position":{"start":{"line":393,"column":48,"offset":11445},"end":{"line":393,"column":50,"offset":11447}}},{"type":"raw","value":"<code class=\"language-text\">invlpg</code>","position":{"start":{"line":393,"column":50,"offset":11447},"end":{"line":393,"column":58,"offset":11455}}},{"type":"text","value":"函数，也就是汇编中的","position":{"start":{"line":393,"column":58,"offset":11455},"end":{"line":393,"column":68,"offset":11465}}},{"type":"raw","value":"<code class=\"language-text\">invlpg</code>","position":{"start":{"line":393,"column":68,"offset":11465},"end":{"line":393,"column":76,"offset":11473}}},{"type":"text","value":"指令，详细的理解可以看","position":{"start":{"line":393,"column":76,"offset":11473},"end":{"line":393,"column":87,"offset":11484}}},{"type":"element","tagName":"a","properties":{"href":"http://www.voidcn.com/article/p-fioicjwh-xq.html"},"children":[{"type":"text","value":"这里","position":{"start":{"line":393,"column":88,"offset":11485},"end":{"line":393,"column":90,"offset":11487}}}],"position":{"start":{"line":393,"column":87,"offset":11484},"end":{"line":393,"column":141,"offset":11538}}},{"type":"text","value":"，大致就是会刷新Translation Lookaside Buffer(TLB)，其缓存了线性地址到物理地址的映射关系。","position":{"start":{"line":393,"column":141,"offset":11538},"end":{"line":393,"column":202,"offset":11599}}}],"position":{"start":{"line":393,"column":1,"offset":11398},"end":{"line":393,"column":202,"offset":11599}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"然后运行一下。得到：","position":{"start":{"line":395,"column":1,"offset":11601},"end":{"line":395,"column":11,"offset":11611}}}],"position":{"start":{"line":395,"column":1,"offset":11601},"end":{"line":395,"column":11,"offset":11611}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">check_page_free_list</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\n<span class=\"token function\">check_page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\n<span class=\"token function\">check_page</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span></code></pre></div>","position":{"start":{"line":397,"column":1,"offset":11613},"end":{"line":401,"column":4,"offset":11709}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Part 3: Kernel Address Space","position":{"start":{"line":403,"column":4,"offset":11714},"end":{"line":403,"column":32,"offset":11742}}}],"position":{"start":{"line":403,"column":1,"offset":11711},"end":{"line":403,"column":32,"offset":11742}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"JOS把32位的线性地址分为两个部分。User environments(进程)，会控制lower part的layout和content，而kernel会对应upper part。这两者的分界线是","position":{"start":{"line":405,"column":1,"offset":11744},"end":{"line":405,"column":100,"offset":11843}}},{"type":"raw","value":"<code class=\"language-text\">inc/memlayout.h</code>","position":{"start":{"line":405,"column":100,"offset":11843},"end":{"line":405,"column":117,"offset":11860}}},{"type":"text","value":"中的","position":{"start":{"line":405,"column":117,"offset":11860},"end":{"line":405,"column":119,"offset":11862}}},{"type":"raw","value":"<code class=\"language-text\">ULIM</code>","position":{"start":{"line":405,"column":119,"offset":11862},"end":{"line":405,"column":125,"offset":11868}}},{"type":"text","value":"。大约给kernel保存了256MB。This explains why we needed to give the kernel such a high link address in lab 1: otherwise there would not be enough room in the kernel's virtual address space to map in a user environment below it at the same time.（这个this is why没明白）。","position":{"start":{"line":405,"column":125,"offset":11868},"end":{"line":405,"column":379,"offset":12122}}}],"position":{"start":{"line":405,"column":1,"offset":11744},"end":{"line":405,"column":379,"offset":12122}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Permissions and Fault Isolation","position":{"start":{"line":407,"column":5,"offset":12128},"end":{"line":407,"column":36,"offset":12159}}}],"position":{"start":{"line":407,"column":1,"offset":12124},"end":{"line":407,"column":36,"offset":12159}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"User environment对于","position":{"start":{"line":409,"column":1,"offset":12161},"end":{"line":409,"column":19,"offset":12179}}},{"type":"raw","value":"<code class=\"language-text\">ULIM</code>","position":{"start":{"line":409,"column":19,"offset":12179},"end":{"line":409,"column":25,"offset":12185}}},{"type":"text","value":"之下有访问权限。而对于[","position":{"start":{"line":409,"column":25,"offset":12185},"end":{"line":409,"column":37,"offset":12197}}},{"type":"raw","value":"<code class=\"language-text\">UTOP</code>","position":{"start":{"line":409,"column":37,"offset":12197},"end":{"line":409,"column":43,"offset":12203}}},{"type":"text","value":", ","position":{"start":{"line":409,"column":43,"offset":12203},"end":{"line":409,"column":45,"offset":12205}}},{"type":"raw","value":"<code class=\"language-text\">ULIM</code>","position":{"start":{"line":409,"column":45,"offset":12205},"end":{"line":409,"column":51,"offset":12211}}},{"type":"text","value":")之间的内存，是kernel 与user environment有相同的权限，可读不可写。这部分是用来把kernel中的一部分信息给user。最下面的部分就是给user的，user可以自己设置权限。","position":{"start":{"line":409,"column":51,"offset":12211},"end":{"line":409,"column":150,"offset":12310}}}],"position":{"start":{"line":409,"column":1,"offset":12161},"end":{"line":409,"column":150,"offset":12310}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Initializing the Kernel Address Space","position":{"start":{"line":411,"column":5,"offset":12316},"end":{"line":411,"column":42,"offset":12353}}}],"position":{"start":{"line":411,"column":1,"offset":12312},"end":{"line":411,"column":42,"offset":12353}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"现在需要设置的是","position":{"start":{"line":413,"column":1,"offset":12355},"end":{"line":413,"column":9,"offset":12363}}},{"type":"raw","value":"<code class=\"language-text\">UTOP</code>","position":{"start":{"line":413,"column":9,"offset":12363},"end":{"line":413,"column":15,"offset":12369}}},{"type":"text","value":"之上的内存。","position":{"start":{"line":413,"column":15,"offset":12369},"end":{"line":413,"column":21,"offset":12375}}}],"position":{"start":{"line":413,"column":1,"offset":12355},"end":{"line":413,"column":21,"offset":12375}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h3","properties":{},"children":[{"type":"text","value":"Exercise 5","position":{"start":{"line":415,"column":5,"offset":12381},"end":{"line":415,"column":15,"offset":12391}}}],"position":{"start":{"line":415,"column":1,"offset":12377},"end":{"line":415,"column":15,"offset":12391}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////</span>\n\t<span class=\"token comment\">// Now we set up virtual memory</span>\n\n\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////</span>\n\t<span class=\"token comment\">// Map 'pages' read-only by the user at linear address UPAGES</span>\n\t<span class=\"token comment\">// Permissions:</span>\n\t<span class=\"token comment\">//    - the new image at UPAGES -- kernel R, user R</span>\n\t<span class=\"token comment\">//      (ie. perm = PTE_U | PTE_P)</span>\n\t<span class=\"token comment\">//    - pages itself -- kernel RW, user NONE</span>\n\t<span class=\"token comment\">// Your code goes here:</span>\n  <span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">,</span> UPAGES<span class=\"token punctuation\">,</span> PTSIZE<span class=\"token punctuation\">,</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>pages<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////</span>\n\t<span class=\"token comment\">// Use the physical memory that 'bootstack' refers to as the kernel</span>\n\t<span class=\"token comment\">// stack.  The kernel stack grows down from virtual address KSTACKTOP.</span>\n\t<span class=\"token comment\">// We consider the entire range from [KSTACKTOP-PTSIZE, KSTACKTOP)</span>\n\t<span class=\"token comment\">// to be the kernel stack, but break this into two pieces:</span>\n\t<span class=\"token comment\">//     * [KSTACKTOP-KSTKSIZE, KSTACKTOP) -- backed by physical memory</span>\n\t<span class=\"token comment\">//     * [KSTACKTOP-PTSIZE, KSTACKTOP-KSTKSIZE) -- not backed; so if</span>\n\t<span class=\"token comment\">//       the kernel overflows its stack, it will fault rather than</span>\n\t<span class=\"token comment\">//       overwrite memory.  Known as a \"guard page\".</span>\n\t<span class=\"token comment\">//     Permissions: kernel RW, user NONE</span>\n\t<span class=\"token comment\">// Your code goes here:</span>\n  <span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">,</span> KSTACKTOP<span class=\"token operator\">-</span>KSTKSIZE<span class=\"token punctuation\">,</span> KSTKSIZE<span class=\"token punctuation\">,</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>bootstack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_W <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////</span>\n\t<span class=\"token comment\">// Map all of physical memory at KERNBASE.</span>\n\t<span class=\"token comment\">// Ie.  the VA range [KERNBASE, 2^32) should map to</span>\n\t<span class=\"token comment\">//      the PA range [0, 2^32 - KERNBASE)</span>\n\t<span class=\"token comment\">// We might not have 2^32 - KERNBASE bytes of physical memory, but</span>\n\t<span class=\"token comment\">// we just set up the mapping anyway.</span>\n\t<span class=\"token comment\">// Permissions: kernel RW, user NONE</span>\n\t<span class=\"token comment\">// Your code goes here:</span>\n  <span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">,</span> KERNBASE<span class=\"token punctuation\">,</span> <span class=\"token number\">0x10000000</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PTE_W <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":417,"column":1,"offset":12393},"end":{"line":450,"column":4,"offset":14113}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"根据注释加入映射。","position":{"start":{"line":452,"column":1,"offset":14115},"end":{"line":452,"column":10,"offset":14124}}}],"position":{"start":{"line":452,"column":1,"offset":14115},"end":{"line":452,"column":10,"offset":14124}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"之后再运行就有：","position":{"start":{"line":454,"column":1,"offset":14126},"end":{"line":454,"column":9,"offset":14134}}}],"position":{"start":{"line":454,"column":1,"offset":14126},"end":{"line":454,"column":9,"offset":14134}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">check_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_alloc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_kern_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_installed_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span></code></pre></div>","position":{"start":{"line":456,"column":1,"offset":14136},"end":{"line":463,"column":4,"offset":14339}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"下面有几个问题。","position":{"start":{"line":465,"column":1,"offset":14341},"end":{"line":465,"column":9,"offset":14349}}}],"position":{"start":{"line":465,"column":1,"offset":14341},"end":{"line":465,"column":9,"offset":14349}}},{"type":"text","value":"\n"},{"type":"element","tagName":"h2","properties":{},"children":[{"type":"text","value":"Address Space Layout Alternatives","position":{"start":{"line":467,"column":4,"offset":14354},"end":{"line":467,"column":37,"offset":14387}}}],"position":{"start":{"line":467,"column":1,"offset":14351},"end":{"line":467,"column":37,"offset":14387}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"本次用的这种映射的layout不是唯一解。比如也可以是kernel在low linear address，而user在upper。不过x86一般不这么做，原因是为了和8086有backward-compatibility。","position":{"start":{"line":469,"column":1,"offset":14389},"end":{"line":469,"column":112,"offset":14500}}}],"position":{"start":{"line":469,"column":1,"offset":14389},"end":{"line":469,"column":112,"offset":14500}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"还可以设计kernel使其不用为自己不保存任何固定的内存，而是让用户能更有效的使用4G的内存。这里有很多Challenge，之后有时间再说吧。","position":{"start":{"line":471,"column":1,"offset":14502},"end":{"line":471,"column":72,"offset":14573}}}],"position":{"start":{"line":471,"column":1,"offset":14502},"end":{"line":471,"column":72,"offset":14573}}},{"type":"text","value":"\n"},{"type":"element","tagName":"p","properties":{},"children":[{"type":"text","value":"写完了之后跑一些测试：","position":{"start":{"line":473,"column":1,"offset":14575},"end":{"line":473,"column":12,"offset":14586}}}],"position":{"start":{"line":473,"column":1,"offset":14575},"end":{"line":473,"column":12,"offset":14586}}},{"type":"text","value":"\n"},{"type":"raw","value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">running JOS: <span class=\"token punctuation\">(</span>0.5s<span class=\"token punctuation\">)</span>\n  Physical page allocator: OK\n  Page management: OK\n  Kernel page directory: OK\n  Page management 2: OK\nScore: 70/70</code></pre></div>","position":{"start":{"line":475,"column":1,"offset":14588},"end":{"line":482,"column":4,"offset":14736}}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":484,"column":1,"offset":14738}}}}