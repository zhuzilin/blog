{"expireTime":9007200818315815000,"key":"transformer-remark-markdown-ast-2f1c1f36ff4122266839c82f6300a6ae-gatsby-remark-katexgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"heading","depth":2,"children":[{"type":"text","value":"Part A: Multiprocessor Support and Cooperative Multitasking","position":{"start":{"line":2,"column":4,"offset":4},"end":{"line":2,"column":63,"offset":63},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":63,"offset":63},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"第一部分要把JOS拓展到多处理器的系统，并实现一些system call来让user-level environments创建新的环境。然后还需要实现cooperative的round-robin，也就是让当前的用户环境可以主动的退出。之后的part C会实现pre-emptive的版本。","position":{"start":{"line":4,"column":1,"offset":65},"end":{"line":4,"column":146,"offset":210},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":65},"end":{"line":4,"column":146,"offset":210},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Multiprocessor Support","position":{"start":{"line":6,"column":5,"offset":216},"end":{"line":6,"column":27,"offset":238},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":212},"end":{"line":6,"column":27,"offset":238},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们首先来实现symmetric multiprocessing (SMP)。这是一个多处理器的模型，所有的CPU都有同样的系统资源权限，如内存和I/O。因为在SMP中所有的处理器都一样，在boot的过程中，CPU被分为两类：","position":{"start":{"line":8,"column":1,"offset":240},"end":{"line":8,"column":114,"offset":353},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":240},"end":{"line":8,"column":114,"offset":353},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"the bootstrap processor (BSP): 用于初始化系统并boot操作系统。","position":{"start":{"line":10,"column":3,"offset":357},"end":{"line":10,"column":51,"offset":405},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":357},"end":{"line":10,"column":51,"offset":405},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":355},"end":{"line":10,"column":51,"offset":405},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"the application processors (APs): 在操作系统正常运行之后由BSP激活。","position":{"start":{"line":11,"column":3,"offset":408},"end":{"line":11,"column":55,"offset":460},"indent":[]}}],"position":{"start":{"line":11,"column":3,"offset":408},"end":{"line":11,"column":55,"offset":460},"indent":[]}}],"position":{"start":{"line":11,"column":1,"offset":406},"end":{"line":11,"column":55,"offset":460},"indent":[]}}],"position":{"start":{"line":10,"column":1,"offset":355},"end":{"line":11,"column":55,"offset":460},"indent":[1]}},{"type":"paragraph","children":[{"type":"text","value":"哪个CPU是BSP是由硬件和BIOS决定的。截止到现在，JOS都运行在BSP上。","position":{"start":{"line":13,"column":1,"offset":462},"end":{"line":13,"column":41,"offset":502},"indent":[]}}],"position":{"start":{"line":13,"column":1,"offset":462},"end":{"line":13,"column":41,"offset":502},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在一个SMP系统里，每个CPU都有an accompanying local APIC (LAPIC) unit. 之前提到过，LAPIC是用于在系统中deliver interrupt。LAPIC同时还是其对应的CPU的unique identifier。这次的lab里面我们会用LAPIC unit的一些基本的功能（在","position":{"start":{"line":15,"column":1,"offset":504},"end":{"line":15,"column":162,"offset":665},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/lapic.c</code>","position":{"start":{"line":15,"column":162,"offset":665},"end":{"line":15,"column":176,"offset":679},"indent":[]}},{"type":"text","value":"）。","position":{"start":{"line":15,"column":176,"offset":679},"end":{"line":15,"column":178,"offset":681},"indent":[]}}],"position":{"start":{"line":15,"column":1,"offset":504},"end":{"line":15,"column":178,"offset":681},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">cpunum()</code>","position":{"start":{"line":17,"column":3,"offset":685},"end":{"line":17,"column":13,"offset":695},"indent":[]}},{"type":"text","value":"函数里用LAPIC的identifier来获得当前的代码运行在哪个CPU上：","position":{"start":{"line":17,"column":13,"offset":695},"end":{"line":17,"column":51,"offset":733},"indent":[]}}],"position":{"start":{"line":17,"column":3,"offset":685},"end":{"line":17,"column":51,"offset":733},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ID      (0x0020/4)   </span><span class=\"token comment\">// ID</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>lapic<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> lapic<span class=\"token punctuation\">[</span>ID<span class=\"token punctuation\">]</span> <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":19,"column":3,"offset":737},"end":{"line":29,"column":6,"offset":874},"indent":[3,3,3,3,3,3,3,3,3,3]}}],"position":{"start":{"line":17,"column":1,"offset":683},"end":{"line":30,"column":1,"offset":875},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">lapic_startap()</code>","position":{"start":{"line":31,"column":3,"offset":878},"end":{"line":31,"column":20,"offset":895},"indent":[]}},{"type":"text","value":"函数来让BSP给APs发送STARTUP interprocessor interrupt (IPI)来启动其他的CPU","position":{"start":{"line":31,"column":20,"offset":895},"end":{"line":31,"column":80,"offset":955},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":878},"end":{"line":31,"column":80,"offset":955},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> IO_RTC  0x70</span>\n\n<span class=\"token comment\">// Start additional processor running entry code at addr.</span>\n<span class=\"token comment\">// See Appendix B of MultiProcessor Specification.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">lapic_startap</span><span class=\"token punctuation\">(</span>uint8_t apicid<span class=\"token punctuation\">,</span> uint32_t addr<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\tuint16_t <span class=\"token operator\">*</span>wrv<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// \"The BSP must initialize CMOS shutdown code to 0AH</span>\n\t<span class=\"token comment\">// and the warm reset vector (DWORD based at 40:67) to point at</span>\n\t<span class=\"token comment\">// the AP startup code prior to the [universal startup algorithm].\"</span>\n\t<span class=\"token function\">outb</span><span class=\"token punctuation\">(</span>IO_RTC<span class=\"token punctuation\">,</span> <span class=\"token number\">0xF</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// offset 0xF is shutdown code</span>\n\t<span class=\"token function\">outb</span><span class=\"token punctuation\">(</span>IO_RTC<span class=\"token operator\">+</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x0A</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\twrv <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uint16_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">KADDR</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x40</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">4</span> <span class=\"token operator\">|</span> <span class=\"token number\">0x67</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// Warm reset vector</span>\n\twrv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\twrv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> addr <span class=\"token operator\">>></span> <span class=\"token number\">4</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// \"Universal startup algorithm.\"</span>\n\t<span class=\"token comment\">// Send INIT (level-triggered) interrupt to reset other CPU.</span>\n\t<span class=\"token function\">lapicw</span><span class=\"token punctuation\">(</span>ICRHI<span class=\"token punctuation\">,</span> apicid <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lapicw</span><span class=\"token punctuation\">(</span>ICRLO<span class=\"token punctuation\">,</span> INIT <span class=\"token operator\">|</span> LEVEL <span class=\"token operator\">|</span> ASSERT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">microdelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lapicw</span><span class=\"token punctuation\">(</span>ICRLO<span class=\"token punctuation\">,</span> INIT <span class=\"token operator\">|</span> LEVEL<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">microdelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">100</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// should be 10ms, but too slow in Bochs!</span>\n\n\t<span class=\"token comment\">// Send startup IPI (twice!) to enter code.</span>\n\t<span class=\"token comment\">// Regular hardware is supposed to only accept a STARTUP</span>\n\t<span class=\"token comment\">// when it is in the halted state due to an INIT.  So the second</span>\n\t<span class=\"token comment\">// should be ignored, but it is part of the official Intel algorithm.</span>\n\t<span class=\"token comment\">// Bochs complains about the second one.  Too bad for Bochs.</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> <span class=\"token number\">2</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">lapicw</span><span class=\"token punctuation\">(</span>ICRHI<span class=\"token punctuation\">,</span> apicid <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">lapicw</span><span class=\"token punctuation\">(</span>ICRLO<span class=\"token punctuation\">,</span> STARTUP <span class=\"token operator\">|</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">>></span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">microdelay</span><span class=\"token punctuation\">(</span><span class=\"token number\">200</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":33,"column":3,"offset":959},"end":{"line":72,"column":6,"offset":2323},"indent":[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]}}],"position":{"start":{"line":31,"column":1,"offset":876},"end":{"line":73,"column":1,"offset":2324},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"在PART C中，我们会给LAPIC的内置timer来trigger clock interrupt以实现preemptive multitasking，在","position":{"start":{"line":74,"column":3,"offset":2327},"end":{"line":74,"column":81,"offset":2405},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">apic_init()</code>","position":{"start":{"line":74,"column":81,"offset":2405},"end":{"line":74,"column":94,"offset":2418},"indent":[]}},{"type":"text","value":"中。","position":{"start":{"line":74,"column":94,"offset":2418},"end":{"line":74,"column":96,"offset":2420},"indent":[]}}],"position":{"start":{"line":74,"column":3,"offset":2327},"end":{"line":74,"column":96,"offset":2420},"indent":[]}}],"position":{"start":{"line":74,"column":1,"offset":2325},"end":{"line":74,"column":96,"offset":2420},"indent":[]}}],"position":{"start":{"line":17,"column":1,"offset":683},"end":{"line":74,"column":96,"offset":2420},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"一个处理器通过memory-mapping I/O (MMIO，之前note2中提到过)来访问其LAPIC。在MMIO中，一部跟物理内存是hardwired到一些I/O设备的寄存器上，所以用来访问内存的指令也可以用来访问device registers。我们之前提到过在物理地址","position":{"start":{"line":76,"column":1,"offset":2422},"end":{"line":76,"column":140,"offset":2561},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0xa0000</code>","position":{"start":{"line":76,"column":140,"offset":2561},"end":{"line":76,"column":149,"offset":2570},"indent":[]}},{"type":"text","value":"上有一个IO hole(见之前note2的物理地址layout)，这个是用来写入VGA显示buffer的。LAPIC类似，其PA在","position":{"start":{"line":76,"column":149,"offset":2570},"end":{"line":76,"column":214,"offset":2635},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0xfe000000</code>","position":{"start":{"line":76,"column":214,"offset":2635},"end":{"line":76,"column":226,"offset":2647},"indent":[]}},{"type":"text","value":"开始的32MB。因为我们的虚拟内存只映射到","position":{"start":{"line":76,"column":226,"offset":2647},"end":{"line":76,"column":247,"offset":2668},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">KERNBASE</code>","position":{"start":{"line":76,"column":247,"offset":2668},"end":{"line":76,"column":257,"offset":2678},"indent":[]}},{"type":"text","value":"，也就是","position":{"start":{"line":76,"column":257,"offset":2678},"end":{"line":76,"column":261,"offset":2682},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0xf0000000</code>","position":{"start":{"line":76,"column":261,"offset":2682},"end":{"line":76,"column":273,"offset":2694},"indent":[]}},{"type":"text","value":"，所以我们我们不能直接访问。在JOS的虚拟内存中，有从","position":{"start":{"line":76,"column":273,"offset":2694},"end":{"line":76,"column":300,"offset":2721},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">MMIOBASE</code>","position":{"start":{"line":76,"column":300,"offset":2721},"end":{"line":76,"column":310,"offset":2731},"indent":[]}},{"type":"text","value":"开始的4MB的gap，以映射LAPIC这样的设备。因为之后的之后需要使用更多的MMIO，我们需要写一个函数来从这个区域中分配内存以映射device memory。","position":{"start":{"line":76,"column":310,"offset":2731},"end":{"line":76,"column":391,"offset":2812},"indent":[]}}],"position":{"start":{"line":76,"column":1,"offset":2422},"end":{"line":76,"column":391,"offset":2812},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 1","position":{"start":{"line":78,"column":5,"offset":2818},"end":{"line":78,"column":15,"offset":2828},"indent":[]}}],"position":{"start":{"line":78,"column":1,"offset":2814},"end":{"line":78,"column":15,"offset":2828},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"实现","position":{"start":{"line":80,"column":1,"offset":2830},"end":{"line":80,"column":3,"offset":2832},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/lapic.c</code>","position":{"start":{"line":80,"column":3,"offset":2832},"end":{"line":80,"column":17,"offset":2846},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":80,"column":17,"offset":2846},"end":{"line":80,"column":19,"offset":2848},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mmio_map_region</code>","position":{"start":{"line":80,"column":19,"offset":2848},"end":{"line":80,"column":36,"offset":2865},"indent":[]}},{"type":"text","value":"。需要做完下一个exercise才能测试。","position":{"start":{"line":80,"column":36,"offset":2865},"end":{"line":80,"column":57,"offset":2886},"indent":[]}}],"position":{"start":{"line":80,"column":1,"offset":2830},"end":{"line":80,"column":57,"offset":2886},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Reserve size bytes in the MMIO region and map [pa,pa+size) at this</span>\n<span class=\"token comment\">// location.  Return the base of the reserved region.  size does *not*</span>\n<span class=\"token comment\">// have to be multiple of PGSIZE.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>\n<span class=\"token function\">mmio_map_region</span><span class=\"token punctuation\">(</span>physaddr_t pa<span class=\"token punctuation\">,</span> size_t size<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Where to start the next region.  Initially, this is the</span>\n\t<span class=\"token comment\">// beginning of the MMIO region.  Because this is static, its</span>\n\t<span class=\"token comment\">// value will be preserved between calls to mmio_map_region</span>\n\t<span class=\"token comment\">// (just like nextfree in boot_alloc).</span>\n\t<span class=\"token keyword\">static</span> uintptr_t base <span class=\"token operator\">=</span> MMIOBASE<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Reserve size bytes of virtual memory starting at base and</span>\n\t<span class=\"token comment\">// map physical pages [pa,pa+size) to virtual addresses</span>\n\t<span class=\"token comment\">// [base,base+size).  Since this is device memory and not</span>\n\t<span class=\"token comment\">// regular DRAM, you'll have to tell the CPU that it isn't</span>\n\t<span class=\"token comment\">// safe to cache access to this memory.  Luckily, the page</span>\n\t<span class=\"token comment\">// tables provide bits for this purpose; simply create the</span>\n\t<span class=\"token comment\">// mapping with PTE_PCD|PTE_PWT (cache-disable and</span>\n\t<span class=\"token comment\">// write-through) in addition to PTE_W.  (If you're interested</span>\n\t<span class=\"token comment\">// in more details on this, see section 10.5 of IA32 volume</span>\n\t<span class=\"token comment\">// 3A.)</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Be sure to round size up to a multiple of PGSIZE and to</span>\n\t<span class=\"token comment\">// handle if this reservation would overflow MMIOLIM (it's</span>\n\t<span class=\"token comment\">// okay to simply panic if this happens).</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Hint: The staff solution uses boot_map_region.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Your code here:</span>\n\tsize <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDUP</span><span class=\"token punctuation\">(</span>size<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">+</span> size<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> MMIOLIM <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>base <span class=\"token operator\">+</span> size <span class=\"token operator\">&lt;</span> base<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"overflow MMIOLIM\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">,</span> base<span class=\"token punctuation\">,</span> size<span class=\"token punctuation\">,</span> pa<span class=\"token punctuation\">,</span> PTE_W <span class=\"token operator\">|</span> PTE_PCD <span class=\"token operator\">|</span> PTE_PWT<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tbase <span class=\"token operator\">+=</span> size<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>base <span class=\"token operator\">-</span> size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":82,"column":1,"offset":2888},"end":{"line":122,"column":4,"offset":4415},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"按照注释要求写就行了，唯一需要注意的就是","position":{"start":{"line":124,"column":1,"offset":4417},"end":{"line":124,"column":21,"offset":4437},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">base + size</code>","position":{"start":{"line":124,"column":21,"offset":4437},"end":{"line":124,"column":34,"offset":4450},"indent":[]}},{"type":"text","value":"可能会overflow，所以需要检查","position":{"start":{"line":124,"column":34,"offset":4450},"end":{"line":124,"column":52,"offset":4468},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">base + size &gt;= base</code>","position":{"start":{"line":124,"column":52,"offset":4468},"end":{"line":124,"column":73,"offset":4489},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":124,"column":73,"offset":4489},"end":{"line":124,"column":74,"offset":4490},"indent":[]}}],"position":{"start":{"line":124,"column":1,"offset":4417},"end":{"line":124,"column":74,"offset":4490},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Application Processor Bootstrap","position":{"start":{"line":126,"column":5,"offset":4496},"end":{"line":126,"column":36,"offset":4527},"indent":[]}}],"position":{"start":{"line":126,"column":1,"offset":4492},"end":{"line":126,"column":36,"offset":4527},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在启动APs之前，BSP应该首先收集多处理器系统的相关信息，比如CPU总数，他们的APIC ID以及他们的LAPIC在MMIO里的地址。","position":{"start":{"line":128,"column":1,"offset":4529},"end":{"line":128,"column":69,"offset":4597},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/mpconfig.c</code>","position":{"start":{"line":128,"column":69,"offset":4597},"end":{"line":128,"column":86,"offset":4614},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":128,"column":86,"offset":4614},"end":{"line":128,"column":88,"offset":4616},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mp_init()</code>","position":{"start":{"line":128,"column":88,"offset":4616},"end":{"line":128,"column":99,"offset":4627},"indent":[]}},{"type":"text","value":"就通过读MP configuration table中的信息来得到这些信息，这个表在BIOS' s region of memory。","position":{"start":{"line":128,"column":99,"offset":4627},"end":{"line":128,"column":166,"offset":4694},"indent":[]}}],"position":{"start":{"line":128,"column":1,"offset":4529},"end":{"line":128,"column":166,"offset":4694},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">kern/init.c</code>","position":{"start":{"line":130,"column":1,"offset":4696},"end":{"line":130,"column":14,"offset":4709},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":130,"column":14,"offset":4709},"end":{"line":130,"column":16,"offset":4711},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot_aps()</code>","position":{"start":{"line":130,"column":16,"offset":4711},"end":{"line":130,"column":28,"offset":4723},"indent":[]}},{"type":"text","value":"进行AP bootstrap process。","position":{"start":{"line":130,"column":28,"offset":4723},"end":{"line":130,"column":51,"offset":4746},"indent":[]}}],"position":{"start":{"line":130,"column":1,"offset":4696},"end":{"line":130,"column":51,"offset":4746},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Start the non-boot (AP) processors.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">boot_aps</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">extern</span> <span class=\"token keyword\">unsigned</span> <span class=\"token keyword\">char</span> mpentry_start<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> mpentry_end<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>code<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">CpuInfo</span> <span class=\"token operator\">*</span>c<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Write entry code to unused memory at MPENTRY_PADDR</span>\n\tcode <span class=\"token operator\">=</span> <span class=\"token function\">KADDR</span><span class=\"token punctuation\">(</span>MPENTRY_PADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">,</span> mpentry_start<span class=\"token punctuation\">,</span> mpentry_end <span class=\"token operator\">-</span> mpentry_start<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Boot each AP one at a time</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">=</span> cpus<span class=\"token punctuation\">;</span> c <span class=\"token operator\">&lt;</span> cpus <span class=\"token operator\">+</span> ncpu<span class=\"token punctuation\">;</span> c<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>c <span class=\"token operator\">==</span> cpus <span class=\"token operator\">+</span> <span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// We've started already.</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n\t\t<span class=\"token comment\">// Tell mpentry.S what stack to use </span>\n\t\tmpentry_kstack <span class=\"token operator\">=</span> percpu_kstacks<span class=\"token punctuation\">[</span>c <span class=\"token operator\">-</span> cpus<span class=\"token punctuation\">]</span> <span class=\"token operator\">+</span> KSTKSIZE<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// Start the CPU at mpentry_start</span>\n\t\t<span class=\"token function\">lapic_startap</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>cpu_id<span class=\"token punctuation\">,</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>code<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// Wait for the CPU to finish some basic setup in mp_main()</span>\n\t\t<span class=\"token keyword\">while</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>cpu_status <span class=\"token operator\">!=</span> CPU_STARTED<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":132,"column":1,"offset":4748},"end":{"line":159,"column":4,"offset":5480},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"就像是","position":{"start":{"line":161,"column":1,"offset":5482},"end":{"line":161,"column":4,"offset":5485},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot/boot.S</code>","position":{"start":{"line":161,"column":4,"offset":5485},"end":{"line":161,"column":17,"offset":5498},"indent":[]}},{"type":"text","value":"中的，所以","position":{"start":{"line":161,"column":17,"offset":5498},"end":{"line":161,"column":22,"offset":5503},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot_aps()</code>","position":{"start":{"line":161,"column":22,"offset":5503},"end":{"line":161,"column":34,"offset":5515},"indent":[]}},{"type":"text","value":"把AP entry code(在","position":{"start":{"line":161,"column":34,"offset":5515},"end":{"line":161,"column":50,"offset":5531},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/mpentry.S</code>","position":{"start":{"line":161,"column":50,"offset":5531},"end":{"line":161,"column":66,"offset":5547},"indent":[]}},{"type":"text","value":"中)移到a memory location that is addressable in the real mode。不像bootloader，我们对AP在哪里会运行AP的代码，我们把entry code复制到 ","position":{"start":{"line":161,"column":66,"offset":5547},"end":{"line":161,"column":172,"offset":5653},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0x7000</code>","position":{"start":{"line":161,"column":172,"offset":5653},"end":{"line":161,"column":180,"offset":5661},"indent":[]}},{"type":"text","value":" (","position":{"start":{"line":161,"column":180,"offset":5661},"end":{"line":161,"column":182,"offset":5663},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">MPENTRY_PADDR</code>","position":{"start":{"line":161,"column":182,"offset":5663},"end":{"line":161,"column":197,"offset":5678},"indent":[]}},{"type":"text","value":")，但实际上任何640KB以下的地址都行。","position":{"start":{"line":161,"column":197,"offset":5678},"end":{"line":161,"column":218,"offset":5699},"indent":[]}}],"position":{"start":{"line":161,"column":1,"offset":5482},"end":{"line":161,"column":218,"offset":5699},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在完成上述的这个","position":{"start":{"line":163,"column":1,"offset":5701},"end":{"line":163,"column":9,"offset":5709},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">memmove</code>","position":{"start":{"line":163,"column":9,"offset":5709},"end":{"line":163,"column":18,"offset":5718},"indent":[]}},{"type":"text","value":"之后，","position":{"start":{"line":163,"column":18,"offset":5718},"end":{"line":163,"column":21,"offset":5721},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot_aps()</code>","position":{"start":{"line":163,"column":21,"offset":5721},"end":{"line":163,"column":33,"offset":5733},"indent":[]}},{"type":"text","value":"一个一个通过发STARTUP IPIs到LAPIC unit来激活AP（也就是运行","position":{"start":{"line":163,"column":33,"offset":5733},"end":{"line":163,"column":74,"offset":5774},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lapic_startap</code>","position":{"start":{"line":163,"column":74,"offset":5774},"end":{"line":163,"column":89,"offset":5789},"indent":[]}},{"type":"text","value":"）。启动之后，会返回一个初始的","position":{"start":{"line":163,"column":89,"offset":5789},"end":{"line":163,"column":104,"offset":5804},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">CS:IP</code>","position":{"start":{"line":163,"column":104,"offset":5804},"end":{"line":163,"column":111,"offset":5811},"indent":[]}},{"type":"text","value":"，AP就会从这个地址开始运行entry code，这个地址就是","position":{"start":{"line":163,"column":111,"offset":5811},"end":{"line":163,"column":142,"offset":5842},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">MPENTRY_PADDR</code>","position":{"start":{"line":163,"column":142,"offset":5842},"end":{"line":163,"column":157,"offset":5857},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":163,"column":157,"offset":5857},"end":{"line":163,"column":158,"offset":5858},"indent":[]}}],"position":{"start":{"line":163,"column":1,"offset":5701},"end":{"line":163,"column":158,"offset":5858},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"这个entry code就是","position":{"start":{"line":165,"column":1,"offset":5860},"end":{"line":165,"column":15,"offset":5874},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/mpentry.S</code>","position":{"start":{"line":165,"column":15,"offset":5874},"end":{"line":165,"column":31,"offset":5890},"indent":[]}},{"type":"text","value":"。它之中的代码和","position":{"start":{"line":165,"column":31,"offset":5890},"end":{"line":165,"column":39,"offset":5898},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot/boot.S</code>","position":{"start":{"line":165,"column":39,"offset":5898},"end":{"line":165,"column":52,"offset":5911},"indent":[]}},{"type":"text","value":"很像，先做一些设置之后，就会让AP转到protected mode，然后运行","position":{"start":{"line":165,"column":52,"offset":5911},"end":{"line":165,"column":90,"offset":5949},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/init.c</code>","position":{"start":{"line":165,"column":90,"offset":5949},"end":{"line":165,"column":103,"offset":5962},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":165,"column":103,"offset":5962},"end":{"line":165,"column":105,"offset":5964},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mp_main()</code>","position":{"start":{"line":165,"column":105,"offset":5964},"end":{"line":165,"column":116,"offset":5975},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":165,"column":116,"offset":5975},"end":{"line":165,"column":117,"offset":5976},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot_aps()</code>","position":{"start":{"line":165,"column":117,"offset":5976},"end":{"line":165,"column":129,"offset":5988},"indent":[]}},{"type":"text","value":"会等待","position":{"start":{"line":165,"column":129,"offset":5988},"end":{"line":165,"column":132,"offset":5991},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">c-&gt;cpu_status != CPU_STARTED</code>","position":{"start":{"line":165,"column":132,"offset":5991},"end":{"line":165,"column":162,"offset":6021},"indent":[]}},{"type":"text","value":"，这样这一个AP就被启动了，然后在","position":{"start":{"line":165,"column":162,"offset":6021},"end":{"line":165,"column":179,"offset":6038},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot_aps</code>","position":{"start":{"line":165,"column":179,"offset":6038},"end":{"line":165,"column":189,"offset":6048},"indent":[]}},{"type":"text","value":"的循环里面就可以进行下一个AP了。","position":{"start":{"line":165,"column":189,"offset":6048},"end":{"line":165,"column":206,"offset":6065},"indent":[]}}],"position":{"start":{"line":165,"column":1,"offset":5860},"end":{"line":165,"column":206,"offset":6065},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Setup code for APs</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">mp_main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// We are in high EIP now, safe to switch to kern_pgdir </span>\n\t<span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SMP: CPU %d starting\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lapic_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">env_init_percpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">trap_init_percpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">xchg</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>thiscpu<span class=\"token operator\">-></span>cpu_status<span class=\"token punctuation\">,</span> CPU_STARTED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tell boot_aps() we're up</span>\n\n\t<span class=\"token comment\">// Now that we have finished some basic setup, call sched_yield()</span>\n\t<span class=\"token comment\">// to start running processes on this CPU.  But make sure that</span>\n\t<span class=\"token comment\">// only one CPU can enter the scheduler at a time!</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Your code here:</span>\n\n\t<span class=\"token comment\">// Remove this after you finish Exercise 6</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":167,"column":1,"offset":6067},"end":{"line":190,"column":4,"offset":6641},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 2","position":{"start":{"line":192,"column":5,"offset":6647},"end":{"line":192,"column":15,"offset":6657},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":6643},"end":{"line":192,"column":15,"offset":6657},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"修改","position":{"start":{"line":194,"column":1,"offset":6659},"end":{"line":194,"column":3,"offset":6661},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">page_init()</code>","position":{"start":{"line":194,"column":3,"offset":6661},"end":{"line":194,"column":16,"offset":6674},"indent":[]}},{"type":"text","value":"以腾空","position":{"start":{"line":194,"column":16,"offset":6674},"end":{"line":194,"column":19,"offset":6677},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">MPENTRY_PADDR</code>","position":{"start":{"line":194,"column":19,"offset":6677},"end":{"line":194,"column":34,"offset":6692},"indent":[]}},{"type":"text","value":"。是的我们可以安全的把AP bootstrap code复制到对应的位置。","position":{"start":{"line":194,"column":34,"offset":6692},"end":{"line":194,"column":71,"offset":6729},"indent":[]}}],"position":{"start":{"line":194,"column":1,"offset":6659},"end":{"line":194,"column":71,"offset":6729},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Initialize page structure and memory free list.</span>\n<span class=\"token comment\">// After this is done, NEVER use boot_alloc again.  ONLY use the page</span>\n<span class=\"token comment\">// allocator functions below to allocate and deallocate physical</span>\n<span class=\"token comment\">// memory via the page_free_list.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">page_init</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4:</span>\n\t<span class=\"token comment\">// Change your code to mark the physical page at MPENTRY_PADDR</span>\n\t<span class=\"token comment\">// as in use</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>mpentry_page <span class=\"token operator\">=</span> <span class=\"token function\">pa2page</span><span class=\"token punctuation\">(</span>MPENTRY_PADDR<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// The example code here marks all physical pages as free.</span>\n\t<span class=\"token comment\">// However this is not truly the case.  What memory is free?</span>\n\t<span class=\"token comment\">//  1) Mark physical page 0 as in use.</span>\n\t<span class=\"token comment\">//     This way we preserve the real-mode IDT and BIOS structures</span>\n\t<span class=\"token comment\">//     in case we ever need them.  (Currently we don't, but...)</span>\n\t<span class=\"token comment\">//  2) The rest of base memory, [PGSIZE, npages_basemem * PGSIZE)</span>\n\t<span class=\"token comment\">//     is free.</span>\n\t<span class=\"token comment\">//  3) Then comes the IO hole [IOPHYSMEM, EXTPHYSMEM), which must</span>\n\t<span class=\"token comment\">//     never be allocated.</span>\n\t<span class=\"token comment\">//  4) Then extended memory [EXTPHYSMEM, ...).</span>\n\t<span class=\"token comment\">//     Some of it is in use, some is free. Where is the kernel</span>\n\t<span class=\"token comment\">//     in physical memory?  Which pages are already in use for</span>\n\t<span class=\"token comment\">//     page tables and other data structures?</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Change the code to reflect this.</span>\n\t<span class=\"token comment\">// NB: DO NOT actually touch the physical memory corresponding to</span>\n\t<span class=\"token comment\">// free pages!</span>\n\tsize_t i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> npages_basemem<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>pages <span class=\"token operator\">+</span> i <span class=\"token operator\">==</span> mpentry_page<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\tpages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pp_ref <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tpages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pp_link <span class=\"token operator\">=</span> page_free_list<span class=\"token punctuation\">;</span>\n\t\tpage_free_list <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span><span class=\"token function\">boot_alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">/</span>PGSIZE<span class=\"token punctuation\">;</span> i <span class=\"token operator\">&lt;</span> npages<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n    pages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pp_ref <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\tpages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>pp_link <span class=\"token operator\">=</span> page_free_list<span class=\"token punctuation\">;</span>\n\t\tpage_free_list <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pages<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":196,"column":1,"offset":6731},"end":{"line":241,"column":4,"offset":8300},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"加上这个之后，测试可以有：","position":{"start":{"line":243,"column":1,"offset":8302},"end":{"line":243,"column":14,"offset":8315},"indent":[]}}],"position":{"start":{"line":243,"column":1,"offset":8302},"end":{"line":243,"column":14,"offset":8315},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> qemu-nox\n<span class=\"token punctuation\">..</span>.\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_alloc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\nkernel panic on CPU 0 at kern/pmap.c:813: assertion failed: check_va2pa<span class=\"token punctuation\">(</span>pgdir, KERNBASE + i<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> i\nWelcome to the JOS kernel monitor<span class=\"token operator\">!</span>\nType <span class=\"token string\">'help'</span> <span class=\"token keyword\">for</span> a list of commands.\nK<span class=\"token operator\">></span></code></pre></div>","position":{"start":{"line":245,"column":1,"offset":8317},"end":{"line":255,"column":4,"offset":8608},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"比较","position":{"start":{"line":257,"column":3,"offset":8612},"end":{"line":257,"column":5,"offset":8614},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/mpentry.S</code>","position":{"start":{"line":257,"column":5,"offset":8614},"end":{"line":257,"column":21,"offset":8630},"indent":[]}},{"type":"text","value":" 和","position":{"start":{"line":257,"column":21,"offset":8630},"end":{"line":257,"column":23,"offset":8632},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot/boot.S</code>","position":{"start":{"line":257,"column":23,"offset":8632},"end":{"line":257,"column":36,"offset":8645},"indent":[]}},{"type":"text","value":". 牢记","position":{"start":{"line":257,"column":36,"offset":8645},"end":{"line":257,"column":40,"offset":8649},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/mpentry.S</code>","position":{"start":{"line":257,"column":40,"offset":8649},"end":{"line":257,"column":56,"offset":8665},"indent":[]}},{"type":"text","value":"和kernel中的其他代码一样，是被编译与链接在","position":{"start":{"line":257,"column":56,"offset":8665},"end":{"line":257,"column":80,"offset":8689},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">KERNBASE</code>","position":{"start":{"line":257,"column":80,"offset":8689},"end":{"line":257,"column":90,"offset":8699},"indent":[]}},{"type":"text","value":"之上的。","position":{"start":{"line":257,"column":90,"offset":8699},"end":{"line":257,"column":94,"offset":8703},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mpentry.S</code>","position":{"start":{"line":257,"column":94,"offset":8703},"end":{"line":257,"column":105,"offset":8714},"indent":[]}},{"type":"text","value":"中","position":{"start":{"line":257,"column":105,"offset":8714},"end":{"line":257,"column":106,"offset":8715},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">MPBOOTPHYS</code>","position":{"start":{"line":257,"column":106,"offset":8715},"end":{"line":257,"column":118,"offset":8727},"indent":[]}},{"type":"text","value":"这个宏来?为什么","position":{"start":{"line":257,"column":118,"offset":8727},"end":{"line":257,"column":126,"offset":8735},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot.S</code>","position":{"start":{"line":257,"column":126,"offset":8735},"end":{"line":257,"column":134,"offset":8743},"indent":[]}},{"type":"text","value":"不需要？换句话说，如果我们不用这个宏，会出什么问题呢？ ","position":{"start":{"line":257,"column":134,"offset":8743},"end":{"line":257,"column":162,"offset":8771},"indent":[]}}],"position":{"start":{"line":257,"column":3,"offset":8612},"end":{"line":257,"column":162,"offset":8771},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在","position":{"start":{"line":259,"column":3,"offset":8775},"end":{"line":259,"column":4,"offset":8776},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mpentry.S</code>","position":{"start":{"line":259,"column":4,"offset":8776},"end":{"line":259,"column":15,"offset":8787},"indent":[]}},{"type":"text","value":"的注释里面有写这两者的区别，那就是：","position":{"start":{"line":259,"column":15,"offset":8787},"end":{"line":259,"column":33,"offset":8805},"indent":[]}}],"position":{"start":{"line":259,"column":3,"offset":8775},"end":{"line":259,"column":33,"offset":8805},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"This code is similar to boot/boot.S except that","position":{"start":{"line":261,"column":5,"offset":8811},"end":{"line":261,"column":52,"offset":8858},"indent":[]}}],"position":{"start":{"line":261,"column":5,"offset":8811},"end":{"line":261,"column":52,"offset":8858},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"it does not need to enable A20","position":{"start":{"line":263,"column":7,"offset":8869},"end":{"line":263,"column":37,"offset":8899},"indent":[]}}],"position":{"start":{"line":263,"column":7,"offset":8869},"end":{"line":263,"column":37,"offset":8899},"indent":[]}}],"position":{"start":{"line":263,"column":5,"offset":8867},"end":{"line":264,"column":4,"offset":8903},"indent":[4]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"it uses MPBOOTPHYS to calculate absolute addresses of its","position":{"start":{"line":265,"column":7,"offset":8910},"end":{"line":265,"column":64,"offset":8967},"indent":[]}}],"position":{"start":{"line":265,"column":7,"offset":8910},"end":{"line":265,"column":64,"offset":8967},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"symbols, rather than relying on the linker to fill them","position":{"start":{"line":267,"column":7,"offset":8978},"end":{"line":267,"column":62,"offset":9033},"indent":[]}}],"position":{"start":{"line":267,"column":7,"offset":8978},"end":{"line":267,"column":62,"offset":9033},"indent":[]}}],"position":{"start":{"line":265,"column":5,"offset":8908},"end":{"line":267,"column":62,"offset":9033},"indent":[4,5]}}],"position":{"start":{"line":263,"column":5,"offset":8867},"end":{"line":267,"column":62,"offset":9033},"indent":[4,5,4,5]}}],"position":{"start":{"line":261,"column":3,"offset":8809},"end":{"line":267,"column":62,"offset":9033},"indent":[3,3,3,3,3,3]}},{"type":"paragraph","children":[{"type":"text","value":"这种转换是因为bootloader的LMA和VMA都在","position":{"start":{"line":269,"column":3,"offset":9037},"end":{"line":269,"column":30,"offset":9064},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0x7c00</code>","position":{"start":{"line":269,"column":30,"offset":9064},"end":{"line":269,"column":38,"offset":9072},"indent":[]}},{"type":"text","value":"，并没有进行什么映射，所以运行","position":{"start":{"line":269,"column":38,"offset":9072},"end":{"line":269,"column":53,"offset":9087},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot.S</code>","position":{"start":{"line":269,"column":53,"offset":9087},"end":{"line":269,"column":61,"offset":9095},"indent":[]}},{"type":"text","value":"时虚拟地址就是物理地址，不需要转换。但是kernel中的则不然，已经进行了转换了，但是在加载GDT的时候需要物理地址。具体来看，","position":{"start":{"line":269,"column":61,"offset":9095},"end":{"line":269,"column":125,"offset":9159},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">MPBOOTPHYS</code>","position":{"start":{"line":269,"column":125,"offset":9159},"end":{"line":269,"column":137,"offset":9171},"indent":[]}},{"type":"text","value":"的代码如下：","position":{"start":{"line":269,"column":137,"offset":9171},"end":{"line":269,"column":143,"offset":9177},"indent":[]}}],"position":{"start":{"line":269,"column":3,"offset":9037},"end":{"line":269,"column":143,"offset":9177},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> MPBOOTPHYS(s) ((s) - mpentry_start + MPENTRY_PADDR)</span></code></pre></div>","position":{"start":{"line":271,"column":3,"offset":9181},"end":{"line":273,"column":6,"offset":9253},"indent":[3,3]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">mpentry-start</code>","position":{"start":{"line":275,"column":3,"offset":9257},"end":{"line":275,"column":18,"offset":9272},"indent":[]}},{"type":"text","value":"就是这个函数的地址，而","position":{"start":{"line":275,"column":18,"offset":9272},"end":{"line":275,"column":29,"offset":9283},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">MPENTRY_PADDR</code>","position":{"start":{"line":275,"column":29,"offset":9283},"end":{"line":275,"column":44,"offset":9298},"indent":[]}},{"type":"text","value":"是APs的startup code的物理地址。相当于是把","position":{"start":{"line":275,"column":44,"offset":9298},"end":{"line":275,"column":72,"offset":9326},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">gdt</code>","position":{"start":{"line":275,"column":72,"offset":9326},"end":{"line":275,"column":77,"offset":9331},"indent":[]}},{"type":"text","value":"的位置相对于","position":{"start":{"line":275,"column":77,"offset":9331},"end":{"line":275,"column":83,"offset":9337},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mpentry_start</code>","position":{"start":{"line":275,"column":83,"offset":9337},"end":{"line":275,"column":98,"offset":9352},"indent":[]}},{"type":"text","value":"这个函数的地址的对应到","position":{"start":{"line":275,"column":98,"offset":9352},"end":{"line":275,"column":109,"offset":9363},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">MPENTRY_PADDR + gdt - mpentry_start</code>","position":{"start":{"line":275,"column":109,"offset":9363},"end":{"line":275,"column":146,"offset":9400},"indent":[]}},{"type":"text","value":"，就如同","position":{"start":{"line":275,"column":146,"offset":9400},"end":{"line":275,"column":150,"offset":9404},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot.S</code>","position":{"start":{"line":275,"column":150,"offset":9404},"end":{"line":275,"column":158,"offset":9412},"indent":[]}},{"type":"text","value":"中","position":{"start":{"line":275,"column":158,"offset":9412},"end":{"line":275,"column":159,"offset":9413},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">gdt</code>","position":{"start":{"line":275,"column":159,"offset":9413},"end":{"line":275,"column":164,"offset":9418},"indent":[]}},{"type":"text","value":"对应到在","position":{"start":{"line":275,"column":164,"offset":9418},"end":{"line":275,"column":168,"offset":9422},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">start + gdt - start</code>","position":{"start":{"line":275,"column":168,"offset":9422},"end":{"line":275,"column":189,"offset":9443},"indent":[]}},{"type":"text","value":"是一样的（","position":{"start":{"line":275,"column":189,"offset":9443},"end":{"line":275,"column":194,"offset":9448},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">start</code>","position":{"start":{"line":275,"column":194,"offset":9448},"end":{"line":275,"column":201,"offset":9455},"indent":[]}},{"type":"text","value":"是","position":{"start":{"line":275,"column":201,"offset":9455},"end":{"line":275,"column":202,"offset":9456},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot.S</code>","position":{"start":{"line":275,"column":202,"offset":9456},"end":{"line":275,"column":210,"offset":9464},"indent":[]}},{"type":"text","value":"的那个函数的地址）。","position":{"start":{"line":275,"column":210,"offset":9464},"end":{"line":275,"column":220,"offset":9474},"indent":[]}}],"position":{"start":{"line":275,"column":3,"offset":9257},"end":{"line":275,"column":220,"offset":9474},"indent":[]}}],"position":{"start":{"line":257,"column":1,"offset":8610},"end":{"line":275,"column":220,"offset":9474},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":257,"column":1,"offset":8610},"end":{"line":275,"column":220,"offset":9474},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Per-CPU State and Initialization","position":{"start":{"line":277,"column":5,"offset":9480},"end":{"line":277,"column":37,"offset":9512},"indent":[]}}],"position":{"start":{"line":277,"column":1,"offset":9476},"end":{"line":277,"column":37,"offset":9512},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"当写一个多处理器的OS的时候，区分per-CPU state that is private to each processor与global state that the whole system shares是非常重要的。","position":{"start":{"line":279,"column":1,"offset":9514},"end":{"line":279,"column":114,"offset":9627},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/cpu.h</code>","position":{"start":{"line":279,"column":114,"offset":9627},"end":{"line":279,"column":126,"offset":9639},"indent":[]}},{"type":"text","value":"中定义了大多数per-CPU state，包括了","position":{"start":{"line":279,"column":126,"offset":9639},"end":{"line":279,"column":150,"offset":9663},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">CpuInfo</code>","position":{"start":{"line":279,"column":150,"offset":9663},"end":{"line":279,"column":159,"offset":9672},"indent":[]}},{"type":"text","value":"，其存储了per-CPU变量。","position":{"start":{"line":279,"column":159,"offset":9672},"end":{"line":279,"column":174,"offset":9687},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cpunum()</code>","position":{"start":{"line":279,"column":174,"offset":9687},"end":{"line":279,"column":184,"offset":9697},"indent":[]}},{"type":"text","value":"总会返回CPU的ID，这个ID可以用来作为","position":{"start":{"line":279,"column":184,"offset":9697},"end":{"line":279,"column":205,"offset":9718},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cpus</code>","position":{"start":{"line":279,"column":205,"offset":9718},"end":{"line":279,"column":211,"offset":9724},"indent":[]}},{"type":"text","value":"这样的数组的index。","position":{"start":{"line":279,"column":211,"offset":9724},"end":{"line":279,"column":223,"offset":9736},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">thiscpu</code>","position":{"start":{"line":279,"column":223,"offset":9736},"end":{"line":279,"column":232,"offset":9745},"indent":[]}},{"type":"text","value":"表示当前的CPU对应的","position":{"start":{"line":279,"column":232,"offset":9745},"end":{"line":279,"column":243,"offset":9756},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">struct CpuInfo</code>","position":{"start":{"line":279,"column":243,"offset":9756},"end":{"line":279,"column":259,"offset":9772},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":279,"column":259,"offset":9772},"end":{"line":279,"column":260,"offset":9773},"indent":[]}}],"position":{"start":{"line":279,"column":1,"offset":9514},"end":{"line":279,"column":260,"offset":9773},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"一些值得注意的per-CPU state：","position":{"start":{"line":281,"column":1,"offset":9775},"end":{"line":281,"column":22,"offset":9796},"indent":[]}}],"position":{"start":{"line":281,"column":1,"offset":9775},"end":{"line":281,"column":22,"offset":9796},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"per-CPU kernel stack","position":{"start":{"line":283,"column":3,"offset":9800},"end":{"line":283,"column":23,"offset":9820},"indent":[]}}],"position":{"start":{"line":283,"column":3,"offset":9800},"end":{"line":283,"column":23,"offset":9820},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"因为多个CPU可能会同时trap进kernel，所以我们需要给每个CPU一个单独的kernel stack。","position":{"start":{"line":285,"column":3,"offset":9824},"end":{"line":285,"column":57,"offset":9878},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">percpu_kstacks[NCPU][KSTKSIZE]</code>","position":{"start":{"line":285,"column":57,"offset":9878},"end":{"line":285,"column":89,"offset":9910},"indent":[]}},{"type":"text","value":"这个数组就是干这个的。","position":{"start":{"line":285,"column":89,"offset":9910},"end":{"line":285,"column":100,"offset":9921},"indent":[]}}],"position":{"start":{"line":285,"column":3,"offset":9824},"end":{"line":285,"column":100,"offset":9921},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在lab2中，我们把","position":{"start":{"line":287,"column":3,"offset":9925},"end":{"line":287,"column":13,"offset":9935},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">bootstack</code>","position":{"start":{"line":287,"column":13,"offset":9935},"end":{"line":287,"column":24,"offset":9946},"indent":[]}},{"type":"text","value":"对应的BSP的kernel stack映射到了","position":{"start":{"line":287,"column":24,"offset":9946},"end":{"line":287,"column":47,"offset":9969},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">KSTACKTOP</code>","position":{"start":{"line":287,"column":47,"offset":9969},"end":{"line":287,"column":58,"offset":9980},"indent":[]}},{"type":"text","value":"下面：","position":{"start":{"line":287,"column":58,"offset":9980},"end":{"line":287,"column":61,"offset":9983},"indent":[]}}],"position":{"start":{"line":287,"column":3,"offset":9925},"end":{"line":287,"column":61,"offset":9983},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">//////////////////////////////////////////////////////////////////////</span>\n\t<span class=\"token comment\">// Use the physical memory that 'bootstack' refers to as the kernel</span>\n\t<span class=\"token comment\">// stack.  The kernel stack grows down from virtual address KSTACKTOP.</span>\n\t<span class=\"token comment\">// We consider the entire range from [KSTACKTOP-PTSIZE, KSTACKTOP)</span>\n\t<span class=\"token comment\">// to be the kernel stack, but break this into two pieces:</span>\n\t<span class=\"token comment\">//     * [KSTACKTOP-KSTKSIZE, KSTACKTOP) -- backed by physical memory</span>\n\t<span class=\"token comment\">//     * [KSTACKTOP-PTSIZE, KSTACKTOP-KSTKSIZE) -- not backed; so if</span>\n\t<span class=\"token comment\">//       the kernel overflows its stack, it will fault rather than</span>\n\t<span class=\"token comment\">//       overwrite memory.  Known as a \"guard page\".</span>\n\t<span class=\"token comment\">//     Permissions: kernel RW, user NONE</span>\n\t<span class=\"token comment\">// Your code goes here:</span>\n\t<span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">,</span> KSTACKTOP<span class=\"token operator\">-</span>KSTKSIZE<span class=\"token punctuation\">,</span> KSTKSIZE<span class=\"token punctuation\">,</span> <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>bootstack<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> \n                  PTE_W <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":289,"column":3,"offset":9987},"end":{"line":303,"column":6,"offset":10808},"indent":[3,3,3,3,3,3,3,3,3,3,3,3,5,3]}},{"type":"paragraph","children":[{"type":"text","value":"在lab4中，我们会把所有的kernel stack都映射到这个区域，并包含一个guard page。CPU 0的stack会从","position":{"start":{"line":305,"column":3,"offset":10812},"end":{"line":305,"column":67,"offset":10876},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">KSTACKTOP</code>","position":{"start":{"line":305,"column":67,"offset":10876},"end":{"line":305,"column":78,"offset":10887},"indent":[]}},{"type":"text","value":"开始，CPU 1会在CPU 0的stack再向下","position":{"start":{"line":305,"column":78,"offset":10887},"end":{"line":305,"column":102,"offset":10911},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">KSTGAP</code>","position":{"start":{"line":305,"column":102,"offset":10911},"end":{"line":305,"column":110,"offset":10919},"indent":[]}},{"type":"text","value":"。在更新了个","position":{"start":{"line":305,"column":110,"offset":10919},"end":{"line":305,"column":116,"offset":10925},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">inc/memorylayout.h</code>","position":{"start":{"line":305,"column":116,"offset":10925},"end":{"line":305,"column":136,"offset":10945},"indent":[]}},{"type":"text","value":"中有详细的体现：","position":{"start":{"line":305,"column":136,"offset":10945},"end":{"line":305,"column":144,"offset":10953},"indent":[]}}],"position":{"start":{"line":305,"column":3,"offset":10812},"end":{"line":305,"column":144,"offset":10953},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">/*\n* Virtual memory map:                                Permissions\n*                                                    kernel/user\n*\n*    4 Gig -------->  +------------------------------+\n*                     |                              | RW/--\n*                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n*                     :              .               :\n*                     :              .               :\n*                     :              .               :\n*                     |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~| RW/--\n*                     |                              | RW/--\n*                     |   Remapped Physical Memory   | RW/--\n*                     |                              | RW/--\n*    KERNBASE, ---->  +------------------------------+ 0xf0000000      --+\n*    KSTACKTOP        |     CPU0's Kernel Stack      | RW/--  KSTKSIZE   |\n*                     | - - - - - - - - - - - - - - -|                   |\n*                     |      Invalid Memory (*)      | --/--  KSTKGAP    |\n*                     +------------------------------+                   |\n*                     |     CPU1's Kernel Stack      | RW/--  KSTKSIZE   |\n*                     | - - - - - - - - - - - - - - -|                 PTSIZE\n*                     |      Invalid Memory (*)      | --/--  KSTKGAP    |\n*                     +------------------------------+                   |\n*                     :              .               :                   |\n*                     :              .               :                   |\n*    MMIOLIM ------>  +------------------------------+ 0xefc00000      --+\n*                     |       Memory-mapped I/O      | RW/--  PTSIZE\n* ULIM, MMIOBASE -->  +------------------------------+ 0xef800000\n*                     |  Cur. Page Table (User R-)   | R-/R-  PTSIZE\n*    UVPT      ---->  +------------------------------+ 0xef400000\n*                     |          RO PAGES            | R-/R-  PTSIZE\n*    UPAGES    ---->  +------------------------------+ 0xef000000\n*                     |           RO ENVS            | R-/R-  PTSIZE\n* UTOP,UENVS ------>  +------------------------------+ 0xeec00000\n* UXSTACKTOP -/       |     User Exception Stack     | RW/RW  PGSIZE\n*                     +------------------------------+ 0xeebff000\n*                     |       Empty Memory (*)       | --/--  PGSIZE\n*    USTACKTOP  --->  +------------------------------+ 0xeebfe000\n*                     |      Normal User Stack       | RW/RW  PGSIZE\n*                     +------------------------------+ 0xeebfd000\n*                     |                              |\n*                     |                              |\n*                     ~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~\n*                     .                              .\n*                     .                              .\n*                     .                              .\n*                     |~~~~~~~~~~~~~~~~~~~~~~~~~~~~~~|\n*                     |     Program Data &amp; Heap      |\n*    UTEXT -------->  +------------------------------+ 0x00800000\n*    PFTEMP ------->  |       Empty Memory (*)       |        PTSIZE\n*                     |                              |\n*    UTEMP -------->  +------------------------------+ 0x00400000      --+\n*                     |       Empty Memory (*)       |                   |\n*                     | - - - - - - - - - - - - - - -|                   |\n*                     |  User STAB Data (optional)   |                 PTSIZE\n*    USTABDATA ---->  +------------------------------+ 0x00200000        |\n*                     |       Empty Memory (*)       |                   |\n*    0 ------------>  +------------------------------+                 --+\n*\n* (*) Note: The kernel ensures that \"Invalid Memory\" is *never* mapped.\n*     \"Empty Memory\" is normally unmapped, but user programs may map pages\n*     there if desired.  JOS user programs map pages temporarily at UTEMP.\n*/</span></code></pre></div>","position":{"start":{"line":307,"column":3,"offset":10957},"end":{"line":371,"column":6,"offset":15103},"indent":[3,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,4,3]}}],"position":{"start":{"line":283,"column":1,"offset":9798},"end":{"line":372,"column":1,"offset":15104},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"per-CPU TSS and TSS descriptor","position":{"start":{"line":373,"column":3,"offset":15107},"end":{"line":373,"column":33,"offset":15137},"indent":[]}}],"position":{"start":{"line":373,"column":3,"offset":15107},"end":{"line":373,"column":33,"offset":15137},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"首先先说一下什么是TSS:","position":{"start":{"line":375,"column":3,"offset":15141},"end":{"line":375,"column":16,"offset":15154},"indent":[]}}],"position":{"start":{"line":375,"column":3,"offset":15141},"end":{"line":375,"column":16,"offset":15154},"indent":[]}},{"type":"blockquote","children":[{"type":"paragraph","children":[{"type":"text","value":"The ","position":{"start":{"line":377,"column":5,"offset":15160},"end":{"line":377,"column":9,"offset":15164},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"task state segment","position":{"start":{"line":377,"column":11,"offset":15166},"end":{"line":377,"column":29,"offset":15184},"indent":[]}}],"position":{"start":{"line":377,"column":9,"offset":15164},"end":{"line":377,"column":31,"offset":15186},"indent":[]}},{"type":"text","value":" (","position":{"start":{"line":377,"column":31,"offset":15186},"end":{"line":377,"column":33,"offset":15188},"indent":[]}},{"type":"strong","children":[{"type":"text","value":"TSS","position":{"start":{"line":377,"column":35,"offset":15190},"end":{"line":377,"column":38,"offset":15193},"indent":[]}}],"position":{"start":{"line":377,"column":33,"offset":15188},"end":{"line":377,"column":40,"offset":15195},"indent":[]}},{"type":"text","value":") is a special structure on ","position":{"start":{"line":377,"column":40,"offset":15195},"end":{"line":377,"column":68,"offset":15223},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/X86","children":[{"type":"text","value":"x86","position":{"start":{"line":377,"column":69,"offset":15224},"end":{"line":377,"column":72,"offset":15227},"indent":[]}}],"position":{"start":{"line":377,"column":68,"offset":15223},"end":{"line":377,"column":108,"offset":15263},"indent":[]}},{"type":"text","value":"-based computers which holds information about a ","position":{"start":{"line":377,"column":108,"offset":15263},"end":{"line":377,"column":157,"offset":15312},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Task_(computers)","children":[{"type":"text","value":"task","position":{"start":{"line":377,"column":158,"offset":15313},"end":{"line":377,"column":162,"offset":15317},"indent":[]}}],"position":{"start":{"line":377,"column":157,"offset":15312},"end":{"line":377,"column":211,"offset":15366},"indent":[]}},{"type":"text","value":". It is used by the ","position":{"start":{"line":377,"column":211,"offset":15366},"end":{"line":377,"column":231,"offset":15386},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Operating_system","children":[{"type":"text","value":"operating system","position":{"start":{"line":377,"column":232,"offset":15387},"end":{"line":377,"column":248,"offset":15403},"indent":[]}}],"position":{"start":{"line":377,"column":231,"offset":15386},"end":{"line":377,"column":297,"offset":15452},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":377,"column":297,"offset":15452},"end":{"line":377,"column":298,"offset":15453},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Kernel_(computer_science)","children":[{"type":"text","value":"kernel","position":{"start":{"line":377,"column":299,"offset":15454},"end":{"line":377,"column":305,"offset":15460},"indent":[]}}],"position":{"start":{"line":377,"column":298,"offset":15453},"end":{"line":377,"column":363,"offset":15518},"indent":[]}},{"type":"text","value":" for task management. Specifically, the following information is stored in the TSS:","position":{"start":{"line":377,"column":363,"offset":15518},"end":{"line":377,"column":446,"offset":15601},"indent":[]}}],"position":{"start":{"line":377,"column":5,"offset":15160},"end":{"line":377,"column":446,"offset":15601},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Processor_register","children":[{"type":"text","value":"Processor register","position":{"start":{"line":379,"column":8,"offset":15613},"end":{"line":379,"column":26,"offset":15631},"indent":[]}}],"position":{"start":{"line":379,"column":7,"offset":15612},"end":{"line":379,"column":77,"offset":15682},"indent":[]}},{"type":"text","value":" state","position":{"start":{"line":379,"column":77,"offset":15682},"end":{"line":379,"column":83,"offset":15688},"indent":[]}}],"position":{"start":{"line":379,"column":7,"offset":15612},"end":{"line":379,"column":83,"offset":15688},"indent":[]}}],"position":{"start":{"line":379,"column":5,"offset":15610},"end":{"line":379,"column":83,"offset":15688},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"I/O port permissions","position":{"start":{"line":380,"column":7,"offset":15695},"end":{"line":380,"column":27,"offset":15715},"indent":[]}}],"position":{"start":{"line":380,"column":7,"offset":15695},"end":{"line":380,"column":27,"offset":15715},"indent":[]}}],"position":{"start":{"line":380,"column":5,"offset":15693},"end":{"line":380,"column":27,"offset":15715},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Inner-level stack pointers","position":{"start":{"line":381,"column":7,"offset":15722},"end":{"line":381,"column":33,"offset":15748},"indent":[]}}],"position":{"start":{"line":381,"column":7,"offset":15722},"end":{"line":381,"column":33,"offset":15748},"indent":[]}}],"position":{"start":{"line":381,"column":5,"offset":15720},"end":{"line":381,"column":33,"offset":15748},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Previous TSS link","position":{"start":{"line":382,"column":7,"offset":15755},"end":{"line":382,"column":24,"offset":15772},"indent":[]}}],"position":{"start":{"line":382,"column":7,"offset":15755},"end":{"line":382,"column":24,"offset":15772},"indent":[]}}],"position":{"start":{"line":382,"column":5,"offset":15753},"end":{"line":382,"column":24,"offset":15772},"indent":[]}}],"position":{"start":{"line":379,"column":5,"offset":15610},"end":{"line":382,"column":24,"offset":15772},"indent":[5,5,5]}},{"type":"paragraph","children":[{"type":"text","value":"The TSS may reside anywhere in ","position":{"start":{"line":384,"column":5,"offset":15781},"end":{"line":384,"column":36,"offset":15812},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Memory","children":[{"type":"text","value":"memory","position":{"start":{"line":384,"column":37,"offset":15813},"end":{"line":384,"column":43,"offset":15819},"indent":[]}}],"position":{"start":{"line":384,"column":36,"offset":15812},"end":{"line":384,"column":82,"offset":15858},"indent":[]}},{"type":"text","value":". A special segment register called the task register (TR) holds a ","position":{"start":{"line":384,"column":82,"offset":15858},"end":{"line":384,"column":149,"offset":15925},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/X86_memory_segmentation","children":[{"type":"text","value":"segment selector","position":{"start":{"line":384,"column":150,"offset":15926},"end":{"line":384,"column":166,"offset":15942},"indent":[]}}],"position":{"start":{"line":384,"column":149,"offset":15925},"end":{"line":384,"column":222,"offset":15998},"indent":[]}},{"type":"text","value":" that points to a valid TSS segment descriptor which resides in the ","position":{"start":{"line":384,"column":222,"offset":15998},"end":{"line":384,"column":290,"offset":16066},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Global_Descriptor_Table","children":[{"type":"text","value":"GDT","position":{"start":{"line":384,"column":291,"offset":16067},"end":{"line":384,"column":294,"offset":16070},"indent":[]}}],"position":{"start":{"line":384,"column":290,"offset":16066},"end":{"line":384,"column":350,"offset":16126},"indent":[]}},{"type":"text","value":" (a TSS descriptor may not reside in the ","position":{"start":{"line":384,"column":350,"offset":16126},"end":{"line":384,"column":391,"offset":16167},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Local_Descriptor_Table","children":[{"type":"text","value":"LDT","position":{"start":{"line":384,"column":392,"offset":16168},"end":{"line":384,"column":395,"offset":16171},"indent":[]}}],"position":{"start":{"line":384,"column":391,"offset":16167},"end":{"line":384,"column":450,"offset":16226},"indent":[]}},{"type":"text","value":"). Therefore, to use a TSS the following must be done by the operating system kernel:","position":{"start":{"line":384,"column":450,"offset":16226},"end":{"line":384,"column":535,"offset":16311},"indent":[]}}],"position":{"start":{"line":384,"column":5,"offset":15781},"end":{"line":384,"column":535,"offset":16311},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Create a TSS descriptor entry in the GDT","position":{"start":{"line":386,"column":8,"offset":16323},"end":{"line":386,"column":48,"offset":16363},"indent":[]}}],"position":{"start":{"line":386,"column":8,"offset":16323},"end":{"line":386,"column":48,"offset":16363},"indent":[]}}],"position":{"start":{"line":386,"column":5,"offset":16320},"end":{"line":386,"column":48,"offset":16363},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Load the TR with the segment selector for that segment","position":{"start":{"line":387,"column":8,"offset":16371},"end":{"line":387,"column":62,"offset":16425},"indent":[]}}],"position":{"start":{"line":387,"column":8,"offset":16371},"end":{"line":387,"column":62,"offset":16425},"indent":[]}}],"position":{"start":{"line":387,"column":5,"offset":16368},"end":{"line":387,"column":62,"offset":16425},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"Add information to the TSS in memory as needed","position":{"start":{"line":388,"column":8,"offset":16433},"end":{"line":388,"column":54,"offset":16479},"indent":[]}}],"position":{"start":{"line":388,"column":8,"offset":16433},"end":{"line":388,"column":54,"offset":16479},"indent":[]}}],"position":{"start":{"line":388,"column":5,"offset":16430},"end":{"line":388,"column":54,"offset":16479},"indent":[]}}],"position":{"start":{"line":386,"column":5,"offset":16320},"end":{"line":388,"column":54,"offset":16479},"indent":[5,5]}},{"type":"paragraph","children":[{"type":"text","value":"For security purposes, the TSS should be placed in memory that is accessible only to the ","position":{"start":{"line":390,"column":5,"offset":16488},"end":{"line":390,"column":94,"offset":16577},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Kernel_(computer_science)","children":[{"type":"text","value":"kernel","position":{"start":{"line":390,"column":95,"offset":16578},"end":{"line":390,"column":101,"offset":16584},"indent":[]}}],"position":{"start":{"line":390,"column":94,"offset":16577},"end":{"line":390,"column":159,"offset":16642},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":390,"column":159,"offset":16642},"end":{"line":390,"column":160,"offset":16643},"indent":[]}}],"position":{"start":{"line":390,"column":5,"offset":16488},"end":{"line":390,"column":160,"offset":16643},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"quote from ","position":{"start":{"line":392,"column":5,"offset":16652},"end":{"line":392,"column":16,"offset":16663},"indent":[]}},{"type":"link","title":null,"url":"https://en.wikipedia.org/wiki/Task_state_segment","children":[{"type":"text","value":"https://en.wikipedia.org/wiki/Task_state_segment","position":{"start":{"line":392,"column":17,"offset":16664},"end":{"line":392,"column":65,"offset":16712},"indent":[]}}],"position":{"start":{"line":392,"column":16,"offset":16663},"end":{"line":392,"column":66,"offset":16713},"indent":[]}}],"position":{"start":{"line":392,"column":5,"offset":16652},"end":{"line":392,"column":66,"offset":16713},"indent":[]}}],"position":{"start":{"line":377,"column":3,"offset":15158},"end":{"line":392,"column":66,"offset":16713},"indent":[3,3,3,3,3,3,3,3,3,3,3,3,3,3,3]}},{"type":"paragraph","children":[{"type":"text","value":"所以说，TSS就是一个用来保存一个task (在scheduling中指一个thread或者一个process)的相关信息的。而TSS descriptor会被在GDT中分配，因为GDT就是用来管理每个segment是做什么的用的。","position":{"start":{"line":394,"column":3,"offset":16717},"end":{"line":394,"column":119,"offset":16833},"indent":[]}}],"position":{"start":{"line":394,"column":3,"offset":16717},"end":{"line":394,"column":119,"offset":16833},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"因为需要明确每个CPU的stack在哪里，所以需要per-CPU TSS。CPU i的TSS被存在","position":{"start":{"line":396,"column":3,"offset":16837},"end":{"line":396,"column":52,"offset":16886},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cpus[i].cpu_ts</code>","position":{"start":{"line":396,"column":52,"offset":16886},"end":{"line":396,"column":68,"offset":16902},"indent":[]}},{"type":"text","value":"中，对应的TSS descriptor在","position":{"start":{"line":396,"column":68,"offset":16902},"end":{"line":396,"column":88,"offset":16922},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">gdt[(GDT_TSS0 &gt;&gt; 3) + i]</code>","position":{"start":{"line":396,"column":88,"offset":16922},"end":{"line":396,"column":114,"offset":16948},"indent":[]}},{"type":"text","value":"。在","position":{"start":{"line":396,"column":114,"offset":16948},"end":{"line":396,"column":116,"offset":16950},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/trap.c</code>","position":{"start":{"line":396,"column":116,"offset":16950},"end":{"line":396,"column":129,"offset":16963},"indent":[]}},{"type":"text","value":"中使用个全局变量","position":{"start":{"line":396,"column":129,"offset":16963},"end":{"line":396,"column":137,"offset":16971},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">struct Taskstate ts</code>","position":{"start":{"line":396,"column":137,"offset":16971},"end":{"line":396,"column":158,"offset":16992},"indent":[]}},{"type":"text","value":" 将变得没什么用。","position":{"start":{"line":396,"column":158,"offset":16992},"end":{"line":396,"column":167,"offset":17001},"indent":[]}}],"position":{"start":{"line":396,"column":3,"offset":16837},"end":{"line":396,"column":167,"offset":17001},"indent":[]}}],"position":{"start":{"line":373,"column":1,"offset":15105},"end":{"line":397,"column":1,"offset":17002},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"per-CPU current environment pointer","position":{"start":{"line":398,"column":3,"offset":17005},"end":{"line":398,"column":38,"offset":17040},"indent":[]}}],"position":{"start":{"line":398,"column":3,"offset":17005},"end":{"line":398,"column":38,"offset":17040},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"因为CPU们可以同时跑不同的进程，所以不能只有一个","position":{"start":{"line":400,"column":3,"offset":17044},"end":{"line":400,"column":28,"offset":17069},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">curenv</code>","position":{"start":{"line":400,"column":28,"offset":17069},"end":{"line":400,"column":36,"offset":17077},"indent":[]}},{"type":"text","value":"了，我们把它改为","position":{"start":{"line":400,"column":36,"offset":17077},"end":{"line":400,"column":44,"offset":17085},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cpus[cpunum()].cpu_env</code>","position":{"start":{"line":400,"column":44,"offset":17085},"end":{"line":400,"column":68,"offset":17109},"indent":[]}},{"type":"text","value":"（或者","position":{"start":{"line":400,"column":68,"offset":17109},"end":{"line":400,"column":71,"offset":17112},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">thiscpu-&gt;cpu_env</code>","position":{"start":{"line":400,"column":71,"offset":17112},"end":{"line":400,"column":89,"offset":17130},"indent":[]}},{"type":"text","value":"）。这指向当前CPU正在执行的环境。","position":{"start":{"line":400,"column":89,"offset":17130},"end":{"line":400,"column":107,"offset":17148},"indent":[]}}],"position":{"start":{"line":400,"column":3,"offset":17044},"end":{"line":400,"column":107,"offset":17148},"indent":[]}}],"position":{"start":{"line":398,"column":1,"offset":17003},"end":{"line":401,"column":1,"offset":17149},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"per-CPU system register","position":{"start":{"line":402,"column":3,"offset":17152},"end":{"line":402,"column":26,"offset":17175},"indent":[]}}],"position":{"start":{"line":402,"column":3,"offset":17152},"end":{"line":402,"column":26,"offset":17175},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"所有的寄存器，包括系统寄存器都是private to CPU。所以对于寄存器的初始化函数，如","position":{"start":{"line":404,"column":3,"offset":17179},"end":{"line":404,"column":49,"offset":17225},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lcr3()</code>","position":{"start":{"line":404,"column":49,"offset":17225},"end":{"line":404,"column":57,"offset":17233},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":404,"column":57,"offset":17233},"end":{"line":404,"column":59,"offset":17235},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ltr()</code>","position":{"start":{"line":404,"column":59,"offset":17235},"end":{"line":404,"column":66,"offset":17242},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":404,"column":66,"offset":17242},"end":{"line":404,"column":68,"offset":17244},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lgdt()</code>","position":{"start":{"line":404,"column":68,"offset":17244},"end":{"line":404,"column":76,"offset":17252},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":404,"column":76,"offset":17252},"end":{"line":404,"column":78,"offset":17254},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lidt()</code>","position":{"start":{"line":404,"column":78,"offset":17254},"end":{"line":404,"column":86,"offset":17262},"indent":[]}},{"type":"text","value":"都需要在每个CPU上运行一下。","position":{"start":{"line":404,"column":86,"offset":17262},"end":{"line":404,"column":101,"offset":17277},"indent":[]}}],"position":{"start":{"line":404,"column":3,"offset":17179},"end":{"line":404,"column":101,"offset":17277},"indent":[]}}],"position":{"start":{"line":402,"column":1,"offset":17150},"end":{"line":404,"column":101,"offset":17277},"indent":[1,1]}}],"position":{"start":{"line":283,"column":1,"offset":9798},"end":{"line":404,"column":101,"offset":17277},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"除此之外，乳沟还有加入任何per-CPU state，或者和CPU相关的初始化，注意都要转化为在CPU上运行。","position":{"start":{"line":406,"column":1,"offset":17279},"end":{"line":406,"column":56,"offset":17334},"indent":[]}}],"position":{"start":{"line":406,"column":1,"offset":17279},"end":{"line":406,"column":56,"offset":17334},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 3","position":{"start":{"line":408,"column":5,"offset":17340},"end":{"line":408,"column":15,"offset":17350},"indent":[]}}],"position":{"start":{"line":408,"column":1,"offset":17336},"end":{"line":408,"column":15,"offset":17350},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"修改","position":{"start":{"line":410,"column":1,"offset":17352},"end":{"line":410,"column":3,"offset":17354},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern.pmap.c</code>","position":{"start":{"line":410,"column":3,"offset":17354},"end":{"line":410,"column":16,"offset":17367},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":410,"column":16,"offset":17367},"end":{"line":410,"column":18,"offset":17369},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mem_init_mp()</code>","position":{"start":{"line":410,"column":18,"offset":17369},"end":{"line":410,"column":33,"offset":17384},"indent":[]}},{"type":"text","value":"来把多个CPU的stack按照上面所说的映射上。","position":{"start":{"line":410,"column":33,"offset":17384},"end":{"line":410,"column":57,"offset":17408},"indent":[]}}],"position":{"start":{"line":410,"column":1,"offset":17352},"end":{"line":410,"column":57,"offset":17408},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"写法就是按照注释的要求，注意stacktop是最上面：","position":{"start":{"line":412,"column":1,"offset":17410},"end":{"line":412,"column":28,"offset":17437},"indent":[]}}],"position":{"start":{"line":412,"column":1,"offset":17410},"end":{"line":412,"column":28,"offset":17437},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Modify mappings in kern_pgdir to support SMP</span>\n<span class=\"token comment\">//   - Map the per-CPU stacks in the region [KSTACKTOP-PTSIZE, KSTACKTOP)</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">mem_init_mp</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Map per-CPU stacks starting at KSTACKTOP, for up to 'NCPU' CPUs.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// For CPU i, use the physical memory that 'percpu_kstacks[i]' refers</span>\n\t<span class=\"token comment\">// to as its kernel stack. CPU i's kernel stack grows down from virtual</span>\n\t<span class=\"token comment\">// address kstacktop_i = KSTACKTOP - i * (KSTKSIZE + KSTKGAP), and is</span>\n\t<span class=\"token comment\">// divided into two pieces, just like the single stack you set up in</span>\n\t<span class=\"token comment\">// mem_init:</span>\n\t<span class=\"token comment\">//     * [kstacktop_i - KSTKSIZE, kstacktop_i)</span>\n\t<span class=\"token comment\">//          -- backed by physical memory</span>\n\t<span class=\"token comment\">//     * [kstacktop_i - (KSTKSIZE + KSTKGAP), kstacktop_i - KSTKSIZE)</span>\n\t<span class=\"token comment\">//          -- not backed; so if the kernel overflows its stack,</span>\n\t<span class=\"token comment\">//             it will fault rather than overwrite another CPU's stack.</span>\n\t<span class=\"token comment\">//             Known as a \"guard page\".</span>\n\t<span class=\"token comment\">//     Permissions: kernel RW, user NONE</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// LAB 4: Your code here:</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> i<span class=\"token operator\">=</span><span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i<span class=\"token operator\">&lt;</span>NCPU<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tuintptr_t kstacktop_i <span class=\"token operator\">=</span> KSTACKTOP <span class=\"token operator\">-</span> i <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>KSTKSIZE <span class=\"token operator\">+</span> KSTKGAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">boot_map_region</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">,</span> kstacktop_i <span class=\"token operator\">-</span> KSTKSIZE<span class=\"token punctuation\">,</span> KSTKSIZE<span class=\"token punctuation\">,</span> \n                        <span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>percpu_kstacks<span class=\"token punctuation\">[</span>i<span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_W <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":414,"column":1,"offset":17439},"end":{"line":443,"column":4,"offset":18620},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"运行之后的结果为：","position":{"start":{"line":445,"column":1,"offset":18622},"end":{"line":445,"column":10,"offset":18631},"indent":[]}}],"position":{"start":{"line":445,"column":1,"offset":18622},"end":{"line":445,"column":10,"offset":18631},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> qemu-nox\n<span class=\"token punctuation\">..</span>.\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_alloc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_kern_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_installed_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\nSMP: CPU 0 found 1 CPU<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\nenabled interrupts: 1 2\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\nkernel panic on CPU 0 at kern/trap.c:220: page fault <span class=\"token keyword\">in</span> kernel\nWelcome to the JOS kernel monitor<span class=\"token operator\">!</span>\nType <span class=\"token string\">'help'</span> <span class=\"token keyword\">for</span> a list of commands.\nK<span class=\"token operator\">></span></code></pre></div>","position":{"start":{"line":447,"column":1,"offset":18633},"end":{"line":463,"column":4,"offset":19071},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 4","position":{"start":{"line":465,"column":5,"offset":19077},"end":{"line":465,"column":15,"offset":19087},"indent":[]}}],"position":{"start":{"line":465,"column":1,"offset":19073},"end":{"line":465,"column":15,"offset":19087},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"修改","position":{"start":{"line":467,"column":1,"offset":19089},"end":{"line":467,"column":3,"offset":19091},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/trap.c</code>","position":{"start":{"line":467,"column":3,"offset":19091},"end":{"line":467,"column":16,"offset":19104},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":467,"column":16,"offset":19104},"end":{"line":467,"column":18,"offset":19106},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap_init_percpu()</code>","position":{"start":{"line":467,"column":18,"offset":19106},"end":{"line":467,"column":38,"offset":19126},"indent":[]}},{"type":"text","value":"，以初始化BSP的TSS和TSS descriptor。注意，改完之后的代码应该不包含","position":{"start":{"line":467,"column":38,"offset":19126},"end":{"line":467,"column":81,"offset":19169},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ts</code>","position":{"start":{"line":467,"column":81,"offset":19169},"end":{"line":467,"column":85,"offset":19173},"indent":[]}},{"type":"text","value":"这个全局变量了。","position":{"start":{"line":467,"column":85,"offset":19173},"end":{"line":467,"column":93,"offset":19181},"indent":[]}}],"position":{"start":{"line":467,"column":1,"offset":19089},"end":{"line":467,"column":93,"offset":19181},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Initialize and load the per-CPU TSS and IDT</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">trap_init_percpu</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// The example code here sets up the Task State Segment (TSS) and</span>\n\t<span class=\"token comment\">// the TSS descriptor for CPU 0. But it is incorrect if we are</span>\n\t<span class=\"token comment\">// running on other CPUs because each CPU has its own kernel stack.</span>\n\t<span class=\"token comment\">// Fix the code so that it works for all CPUs.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Hints:</span>\n\t<span class=\"token comment\">//   - The macro \"thiscpu\" always refers to the current CPU's</span>\n\t<span class=\"token comment\">//     struct CpuInfo;</span>\n\t<span class=\"token comment\">//   - The ID of the current CPU is given by cpunum() or</span>\n\t<span class=\"token comment\">//     thiscpu->cpu_id;</span>\n\t<span class=\"token comment\">//   - Use \"thiscpu->cpu_ts\" as the TSS for the current CPU,</span>\n\t<span class=\"token comment\">//     rather than the global \"ts\" variable;</span>\n\t<span class=\"token comment\">//   - Use gdt[(GD_TSS0 >> 3) + i] for CPU i's TSS descriptor;</span>\n\t<span class=\"token comment\">//   - You mapped the per-CPU kernel stacks in mem_init_mp()</span>\n\t<span class=\"token comment\">//   - Initialize cpu_ts.ts_iomb to prevent unauthorized environments</span>\n\t<span class=\"token comment\">//     from doing IO (0 is not the correct value!)</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// ltr sets a 'busy' flag in the TSS selector, so if you</span>\n\t<span class=\"token comment\">// accidentally load the same TSS on more than one CPU, you'll</span>\n\t<span class=\"token comment\">// get a triple fault.  If you set up an individual CPU's TSS</span>\n\t<span class=\"token comment\">// wrong, you may not get a fault until you try to return from</span>\n\t<span class=\"token comment\">// user space on that CPU.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// LAB 4: Your code here:</span>\n\n\t<span class=\"token comment\">// Setup a TSS so that we get the right stack</span>\n\t<span class=\"token comment\">// when we trap to the kernel.</span>\n\tthiscpu<span class=\"token operator\">-></span>cpu_ts<span class=\"token punctuation\">.</span>ts_esp0 <span class=\"token operator\">=</span> KSTACKTOP <span class=\"token operator\">-</span> <span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">*</span> <span class=\"token punctuation\">(</span>KSTKSIZE <span class=\"token operator\">+</span> KSTKGAP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tthiscpu<span class=\"token operator\">-></span>cpu_ts<span class=\"token punctuation\">.</span>ts_ss0 <span class=\"token operator\">=</span> GD_KD<span class=\"token punctuation\">;</span>\n\tthiscpu<span class=\"token operator\">-></span>cpu_ts<span class=\"token punctuation\">.</span>ts_iomb <span class=\"token operator\">=</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Taskstate</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Initialize the TSS slot of the gdt.</span>\n\tgdt<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>GD_TSS0 <span class=\"token operator\">>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">SEG16</span><span class=\"token punctuation\">(</span>STS_T32A<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>thiscpu<span class=\"token operator\">-></span>cpu_ts<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\t\t<span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Taskstate</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tgdt<span class=\"token punctuation\">[</span><span class=\"token punctuation\">(</span>GD_TSS0 <span class=\"token operator\">>></span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>sd_s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Load the TSS selector (like other segment selectors, the</span>\n\t<span class=\"token comment\">// bottom three bits are special; we leave them 0)</span>\n\t<span class=\"token function\">ltr</span><span class=\"token punctuation\">(</span>GD_TSS0 <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span><span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Load the IDT</span>\n\t<span class=\"token function\">lidt</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>idt_pd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":469,"column":1,"offset":19183},"end":{"line":517,"column":4,"offset":20994},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"测试结果如下：","position":{"start":{"line":519,"column":1,"offset":20996},"end":{"line":519,"column":8,"offset":21003},"indent":[]}}],"position":{"start":{"line":519,"column":1,"offset":20996},"end":{"line":519,"column":8,"offset":21003},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> qemu-nox CPUS<span class=\"token operator\">=</span>4\n<span class=\"token punctuation\">..</span>.\nPhysical memory: 131072K available, base <span class=\"token operator\">=</span> 640K, extended <span class=\"token operator\">=</span> 130432K\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_alloc<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_kern_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_free_list<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\ncheck_page_installed_pgdir<span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> succeeded<span class=\"token operator\">!</span>\nSMP: CPU 0 found 4 CPU<span class=\"token punctuation\">(</span>s<span class=\"token punctuation\">)</span>\nenabled interrupts: 1 2\nSMP: CPU 1 starting\nSMP: CPU 2 starting\nSMP: CPU 3 starting\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\n<span class=\"token punctuation\">..</span>.</code></pre></div>","position":{"start":{"line":521,"column":1,"offset":21005},"end":{"line":538,"column":4,"offset":21445},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Locking","position":{"start":{"line":540,"column":5,"offset":21451},"end":{"line":540,"column":12,"offset":21458},"indent":[]}}],"position":{"start":{"line":540,"column":1,"offset":21447},"end":{"line":540,"column":12,"offset":21458},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"现在当在","position":{"start":{"line":542,"column":1,"offset":21460},"end":{"line":542,"column":5,"offset":21464},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mp_main()</code>","position":{"start":{"line":542,"column":5,"offset":21464},"end":{"line":542,"column":16,"offset":21475},"indent":[]}},{"type":"text","value":"初始化AP之后进入spin:","position":{"start":{"line":542,"column":16,"offset":21475},"end":{"line":542,"column":30,"offset":21489},"indent":[]}}],"position":{"start":{"line":542,"column":1,"offset":21460},"end":{"line":542,"column":30,"offset":21489},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Setup code for APs</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">mp_main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// We are in high EIP now, safe to switch to kern_pgdir </span>\n\t<span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>kern_pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"SMP: CPU %d starting\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token function\">cpunum</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">lapic_init</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">env_init_percpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">trap_init_percpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">xchg</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>thiscpu<span class=\"token operator\">-></span>cpu_status<span class=\"token punctuation\">,</span> CPU_STARTED<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// tell boot_aps() we're up</span>\n\n\t<span class=\"token comment\">// Now that we have finished some basic setup, call sched_yield()</span>\n\t<span class=\"token comment\">// to start running processes on this CPU.  But make sure that</span>\n\t<span class=\"token comment\">// only one CPU can enter the scheduler at a time!</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Your code here:</span>\n\n\t<span class=\"token comment\">// Remove this after you finish Exercise 6</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":544,"column":1,"offset":21491},"end":{"line":567,"column":4,"offset":22065},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"再让AP进行更复杂的操作之前，我们需要解决这里面可能有的一些race。（这里不太明白，明明","position":{"start":{"line":569,"column":1,"offset":22067},"end":{"line":569,"column":46,"offset":22112},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">boot_aps</code>","position":{"start":{"line":569,"column":46,"offset":22112},"end":{"line":569,"column":56,"offset":22122},"indent":[]}},{"type":"text","value":"是一个CPU一个CPU处理的，为啥会有race...）最简单的方法就是用一个","position":{"start":{"line":569,"column":56,"offset":22122},"end":{"line":569,"column":94,"offset":22160},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"big kernel lock","position":{"start":{"line":569,"column":95,"offset":22161},"end":{"line":569,"column":110,"offset":22176},"indent":[]}}],"position":{"start":{"line":569,"column":94,"offset":22160},"end":{"line":569,"column":111,"offset":22177},"indent":[]}},{"type":"text","value":"。big kernel lock是一个全局锁，当一个环境进入kernel mode的时候就会获取这个锁，当环境返回user mode的时候就会释放。这样让use mode的环境们可以并行运行，但是如果要进入kernel就只能有一个了。","position":{"start":{"line":569,"column":111,"offset":22177},"end":{"line":569,"column":228,"offset":22294},"indent":[]}}],"position":{"start":{"line":569,"column":1,"offset":22067},"end":{"line":569,"column":228,"offset":22294},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">kern/spinlock.h</code>","position":{"start":{"line":571,"column":1,"offset":22296},"end":{"line":571,"column":18,"offset":22313},"indent":[]}},{"type":"text","value":"中声明了big kernel lock，名为","position":{"start":{"line":571,"column":18,"offset":22313},"end":{"line":571,"column":40,"offset":22335},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kernel_lock</code>","position":{"start":{"line":571,"column":40,"offset":22335},"end":{"line":571,"column":53,"offset":22348},"indent":[]}},{"type":"text","value":"，其接口为","position":{"start":{"line":571,"column":53,"offset":22348},"end":{"line":571,"column":58,"offset":22353},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lock_kernel()</code>","position":{"start":{"line":571,"column":58,"offset":22353},"end":{"line":571,"column":73,"offset":22368},"indent":[]}},{"type":"text","value":"与","position":{"start":{"line":571,"column":73,"offset":22368},"end":{"line":571,"column":74,"offset":22369},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">unlock_kernel()</code>","position":{"start":{"line":571,"column":74,"offset":22369},"end":{"line":571,"column":91,"offset":22386},"indent":[]}},{"type":"text","value":"。我们需要在以下的4个地方加入这个锁相关的代码：","position":{"start":{"line":571,"column":91,"offset":22386},"end":{"line":571,"column":115,"offset":22410},"indent":[]}}],"position":{"start":{"line":571,"column":1,"offset":22296},"end":{"line":571,"column":115,"offset":22410},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"在","position":{"start":{"line":573,"column":3,"offset":22414},"end":{"line":573,"column":4,"offset":22415},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">i386_init()</code>","position":{"start":{"line":573,"column":4,"offset":22415},"end":{"line":573,"column":17,"offset":22428},"indent":[]}},{"type":"text","value":", BSP唤醒其他CPUs之前acquire。","position":{"start":{"line":573,"column":17,"offset":22428},"end":{"line":573,"column":40,"offset":22451},"indent":[]}}],"position":{"start":{"line":573,"column":3,"offset":22414},"end":{"line":573,"column":40,"offset":22451},"indent":[]}}],"position":{"start":{"line":573,"column":1,"offset":22412},"end":{"line":573,"column":40,"offset":22451},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"在","position":{"start":{"line":574,"column":3,"offset":22454},"end":{"line":574,"column":4,"offset":22455},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mp_main()</code>","position":{"start":{"line":574,"column":4,"offset":22455},"end":{"line":574,"column":15,"offset":22466},"indent":[]}},{"type":"text","value":", 初始化AP后acquire, 之后调用","position":{"start":{"line":574,"column":15,"offset":22466},"end":{"line":574,"column":36,"offset":22487},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sched_yield()</code>","position":{"start":{"line":574,"column":36,"offset":22487},"end":{"line":574,"column":51,"offset":22502},"indent":[]}},{"type":"text","value":"来在这个AP上运行环境。","position":{"start":{"line":574,"column":51,"offset":22502},"end":{"line":574,"column":63,"offset":22514},"indent":[]}}],"position":{"start":{"line":574,"column":3,"offset":22454},"end":{"line":574,"column":63,"offset":22514},"indent":[]}}],"position":{"start":{"line":574,"column":1,"offset":22452},"end":{"line":574,"column":63,"offset":22514},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"在","position":{"start":{"line":575,"column":3,"offset":22517},"end":{"line":575,"column":4,"offset":22518},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap()</code>","position":{"start":{"line":575,"column":4,"offset":22518},"end":{"line":575,"column":12,"offset":22526},"indent":[]}},{"type":"text","value":", 当trap是来自user mode的时候acquire。","position":{"start":{"line":575,"column":12,"offset":22526},"end":{"line":575,"column":42,"offset":22556},"indent":[]}}],"position":{"start":{"line":575,"column":3,"offset":22517},"end":{"line":575,"column":42,"offset":22556},"indent":[]}}],"position":{"start":{"line":575,"column":1,"offset":22515},"end":{"line":575,"column":42,"offset":22556},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"在","position":{"start":{"line":576,"column":3,"offset":22559},"end":{"line":576,"column":4,"offset":22560},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_run()</code>","position":{"start":{"line":576,"column":4,"offset":22560},"end":{"line":576,"column":15,"offset":22571},"indent":[]}},{"type":"text","value":", release the lock ","position":{"start":{"line":576,"column":15,"offset":22571},"end":{"line":576,"column":34,"offset":22590},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"right before","position":{"start":{"line":576,"column":35,"offset":22591},"end":{"line":576,"column":47,"offset":22603},"indent":[]}}],"position":{"start":{"line":576,"column":34,"offset":22590},"end":{"line":576,"column":48,"offset":22604},"indent":[]}},{"type":"text","value":" switching to user mode. 或早或晚都会导致races or deadlocks.","position":{"start":{"line":576,"column":48,"offset":22604},"end":{"line":576,"column":100,"offset":22656},"indent":[]}}],"position":{"start":{"line":576,"column":3,"offset":22559},"end":{"line":576,"column":100,"offset":22656},"indent":[]}}],"position":{"start":{"line":576,"column":1,"offset":22557},"end":{"line":576,"column":100,"offset":22656},"indent":[]}}],"position":{"start":{"line":573,"column":1,"offset":22412},"end":{"line":576,"column":100,"offset":22656},"indent":[1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 5","position":{"start":{"line":578,"column":5,"offset":22662},"end":{"line":578,"column":15,"offset":22672},"indent":[]}}],"position":{"start":{"line":578,"column":1,"offset":22658},"end":{"line":578,"column":15,"offset":22672},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"根据上面的4条修改代码：","position":{"start":{"line":580,"column":1,"offset":22674},"end":{"line":580,"column":13,"offset":22686},"indent":[]}}],"position":{"start":{"line":580,"column":1,"offset":22674},"end":{"line":580,"column":13,"offset":22686},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// i386_init()</span>\n\t<span class=\"token comment\">// Acquire the big kernel lock before waking up APs</span>\n\t<span class=\"token comment\">// Your code here:</span>\n\t<span class=\"token function\">lock_kernel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Starting non-boot CPUs</span>\n\t<span class=\"token function\">boot_aps</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// mp_main()</span>\n\t<span class=\"token comment\">// Now that we have finished some basic setup, call sched_yield()</span>\n\t<span class=\"token comment\">// to start running processes on this CPU.  But make sure that</span>\n\t<span class=\"token comment\">// only one CPU can enter the scheduler at a time!</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Your code here:</span>\n\t<span class=\"token function\">lock_kernel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sched_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Remove this after you finish Exercise 6</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// trap()</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>tf<span class=\"token operator\">-></span>tf_cs <span class=\"token operator\">&amp;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Trapped from user mode.</span>\n\t\t<span class=\"token comment\">// Acquire the big kernel lock before doing any</span>\n\t\t<span class=\"token comment\">// serious kernel work.</span>\n\t\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n        <span class=\"token function\">lock_kernel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">assert</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n\n<span class=\"token comment\">// env_run()</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">env_run</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Step 1: If this is a context switch (a new environment is running):</span>\n\t<span class=\"token comment\">//\t   1. Set the current environment (if any) back to</span>\n\t<span class=\"token comment\">//\t      ENV_RUNNABLE if it is ENV_RUNNING (think about</span>\n\t<span class=\"token comment\">//\t      what other states it can be in),</span>\n\t<span class=\"token comment\">//\t   2. Set 'curenv' to the new environment,</span>\n\t<span class=\"token comment\">//\t   3. Set its status to ENV_RUNNING,</span>\n\t<span class=\"token comment\">//\t   4. Update its 'env_runs' counter,</span>\n\t<span class=\"token comment\">//\t   5. Use lcr3() to switch to its address space.</span>\n\t<span class=\"token comment\">// Step 2: Use env_pop_tf() to restore the environment's</span>\n\t<span class=\"token comment\">//\t   registers and drop into user mode in the</span>\n\t<span class=\"token comment\">//\t   environment.</span>\n\n\t<span class=\"token comment\">// Hint: This function loads the new environment's state from</span>\n\t<span class=\"token comment\">//\te->env_tf.  Go back through the code you wrote above</span>\n\t<span class=\"token comment\">//\tand make sure you have set the relevant parts of</span>\n\t<span class=\"token comment\">//\te->env_tf to sensible values.</span>\n\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>curenv <span class=\"token operator\">&amp;&amp;</span> curenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">==</span> ENV_RUNNING<span class=\"token punctuation\">)</span>\n\t\tcurenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_RUNNABLE<span class=\"token punctuation\">;</span>\n\tcurenv <span class=\"token operator\">=</span> e<span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_RUNNING<span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_runs<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">PADDR</span><span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">unlock_kernel</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">env_pop_tf</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// panic(\"env_run not yet implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":582,"column":1,"offset":22688},"end":{"line":644,"column":4,"offset":24466},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"最后的这个","position":{"start":{"line":646,"column":1,"offset":24468},"end":{"line":646,"column":6,"offset":24473},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_run</code>","position":{"start":{"line":646,"column":6,"offset":24473},"end":{"line":646,"column":15,"offset":24482},"indent":[]}},{"type":"text","value":"是通过上面的注释加在了step 1和step 2之间了。","position":{"start":{"line":646,"column":15,"offset":24482},"end":{"line":646,"column":43,"offset":24510},"indent":[]}}],"position":{"start":{"line":646,"column":1,"offset":24468},"end":{"line":646,"column":43,"offset":24510},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"需要做完下一个exercise 才能测试这一个。","position":{"start":{"line":648,"column":1,"offset":24512},"end":{"line":648,"column":25,"offset":24536},"indent":[]}}],"position":{"start":{"line":648,"column":1,"offset":24512},"end":{"line":648,"column":25,"offset":24536},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"如果big kernel lock保证了只能有一个环境运行在kernel mode，为什么我们还需要不同的kernel stack呢？","position":{"start":{"line":650,"column":3,"offset":24540},"end":{"line":650,"column":70,"offset":24607},"indent":[]}}],"position":{"start":{"line":650,"column":3,"offset":24540},"end":{"line":650,"column":70,"offset":24607},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"回忆进入","position":{"start":{"line":652,"column":3,"offset":24611},"end":{"line":652,"column":7,"offset":24615},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap</code>","position":{"start":{"line":652,"column":7,"offset":24615},"end":{"line":652,"column":13,"offset":24621},"indent":[]}},{"type":"text","value":"函数之前，在","position":{"start":{"line":652,"column":13,"offset":24621},"end":{"line":652,"column":19,"offset":24627},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trapentry.S</code>","position":{"start":{"line":652,"column":19,"offset":24627},"end":{"line":652,"column":32,"offset":24640},"indent":[]}},{"type":"text","value":"的","position":{"start":{"line":652,"column":32,"offset":24640},"end":{"line":652,"column":33,"offset":24641},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">_alltraps</code>","position":{"start":{"line":652,"column":33,"offset":24641},"end":{"line":652,"column":44,"offset":24652},"indent":[]}},{"type":"text","value":"中是需要存入当前的","position":{"start":{"line":652,"column":44,"offset":24652},"end":{"line":652,"column":53,"offset":24661},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">esp</code>","position":{"start":{"line":652,"column":53,"offset":24661},"end":{"line":652,"column":58,"offset":24666},"indent":[]}},{"type":"text","value":"等状态信息的。如果先后有两个不同CPU的触发从user mode到kernel mode的中断，那么会先后推入","position":{"start":{"line":652,"column":58,"offset":24666},"end":{"line":652,"column":113,"offset":24721},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">esp</code>","position":{"start":{"line":652,"column":113,"offset":24721},"end":{"line":652,"column":118,"offset":24726},"indent":[]}},{"type":"text","value":"等信息，如CPU 0先推入，然后CPU 1再推入，但是如果CPU 0先返回了，就会恢复成CPU 0的状态了，就出问题了。简而言之，在进入","position":{"start":{"line":652,"column":118,"offset":24726},"end":{"line":652,"column":186,"offset":24794},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap()</code>","position":{"start":{"line":652,"column":186,"offset":24794},"end":{"line":652,"column":194,"offset":24802},"indent":[]}},{"type":"text","value":"之前仍然是有关于栈的操作的，所以只用在","position":{"start":{"line":652,"column":194,"offset":24802},"end":{"line":652,"column":213,"offset":24821},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap</code>","position":{"start":{"line":652,"column":213,"offset":24821},"end":{"line":652,"column":219,"offset":24827},"indent":[]}},{"type":"text","value":"里的锁是午发避免race的。","position":{"start":{"line":652,"column":219,"offset":24827},"end":{"line":652,"column":233,"offset":24841},"indent":[]}}],"position":{"start":{"line":652,"column":3,"offset":24611},"end":{"line":652,"column":233,"offset":24841},"indent":[]}}],"position":{"start":{"line":650,"column":1,"offset":24538},"end":{"line":652,"column":233,"offset":24841},"indent":[1,1]}}],"position":{"start":{"line":650,"column":1,"offset":24538},"end":{"line":652,"column":233,"offset":24841},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Round-Robin Scheduling","position":{"start":{"line":654,"column":5,"offset":24847},"end":{"line":654,"column":27,"offset":24869},"indent":[]}}],"position":{"start":{"line":654,"column":1,"offset":24843},"end":{"line":654,"column":27,"offset":24869},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"下一个任务就是实现Round-Robin。其在ROS中的工作方式如下：","position":{"start":{"line":656,"column":1,"offset":24871},"end":{"line":656,"column":36,"offset":24906},"indent":[]}}],"position":{"start":{"line":656,"column":1,"offset":24871},"end":{"line":656,"column":36,"offset":24906},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"在","position":{"start":{"line":658,"column":3,"offset":24910},"end":{"line":658,"column":4,"offset":24911},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/sched.c</code>","position":{"start":{"line":658,"column":4,"offset":24911},"end":{"line":658,"column":18,"offset":24925},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":658,"column":18,"offset":24925},"end":{"line":658,"column":20,"offset":24927},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sched_yield()</code>","position":{"start":{"line":658,"column":20,"offset":24927},"end":{"line":658,"column":35,"offset":24942},"indent":[]}},{"type":"text","value":"函数会循环搜索","position":{"start":{"line":658,"column":35,"offset":24942},"end":{"line":658,"column":42,"offset":24949},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">envs[]</code>","position":{"start":{"line":658,"column":42,"offset":24949},"end":{"line":658,"column":50,"offset":24957},"indent":[]}},{"type":"text","value":"，找到第一个状态为","position":{"start":{"line":658,"column":50,"offset":24957},"end":{"line":658,"column":59,"offset":24966},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ENV_RUNNABLE</code>","position":{"start":{"line":658,"column":59,"offset":24966},"end":{"line":658,"column":73,"offset":24980},"indent":[]}},{"type":"text","value":"的环境就调用","position":{"start":{"line":658,"column":73,"offset":24980},"end":{"line":658,"column":79,"offset":24986},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_run()</code>","position":{"start":{"line":658,"column":79,"offset":24986},"end":{"line":658,"column":90,"offset":24997},"indent":[]}},{"type":"text","value":"来进入这个环境。","position":{"start":{"line":658,"column":90,"offset":24997},"end":{"line":658,"column":98,"offset":25005},"indent":[]}}],"position":{"start":{"line":658,"column":3,"offset":24910},"end":{"line":658,"column":98,"offset":25005},"indent":[]}}],"position":{"start":{"line":658,"column":1,"offset":24908},"end":{"line":658,"column":98,"offset":25005},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">sched_yield()</code>","position":{"start":{"line":659,"column":3,"offset":25008},"end":{"line":659,"column":18,"offset":25023},"indent":[]}},{"type":"text","value":"需要保证一个环境同时只能运行在一个CPU上。已经被运行了的环境的状态为","position":{"start":{"line":659,"column":18,"offset":25023},"end":{"line":659,"column":53,"offset":25058},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ENV_RUNNING</code>","position":{"start":{"line":659,"column":53,"offset":25058},"end":{"line":659,"column":66,"offset":25071},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":659,"column":66,"offset":25071},"end":{"line":659,"column":67,"offset":25072},"indent":[]}}],"position":{"start":{"line":659,"column":3,"offset":25008},"end":{"line":659,"column":67,"offset":25072},"indent":[]}}],"position":{"start":{"line":659,"column":1,"offset":25006},"end":{"line":659,"column":67,"offset":25072},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"我们实现了一个新的system call，名为","position":{"start":{"line":660,"column":3,"offset":25075},"end":{"line":660,"column":26,"offset":25098},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_yield()</code>","position":{"start":{"line":660,"column":26,"offset":25098},"end":{"line":660,"column":39,"offset":25111},"indent":[]}},{"type":"text","value":"，其让用户环境可以主动的调用","position":{"start":{"line":660,"column":39,"offset":25111},"end":{"line":660,"column":53,"offset":25125},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sched_yield()</code>","position":{"start":{"line":660,"column":53,"offset":25125},"end":{"line":660,"column":68,"offset":25140},"indent":[]}},{"type":"text","value":"来让出CPU。","position":{"start":{"line":660,"column":68,"offset":25140},"end":{"line":660,"column":75,"offset":25147},"indent":[]}}],"position":{"start":{"line":660,"column":3,"offset":25075},"end":{"line":660,"column":75,"offset":25147},"indent":[]}}],"position":{"start":{"line":660,"column":1,"offset":25073},"end":{"line":660,"column":75,"offset":25147},"indent":[]}}],"position":{"start":{"line":658,"column":1,"offset":24908},"end":{"line":660,"column":75,"offset":25147},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 6","position":{"start":{"line":662,"column":5,"offset":25153},"end":{"line":662,"column":15,"offset":25163},"indent":[]}}],"position":{"start":{"line":662,"column":1,"offset":25149},"end":{"line":662,"column":15,"offset":25163},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"实现","position":{"start":{"line":664,"column":1,"offset":25165},"end":{"line":664,"column":3,"offset":25167},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sched_yield()</code>","position":{"start":{"line":664,"column":3,"offset":25167},"end":{"line":664,"column":18,"offset":25182},"indent":[]}},{"type":"text","value":"，并把","position":{"start":{"line":664,"column":18,"offset":25182},"end":{"line":664,"column":21,"offset":25185},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_yield()</code>","position":{"start":{"line":664,"column":21,"offset":25185},"end":{"line":664,"column":34,"offset":25198},"indent":[]}},{"type":"text","value":"加入","position":{"start":{"line":664,"column":34,"offset":25198},"end":{"line":664,"column":36,"offset":25200},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">syscall()</code>","position":{"start":{"line":664,"column":36,"offset":25200},"end":{"line":664,"column":47,"offset":25211},"indent":[]}},{"type":"text","value":"。修改","position":{"start":{"line":664,"column":47,"offset":25211},"end":{"line":664,"column":50,"offset":25214},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/init.c</code>","position":{"start":{"line":664,"column":50,"offset":25214},"end":{"line":664,"column":63,"offset":25227},"indent":[]}},{"type":"text","value":"来创建3个环境，让他们都运行","position":{"start":{"line":664,"column":63,"offset":25227},"end":{"line":664,"column":77,"offset":25241},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user/yield.c</code>","position":{"start":{"line":664,"column":77,"offset":25241},"end":{"line":664,"column":91,"offset":25255},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":664,"column":91,"offset":25255},"end":{"line":664,"column":92,"offset":25256},"indent":[]}}],"position":{"start":{"line":664,"column":1,"offset":25165},"end":{"line":664,"column":92,"offset":25256},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"首先是","position":{"start":{"line":666,"column":1,"offset":25258},"end":{"line":666,"column":4,"offset":25261},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sched_yield()</code>","position":{"start":{"line":666,"column":4,"offset":25261},"end":{"line":666,"column":19,"offset":25276},"indent":[]}},{"type":"text","value":"：","position":{"start":{"line":666,"column":19,"offset":25276},"end":{"line":666,"column":20,"offset":25277},"indent":[]}}],"position":{"start":{"line":666,"column":1,"offset":25258},"end":{"line":666,"column":20,"offset":25277},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Choose a user environment to run and run it.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">sched_yield</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>idle<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Implement simple round-robin scheduling.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Search through 'envs' for an ENV_RUNNABLE environment in</span>\n\t<span class=\"token comment\">// circular fashion starting just after the env this CPU was</span>\n\t<span class=\"token comment\">// last running.  Switch to the first such environment found.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// If no envs are runnable, but the environment previously</span>\n\t<span class=\"token comment\">// running on this CPU is still ENV_RUNNING, it's okay to</span>\n\t<span class=\"token comment\">// choose that environment.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Never choose an environment that's currently running on</span>\n\t<span class=\"token comment\">// another CPU (env_status == ENV_RUNNING). If there are</span>\n\t<span class=\"token comment\">// no runnable environments, simply drop through to the code</span>\n\t<span class=\"token comment\">// below to halt the cpu.</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\tidle <span class=\"token operator\">=</span> curenv <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span> <span class=\"token operator\">?</span> envs <span class=\"token operator\">:</span> <span class=\"token punctuation\">(</span>curenv <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> i<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>i <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> i <span class=\"token operator\">!=</span> NENV<span class=\"token punctuation\">;</span> i<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> envs <span class=\"token operator\">+</span> <span class=\"token punctuation\">(</span>idle <span class=\"token operator\">-</span> envs <span class=\"token operator\">+</span> i<span class=\"token punctuation\">)</span> <span class=\"token operator\">%</span> NENV<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_status <span class=\"token operator\">!=</span> ENV_RUNNABLE<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">env_run</span><span class=\"token punctuation\">(</span>e<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>i <span class=\"token operator\">==</span> NENV <span class=\"token operator\">&amp;&amp;</span> curenv <span class=\"token operator\">&amp;&amp;</span> curenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">==</span> ENV_RUNNING<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">env_run</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// sched_halt never returns</span>\n\t<span class=\"token function\">sched_halt</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":668,"column":1,"offset":25279},"end":{"line":706,"column":4,"offset":26350},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后在","position":{"start":{"line":708,"column":1,"offset":26352},"end":{"line":708,"column":4,"offset":26355},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">syscall()</code>","position":{"start":{"line":708,"column":4,"offset":26355},"end":{"line":708,"column":15,"offset":26366},"indent":[]}},{"type":"text","value":"里面加上","position":{"start":{"line":708,"column":15,"offset":26366},"end":{"line":708,"column":19,"offset":26370},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_yield</code>","position":{"start":{"line":708,"column":19,"offset":26370},"end":{"line":708,"column":30,"offset":26381},"indent":[]}},{"type":"text","value":"。注意","position":{"start":{"line":708,"column":30,"offset":26381},"end":{"line":708,"column":33,"offset":26384},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">SYS_yield</code>","position":{"start":{"line":708,"column":33,"offset":26384},"end":{"line":708,"column":44,"offset":26395},"indent":[]}},{"type":"text","value":"已经在","position":{"start":{"line":708,"column":44,"offset":26395},"end":{"line":708,"column":47,"offset":26398},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">inc/syscall.h</code>","position":{"start":{"line":708,"column":47,"offset":26398},"end":{"line":708,"column":62,"offset":26413},"indent":[]}},{"type":"text","value":"里面被加上了。","position":{"start":{"line":708,"column":62,"offset":26413},"end":{"line":708,"column":69,"offset":26420},"indent":[]}}],"position":{"start":{"line":708,"column":1,"offset":26352},"end":{"line":708,"column":69,"offset":26420},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t\t<span class=\"token keyword\">case</span> SYS_yield<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":710,"column":1,"offset":26422},"end":{"line":714,"column":4,"offset":26477},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"最后在","position":{"start":{"line":716,"column":1,"offset":26479},"end":{"line":716,"column":4,"offset":26482},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">init()</code>","position":{"start":{"line":716,"column":4,"offset":26482},"end":{"line":716,"column":12,"offset":26490},"indent":[]}},{"type":"text","value":"中加入3个yield：","position":{"start":{"line":716,"column":12,"offset":26490},"end":{"line":716,"column":23,"offset":26501},"indent":[]}}],"position":{"start":{"line":716,"column":1,"offset":26479},"end":{"line":716,"column":23,"offset":26501},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token macro property\">#<span class=\"token directive keyword\">if</span> defined(TEST)</span>\n\t<span class=\"token comment\">// Don't touch -- used by grading script!</span>\n\t<span class=\"token function\">ENV_CREATE</span><span class=\"token punctuation\">(</span>TEST<span class=\"token punctuation\">,</span> ENV_TYPE_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">else</span></span>\n\t<span class=\"token comment\">// Touch all you want.</span>\n\t<span class=\"token function\">ENV_CREATE</span><span class=\"token punctuation\">(</span>user_yield<span class=\"token punctuation\">,</span> ENV_TYPE_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ENV_CREATE</span><span class=\"token punctuation\">(</span>user_yield<span class=\"token punctuation\">,</span> ENV_TYPE_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">ENV_CREATE</span><span class=\"token punctuation\">(</span>user_yield<span class=\"token punctuation\">,</span> ENV_TYPE_USER<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//ENV_CREATE(user_primes, ENV_TYPE_USER);</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">endif</span> </span><span class=\"token comment\">// TEST*</span>\n\t<span class=\"token comment\">// Schedule and run the first user environment!</span>\n\t<span class=\"token function\">sched_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":718,"column":1,"offset":26503},"end":{"line":732,"column":4,"offset":26882},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"运行可以得到：","position":{"start":{"line":734,"column":1,"offset":26884},"end":{"line":734,"column":8,"offset":26891},"indent":[]}}],"position":{"start":{"line":734,"column":1,"offset":26884},"end":{"line":734,"column":8,"offset":26891},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> qemu-nox\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001001\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001002\nHello, I am environment 00001000.\nHello, I am environment 00001001.\nHello, I am environment 00001002.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 0.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 0.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 0.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 1.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 1.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 1.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 2.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 2.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 2.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 3.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 3.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 3.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 4.\nAll <span class=\"token keyword\">done</span> <span class=\"token keyword\">in</span> environment 00001000.\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 4.\nAll <span class=\"token keyword\">done</span> <span class=\"token keyword\">in</span> environment 00001001.\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001001\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 4.\nAll <span class=\"token keyword\">done</span> <span class=\"token keyword\">in</span> environment 00001002.\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001002\nNo runnable environments <span class=\"token keyword\">in</span> the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>","position":{"start":{"line":736,"column":1,"offset":26893},"end":{"line":771,"column":4,"offset":28078},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"如果设置CPUS=2会有：","position":{"start":{"line":773,"column":1,"offset":28080},"end":{"line":773,"column":14,"offset":28093},"indent":[]}}],"position":{"start":{"line":773,"column":1,"offset":28080},"end":{"line":773,"column":14,"offset":28093},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> qemu-nox CPUS<span class=\"token operator\">=</span>2\n***\n*** Use Ctrl-a x to <span class=\"token keyword\">exit</span> qemu\n***\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001001\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001002\nHello, I am environment 00001000.\nHello, I am environment 00001001.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 0.\nHello, I am environment 00001002.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 0.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 1.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 0.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 1.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 2.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 1.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 2.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 3.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 3.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 2.\nBack <span class=\"token keyword\">in</span> environment 00001000, iteration 4.\nBack <span class=\"token keyword\">in</span> environment 00001001, iteration 4.\nAll <span class=\"token keyword\">done</span> <span class=\"token keyword\">in</span> environment 00001000.\nAll <span class=\"token keyword\">done</span> <span class=\"token keyword\">in</span> environment 00001001.\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001001\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 3.\nBack <span class=\"token keyword\">in</span> environment 00001002, iteration 4.\nAll <span class=\"token keyword\">done</span> <span class=\"token keyword\">in</span> environment 00001002.\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001002\nNo runnable environments <span class=\"token keyword\">in</span> the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>","position":{"start":{"line":775,"column":1,"offset":28095},"end":{"line":813,"column":4,"offset":29325},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"在现在的","position":{"start":{"line":815,"column":3,"offset":29329},"end":{"line":815,"column":7,"offset":29333},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_run()</code>","position":{"start":{"line":815,"column":7,"offset":29333},"end":{"line":815,"column":18,"offset":29344},"indent":[]}},{"type":"text","value":"中，为什么在进行context switch前后都可以dereference ","position":{"start":{"line":815,"column":18,"offset":29344},"end":{"line":815,"column":57,"offset":29383},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">e</code>","position":{"start":{"line":815,"column":57,"offset":29383},"end":{"line":815,"column":60,"offset":29386},"indent":[]}},{"type":"text","value":"？","position":{"start":{"line":815,"column":60,"offset":29386},"end":{"line":815,"column":61,"offset":29387},"indent":[]}}],"position":{"start":{"line":815,"column":3,"offset":29329},"end":{"line":815,"column":61,"offset":29387},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"因为","position":{"start":{"line":817,"column":3,"offset":29391},"end":{"line":817,"column":5,"offset":29393},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">e</code>","position":{"start":{"line":817,"column":5,"offset":29393},"end":{"line":817,"column":8,"offset":29396},"indent":[]}},{"type":"text","value":"在kernel部分，所有的环境的里对应的地址是一样的。","position":{"start":{"line":817,"column":8,"offset":29396},"end":{"line":817,"column":35,"offset":29423},"indent":[]}}],"position":{"start":{"line":817,"column":3,"offset":29391},"end":{"line":817,"column":35,"offset":29423},"indent":[]}}],"position":{"start":{"line":815,"column":1,"offset":29327},"end":{"line":818,"column":1,"offset":29424},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"再切换的时候是在哪里保存的旧的寄存器状态的？为什么要这么做？","position":{"start":{"line":819,"column":3,"offset":29427},"end":{"line":819,"column":33,"offset":29457},"indent":[]}}],"position":{"start":{"line":819,"column":3,"offset":29427},"end":{"line":819,"column":33,"offset":29457},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"如果不这么做切换回来就不能继续运行了...保存是在","position":{"start":{"line":821,"column":3,"offset":29461},"end":{"line":821,"column":28,"offset":29486},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">_alltraps</code>","position":{"start":{"line":821,"column":28,"offset":29486},"end":{"line":821,"column":39,"offset":29497},"indent":[]}},{"type":"text","value":"中做的，恢复是在","position":{"start":{"line":821,"column":39,"offset":29497},"end":{"line":821,"column":47,"offset":29505},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_run</code>","position":{"start":{"line":821,"column":47,"offset":29505},"end":{"line":821,"column":56,"offset":29514},"indent":[]}},{"type":"text","value":"的","position":{"start":{"line":821,"column":56,"offset":29514},"end":{"line":821,"column":57,"offset":29515},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_pop_tf()</code>","position":{"start":{"line":821,"column":57,"offset":29515},"end":{"line":821,"column":71,"offset":29529},"indent":[]}},{"type":"text","value":"做的。","position":{"start":{"line":821,"column":71,"offset":29529},"end":{"line":821,"column":74,"offset":29532},"indent":[]}}],"position":{"start":{"line":821,"column":3,"offset":29461},"end":{"line":821,"column":74,"offset":29532},"indent":[]}}],"position":{"start":{"line":819,"column":1,"offset":29425},"end":{"line":821,"column":74,"offset":29532},"indent":[1,1]}}],"position":{"start":{"line":815,"column":1,"offset":29327},"end":{"line":821,"column":74,"offset":29532},"indent":[1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"System Calls for Environment Creation","position":{"start":{"line":823,"column":5,"offset":29538},"end":{"line":823,"column":42,"offset":29575},"indent":[]}}],"position":{"start":{"line":823,"column":1,"offset":29534},"end":{"line":823,"column":42,"offset":29575},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"尽管现在可以子啊用户环境之间相互切换了，创建环境仍然需要在kernel初始化的时候进行。现在开始需要实现system calls来让用户环境可以创建新的用户环境。","position":{"start":{"line":825,"column":1,"offset":29577},"end":{"line":825,"column":82,"offset":29658},"indent":[]}}],"position":{"start":{"line":825,"column":1,"offset":29577},"end":{"line":825,"column":82,"offset":29658},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Unix用","position":{"start":{"line":827,"column":1,"offset":29660},"end":{"line":827,"column":6,"offset":29665},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fork()</code>","position":{"start":{"line":827,"column":6,"offset":29665},"end":{"line":827,"column":14,"offset":29673},"indent":[]}},{"type":"text","value":"作为process creation primitive。其会复制整个address space。父进程和子进程的唯一区别在于其process ID与parent process ID。在父进程中，","position":{"start":{"line":827,"column":14,"offset":29673},"end":{"line":827,"column":113,"offset":29772},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fork()</code>","position":{"start":{"line":827,"column":113,"offset":29772},"end":{"line":827,"column":121,"offset":29780},"indent":[]}},{"type":"text","value":"返回子进程ID，子进程中返回0。在默认设置下，这两个进程之后对内存的修改互不影响。","position":{"start":{"line":827,"column":121,"offset":29780},"end":{"line":827,"column":162,"offset":29821},"indent":[]}}],"position":{"start":{"line":827,"column":1,"offset":29660},"end":{"line":827,"column":162,"offset":29821},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们将创建一个不同的，更primitive的一组system call。用这些system call我们将可以完全在用户环境下实现","position":{"start":{"line":829,"column":1,"offset":29823},"end":{"line":829,"column":66,"offset":29888},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fork</code>","position":{"start":{"line":829,"column":66,"offset":29888},"end":{"line":829,"column":72,"offset":29894},"indent":[]}},{"type":"text","value":"。新的system call有：","position":{"start":{"line":829,"column":72,"offset":29894},"end":{"line":829,"column":88,"offset":29910},"indent":[]}}],"position":{"start":{"line":829,"column":1,"offset":29823},"end":{"line":829,"column":88,"offset":29910},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">sys_exofork</code>","position":{"start":{"line":831,"column":3,"offset":29914},"end":{"line":831,"column":16,"offset":29927},"indent":[]}}],"position":{"start":{"line":831,"column":3,"offset":29914},"end":{"line":831,"column":16,"offset":29927},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"创建一个新的几乎完全是空白的环境。这个环境的address space在用户部分什么都没有映射，且环境不能运行。但是其寄存器状态会和父进程相同。在父进程中，","position":{"start":{"line":833,"column":3,"offset":29931},"end":{"line":833,"column":81,"offset":30009},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_exofork</code>","position":{"start":{"line":833,"column":81,"offset":30009},"end":{"line":833,"column":94,"offset":30022},"indent":[]}},{"type":"text","value":"会返回子进程的","position":{"start":{"line":833,"column":94,"offset":30022},"end":{"line":833,"column":101,"offset":30029},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">envid_t</code>","position":{"start":{"line":833,"column":101,"offset":30029},"end":{"line":833,"column":110,"offset":30038},"indent":[]}},{"type":"text","value":"，子进程中返回0（因为子进程不能运行，所以直到parent把child标记为runnable之后才会返回这个0）。","position":{"start":{"line":833,"column":110,"offset":30038},"end":{"line":833,"column":167,"offset":30095},"indent":[]}}],"position":{"start":{"line":833,"column":3,"offset":29931},"end":{"line":833,"column":167,"offset":30095},"indent":[]}}],"position":{"start":{"line":831,"column":1,"offset":29912},"end":{"line":834,"column":1,"offset":30096},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">sys_env_set_status</code>","position":{"start":{"line":835,"column":3,"offset":30099},"end":{"line":835,"column":23,"offset":30119},"indent":[]}}],"position":{"start":{"line":835,"column":3,"offset":30099},"end":{"line":835,"column":23,"offset":30119},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"把某一个环境的状态设置为","position":{"start":{"line":837,"column":3,"offset":30123},"end":{"line":837,"column":15,"offset":30135},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ENV_RUNNABLE</code>","position":{"start":{"line":837,"column":15,"offset":30135},"end":{"line":837,"column":29,"offset":30149},"indent":[]}},{"type":"text","value":"或","position":{"start":{"line":837,"column":29,"offset":30149},"end":{"line":837,"column":30,"offset":30150},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ENV_NOT_RUNNABLE</code>","position":{"start":{"line":837,"column":30,"offset":30150},"end":{"line":837,"column":48,"offset":30168},"indent":[]}},{"type":"text","value":"。基本上是用来表示一个新环境可以运行了。","position":{"start":{"line":837,"column":48,"offset":30168},"end":{"line":837,"column":68,"offset":30188},"indent":[]}}],"position":{"start":{"line":837,"column":3,"offset":30123},"end":{"line":837,"column":68,"offset":30188},"indent":[]}}],"position":{"start":{"line":835,"column":1,"offset":30097},"end":{"line":838,"column":1,"offset":30189},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">sys_page_alloc</code>","position":{"start":{"line":839,"column":3,"offset":30192},"end":{"line":839,"column":19,"offset":30208},"indent":[]}}],"position":{"start":{"line":839,"column":3,"offset":30192},"end":{"line":839,"column":19,"offset":30208},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"把某一page的物理内存映射到制定address space的虚拟地址。","position":{"start":{"line":841,"column":3,"offset":30212},"end":{"line":841,"column":39,"offset":30248},"indent":[]}}],"position":{"start":{"line":841,"column":3,"offset":30212},"end":{"line":841,"column":39,"offset":30248},"indent":[]}}],"position":{"start":{"line":839,"column":1,"offset":30190},"end":{"line":842,"column":1,"offset":30249},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">sys_page_map</code>","position":{"start":{"line":843,"column":3,"offset":30252},"end":{"line":843,"column":17,"offset":30266},"indent":[]}}],"position":{"start":{"line":843,"column":3,"offset":30252},"end":{"line":843,"column":17,"offset":30266},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"把一个page（注意不是page的内容）从一个地址空间映射到另一个。保存memory sharing arrangement inplace使得两者会指向同样的物理内存。","position":{"start":{"line":845,"column":3,"offset":30270},"end":{"line":845,"column":88,"offset":30355},"indent":[]}}],"position":{"start":{"line":845,"column":3,"offset":30270},"end":{"line":845,"column":88,"offset":30355},"indent":[]}}],"position":{"start":{"line":843,"column":1,"offset":30250},"end":{"line":846,"column":1,"offset":30356},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">sys_page_unmap</code>","position":{"start":{"line":847,"column":3,"offset":30359},"end":{"line":847,"column":19,"offset":30375},"indent":[]}}],"position":{"start":{"line":847,"column":3,"offset":30359},"end":{"line":847,"column":19,"offset":30375},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在某一给定地址空间中，unmap a page mapped at a given VA。","position":{"start":{"line":849,"column":3,"offset":30379},"end":{"line":849,"column":48,"offset":30424},"indent":[]}}],"position":{"start":{"line":849,"column":3,"offset":30379},"end":{"line":849,"column":48,"offset":30424},"indent":[]}}],"position":{"start":{"line":847,"column":1,"offset":30357},"end":{"line":849,"column":48,"offset":30424},"indent":[1,1]}}],"position":{"start":{"line":831,"column":1,"offset":29912},"end":{"line":849,"column":48,"offset":30424},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"对于以上这些输入中包含environment ID的system call，JOS支持0表示当前环境。这一支持在","position":{"start":{"line":851,"column":1,"offset":30426},"end":{"line":851,"column":57,"offset":30482},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">envid2env()</code>","position":{"start":{"line":851,"column":57,"offset":30482},"end":{"line":851,"column":70,"offset":30495},"indent":[]}},{"type":"text","value":"中被实现了。","position":{"start":{"line":851,"column":70,"offset":30495},"end":{"line":851,"column":76,"offset":30501},"indent":[]}}],"position":{"start":{"line":851,"column":1,"offset":30426},"end":{"line":851,"column":76,"offset":30501},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在","position":{"start":{"line":853,"column":1,"offset":30503},"end":{"line":853,"column":2,"offset":30504},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user/dumbfork.c</code>","position":{"start":{"line":853,"column":2,"offset":30504},"end":{"line":853,"column":19,"offset":30521},"indent":[]}},{"type":"text","value":"中已经实现了一个比较蠢的","position":{"start":{"line":853,"column":19,"offset":30521},"end":{"line":853,"column":31,"offset":30533},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fork</code>","position":{"start":{"line":853,"column":31,"offset":30533},"end":{"line":853,"column":37,"offset":30539},"indent":[]}},{"type":"text","value":"，测试程序会使用上述system call来创建一个子进程。然后父进程和子进程会相互调用","position":{"start":{"line":853,"column":37,"offset":30539},"end":{"line":853,"column":81,"offset":30583},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_yield</code>","position":{"start":{"line":853,"column":81,"offset":30583},"end":{"line":853,"column":92,"offset":30594},"indent":[]}},{"type":"text","value":"，10个循环之后parent exit，20个之后child退出。","position":{"start":{"line":853,"column":92,"offset":30594},"end":{"line":853,"column":125,"offset":30627},"indent":[]}}],"position":{"start":{"line":853,"column":1,"offset":30503},"end":{"line":853,"column":125,"offset":30627},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 7","position":{"start":{"line":855,"column":5,"offset":30633},"end":{"line":855,"column":15,"offset":30643},"indent":[]}}],"position":{"start":{"line":855,"column":1,"offset":30629},"end":{"line":855,"column":15,"offset":30643},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在","position":{"start":{"line":857,"column":1,"offset":30645},"end":{"line":857,"column":2,"offset":30646},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/syscall.c</code>","position":{"start":{"line":857,"column":2,"offset":30646},"end":{"line":857,"column":18,"offset":30662},"indent":[]}},{"type":"text","value":"中实现上述system call。","position":{"start":{"line":857,"column":18,"offset":30662},"end":{"line":857,"column":35,"offset":30679},"indent":[]}}],"position":{"start":{"line":857,"column":1,"offset":30645},"end":{"line":857,"column":35,"offset":30679},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"首先是","position":{"start":{"line":859,"column":1,"offset":30681},"end":{"line":859,"column":4,"offset":30684},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_exofork</code>","position":{"start":{"line":859,"column":4,"offset":30684},"end":{"line":859,"column":17,"offset":30697},"indent":[]}},{"type":"text","value":"：","position":{"start":{"line":859,"column":17,"offset":30697},"end":{"line":859,"column":18,"offset":30698},"indent":[]}}],"position":{"start":{"line":859,"column":1,"offset":30681},"end":{"line":859,"column":18,"offset":30698},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Allocate a new environment.</span>\n<span class=\"token comment\">// Returns envid of new environment, or &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_NO_FREE_ENV if no free environment is available.</span>\n<span class=\"token comment\">//\t-E_NO_MEM on memory exhaustion.</span>\n<span class=\"token keyword\">static</span> envid_t\n<span class=\"token function\">sys_exofork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Create the new environment with env_alloc(), from kern/env.c.</span>\n\t<span class=\"token comment\">// It should be left as env_alloc created it, except that</span>\n\t<span class=\"token comment\">// status is set to ENV_NOT_RUNNABLE, and the register set is copied</span>\n\t<span class=\"token comment\">// from the current environment -- but tweaked so sys_exofork</span>\n\t<span class=\"token comment\">// will appear to return 0.</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">env_alloc</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> curenv<span class=\"token operator\">-></span>env_id<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_NOT_RUNNABLE<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_tf <span class=\"token operator\">=</span> curenv<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_regs<span class=\"token punctuation\">.</span>reg_eax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> e<span class=\"token operator\">-></span>env_id<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_exofork not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":861,"column":1,"offset":30700},"end":{"line":887,"column":4,"offset":31494},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后是","position":{"start":{"line":889,"column":1,"offset":31496},"end":{"line":889,"column":4,"offset":31499},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_env_set_status</code>","position":{"start":{"line":889,"column":4,"offset":31499},"end":{"line":889,"column":24,"offset":31519},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":889,"column":24,"offset":31519},"end":{"line":889,"column":25,"offset":31520},"indent":[]}}],"position":{"start":{"line":889,"column":1,"offset":31496},"end":{"line":889,"column":25,"offset":31520},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Set envid's env_status to status, which must be ENV_RUNNABLE</span>\n<span class=\"token comment\">// or ENV_NOT_RUNNABLE.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns 0 on success, &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_BAD_ENV if environment envid doesn't currently exist,</span>\n<span class=\"token comment\">//\t\tor the caller doesn't have permission to change envid.</span>\n<span class=\"token comment\">//\t-E_INVAL if status is not a valid status for an environment.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_env_set_status</span><span class=\"token punctuation\">(</span>envid_t envid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> status<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Hint: Use the 'envid2env' function from kern/env.c to translate an</span>\n\t<span class=\"token comment\">// envid to a struct Env.</span>\n\t<span class=\"token comment\">// You should set envid2env's third argument to 1, which will</span>\n\t<span class=\"token comment\">// check whether the current environment has permission to set</span>\n\t<span class=\"token comment\">// envid's status.</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>status <span class=\"token operator\">!=</span> ENV_NOT_RUNNABLE <span class=\"token operator\">&amp;&amp;</span> status <span class=\"token operator\">!=</span> ENV_RUNNABLE<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> status<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_env_set_status not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":891,"column":1,"offset":31522},"end":{"line":920,"column":4,"offset":32436},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后是","position":{"start":{"line":922,"column":1,"offset":32438},"end":{"line":922,"column":4,"offset":32441},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_page_alloc</code>","position":{"start":{"line":922,"column":4,"offset":32441},"end":{"line":922,"column":20,"offset":32457},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":922,"column":20,"offset":32457},"end":{"line":922,"column":21,"offset":32458},"indent":[]}}],"position":{"start":{"line":922,"column":1,"offset":32438},"end":{"line":922,"column":21,"offset":32458},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Allocate a page of memory and map it at 'va' with permission</span>\n<span class=\"token comment\">// 'perm' in the address space of 'envid'.</span>\n<span class=\"token comment\">// The page's contents are set to 0.</span>\n<span class=\"token comment\">// If a page is already mapped at 'va', that page is unmapped as a</span>\n<span class=\"token comment\">// side effect.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// perm -- PTE_U | PTE_P must be set, PTE_AVAIL | PTE_W may or may not be set,</span>\n<span class=\"token comment\">//         but no other bits may be set.  See PTE_SYSCALL in inc/mmu.h.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return 0 on success, &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_BAD_ENV if environment envid doesn't currently exist,</span>\n<span class=\"token comment\">//\t\tor the caller doesn't have permission to change envid.</span>\n<span class=\"token comment\">//\t-E_INVAL if va >= UTOP, or va is not page-aligned.</span>\n<span class=\"token comment\">//\t-E_INVAL if perm is inappropriate (see above).</span>\n<span class=\"token comment\">//\t-E_NO_MEM if there's no memory to allocate the new page,</span>\n<span class=\"token comment\">//\t\tor to allocate any necessary page tables.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span>envid_t envid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Hint: This function is a wrapper around page_alloc() and</span>\n\t<span class=\"token comment\">//   page_insert() from kern/pmap.c.</span>\n\t<span class=\"token comment\">//   Most of the new code you write should be to check the</span>\n\t<span class=\"token comment\">//   parameters for correctness.</span>\n\t<span class=\"token comment\">//   If page_insert() fails, remember to free the page you</span>\n\t<span class=\"token comment\">//   allocated!</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>pp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>va <span class=\"token operator\">>=</span> UTOP <span class=\"token operator\">||</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>PTE_SYSCALL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pp <span class=\"token operator\">=</span> <span class=\"token function\">page_alloc</span><span class=\"token punctuation\">(</span>ALLOC_ZERO<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_NO_MEM<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">page_insert</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> pp<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">page_free</span><span class=\"token punctuation\">(</span>pp<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_page_alloc not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":924,"column":1,"offset":32460},"end":{"line":971,"column":4,"offset":34111},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后是","position":{"start":{"line":973,"column":1,"offset":34113},"end":{"line":973,"column":4,"offset":34116},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_page_map</code>","position":{"start":{"line":973,"column":4,"offset":34116},"end":{"line":973,"column":18,"offset":34130},"indent":[]}},{"type":"text","value":"：","position":{"start":{"line":973,"column":18,"offset":34130},"end":{"line":973,"column":19,"offset":34131},"indent":[]}}],"position":{"start":{"line":973,"column":1,"offset":34113},"end":{"line":973,"column":19,"offset":34131},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Map the page of memory at 'srcva' in srcenvid's address space</span>\n<span class=\"token comment\">// at 'dstva' in dstenvid's address space with permission 'perm'.</span>\n<span class=\"token comment\">// Perm has the same restrictions as in sys_page_alloc, except</span>\n<span class=\"token comment\">// that it also must not grant write access to a read-only</span>\n<span class=\"token comment\">// page.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return 0 on success, &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_BAD_ENV if srcenvid and/or dstenvid doesn't currently exist,</span>\n<span class=\"token comment\">//\t\tor the caller doesn't have permission to change one of them.</span>\n<span class=\"token comment\">//\t-E_INVAL if srcva >= UTOP or srcva is not page-aligned,</span>\n<span class=\"token comment\">//\t\tor dstva >= UTOP or dstva is not page-aligned.</span>\n<span class=\"token comment\">//\t-E_INVAL is srcva is not mapped in srcenvid's address space.</span>\n<span class=\"token comment\">//\t-E_INVAL if perm is inappropriate (see sys_page_alloc).</span>\n<span class=\"token comment\">//\t-E_INVAL if (perm &amp; PTE_W), but srcva is read-only in srcenvid's</span>\n<span class=\"token comment\">//\t\taddress space.</span>\n<span class=\"token comment\">//\t-E_NO_MEM if there's no memory to allocate any necessary page tables.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_page_map</span><span class=\"token punctuation\">(</span>envid_t srcenvid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>srcva<span class=\"token punctuation\">,</span>\n\t     envid_t dstenvid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dstva<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Hint: This function is a wrapper around page_lookup() and</span>\n\t<span class=\"token comment\">//   page_insert() from kern/pmap.c.</span>\n\t<span class=\"token comment\">//   Again, most of the new code you write should be to check the</span>\n\t<span class=\"token comment\">//   parameters for correctness.</span>\n\t<span class=\"token comment\">//   Use the third argument to page_lookup() to</span>\n\t<span class=\"token comment\">//   check the current permissions on the page.</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>srce <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>dste <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>pp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tpte_t <span class=\"token operator\">*</span>src_pte <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>srcenvid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>srce<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>dstenvid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>dste<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>srcva <span class=\"token operator\">>=</span> UTOP <span class=\"token operator\">||</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>srcva<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>srcva<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>dstva <span class=\"token operator\">>=</span> UTOP <span class=\"token operator\">||</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>dstva<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>dstva<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>PTE_SYSCALL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pp <span class=\"token operator\">=</span> <span class=\"token function\">page_lookup</span><span class=\"token punctuation\">(</span>srce<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> srcva<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>src_pte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>src_pte <span class=\"token operator\">&amp;</span> PTE_W<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> PTE_W<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">page_insert</span><span class=\"token punctuation\">(</span>dste<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> pp<span class=\"token punctuation\">,</span> dstva<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_page_map not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":975,"column":1,"offset":34133},"end":{"line":1030,"column":4,"offset":36239},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"最后是","position":{"start":{"line":1032,"column":1,"offset":36241},"end":{"line":1032,"column":4,"offset":36244},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_page_unmap</code>","position":{"start":{"line":1032,"column":4,"offset":36244},"end":{"line":1032,"column":20,"offset":36260},"indent":[]}},{"type":"text","value":"：","position":{"start":{"line":1032,"column":20,"offset":36260},"end":{"line":1032,"column":21,"offset":36261},"indent":[]}}],"position":{"start":{"line":1032,"column":1,"offset":36241},"end":{"line":1032,"column":21,"offset":36261},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Unmap the page of memory at 'va' in the address space of 'envid'.</span>\n<span class=\"token comment\">// If no page is mapped, the function silently succeeds.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Return 0 on success, &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_BAD_ENV if environment envid doesn't currently exist,</span>\n<span class=\"token comment\">//\t\tor the caller doesn't have permission to change envid.</span>\n<span class=\"token comment\">//\t-E_INVAL if va >= UTOP, or va is not page-aligned.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_page_unmap</span><span class=\"token punctuation\">(</span>envid_t envid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Hint: This function is a wrapper around page_remove().</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>va <span class=\"token operator\">>=</span> UTOP <span class=\"token operator\">||</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">page_remove</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_page_unmap not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1034,"column":1,"offset":36263},"end":{"line":1059,"column":4,"offset":37035},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"最后把这些system call都放到","position":{"start":{"line":1061,"column":1,"offset":37037},"end":{"line":1061,"column":20,"offset":37056},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">syscall()</code>","position":{"start":{"line":1061,"column":20,"offset":37056},"end":{"line":1061,"column":31,"offset":37067},"indent":[]}},{"type":"text","value":"函数：","position":{"start":{"line":1061,"column":31,"offset":37067},"end":{"line":1061,"column":34,"offset":37070},"indent":[]}}],"position":{"start":{"line":1061,"column":1,"offset":37037},"end":{"line":1061,"column":34,"offset":37070},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Dispatches to the correct kernel function, passing the arguments.</span>\nint32_t\n<span class=\"token function\">syscall</span><span class=\"token punctuation\">(</span>uint32_t syscallno<span class=\"token punctuation\">,</span> uint32_t a1<span class=\"token punctuation\">,</span> uint32_t a2<span class=\"token punctuation\">,</span> uint32_t a3<span class=\"token punctuation\">,</span> uint32_t a4<span class=\"token punctuation\">,</span> uint32_t a5<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// Call the function corresponding to the 'syscallno' parameter.</span>\n\t<span class=\"token comment\">// Return any appropriate return value.</span>\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\t<span class=\"token comment\">// panic(\"syscall not implemented\");</span>\n\t<span class=\"token keyword\">switch</span> <span class=\"token punctuation\">(</span>syscallno<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">case</span> SYS_cputs<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">sys_cputs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>size_t<span class=\"token punctuation\">)</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_cgetc<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_cgetc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_getenvid<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_getenvid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_env_destroy<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_env_destroy</span><span class=\"token punctuation\">(</span><span class=\"token function\">sys_getenvid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_yield<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_page_alloc<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>envid_t<span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a3<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_page_map<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_page_map</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>envid_t<span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a2<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>envid_t<span class=\"token punctuation\">)</span>a3<span class=\"token punctuation\">,</span> \n\t\t\t                    <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a4<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a5<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_page_unmap<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_page_unmap</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>envid_t<span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_exofork<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_exofork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">case</span> SYS_env_set_status<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token function\">sys_env_set_status</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>envid_t<span class=\"token punctuation\">)</span>a1<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>a2<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">default</span><span class=\"token operator\">:</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1063,"column":1,"offset":37072},"end":{"line":1100,"column":4,"offset":38162},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后就可以运行","position":{"start":{"line":1102,"column":1,"offset":38164},"end":{"line":1102,"column":8,"offset":38171},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">make grade</code>","position":{"start":{"line":1102,"column":8,"offset":38171},"end":{"line":1102,"column":20,"offset":38183},"indent":[]}},{"type":"text","value":"了：","position":{"start":{"line":1102,"column":20,"offset":38183},"end":{"line":1102,"column":22,"offset":38185},"indent":[]}}],"position":{"start":{"line":1102,"column":1,"offset":38164},"end":{"line":1102,"column":22,"offset":38185},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> grade\n<span class=\"token punctuation\">..</span>.\ndumbfork: OK <span class=\"token punctuation\">(</span>1.1s<span class=\"token punctuation\">)</span>\nPart A score: 5/5</code></pre></div>","position":{"start":{"line":1104,"column":1,"offset":38187},"end":{"line":1109,"column":4,"offset":38253},"indent":[1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Part B: Copy-on-Write Fork","position":{"start":{"line":1111,"column":4,"offset":38258},"end":{"line":1111,"column":30,"offset":38284},"indent":[]}}],"position":{"start":{"line":1111,"column":1,"offset":38255},"end":{"line":1111,"column":30,"offset":38284},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"xv6中实现的","position":{"start":{"line":1113,"column":1,"offset":38286},"end":{"line":1113,"column":8,"offset":38293},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fork()</code>","position":{"start":{"line":1113,"column":8,"offset":38293},"end":{"line":1113,"column":16,"offset":38301},"indent":[]}},{"type":"text","value":"就是基本上和","position":{"start":{"line":1113,"column":16,"offset":38301},"end":{"line":1113,"column":22,"offset":38307},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">dumbfork()</code>","position":{"start":{"line":1113,"column":22,"offset":38307},"end":{"line":1113,"column":34,"offset":38319},"indent":[]}},{"type":"text","value":"一样的，把parent的address space复制到child。而这个赋值操作也就是","position":{"start":{"line":1113,"column":34,"offset":38319},"end":{"line":1113,"column":78,"offset":38363},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fork</code>","position":{"start":{"line":1113,"column":78,"offset":38363},"end":{"line":1113,"column":84,"offset":38369},"indent":[]}},{"type":"text","value":"开销最大的地方。","position":{"start":{"line":1113,"column":84,"offset":38369},"end":{"line":1113,"column":92,"offset":38377},"indent":[]}}],"position":{"start":{"line":1113,"column":1,"offset":38286},"end":{"line":1113,"column":92,"offset":38377},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"然而，很多时候","position":{"start":{"line":1115,"column":1,"offset":38379},"end":{"line":1115,"column":8,"offset":38386},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fork</code>","position":{"start":{"line":1115,"column":8,"offset":38386},"end":{"line":1115,"column":14,"offset":38392},"indent":[]}},{"type":"text","value":"后面都直接会跟着","position":{"start":{"line":1115,"column":14,"offset":38392},"end":{"line":1115,"column":22,"offset":38400},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">exec</code>","position":{"start":{"line":1115,"column":22,"offset":38400},"end":{"line":1115,"column":28,"offset":38406},"indent":[]}},{"type":"text","value":"，那么这个复制就显得很浪费了。","position":{"start":{"line":1115,"column":28,"offset":38406},"end":{"line":1115,"column":43,"offset":38421},"indent":[]}}],"position":{"start":{"line":1115,"column":1,"offset":38379},"end":{"line":1115,"column":43,"offset":38421},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"基于这个原因，Unix的后续版本利用virtual memory hardware来允许parent和child共享内存，直到某一个进行修改内存。这个技术被称为","position":{"start":{"line":1117,"column":1,"offset":38423},"end":{"line":1117,"column":81,"offset":38503},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"copy-on-write","position":{"start":{"line":1117,"column":82,"offset":38504},"end":{"line":1117,"column":95,"offset":38517},"indent":[]}}],"position":{"start":{"line":1117,"column":81,"offset":38503},"end":{"line":1117,"column":96,"offset":38518},"indent":[]}},{"type":"text","value":"。为了达到这一目的，","position":{"start":{"line":1117,"column":96,"offset":38518},"end":{"line":1117,"column":106,"offset":38528},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fork</code>","position":{"start":{"line":1117,"column":106,"offset":38528},"end":{"line":1117,"column":112,"offset":38534},"indent":[]}},{"type":"text","value":"的时候系统复制的时候address space ","position":{"start":{"line":1117,"column":112,"offset":38534},"end":{"line":1117,"column":136,"offset":38558},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"mappings","position":{"start":{"line":1117,"column":137,"offset":38559},"end":{"line":1117,"column":145,"offset":38567},"indent":[]}}],"position":{"start":{"line":1117,"column":136,"offset":38558},"end":{"line":1117,"column":146,"offset":38568},"indent":[]}},{"type":"text","value":" 而不是page里具体的内容，并标记这些page为read-only。当任意一个进程进行写入的时候就会触发page fault，这时在给这个出发了fault的进程分配一个new, private, writable copy of the page。这样直到写入才会真正进行复制，从而使得","position":{"start":{"line":1117,"column":146,"offset":38568},"end":{"line":1117,"column":290,"offset":38712},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fork</code>","position":{"start":{"line":1117,"column":290,"offset":38712},"end":{"line":1117,"column":296,"offset":38718},"indent":[]}},{"type":"text","value":"之后直接","position":{"start":{"line":1117,"column":296,"offset":38718},"end":{"line":1117,"column":300,"offset":38722},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">exec</code>","position":{"start":{"line":1117,"column":300,"offset":38722},"end":{"line":1117,"column":306,"offset":38728},"indent":[]}},{"type":"text","value":"的开销小了很多：child很可能只需要复制1个page（the current page of its stack，这个没明白...）","position":{"start":{"line":1117,"column":306,"offset":38728},"end":{"line":1117,"column":373,"offset":38795},"indent":[]}}],"position":{"start":{"line":1117,"column":1,"offset":38423},"end":{"line":1117,"column":373,"offset":38795},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们接下来就来实现","position":{"start":{"line":1119,"column":1,"offset":38797},"end":{"line":1119,"column":10,"offset":38806},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"copy-on-wirte","position":{"start":{"line":1119,"column":11,"offset":38807},"end":{"line":1119,"column":24,"offset":38820},"indent":[]}}],"position":{"start":{"line":1119,"column":10,"offset":38806},"end":{"line":1119,"column":25,"offset":38821},"indent":[]}},{"type":"text","value":" ","position":{"start":{"line":1119,"column":25,"offset":38821},"end":{"line":1119,"column":26,"offset":38822},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fork</code>","position":{"start":{"line":1119,"column":26,"offset":38822},"end":{"line":1119,"column":32,"offset":38828},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":1119,"column":32,"offset":38828},"end":{"line":1119,"column":33,"offset":38829},"indent":[]}}],"position":{"start":{"line":1119,"column":1,"offset":38797},"end":{"line":1119,"column":33,"offset":38829},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"User-level page fault handling","position":{"start":{"line":1121,"column":5,"offset":38835},"end":{"line":1121,"column":35,"offset":38865},"indent":[]}}],"position":{"start":{"line":1121,"column":1,"offset":38831},"end":{"line":1121,"column":35,"offset":38865},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"一个user-level copy-on-write ","position":{"start":{"line":1123,"column":1,"offset":38867},"end":{"line":1123,"column":28,"offset":38894},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fork</code>","position":{"start":{"line":1123,"column":28,"offset":38894},"end":{"line":1123,"column":34,"offset":38900},"indent":[]}},{"type":"text","value":"需要获取在write-protected pages上的page faults。注意copy-on-write只是user-level page fault handling的众多应用之一。","position":{"start":{"line":1123,"column":34,"offset":38900},"end":{"line":1123,"column":129,"offset":38995},"indent":[]}}],"position":{"start":{"line":1123,"column":1,"offset":38867},"end":{"line":1123,"column":129,"offset":38995},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"创建一个address space然后用page faults来进行后续操作是非常常见的。如大多数Unix kernel最开始都只会分配1个page作为stack，之后随着需求再扩增（lazy allocation）。一个典型的Unix kernel需要keep track of what action to take when a page fault occers in each ","position":{"start":{"line":1125,"column":1,"offset":38997},"end":{"line":1125,"column":195,"offset":39191},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"region","position":{"start":{"line":1125,"column":196,"offset":39192},"end":{"line":1125,"column":202,"offset":39198},"indent":[]}}],"position":{"start":{"line":1125,"column":195,"offset":39191},"end":{"line":1125,"column":203,"offset":39199},"indent":[]}},{"type":"text","value":" of a process's space.比如说，再stack触法的一般会需要分配并映射一个新的physical page，在BSS（存储未初始化全局变量的segment）中的往往需要分配一个新的page，全部填充为0，然后再映射。在ystem with demand-paged executables（这啥...），在text region触法的会从硬盘读入对应page的binary，并进行映射。","position":{"start":{"line":1125,"column":203,"offset":39199},"end":{"line":1125,"column":405,"offset":39401},"indent":[]}}],"position":{"start":{"line":1125,"column":1,"offset":38997},"end":{"line":1125,"column":405,"offset":39401},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"kernel需要track很多信息。于其采用传统Unix的方法，我们将在user space里面决定不同的page fault要做什么，这样bugs are less damaging。这种设计让应用定义其内存区域的自动度更大了：我们将在后续的disk-based file system中使用user-level page fault handling。","position":{"start":{"line":1127,"column":1,"offset":39403},"end":{"line":1127,"column":179,"offset":39581},"indent":[]}}],"position":{"start":{"line":1127,"column":1,"offset":39403},"end":{"line":1127,"column":179,"offset":39581},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Setting the Page Fault Handler","position":{"start":{"line":1129,"column":5,"offset":39587},"end":{"line":1129,"column":35,"offset":39617},"indent":[]}}],"position":{"start":{"line":1129,"column":1,"offset":39583},"end":{"line":1129,"column":35,"offset":39617},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"为了handle自己的page fault，一个用户环境需要在JOS kernel中注册一个","position":{"start":{"line":1131,"column":1,"offset":39619},"end":{"line":1131,"column":47,"offset":39665},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"page fault handler entrypoint","position":{"start":{"line":1131,"column":48,"offset":39666},"end":{"line":1131,"column":77,"offset":39695},"indent":[]}}],"position":{"start":{"line":1131,"column":47,"offset":39665},"end":{"line":1131,"column":78,"offset":39696},"indent":[]}},{"type":"text","value":"。用户环境会用","position":{"start":{"line":1131,"column":78,"offset":39696},"end":{"line":1131,"column":85,"offset":39703},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_env_set_pgfault_upcall</code>","position":{"start":{"line":1131,"column":85,"offset":39703},"end":{"line":1131,"column":113,"offset":39731},"indent":[]}},{"type":"text","value":"这个system call来注册其page fault entrypoint。我们已经在","position":{"start":{"line":1131,"column":113,"offset":39731},"end":{"line":1131,"column":157,"offset":39775},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Env</code>","position":{"start":{"line":1131,"column":157,"offset":39775},"end":{"line":1131,"column":162,"offset":39780},"indent":[]}},{"type":"text","value":"中加入了","position":{"start":{"line":1131,"column":162,"offset":39780},"end":{"line":1131,"column":166,"offset":39784},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_pgfault_upcall</code>","position":{"start":{"line":1131,"column":166,"offset":39784},"end":{"line":1131,"column":186,"offset":39804},"indent":[]}},{"type":"text","value":"来进行记录了。","position":{"start":{"line":1131,"column":186,"offset":39804},"end":{"line":1131,"column":193,"offset":39811},"indent":[]}}],"position":{"start":{"line":1131,"column":1,"offset":39619},"end":{"line":1131,"column":193,"offset":39811},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 8","position":{"start":{"line":1133,"column":5,"offset":39817},"end":{"line":1133,"column":15,"offset":39827},"indent":[]}}],"position":{"start":{"line":1133,"column":1,"offset":39813},"end":{"line":1133,"column":15,"offset":39827},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"实现","position":{"start":{"line":1135,"column":1,"offset":39829},"end":{"line":1135,"column":3,"offset":39831},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_env_set_pgfault_upcall</code>","position":{"start":{"line":1135,"column":3,"offset":39831},"end":{"line":1135,"column":31,"offset":39859},"indent":[]}},{"type":"text","value":"。注意在查询environment id的时候要进行permission checking(对应参数设为1)，因为这是一个很危险的system call。","position":{"start":{"line":1135,"column":31,"offset":39859},"end":{"line":1135,"column":108,"offset":39936},"indent":[]}}],"position":{"start":{"line":1135,"column":1,"offset":39829},"end":{"line":1135,"column":108,"offset":39936},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Set the page fault upcall for 'envid' by modifying the corresponding struct</span>\n<span class=\"token comment\">// Env's 'env_pgfault_upcall' field.  When 'envid' causes a page fault, the</span>\n<span class=\"token comment\">// kernel will push a fault record onto the exception stack, then branch to</span>\n<span class=\"token comment\">// 'func'.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns 0 on success, &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_BAD_ENV if environment envid doesn't currently exist,</span>\n<span class=\"token comment\">//\t\tor the caller doesn't have permission to change envid.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_env_set_pgfault_upcall</span><span class=\"token punctuation\">(</span>envid_t envid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>func<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_pgfault_upcall <span class=\"token operator\">=</span> func<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_env_set_pgfault_upcall not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1137,"column":1,"offset":39938},"end":{"line":1159,"column":4,"offset":40641},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Normal and Exception Stacks in User Environments","position":{"start":{"line":1161,"column":5,"offset":40647},"end":{"line":1161,"column":53,"offset":40695},"indent":[]}}],"position":{"start":{"line":1161,"column":1,"offset":40643},"end":{"line":1161,"column":53,"offset":40695},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在正常(normal)的执行过程中，JOS的一个用户环境会正常地运行在user stack上：其","position":{"start":{"line":1163,"column":1,"offset":40697},"end":{"line":1163,"column":49,"offset":40745},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ESP</code>","position":{"start":{"line":1163,"column":49,"offset":40745},"end":{"line":1163,"column":54,"offset":40750},"indent":[]}},{"type":"text","value":"寄存器最开始会为","position":{"start":{"line":1163,"column":54,"offset":40750},"end":{"line":1163,"column":62,"offset":40758},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">USTACKTOP</code>","position":{"start":{"line":1163,"column":62,"offset":40758},"end":{"line":1163,"column":73,"offset":40769},"indent":[]}},{"type":"text","value":"，且其栈的数据会在","position":{"start":{"line":1163,"column":73,"offset":40769},"end":{"line":1163,"column":82,"offset":40778},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">USTACKTOP-PGSIZE</code>","position":{"start":{"line":1163,"column":82,"offset":40778},"end":{"line":1163,"column":100,"offset":40796},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":1163,"column":100,"offset":40796},"end":{"line":1163,"column":101,"offset":40797},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">USTACKTOP-1</code>","position":{"start":{"line":1163,"column":101,"offset":40797},"end":{"line":1163,"column":114,"offset":40810},"indent":[]}},{"type":"text","value":"之间。然而，当发生了page fault的时候，kernel会重启用户环境，让其运行a designated user-level page fault handler在一个不同的stack上——","position":{"start":{"line":1163,"column":114,"offset":40810},"end":{"line":1163,"column":212,"offset":40908},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"user exception","position":{"start":{"line":1163,"column":213,"offset":40909},"end":{"line":1163,"column":227,"offset":40923},"indent":[]}}],"position":{"start":{"line":1163,"column":212,"offset":40908},"end":{"line":1163,"column":228,"offset":40924},"indent":[]}},{"type":"text","value":" stack。本质上，我们需要让JOS代表用户环境实现这个自动的\"stack switch\"，和x86处理器代表JOS从user mode转换到kernel mode一样。","position":{"start":{"line":1163,"column":228,"offset":40924},"end":{"line":1163,"column":314,"offset":41010},"indent":[]}}],"position":{"start":{"line":1163,"column":1,"offset":40697},"end":{"line":1163,"column":314,"offset":41010},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"JOS的user exception stack也是1 page大，在","position":{"start":{"line":1165,"column":1,"offset":41012},"end":{"line":1165,"column":36,"offset":41047},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">UXSTACKTOP-PGSIZE</code>","position":{"start":{"line":1165,"column":36,"offset":41047},"end":{"line":1165,"column":55,"offset":41066},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":1165,"column":55,"offset":41066},"end":{"line":1165,"column":56,"offset":41067},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">USTACKTOP-1</code>","position":{"start":{"line":1165,"column":56,"offset":41067},"end":{"line":1165,"column":69,"offset":41080},"indent":[]}},{"type":"text","value":"之间。当在这个栈上运行的时候，user-level page fault handler可以用JOS的regular system call来映射新page或解决page fault对应的问题。然后通过一个assemble language stub，user-level page fault handler 返回到origin stack的错误代码处。","position":{"start":{"line":1165,"column":69,"offset":41080},"end":{"line":1165,"column":247,"offset":41258},"indent":[]}}],"position":{"start":{"line":1165,"column":1,"offset":41012},"end":{"line":1165,"column":247,"offset":41258},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"每个想要支持user-level page fault handling的用户环境都需要使用","position":{"start":{"line":1167,"column":1,"offset":41260},"end":{"line":1167,"column":47,"offset":41306},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys-page_alloc()</code>","position":{"start":{"line":1167,"column":47,"offset":41306},"end":{"line":1167,"column":65,"offset":41324},"indent":[]}},{"type":"text","value":"来给其exception stack分配内存。","position":{"start":{"line":1167,"column":65,"offset":41324},"end":{"line":1167,"column":88,"offset":41347},"indent":[]}}],"position":{"start":{"line":1167,"column":1,"offset":41260},"end":{"line":1167,"column":88,"offset":41347},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Invoking the User Page Fault Handler","position":{"start":{"line":1169,"column":5,"offset":41353},"end":{"line":1169,"column":41,"offset":41389},"indent":[]}}],"position":{"start":{"line":1169,"column":1,"offset":41349},"end":{"line":1169,"column":41,"offset":41389},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们将需要改变","position":{"start":{"line":1171,"column":1,"offset":41391},"end":{"line":1171,"column":8,"offset":41398},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/trap.c</code>","position":{"start":{"line":1171,"column":8,"offset":41398},"end":{"line":1171,"column":21,"offset":41411},"indent":[]}},{"type":"text","value":"中的page fault handling code以按照如下方法在user mode处理page fault。我们将把fault出现了时候的用户环境的状态称为","position":{"start":{"line":1171,"column":21,"offset":41411},"end":{"line":1171,"column":101,"offset":41491},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"trap-time","position":{"start":{"line":1171,"column":102,"offset":41492},"end":{"line":1171,"column":111,"offset":41501},"indent":[]}}],"position":{"start":{"line":1171,"column":101,"offset":41491},"end":{"line":1171,"column":112,"offset":41502},"indent":[]}},{"type":"text","value":" state。","position":{"start":{"line":1171,"column":112,"offset":41502},"end":{"line":1171,"column":119,"offset":41509},"indent":[]}}],"position":{"start":{"line":1171,"column":1,"offset":41391},"end":{"line":1171,"column":119,"offset":41509},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"如果没有注册page fault handler，JOS会和以前一样destroy the user environment。如若不然，kernel会在exception stack上创建一个类似于","position":{"start":{"line":1173,"column":1,"offset":41511},"end":{"line":1173,"column":100,"offset":41610},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">inc/trap.h</code>","position":{"start":{"line":1173,"column":100,"offset":41610},"end":{"line":1173,"column":112,"offset":41622},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":1173,"column":112,"offset":41622},"end":{"line":1173,"column":114,"offset":41624},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">struct UTrapframe</code>","position":{"start":{"line":1173,"column":114,"offset":41624},"end":{"line":1173,"column":133,"offset":41643},"indent":[]}},{"type":"text","value":"的trap frame。","position":{"start":{"line":1173,"column":133,"offset":41643},"end":{"line":1173,"column":145,"offset":41655},"indent":[]}}],"position":{"start":{"line":1173,"column":1,"offset":41511},"end":{"line":1173,"column":145,"offset":41655},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">                    &lt;-- UXSTACKTOP\ntrap-time esp\ntrap-time eflags\ntrap-time eip\ntrap-time eax       start of struct PushRegs\ntrap-time ecx\ntrap-time edx\ntrap-time ebx\ntrap-time esp\ntrap-time ebp\ntrap-time esi\ntrap-time edi       end of struct PushRegs\ntf_err (error code)\nfault_va            &lt;-- %esp when handler is run</code></pre></div>","position":{"start":{"line":1175,"column":1,"offset":41657},"end":{"line":1190,"column":4,"offset":41985},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">UTrapframe</code>","position":{"start":{"line":1192,"column":1,"offset":41987},"end":{"line":1192,"column":13,"offset":41999},"indent":[]}},{"type":"text","value":"的结构如下：","position":{"start":{"line":1192,"column":13,"offset":41999},"end":{"line":1192,"column":19,"offset":42005},"indent":[]}}],"position":{"start":{"line":1192,"column":1,"offset":41987},"end":{"line":1192,"column":19,"offset":42005},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">/* information about the fault */</span>\n\tuint32_t utf_fault_va<span class=\"token punctuation\">;</span>\t<span class=\"token comment\">/* va for T_PGFLT, 0 otherwise */</span>\n\tuint32_t utf_err<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* trap-time return state */</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PushRegs</span> utf_regs<span class=\"token punctuation\">;</span>\n\tuintptr_t utf_eip<span class=\"token punctuation\">;</span>\n\tuint32_t utf_eflags<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">/* the trap-time stack to return to */</span>\n\tuintptr_t utf_esp<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token function\">__attribute__</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>packed<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1194,"column":1,"offset":42007},"end":{"line":1206,"column":4,"offset":42333},"indent":[1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"kernel之后会用这个stack和page fault handler来让user environment继续运行。注意，","position":{"start":{"line":1208,"column":1,"offset":42335},"end":{"line":1208,"column":63,"offset":42397},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">fault_va</code>","position":{"start":{"line":1208,"column":63,"offset":42397},"end":{"line":1208,"column":73,"offset":42407},"indent":[]}},{"type":"text","value":"就是出了错误的VA。","position":{"start":{"line":1208,"column":73,"offset":42407},"end":{"line":1208,"column":83,"offset":42417},"indent":[]}}],"position":{"start":{"line":1208,"column":1,"offset":42335},"end":{"line":1208,"column":83,"offset":42417},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"如果用户环境已经运行在exception stack的情况下出现了要给exception，那么说明page fault handler出错了。这种情况下，会在现在的","position":{"start":{"line":1210,"column":1,"offset":42419},"end":{"line":1210,"column":83,"offset":42501},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">tf-&gt;tf_esp</code>","position":{"start":{"line":1210,"column":83,"offset":42501},"end":{"line":1210,"column":95,"offset":42513},"indent":[]}},{"type":"text","value":"下重新创建一个stack frame。我们需要先放入一个空的32-bit word，然后创建一个","position":{"start":{"line":1210,"column":95,"offset":42513},"end":{"line":1210,"column":143,"offset":42561},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">struct UTrapframe</code>","position":{"start":{"line":1210,"column":143,"offset":42561},"end":{"line":1210,"column":162,"offset":42580},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":1210,"column":162,"offset":42580},"end":{"line":1210,"column":163,"offset":42581},"indent":[]}}],"position":{"start":{"line":1210,"column":1,"offset":42419},"end":{"line":1210,"column":163,"offset":42581},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们可以通过检查","position":{"start":{"line":1212,"column":1,"offset":42583},"end":{"line":1212,"column":9,"offset":42591},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">tf-&gt;tf_esp</code>","position":{"start":{"line":1212,"column":9,"offset":42591},"end":{"line":1212,"column":21,"offset":42603},"indent":[]}},{"type":"text","value":"是否在","position":{"start":{"line":1212,"column":21,"offset":42603},"end":{"line":1212,"column":24,"offset":42606},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">UXSTACKTOP-PGSIZE</code>","position":{"start":{"line":1212,"column":24,"offset":42606},"end":{"line":1212,"column":43,"offset":42625},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":1212,"column":43,"offset":42625},"end":{"line":1212,"column":44,"offset":42626},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">USTACKTOP-1</code>","position":{"start":{"line":1212,"column":44,"offset":42626},"end":{"line":1212,"column":57,"offset":42639},"indent":[]}},{"type":"text","value":"之间来判断是不是已经在exception stack上了。","position":{"start":{"line":1212,"column":57,"offset":42639},"end":{"line":1212,"column":86,"offset":42668},"indent":[]}}],"position":{"start":{"line":1212,"column":1,"offset":42583},"end":{"line":1212,"column":86,"offset":42668},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 9","position":{"start":{"line":1214,"column":5,"offset":42674},"end":{"line":1214,"column":15,"offset":42684},"indent":[]}}],"position":{"start":{"line":1214,"column":1,"offset":42670},"end":{"line":1214,"column":15,"offset":42684},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"实现","position":{"start":{"line":1216,"column":1,"offset":42686},"end":{"line":1216,"column":3,"offset":42688},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/trap.c</code>","position":{"start":{"line":1216,"column":3,"offset":42688},"end":{"line":1216,"column":16,"offset":42701},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":1216,"column":16,"offset":42701},"end":{"line":1216,"column":18,"offset":42703},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">page_fault_handler</code>","position":{"start":{"line":1216,"column":18,"offset":42703},"end":{"line":1216,"column":38,"offset":42723},"indent":[]}},{"type":"text","value":"。如果exception stack runs out of space了怎么办？","position":{"start":{"line":1216,"column":38,"offset":42723},"end":{"line":1216,"column":79,"offset":42764},"indent":[]}}],"position":{"start":{"line":1216,"column":1,"offset":42686},"end":{"line":1216,"column":79,"offset":42764},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">page_fault_handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">Trapframe</span> <span class=\"token operator\">*</span>tf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tuint32_t fault_va<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Read processor's CR2 register to find the faulting address</span>\n\tfault_va <span class=\"token operator\">=</span> <span class=\"token function\">rcr2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Handle kernel-mode page faults.</span>\n\n\t<span class=\"token comment\">// LAB 3: Your code here.</span>\n\n\t<span class=\"token comment\">// We've already handled kernel-mode exceptions, so if we get here,</span>\n\t<span class=\"token comment\">// the page fault happened in user mode.</span>\n\n\t<span class=\"token comment\">// Call the environment's page fault upcall, if one exists.  Set up a</span>\n\t<span class=\"token comment\">// page fault stack frame on the user exception stack (below</span>\n\t<span class=\"token comment\">// UXSTACKTOP), then branch to curenv->env_pgfault_upcall.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// The page fault upcall might cause another page fault, in which case</span>\n\t<span class=\"token comment\">// we branch to the page fault upcall recursively, pushing another</span>\n\t<span class=\"token comment\">// page fault stack frame on top of the user exception stack.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// It is convenient for our code which returns from a page fault</span>\n\t<span class=\"token comment\">// (lib/pfentry.S) to have one word of scratch space at the top of the</span>\n\t<span class=\"token comment\">// trap-time stack; it allows us to more easily restore the eip/esp. In</span>\n\t<span class=\"token comment\">// the non-recursive case, we don't have to worry about this because</span>\n\t<span class=\"token comment\">// the top of the regular user stack is free.  In the recursive case,</span>\n\t<span class=\"token comment\">// this means we have to leave an extra word between the current top of</span>\n\t<span class=\"token comment\">// the exception stack and the new stack frame because the exception</span>\n\t<span class=\"token comment\">// stack _is_ the trap-time stack.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// If there's no page fault upcall, the environment didn't allocate a</span>\n\t<span class=\"token comment\">// page for its exception stack or can't write to it, or the exception</span>\n\t<span class=\"token comment\">// stack overflows, then destroy the environment that caused the fault.</span>\n\t<span class=\"token comment\">// Note that the grade script assumes you will first check for the page</span>\n\t<span class=\"token comment\">// fault upcall and print the \"user fault va\" message below if there is</span>\n\t<span class=\"token comment\">// none.  The remaining three checks can be combined into a single test.</span>\n\t<span class=\"token comment\">//</span>\n\t<span class=\"token comment\">// Hints:</span>\n\t<span class=\"token comment\">//   user_mem_assert() and env_run() are useful here.</span>\n\t<span class=\"token comment\">//   To change what the user environment runs, modify 'curenv->env_tf'</span>\n\t<span class=\"token comment\">//   (the 'tf' variable points at 'curenv->env_tf').</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\tbool flag <span class=\"token operator\">=</span> true<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_pgfault_upcall <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\tflag <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>fault_va <span class=\"token operator\">&lt;</span> UXSTACKTOP <span class=\"token operator\">&amp;&amp;</span> fault_va <span class=\"token operator\">>=</span> UXSTACKTOP <span class=\"token operator\">-</span> PGSIZE<span class=\"token punctuation\">)</span>\n\t\tflag <span class=\"token operator\">=</span> false<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>flag<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// this makes sure it's from user mode</span>\n\t\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span>utf <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_esp <span class=\"token operator\">&lt;</span> UXSTACKTOP <span class=\"token operator\">&amp;&amp;</span> curenv<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_esp <span class=\"token operator\">>=</span> UXSTACKTOP <span class=\"token operator\">-</span> PGSIZE<span class=\"token punctuation\">)</span>\n\t\t\tutf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_esp <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">-</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span>\n\t\t\tutf <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UXSTACKTOP <span class=\"token operator\">-</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">// check the overflow and write permission</span>\n\t\t<span class=\"token function\">user_mem_assert</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">,</span> utf<span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t\tutf<span class=\"token operator\">-></span>utf_fault_va <span class=\"token operator\">=</span> fault_va<span class=\"token punctuation\">;</span>\n\t\tutf<span class=\"token operator\">-></span>utf_err <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_err<span class=\"token punctuation\">;</span>\n\t\tutf<span class=\"token operator\">-></span>utf_regs <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_regs<span class=\"token punctuation\">;</span>\n\t\tutf<span class=\"token operator\">-></span>utf_eip <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_eip<span class=\"token punctuation\">;</span>\n\t\tutf<span class=\"token operator\">-></span>utf_eflags <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_eflags<span class=\"token punctuation\">;</span>\n\t\tutf<span class=\"token operator\">-></span>utf_esp <span class=\"token operator\">=</span> tf<span class=\"token operator\">-></span>tf_esp<span class=\"token punctuation\">;</span>\n\t\ttf<span class=\"token operator\">-></span>tf_eip <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>curenv<span class=\"token operator\">-></span>env_pgfault_upcall<span class=\"token punctuation\">;</span>\n\t\ttf<span class=\"token operator\">-></span>tf_esp <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uintptr_t<span class=\"token punctuation\">)</span>utf<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">env_run</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">// Destroy the environment that caused the fault.</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"[%08x] user fault va %08x ip %08x\\n\"</span><span class=\"token punctuation\">,</span>\n\t\tcurenv<span class=\"token operator\">-></span>env_id<span class=\"token punctuation\">,</span> fault_va<span class=\"token punctuation\">,</span> tf<span class=\"token operator\">-></span>tf_eip<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">print_trapframe</span><span class=\"token punctuation\">(</span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">env_destroy</span><span class=\"token punctuation\">(</span>curenv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1218,"column":1,"offset":42766},"end":{"line":1294,"column":4,"offset":45790},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"User-mode Page Fault Entrypoint","position":{"start":{"line":1296,"column":5,"offset":45796},"end":{"line":1296,"column":36,"offset":45827},"indent":[]}}],"position":{"start":{"line":1296,"column":1,"offset":45792},"end":{"line":1296,"column":36,"offset":45827},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"Next, you need to implement the assembly routine that will take care of calling the C page fault handler and resume execution at the original faulting instruction. This assembly routine is the handler that will be registered with the kernel using ","position":{"start":{"line":1298,"column":1,"offset":45829},"end":{"line":1298,"column":248,"offset":46076},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_env_set_pgfault_upcall()</code>","position":{"start":{"line":1298,"column":248,"offset":46076},"end":{"line":1298,"column":278,"offset":46106},"indent":[]}},{"type":"text","value":".","position":{"start":{"line":1298,"column":278,"offset":46106},"end":{"line":1298,"column":279,"offset":46107},"indent":[]}}],"position":{"start":{"line":1298,"column":1,"offset":45829},"end":{"line":1298,"column":279,"offset":46107},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 10","position":{"start":{"line":1300,"column":5,"offset":46113},"end":{"line":1300,"column":16,"offset":46124},"indent":[]}}],"position":{"start":{"line":1300,"column":1,"offset":46109},"end":{"line":1300,"column":16,"offset":46124},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"实现","position":{"start":{"line":1302,"column":1,"offset":46126},"end":{"line":1302,"column":3,"offset":46128},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lib/pfentry.S</code>","position":{"start":{"line":1302,"column":3,"offset":46128},"end":{"line":1302,"column":18,"offset":46143},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":1302,"column":18,"offset":46143},"end":{"line":1302,"column":20,"offset":46145},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">_pgfault_upcall</code>","position":{"start":{"line":1302,"column":20,"offset":46145},"end":{"line":1302,"column":37,"offset":46162},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":1302,"column":37,"offset":46162},"end":{"line":1302,"column":38,"offset":46163},"indent":[]}}],"position":{"start":{"line":1302,"column":1,"offset":46126},"end":{"line":1302,"column":38,"offset":46163},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">.text\n.globl _pgfault_upcall\n_pgfault_upcall:\n\t// Call the C page fault handler.\n\tpushl %esp\t\t\t// function argument: pointer to UTF\n\tmovl _pgfault_handler, %eax\n\tcall *%eax\n\taddl $4, %esp\t\t\t// pop function argument\n\t\n\t// Now the C page fault handler has returned and you must return\n\t// to the trap time state.\n\t// Push trap-time %eip onto the trap-time stack.\n\t//\n\t// Explanation:\n\t//   We must prepare the trap-time stack for our eventual return to\n\t//   re-execute the instruction that faulted.\n\t//   Unfortunately, we can&#39;t return directly from the exception stack:\n\t//   We can&#39;t call &#39;jmp&#39;, since that requires that we load the address\n\t//   into a register, and all registers must have their trap-time\n\t//   values after the return.\n\t//   We can&#39;t call &#39;ret&#39; from the exception stack either, since if we\n\t//   did, %esp would have the wrong value.\n\t//   So instead, we push the trap-time %eip onto the *trap-time* stack!\n\t//   Below we&#39;ll switch to that stack and call &#39;ret&#39;, which will\n\t//   restore %eip to its pre-fault value.\n\t//\n\t//   In the case of a recursive fault on the exception stack,\n\t//   note that the word we&#39;re pushing now will fit in the\n\t//   blank word that the kernel reserved for us.\n\t//\n\t// Throughout the remaining code, think carefully about what\n\t// registers are available for intermediate calculations.  You\n\t// may find that you have to rearrange your code in non-obvious\n\t// ways as registers become unavailable as scratch space.\n\t//\n\t// LAB 4: Your code here.\n\tmovl 0x28(%esp), %edx # trap-time eip\n\tsubl $0x4, 0x30(%esp) # we have to use subl now because we can&#39;t use after popfl\n\tmovl 0x30(%esp), %eax # trap-time esp-4\n\tmovl %edx, (%eax)\n\taddl $0x8, %esp\n\n\t// Restore the trap-time registers.  After you do this, you\n\t// can no longer modify any general-purpose registers.\n\t// LAB 4: Your code here.\n\tpopal\n\n\t// Restore eflags from the stack.  After you do this, you can\n\t// no longer use arithmetic operations or anything else that\n\t// modifies eflags.\n\t// LAB 4: Your code here.\n\taddl $0x4, %esp #eip\n\tpopfl\n\n\t// Switch back to the adjusted trap-time stack.\n\t// LAB 4: Your code here.\n\tpopl %esp\n\n\t// Return to re-execute the instruction that faulted.\n\t// LAB 4: Your code here.\n\tret</code></pre></div>","position":{"start":{"line":1304,"column":1,"offset":46165},"end":{"line":1366,"column":4,"offset":48407},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后是完成","position":{"start":{"line":1368,"column":1,"offset":48409},"end":{"line":1368,"column":6,"offset":48414},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lib/pgfault.c</code>","position":{"start":{"line":1368,"column":6,"offset":48414},"end":{"line":1368,"column":21,"offset":48429},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":1368,"column":21,"offset":48429},"end":{"line":1368,"column":23,"offset":48431},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">set_pgfault_handler()</code>","position":{"start":{"line":1368,"column":23,"offset":48431},"end":{"line":1368,"column":46,"offset":48454},"indent":[]}}],"position":{"start":{"line":1368,"column":1,"offset":48409},"end":{"line":1368,"column":46,"offset":48454},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">//</span>\n<span class=\"token comment\">// Set the page fault handler function.</span>\n<span class=\"token comment\">// If there isn't one yet, _pgfault_handler will be 0.</span>\n<span class=\"token comment\">// The first time we register a handler, we need to</span>\n<span class=\"token comment\">// allocate an exception stack (one page of memory with its top</span>\n<span class=\"token comment\">// at UXSTACKTOP), and tell the kernel to call the assembly-language</span>\n<span class=\"token comment\">// _pgfault_upcall routine when a page fault occurs.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">set_pgfault_handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span>utf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>_pgfault_handler <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// First time through!</span>\n\t\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UXSTACKTOP <span class=\"token operator\">-</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_W <span class=\"token operator\">|</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail to allocate exception stack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sys_env_set_pgfault_upcall</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> _pgfault_upcall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token comment\">//panic(\"set_pgfault_handler not implemented\");</span>\n\t<span class=\"token punctuation\">}</span>\n\n\t<span class=\"token comment\">// Save handler pointer for assembly to call.</span>\n\t_pgfault_handler <span class=\"token operator\">=</span> handler<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1370,"column":1,"offset":48456},"end":{"line":1396,"column":4,"offset":49280},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后就是进行测试，我们来一次看这些个测试样例。","position":{"start":{"line":1398,"column":1,"offset":49282},"end":{"line":1398,"column":24,"offset":49305},"indent":[]}}],"position":{"start":{"line":1398,"column":1,"offset":49282},"end":{"line":1398,"column":24,"offset":49305},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"首先是","position":{"start":{"line":1400,"column":1,"offset":49307},"end":{"line":1400,"column":4,"offset":49310},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user_faultread</code>","position":{"start":{"line":1400,"column":4,"offset":49310},"end":{"line":1400,"column":20,"offset":49326},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":1400,"column":20,"offset":49326},"end":{"line":1400,"column":21,"offset":49327},"indent":[]}}],"position":{"start":{"line":1400,"column":1,"offset":49307},"end":{"line":1400,"column":21,"offset":49327},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">umain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I read %08x from location 0!\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">unsigned</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1402,"column":1,"offset":49329},"end":{"line":1408,"column":4,"offset":49434},"indent":[1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"单纯的就是访问了一个没有被分配的内存，没有设置","position":{"start":{"line":1410,"column":1,"offset":49436},"end":{"line":1410,"column":24,"offset":49459},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">_pgfault_upcall</code>","position":{"start":{"line":1410,"column":24,"offset":49459},"end":{"line":1410,"column":41,"offset":49476},"indent":[]}},{"type":"text","value":"，所以直接destroy，输出为：","position":{"start":{"line":1410,"column":41,"offset":49476},"end":{"line":1410,"column":58,"offset":49493},"indent":[]}}],"position":{"start":{"line":1410,"column":1,"offset":49436},"end":{"line":1410,"column":58,"offset":49493},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> run-faultread-nox\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> user fault va 00000000 <span class=\"token function\">ip</span> 00800039\nTRAP frame at 0xf02b0000 from CPU 0\n  edi  0x00000000\n  esi  0x00000000\n  ebp  0xeebfdfd0\n  oesp 0xf0235fdc\n  ebx  0x00000000\n  edx  0x00000000\n  ecx  0x00000000\n  eax  0xeec00000\n  es   0x----0023\n  ds   0x----0023\n  <span class=\"token function\">trap</span> 0x0000000e Page Fault\n  cr2  0x00000000\n  err  0x00000004 <span class=\"token punctuation\">[</span>user, read, not-present<span class=\"token punctuation\">]</span>\n  eip  0x00800039\n  cs   0x----001b\n  flag 0x00000086\n  esp  0xeebfdfc0\n  ss   0x----0023\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\nNo runnable environments <span class=\"token keyword\">in</span> the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>","position":{"start":{"line":1412,"column":1,"offset":49495},"end":{"line":1439,"column":4,"offset":50079},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后是","position":{"start":{"line":1441,"column":1,"offset":50081},"end":{"line":1441,"column":4,"offset":50084},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user_faultdie</code>","position":{"start":{"line":1441,"column":4,"offset":50084},"end":{"line":1441,"column":19,"offset":50099},"indent":[]}},{"type":"text","value":":","position":{"start":{"line":1441,"column":19,"offset":50099},"end":{"line":1441,"column":20,"offset":50100},"indent":[]}}],"position":{"start":{"line":1441,"column":1,"offset":50081},"end":{"line":1441,"column":20,"offset":50100},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span>utf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>utf<span class=\"token operator\">-></span>utf_fault_va<span class=\"token punctuation\">;</span>\n\tuint32_t err <span class=\"token operator\">=</span> utf<span class=\"token operator\">-></span>utf_err<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"i faulted at va %x, err %x\\n\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> err <span class=\"token operator\">&amp;</span> <span class=\"token number\">7</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_env_destroy</span><span class=\"token punctuation\">(</span><span class=\"token function\">sys_getenvid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">umain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">set_pgfault_handler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token operator\">*</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xDeadBeef</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1443,"column":1,"offset":50102},"end":{"line":1459,"column":4,"offset":50406},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"会输出错误地址与错误信息，然后destroy。所以结果是：","position":{"start":{"line":1461,"column":1,"offset":50408},"end":{"line":1461,"column":30,"offset":50437},"indent":[]}}],"position":{"start":{"line":1461,"column":1,"offset":50408},"end":{"line":1461,"column":30,"offset":50437},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> run-faultdie-nox\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\ni faulted at va deadbeef, err 6\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\nNo runnable environments <span class=\"token keyword\">in</span> the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>","position":{"start":{"line":1463,"column":1,"offset":50439},"end":{"line":1472,"column":4,"offset":50641},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后是","position":{"start":{"line":1474,"column":1,"offset":50643},"end":{"line":1474,"column":4,"offset":50646},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user_faultalloc</code>","position":{"start":{"line":1474,"column":4,"offset":50646},"end":{"line":1474,"column":21,"offset":50663},"indent":[]}},{"type":"text","value":"：","position":{"start":{"line":1474,"column":21,"offset":50663},"end":{"line":1474,"column":22,"offset":50664},"indent":[]}}],"position":{"start":{"line":1474,"column":1,"offset":50643},"end":{"line":1474,"column":22,"offset":50664},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span>utf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>utf<span class=\"token operator\">-></span>utf_fault_va<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fault %x\\n\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\tPTE_P<span class=\"token operator\">|</span>PTE_U<span class=\"token operator\">|</span>PTE_W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allocating at %x in page fault handler: %e\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> addr<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"this string was faulted in at %x\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">umain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">set_pgfault_handler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xDeadBeef</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"%s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xCafeBffe</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1476,"column":1,"offset":50666},"end":{"line":1497,"column":4,"offset":51156},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"如果遇到问题，尝试分配一个page，然后输出出错的位置。","position":{"start":{"line":1499,"column":1,"offset":51158},"end":{"line":1499,"column":29,"offset":51186},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">snprintf</code>","position":{"start":{"line":1499,"column":29,"offset":51186},"end":{"line":1499,"column":39,"offset":51196},"indent":[]}},{"type":"text","value":"是把字符串存在对应地址用的。所以输出结果为：","position":{"start":{"line":1499,"column":39,"offset":51196},"end":{"line":1499,"column":61,"offset":51218},"indent":[]}}],"position":{"start":{"line":1499,"column":1,"offset":51158},"end":{"line":1499,"column":61,"offset":51218},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> run-faultalloc-nox\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\nfault deadbeef\nthis string was faulted <span class=\"token keyword\">in</span> at deadbeef\nfault cafebffe\nfault cafec000\nthis string was faulted <span class=\"token keyword\">in</span> at cafebffe\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\nNo runnable environments <span class=\"token keyword\">in</span> the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>","position":{"start":{"line":1501,"column":1,"offset":51220},"end":{"line":1514,"column":4,"offset":51515},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"经过测试可以知道是在进行第二次","position":{"start":{"line":1516,"column":1,"offset":51517},"end":{"line":1516,"column":16,"offset":51532},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">snprintf</code>","position":{"start":{"line":1516,"column":16,"offset":51532},"end":{"line":1516,"column":26,"offset":51542},"indent":[]}},{"type":"text","value":"的时候在exception stack里面又触发了中断。这是因为分配的buffer是100 byte，而","position":{"start":{"line":1516,"column":26,"offset":51542},"end":{"line":1516,"column":78,"offset":51594},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0xcafebffe + 100</code>","position":{"start":{"line":1516,"column":78,"offset":51594},"end":{"line":1516,"column":96,"offset":51612},"indent":[]}},{"type":"text","value":"已经到了下一个page了，所以就需要再进行一次分配。","position":{"start":{"line":1516,"column":96,"offset":51612},"end":{"line":1516,"column":122,"offset":51638},"indent":[]}}],"position":{"start":{"line":1516,"column":1,"offset":51517},"end":{"line":1516,"column":122,"offset":51638},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"最后是","position":{"start":{"line":1518,"column":1,"offset":51640},"end":{"line":1518,"column":4,"offset":51643},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user_faultallocbad</code>","position":{"start":{"line":1518,"column":4,"offset":51643},"end":{"line":1518,"column":24,"offset":51663},"indent":[]}}],"position":{"start":{"line":1518,"column":1,"offset":51640},"end":{"line":1518,"column":24,"offset":51663},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">handler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span>utf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>utf<span class=\"token operator\">-></span>utf_fault_va<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fault %x\\n\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>\n\t\t\t\tPTE_P<span class=\"token operator\">|</span>PTE_U<span class=\"token operator\">|</span>PTE_W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"allocating at %x in page fault handler: %e\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">snprintf</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> addr<span class=\"token punctuation\">,</span> <span class=\"token number\">100</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"this string was faulted in at %x\"</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">umain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token function\">set_pgfault_handler</span><span class=\"token punctuation\">(</span>handler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_cputs</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token number\">0xDEADBEEF</span><span class=\"token punctuation\">,</span> <span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1520,"column":1,"offset":51665},"end":{"line":1540,"column":4,"offset":52115},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"注意和上面的区别是没有使用","position":{"start":{"line":1542,"column":1,"offset":52117},"end":{"line":1542,"column":14,"offset":52130},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cprintf</code>","position":{"start":{"line":1542,"column":14,"offset":52130},"end":{"line":1542,"column":23,"offset":52139},"indent":[]}},{"type":"text","value":"，而是调用了","position":{"start":{"line":1542,"column":23,"offset":52139},"end":{"line":1542,"column":29,"offset":52145},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_cputs</code>","position":{"start":{"line":1542,"column":29,"offset":52145},"end":{"line":1542,"column":40,"offset":52156},"indent":[]}},{"type":"text","value":"这一system call。","position":{"start":{"line":1542,"column":40,"offset":52156},"end":{"line":1542,"column":54,"offset":52170},"indent":[]}}],"position":{"start":{"line":1542,"column":1,"offset":52117},"end":{"line":1542,"column":54,"offset":52170},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">$ make run-faultallocbad-nox\n...\n[00000000] new env 00001000\n[00001000] user_mem_check assertion failure for va deadbeef\n[00001000] free env 00001000\nNo runnable environments in the system!\n...</code></pre></div>","position":{"start":{"line":1544,"column":1,"offset":52172},"end":{"line":1552,"column":4,"offset":52373},"indent":[1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"用","position":{"start":{"line":1554,"column":1,"offset":52375},"end":{"line":1554,"column":2,"offset":52376},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cprintf</code>","position":{"start":{"line":1554,"column":2,"offset":52376},"end":{"line":1554,"column":11,"offset":52385},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":1554,"column":11,"offset":52385},"end":{"line":1554,"column":12,"offset":52386},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_cputs</code>","position":{"start":{"line":1554,"column":12,"offset":52386},"end":{"line":1554,"column":23,"offset":52397},"indent":[]}},{"type":"text","value":"的区别在于，","position":{"start":{"line":1554,"column":23,"offset":52397},"end":{"line":1554,"column":29,"offset":52403},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">cprintf</code>","position":{"start":{"line":1554,"column":29,"offset":52403},"end":{"line":1554,"column":38,"offset":52412},"indent":[]}},{"type":"text","value":"再实现的时候先使用了user lib中的","position":{"start":{"line":1554,"column":38,"offset":52412},"end":{"line":1554,"column":58,"offset":52432},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">vprintfmt</code>","position":{"start":{"line":1554,"column":58,"offset":52432},"end":{"line":1554,"column":69,"offset":52443},"indent":[]}},{"type":"text","value":"，","position":{"start":{"line":1554,"column":69,"offset":52443},"end":{"line":1554,"column":70,"offset":52444},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">vprintfmt</code>","position":{"start":{"line":1554,"column":70,"offset":52444},"end":{"line":1554,"column":81,"offset":52455},"indent":[]}},{"type":"text","value":"会访问","position":{"start":{"line":1554,"column":81,"offset":52455},"end":{"line":1554,"column":84,"offset":52458},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0xdeadbeef</code>","position":{"start":{"line":1554,"column":84,"offset":52458},"end":{"line":1554,"column":96,"offset":52470},"indent":[]}},{"type":"text","value":"里面存储的内容（把内容复制到buffer中），从而在在user mode触法page fault。而直接调用","position":{"start":{"line":1554,"column":96,"offset":52470},"end":{"line":1554,"column":150,"offset":52524},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_cputs</code>","position":{"start":{"line":1554,"column":150,"offset":52524},"end":{"line":1554,"column":161,"offset":52535},"indent":[]}},{"type":"text","value":"会在触法page fault之前触法system call，然后在","position":{"start":{"line":1554,"column":161,"offset":52535},"end":{"line":1554,"column":194,"offset":52568},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_cputs</code>","position":{"start":{"line":1554,"column":194,"offset":52568},"end":{"line":1554,"column":205,"offset":52579},"indent":[]}},{"type":"text","value":"里面的","position":{"start":{"line":1554,"column":205,"offset":52579},"end":{"line":1554,"column":208,"offset":52582},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user_mem_assert</code>","position":{"start":{"line":1554,"column":208,"offset":52582},"end":{"line":1554,"column":225,"offset":52599},"indent":[]}},{"type":"text","value":"会发现这个地址不能访问，从而导致destroy。","position":{"start":{"line":1554,"column":225,"offset":52599},"end":{"line":1554,"column":249,"offset":52623},"indent":[]}}],"position":{"start":{"line":1554,"column":1,"offset":52375},"end":{"line":1554,"column":249,"offset":52623},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Implementing Copy-on-Write Fork","position":{"start":{"line":1556,"column":5,"offset":52629},"end":{"line":1556,"column":36,"offset":52660},"indent":[]}}],"position":{"start":{"line":1556,"column":1,"offset":52625},"end":{"line":1556,"column":36,"offset":52660},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"现在我们来实现copy-on-write fork。其代码在","position":{"start":{"line":1558,"column":1,"offset":52662},"end":{"line":1558,"column":31,"offset":52692},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lib/fork.c</code>","position":{"start":{"line":1558,"column":31,"offset":52692},"end":{"line":1558,"column":43,"offset":52704},"indent":[]}},{"type":"text","value":"，主要的控制流如下：","position":{"start":{"line":1558,"column":43,"offset":52704},"end":{"line":1558,"column":53,"offset":52714},"indent":[]}}],"position":{"start":{"line":1558,"column":1,"offset":52662},"end":{"line":1558,"column":53,"offset":52714},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"parent把","position":{"start":{"line":1560,"column":4,"offset":52719},"end":{"line":1560,"column":11,"offset":52726},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pgfault()</code>","position":{"start":{"line":1560,"column":11,"offset":52726},"end":{"line":1560,"column":22,"offset":52737},"indent":[]}},{"type":"text","value":"作为page fault handler","position":{"start":{"line":1560,"column":22,"offset":52737},"end":{"line":1560,"column":42,"offset":52757},"indent":[]}}],"position":{"start":{"line":1560,"column":4,"offset":52719},"end":{"line":1560,"column":42,"offset":52757},"indent":[]}}],"position":{"start":{"line":1560,"column":1,"offset":52716},"end":{"line":1561,"column":1,"offset":52758},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"parent调用","position":{"start":{"line":1562,"column":4,"offset":52762},"end":{"line":1562,"column":12,"offset":52770},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">set_exofork</code>","position":{"start":{"line":1562,"column":12,"offset":52770},"end":{"line":1562,"column":25,"offset":52783},"indent":[]}},{"type":"text","value":"来创建一个child environment","position":{"start":{"line":1562,"column":25,"offset":52783},"end":{"line":1562,"column":47,"offset":52805},"indent":[]}}],"position":{"start":{"line":1562,"column":4,"offset":52762},"end":{"line":1562,"column":47,"offset":52805},"indent":[]}}],"position":{"start":{"line":1562,"column":1,"offset":52759},"end":{"line":1563,"column":1,"offset":52806},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"对于每个在","position":{"start":{"line":1564,"column":4,"offset":52810},"end":{"line":1564,"column":9,"offset":52815},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">UTOP</code>","position":{"start":{"line":1564,"column":9,"offset":52815},"end":{"line":1564,"column":15,"offset":52821},"indent":[]}},{"type":"text","value":"之下的writable或是copy-on-write page，parent调用","position":{"start":{"line":1564,"column":15,"offset":52821},"end":{"line":1564,"column":55,"offset":52861},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">duppage</code>","position":{"start":{"line":1564,"column":55,"offset":52861},"end":{"line":1564,"column":64,"offset":52870},"indent":[]}},{"type":"text","value":"。其会map这个page到child的对应位置，然后再map到自己的位置，只不过是把权限改为copy-on-write。用","position":{"start":{"line":1564,"column":64,"offset":52870},"end":{"line":1564,"column":125,"offset":52931},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">PTE_COW</code>","position":{"start":{"line":1564,"column":125,"offset":52931},"end":{"line":1564,"column":134,"offset":52940},"indent":[]}},{"type":"text","value":"表示copy-on-write page。","position":{"start":{"line":1564,"column":134,"offset":52940},"end":{"line":1564,"column":155,"offset":52961},"indent":[]}}],"position":{"start":{"line":1564,"column":4,"offset":52810},"end":{"line":1564,"column":155,"offset":52961},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"exception stack不会这样map，child需要重新分配一个新的page作为exception stack，不然就没法正常运行page fault handler了。","position":{"start":{"line":1566,"column":4,"offset":52966},"end":{"line":1566,"column":93,"offset":53055},"indent":[]}}],"position":{"start":{"line":1566,"column":4,"offset":52966},"end":{"line":1566,"column":93,"offset":53055},"indent":[]}}],"position":{"start":{"line":1564,"column":1,"offset":52807},"end":{"line":1567,"column":1,"offset":53056},"indent":[1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"parent重新为child设置page fault entry point","position":{"start":{"line":1568,"column":4,"offset":53060},"end":{"line":1568,"column":42,"offset":53098},"indent":[]}}],"position":{"start":{"line":1568,"column":4,"offset":53060},"end":{"line":1568,"column":42,"offset":53098},"indent":[]}}],"position":{"start":{"line":1568,"column":1,"offset":53057},"end":{"line":1569,"column":1,"offset":53099},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"截止到这个时候，child已经可以运行了，所以parent把child设置为","position":{"start":{"line":1570,"column":4,"offset":53103},"end":{"line":1570,"column":42,"offset":53141},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ENV_RUNNABLE</code>","position":{"start":{"line":1570,"column":42,"offset":53141},"end":{"line":1570,"column":56,"offset":53155},"indent":[]}}],"position":{"start":{"line":1570,"column":4,"offset":53103},"end":{"line":1570,"column":56,"offset":53155},"indent":[]}}],"position":{"start":{"line":1570,"column":1,"offset":53100},"end":{"line":1570,"column":56,"offset":53155},"indent":[]}}],"position":{"start":{"line":1560,"column":1,"offset":52716},"end":{"line":1570,"column":56,"offset":53155},"indent":[1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"每次一个环境访问要向一个copy-on-write page写入的时候就会触法page fault handler，其控制流如下：","position":{"start":{"line":1572,"column":1,"offset":53157},"end":{"line":1572,"column":66,"offset":53222},"indent":[]}}],"position":{"start":{"line":1572,"column":1,"offset":53157},"end":{"line":1572,"column":66,"offset":53222},"indent":[]}},{"type":"list","ordered":true,"start":1,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"kernel通过","position":{"start":{"line":1574,"column":4,"offset":53227},"end":{"line":1574,"column":12,"offset":53235},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">_pgfault_upcall</code>","position":{"start":{"line":1574,"column":12,"offset":53235},"end":{"line":1574,"column":29,"offset":53252},"indent":[]}},{"type":"text","value":"调用","position":{"start":{"line":1574,"column":29,"offset":53252},"end":{"line":1574,"column":31,"offset":53254},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pgfault()</code>","position":{"start":{"line":1574,"column":31,"offset":53254},"end":{"line":1574,"column":42,"offset":53265},"indent":[]}}],"position":{"start":{"line":1574,"column":4,"offset":53227},"end":{"line":1574,"column":42,"offset":53265},"indent":[]}}],"position":{"start":{"line":1574,"column":1,"offset":53224},"end":{"line":1574,"column":42,"offset":53265},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">pgfault</code>","position":{"start":{"line":1575,"column":4,"offset":53269},"end":{"line":1575,"column":13,"offset":53278},"indent":[]}},{"type":"text","value":"检查page fault是否为一个写入，以及page是","position":{"start":{"line":1575,"column":13,"offset":53278},"end":{"line":1575,"column":40,"offset":53305},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">PTE_COW</code>","position":{"start":{"line":1575,"column":40,"offset":53305},"end":{"line":1575,"column":49,"offset":53314},"indent":[]}}],"position":{"start":{"line":1575,"column":4,"offset":53269},"end":{"line":1575,"column":49,"offset":53314},"indent":[]}}],"position":{"start":{"line":1575,"column":1,"offset":53266},"end":{"line":1575,"column":49,"offset":53314},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">pgfault</code>","position":{"start":{"line":1576,"column":4,"offset":53318},"end":{"line":1576,"column":13,"offset":53327},"indent":[]}},{"type":"text","value":"现在一个临时的地方分配一个新的page，然后把需要写入的page的内容复制到这个临时的page中，然后在把临时page map到对应的位置，给予read/write权限。最后unmap这个临时的地方。","position":{"start":{"line":1576,"column":13,"offset":53327},"end":{"line":1576,"column":113,"offset":53427},"indent":[]}}],"position":{"start":{"line":1576,"column":4,"offset":53318},"end":{"line":1576,"column":113,"offset":53427},"indent":[]}}],"position":{"start":{"line":1576,"column":1,"offset":53315},"end":{"line":1576,"column":113,"offset":53427},"indent":[]}}],"position":{"start":{"line":1574,"column":1,"offset":53224},"end":{"line":1576,"column":113,"offset":53427},"indent":[1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 12","position":{"start":{"line":1578,"column":5,"offset":53433},"end":{"line":1578,"column":16,"offset":53444},"indent":[]}}],"position":{"start":{"line":1578,"column":1,"offset":53429},"end":{"line":1578,"column":16,"offset":53444},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"按照上述的流程补全","position":{"start":{"line":1580,"column":1,"offset":53446},"end":{"line":1580,"column":10,"offset":53455},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lib/fork.c</code>","position":{"start":{"line":1580,"column":10,"offset":53455},"end":{"line":1580,"column":22,"offset":53467},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":1580,"column":22,"offset":53467},"end":{"line":1580,"column":23,"offset":53468},"indent":[]}}],"position":{"start":{"line":1580,"column":1,"offset":53446},"end":{"line":1580,"column":23,"offset":53468},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"具体代码如下，其中大量参考了","position":{"start":{"line":1582,"column":1,"offset":53470},"end":{"line":1582,"column":15,"offset":53484},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">dumbfork</code>","position":{"start":{"line":1582,"column":15,"offset":53484},"end":{"line":1582,"column":25,"offset":53494},"indent":[]}},{"type":"text","value":"，尤其是","position":{"start":{"line":1582,"column":25,"offset":53494},"end":{"line":1582,"column":29,"offset":53498},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pgfault</code>","position":{"start":{"line":1582,"column":29,"offset":53498},"end":{"line":1582,"column":38,"offset":53507},"indent":[]}},{"type":"text","value":"，实际上和","position":{"start":{"line":1582,"column":38,"offset":53507},"end":{"line":1582,"column":43,"offset":53512},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">dumbfork</code>","position":{"start":{"line":1582,"column":43,"offset":53512},"end":{"line":1582,"column":53,"offset":53522},"indent":[]}},{"type":"text","value":"做的事情一样。","position":{"start":{"line":1582,"column":53,"offset":53522},"end":{"line":1582,"column":60,"offset":53529},"indent":[]}}],"position":{"start":{"line":1582,"column":1,"offset":53470},"end":{"line":1582,"column":60,"offset":53529},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// implement fork from user space</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;inc/string.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;inc/lib.h></span></span>\n\n<span class=\"token comment\">// PTE_COW marks copy-on-write page table entries.</span>\n<span class=\"token comment\">// It is one of the bits explicitly allocated to user processes (PTE_AVAIL).</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> PTE_COW\t\t0x800</span>\n<span class=\"token keyword\">extern</span> <span class=\"token keyword\">void</span> <span class=\"token function\">_pgfault_upcall</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Custom page fault handler - if faulting page is copy-on-write,</span>\n<span class=\"token comment\">// map in our own private writable copy.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">void</span>\n<span class=\"token function\">pgfault</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> <span class=\"token class-name\">UTrapframe</span> <span class=\"token operator\">*</span>utf<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> utf<span class=\"token operator\">-></span>utf_fault_va<span class=\"token punctuation\">;</span>\n\tuint32_t err <span class=\"token operator\">=</span> utf<span class=\"token operator\">-></span>utf_err<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// Check that the faulting access was (1) a write, and (2) to a</span>\n\t<span class=\"token comment\">// copy-on-write page.  If not, panic.</span>\n\t<span class=\"token comment\">// Hint:</span>\n\t<span class=\"token comment\">//   Use the read-only page table mappings at uvpt</span>\n\t<span class=\"token comment\">//   (see &lt;inc/memlayout.h>).</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>err <span class=\"token operator\">&amp;</span> FEC_WR<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> \n\t     <span class=\"token punctuation\">(</span>uvpd<span class=\"token punctuation\">[</span><span class=\"token function\">PDX</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t   <span class=\"token punctuation\">(</span>uvpt<span class=\"token punctuation\">[</span><span class=\"token function\">PGNUM</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span>\n\t\t   <span class=\"token punctuation\">(</span>uvpt<span class=\"token punctuation\">[</span><span class=\"token function\">PGNUM</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> PTE_COW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fault not on copy-on-write\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">// Allocate a new page, map it at a temporary location (PFTEMP),</span>\n\t<span class=\"token comment\">// copy the data from the old page to the new page, then move the new</span>\n\t<span class=\"token comment\">// page to the old page's address.</span>\n\t<span class=\"token comment\">// Hint:</span>\n\t<span class=\"token comment\">//   You should make three system calls.</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\taddr <span class=\"token operator\">=</span> <span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PFTEMP<span class=\"token punctuation\">,</span> PTE_W <span class=\"token operator\">|</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail to alloc\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">memmove</span><span class=\"token punctuation\">(</span>PFTEMP<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_map</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PFTEMP<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> PTE_W <span class=\"token operator\">|</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail to map\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_unmap</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PFTEMP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail to umap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"pgfault not implemented\");</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Map our virtual page pn (address pn*PGSIZE) into the target envid</span>\n<span class=\"token comment\">// at the same virtual address.  If the page is writable or copy-on-write,</span>\n<span class=\"token comment\">// the new mapping must be created copy-on-write, and then our mapping must be</span>\n<span class=\"token comment\">// marked copy-on-write as well.  (Exercise: Why do we need to mark ours</span>\n<span class=\"token comment\">// copy-on-write again if it was already copy-on-write at the beginning of</span>\n<span class=\"token comment\">// this function?)</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns: 0 on success, &lt; 0 on error.</span>\n<span class=\"token comment\">// It is also OK to panic on error.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">duppage</span><span class=\"token punctuation\">(</span>envid_t envid<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> pn<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>addr <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>pn <span class=\"token operator\">*</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>uvpd<span class=\"token punctuation\">[</span><span class=\"token function\">PDX</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span>uvpt<span class=\"token punctuation\">[</span>pn<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>uvpt<span class=\"token punctuation\">[</span>pn<span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>PTE_W <span class=\"token operator\">|</span> PTE_COW<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_map</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> envid<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> PTE_COW <span class=\"token operator\">|</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_map</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> PTE_COW <span class=\"token operator\">|</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_map</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> envid<span class=\"token punctuation\">,</span> addr<span class=\"token punctuation\">,</span> PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//panic(\"duppage not implemented\");</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// User-level fork with copy-on-write.</span>\n<span class=\"token comment\">// Set up our page fault handler appropriately.</span>\n<span class=\"token comment\">// Create a child.</span>\n<span class=\"token comment\">// Copy our address space and page fault handler setup to the child.</span>\n<span class=\"token comment\">// Then mark the child as runnable and return.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns: child's envid to the parent, 0 to the child, &lt; 0 on error.</span>\n<span class=\"token comment\">// It is also OK to panic on error.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Hint:</span>\n<span class=\"token comment\">//   Use uvpd, uvpt, and duppage.</span>\n<span class=\"token comment\">//   Remember to fix \"thisenv\" in the child process.</span>\n<span class=\"token comment\">//   Neither user exception stack should ever be marked copy-on-write,</span>\n<span class=\"token comment\">//   so you must allocate a new page for the child's user exception stack.</span>\n<span class=\"token comment\">//</span>\nenvid_t\n<span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\tenvid_t envid<span class=\"token punctuation\">;</span>\n\tuint8_t <span class=\"token operator\">*</span>addr<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t\n\t<span class=\"token function\">set_pgfault_handler</span><span class=\"token punctuation\">(</span>pgfault<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\tenvid <span class=\"token operator\">=</span> <span class=\"token function\">sys_exofork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>envid <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sys_exofork: %e\"</span><span class=\"token punctuation\">,</span> envid<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>envid <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\tthisenv <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>envs<span class=\"token punctuation\">[</span><span class=\"token function\">ENVX</span><span class=\"token punctuation\">(</span><span class=\"token function\">sys_getenvid</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_page_alloc</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span>UXSTACKTOP <span class=\"token operator\">-</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> PTE_U <span class=\"token operator\">|</span> PTE_W <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"fail to alloc for exception stack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span>addr <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>addr <span class=\"token operator\">&lt;</span> UTOP<span class=\"token punctuation\">;</span> addr <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>addr <span class=\"token operator\">==</span> UXSTACKTOP <span class=\"token operator\">-</span> PGSIZE<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">else</span> <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uvpd<span class=\"token punctuation\">[</span><span class=\"token function\">PDX</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>uvpt<span class=\"token punctuation\">[</span><span class=\"token function\">PGNUM</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">duppage</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token function\">PGNUM</span><span class=\"token punctuation\">(</span>addr<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"duppage failed\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">sys_env_set_pgfault_upcall</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> _pgfault_upcall<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_env_set_status</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> ENV_RUNNABLE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sys_env_set_status: %e\"</span><span class=\"token punctuation\">,</span> r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> envid<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"fork not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1584,"column":1,"offset":53531},"end":{"line":1717,"column":4,"offset":57532},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"运行测试，有：","position":{"start":{"line":1719,"column":1,"offset":57534},"end":{"line":1719,"column":8,"offset":57541},"indent":[]}}],"position":{"start":{"line":1719,"column":1,"offset":57534},"end":{"line":1719,"column":8,"offset":57541},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> run-forktree-nox\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\n1000: I am <span class=\"token string\">''</span>\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001001\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001002\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\n1001: I am <span class=\"token string\">'0'</span>\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00002000\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001003\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001001<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001001\n2000: I am <span class=\"token string\">'00'</span>\n<span class=\"token punctuation\">[</span>00002000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00002001\n<span class=\"token punctuation\">[</span>00002000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001004\n<span class=\"token punctuation\">[</span>00002000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00002000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00002000\n2001: I am <span class=\"token string\">'000'</span>\n<span class=\"token punctuation\">[</span>00002001<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00002001<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00002001\n1002: I am <span class=\"token string\">'1'</span>\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00003001\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00003000\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001002<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001002\n3000: I am <span class=\"token string\">'11'</span>\n<span class=\"token punctuation\">[</span>00003000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00002002\n<span class=\"token punctuation\">[</span>00003000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001005\n<span class=\"token punctuation\">[</span>00003000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00003000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00003000\n3001: I am <span class=\"token string\">'10'</span>\n<span class=\"token punctuation\">[</span>00003001<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00004000\n<span class=\"token punctuation\">[</span>00003001<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001006\n<span class=\"token punctuation\">[</span>00003001<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00003001<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00003001\n4000: I am <span class=\"token string\">'100'</span>\n<span class=\"token punctuation\">[</span>00004000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00004000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00004000\n2002: I am <span class=\"token string\">'110'</span>\n<span class=\"token punctuation\">[</span>00002002<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00002002<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00002002\n1003: I am <span class=\"token string\">'01'</span>\n<span class=\"token punctuation\">[</span>00001003<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00003002\n<span class=\"token punctuation\">[</span>00001003<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00005000\n<span class=\"token punctuation\">[</span>00001003<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001003<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001003\n5000: I am <span class=\"token string\">'011'</span>\n<span class=\"token punctuation\">[</span>00005000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00005000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00005000\n3002: I am <span class=\"token string\">'010'</span>\n<span class=\"token punctuation\">[</span>00003002<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00003002<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00003002\n1004: I am <span class=\"token string\">'001'</span>\n<span class=\"token punctuation\">[</span>00001004<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001004<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001004\n1005: I am <span class=\"token string\">'111'</span>\n<span class=\"token punctuation\">[</span>00001005<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001005<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001005\n1006: I am <span class=\"token string\">'101'</span>\n<span class=\"token punctuation\">[</span>00001006<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001006<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001006\n<span class=\"token punctuation\">..</span>.</code></pre></div>","position":{"start":{"line":1721,"column":1,"offset":57543},"end":{"line":1785,"column":4,"offset":59135},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后就完成了Part B","position":{"start":{"line":1787,"column":1,"offset":59137},"end":{"line":1787,"column":13,"offset":59149},"indent":[]}}],"position":{"start":{"line":1787,"column":1,"offset":59137},"end":{"line":1787,"column":13,"offset":59149},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> grade\n<span class=\"token punctuation\">..</span>.\ndumbfork: OK <span class=\"token punctuation\">(</span>1.4s<span class=\"token punctuation\">)</span>\nPart A score: 5/5\n\nfaultread: OK <span class=\"token punctuation\">(</span>0.9s<span class=\"token punctuation\">)</span>\nfaultwrite: OK <span class=\"token punctuation\">(</span>1.0s<span class=\"token punctuation\">)</span>\nfaultdie: OK <span class=\"token punctuation\">(</span>1.0s<span class=\"token punctuation\">)</span>\nfaultregs: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nfaultalloc: OK <span class=\"token punctuation\">(</span>1.0s<span class=\"token punctuation\">)</span>\nfaultallocbad: OK <span class=\"token punctuation\">(</span>1.9s<span class=\"token punctuation\">)</span>\nfaultnostack: OK <span class=\"token punctuation\">(</span>2.1s<span class=\"token punctuation\">)</span>\nfaultbadhandler: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nfaultevilhandler: OK <span class=\"token punctuation\">(</span>1.9s<span class=\"token punctuation\">)</span>\nforktree: OK <span class=\"token punctuation\">(</span>2.1s<span class=\"token punctuation\">)</span>\nPart B score: 50/50</code></pre></div>","position":{"start":{"line":1789,"column":1,"offset":59151},"end":{"line":1806,"column":4,"offset":59468},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Part C Preemptive Multitasking and Inter-Process communication (IPC)","position":{"start":{"line":1808,"column":4,"offset":59473},"end":{"line":1808,"column":72,"offset":59541},"indent":[]}}],"position":{"start":{"line":1808,"column":1,"offset":59470},"end":{"line":1808,"column":72,"offset":59541},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"这部分我们会实现preempty uncooperative environment以及environment之间的通信。","position":{"start":{"line":1810,"column":1,"offset":59543},"end":{"line":1810,"column":62,"offset":59604},"indent":[]}}],"position":{"start":{"line":1810,"column":1,"offset":59543},"end":{"line":1810,"column":62,"offset":59604},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Clock Interrupts and Preemption","position":{"start":{"line":1812,"column":5,"offset":59610},"end":{"line":1812,"column":36,"offset":59641},"indent":[]}}],"position":{"start":{"line":1812,"column":1,"offset":59606},"end":{"line":1812,"column":36,"offset":59641},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"运行","position":{"start":{"line":1814,"column":1,"offset":59643},"end":{"line":1814,"column":3,"offset":59645},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user/spin</code>","position":{"start":{"line":1814,"column":3,"offset":59645},"end":{"line":1814,"column":14,"offset":59656},"indent":[]}},{"type":"text","value":"，会发现child里面的循环会永久得占据CPU，导致parent或是kernel没有办法运行。","position":{"start":{"line":1814,"column":14,"offset":59656},"end":{"line":1814,"column":61,"offset":59703},"indent":[]}}],"position":{"start":{"line":1814,"column":1,"offset":59643},"end":{"line":1814,"column":61,"offset":59703},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// user/spin.c</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">umain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span> argc<span class=\"token punctuation\">,</span> <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span><span class=\"token operator\">*</span>argv<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\tenvid_t env<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am the parent.  Forking the child...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>env <span class=\"token operator\">=</span> <span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am the child.  Spinning...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token comment\">/* do nothing */</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am the parent.  Running the child...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">cprintf</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"I am the parent.  Killing the child...\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sys_env_destroy</span><span class=\"token punctuation\">(</span>env<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":1816,"column":1,"offset":59705},"end":{"line":1840,"column":4,"offset":60187},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"显然这不是一个好的设计，因为user-mode environment可以直接导致整个系统halt。为了让kernel可以preempt a running environment，我们需要让JOS kernel实现external hardware interrupt from the clock hardware。","position":{"start":{"line":1842,"column":1,"offset":60189},"end":{"line":1842,"column":161,"offset":60349},"indent":[]}}],"position":{"start":{"line":1842,"column":1,"offset":60189},"end":{"line":1842,"column":161,"offset":60349},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Interrupt discipline","position":{"start":{"line":1844,"column":5,"offset":60355},"end":{"line":1844,"column":25,"offset":60375},"indent":[]}}],"position":{"start":{"line":1844,"column":1,"offset":60351},"end":{"line":1844,"column":25,"offset":60375},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"External interrupts被称为IRQ。有16个IRQ，从0到15。IRQ number到IDT entry的映射还没有实现。","position":{"start":{"line":1846,"column":1,"offset":60377},"end":{"line":1846,"column":70,"offset":60446},"indent":[]}}],"position":{"start":{"line":1846,"column":1,"offset":60377},"end":{"line":1846,"column":70,"offset":60446},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在","position":{"start":{"line":1848,"column":1,"offset":60448},"end":{"line":1848,"column":2,"offset":60449},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">inc/trap.c</code>","position":{"start":{"line":1848,"column":2,"offset":60449},"end":{"line":1848,"column":14,"offset":60461},"indent":[]}},{"type":"text","value":"中定义了","position":{"start":{"line":1848,"column":14,"offset":60461},"end":{"line":1848,"column":18,"offset":60465},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">IRQ_OFFSET</code>","position":{"start":{"line":1848,"column":18,"offset":60465},"end":{"line":1848,"column":30,"offset":60477},"indent":[]}},{"type":"text","value":"为32，所以IDT中的32~47对应了IRQ的0~15。比如","position":{"start":{"line":1848,"column":30,"offset":60477},"end":{"line":1848,"column":60,"offset":60507},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">IDT[IRQ_OFFSET + 0]</code>","position":{"start":{"line":1848,"column":60,"offset":60507},"end":{"line":1848,"column":81,"offset":60528},"indent":[]}},{"type":"text","value":"对应了始终中断的handler。采用这个","position":{"start":{"line":1848,"column":81,"offset":60528},"end":{"line":1848,"column":101,"offset":60548},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">IRQ_OFFSET</code>","position":{"start":{"line":1848,"column":101,"offset":60548},"end":{"line":1848,"column":113,"offset":60560},"indent":[]}},{"type":"text","value":"是为了让device interrupt和processor exception分开。（最早版本的MS-DOS不进行区分，导致了很多问题...）","position":{"start":{"line":1848,"column":113,"offset":60560},"end":{"line":1848,"column":185,"offset":60632},"indent":[]}}],"position":{"start":{"line":1848,"column":1,"offset":60448},"end":{"line":1848,"column":185,"offset":60632},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在JOS中，我们相较于xv6做了简化，在kernel里面externel device interrupt都被禁用了。在JOS中externel device interrupt是用","position":{"start":{"line":1850,"column":1,"offset":60634},"end":{"line":1850,"column":92,"offset":60725},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">%eflags</code>","position":{"start":{"line":1850,"column":92,"offset":60725},"end":{"line":1850,"column":101,"offset":60734},"indent":[]}},{"type":"text","value":"的","position":{"start":{"line":1850,"column":101,"offset":60734},"end":{"line":1850,"column":102,"offset":60735},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">FL_IF</code>","position":{"start":{"line":1850,"column":102,"offset":60735},"end":{"line":1850,"column":109,"offset":60742},"indent":[]}},{"type":"text","value":"位控制的，为1则开启。尽管我们有很多种方法可以修改这一位，为了简化，我们仅仅在进入或离开user mode的时候进行","position":{"start":{"line":1850,"column":109,"offset":60742},"end":{"line":1850,"column":167,"offset":60800},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">%eflags</code>","position":{"start":{"line":1850,"column":167,"offset":60800},"end":{"line":1850,"column":176,"offset":60809},"indent":[]}},{"type":"text","value":"的恢复或存储。","position":{"start":{"line":1850,"column":176,"offset":60809},"end":{"line":1850,"column":183,"offset":60816},"indent":[]}}],"position":{"start":{"line":1850,"column":1,"offset":60634},"end":{"line":1850,"column":183,"offset":60816},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们需要保证在用户环境中","position":{"start":{"line":1852,"column":1,"offset":60818},"end":{"line":1852,"column":13,"offset":60830},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">FL_IF</code>","position":{"start":{"line":1852,"column":13,"offset":60830},"end":{"line":1852,"column":20,"offset":60837},"indent":[]}},{"type":"text","value":"位为1，从而能够接受中断。在bootloader的最初处我们加载了仅用了所有中断，然后截止到现在我们没有开启过他们。","position":{"start":{"line":1852,"column":20,"offset":60837},"end":{"line":1852,"column":78,"offset":60895},"indent":[]}}],"position":{"start":{"line":1852,"column":1,"offset":60818},"end":{"line":1852,"column":78,"offset":60895},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 13","position":{"start":{"line":1854,"column":5,"offset":60901},"end":{"line":1854,"column":16,"offset":60912},"indent":[]}}],"position":{"start":{"line":1854,"column":1,"offset":60897},"end":{"line":1854,"column":16,"offset":60912},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"修改","position":{"start":{"line":1856,"column":1,"offset":60914},"end":{"line":1856,"column":3,"offset":60916},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/trapentry.S</code>","position":{"start":{"line":1856,"column":3,"offset":60916},"end":{"line":1856,"column":21,"offset":60934},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":1856,"column":21,"offset":60934},"end":{"line":1856,"column":23,"offset":60936},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/trap.c</code>","position":{"start":{"line":1856,"column":23,"offset":60936},"end":{"line":1856,"column":36,"offset":60949},"indent":[]}},{"type":"text","value":"来加入IRQ 0~15。同时更改","position":{"start":{"line":1856,"column":36,"offset":60949},"end":{"line":1856,"column":52,"offset":60965},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_alloc()</code>","position":{"start":{"line":1856,"column":52,"offset":60965},"end":{"line":1856,"column":65,"offset":60978},"indent":[]}},{"type":"text","value":"让用户环境开启中断。并且取消","position":{"start":{"line":1856,"column":65,"offset":60978},"end":{"line":1856,"column":79,"offset":60992},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sched_halt</code>","position":{"start":{"line":1856,"column":79,"offset":60992},"end":{"line":1856,"column":91,"offset":61004},"indent":[]}},{"type":"text","value":"中","position":{"start":{"line":1856,"column":91,"offset":61004},"end":{"line":1856,"column":92,"offset":61005},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sti</code>","position":{"start":{"line":1856,"column":92,"offset":61005},"end":{"line":1856,"column":97,"offset":61010},"indent":[]}},{"type":"text","value":"前面的注释。让idle CPU启用中断。","position":{"start":{"line":1856,"column":97,"offset":61010},"end":{"line":1856,"column":117,"offset":61030},"indent":[]}}],"position":{"start":{"line":1856,"column":1,"offset":60914},"end":{"line":1856,"column":117,"offset":61030},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"下面是对应的代码。首先是","position":{"start":{"line":1858,"column":1,"offset":61032},"end":{"line":1858,"column":13,"offset":61044},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trapentry.S</code>","position":{"start":{"line":1858,"column":13,"offset":61044},"end":{"line":1858,"column":26,"offset":61057},"indent":[]}},{"type":"text","value":"，注意提示中又说the processor never pushes an error code when invoking a hardware interrupt handler，所以应该采用","position":{"start":{"line":1858,"column":26,"offset":61057},"end":{"line":1858,"column":124,"offset":61155},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">TRAPHANDLER_NOEC</code>","position":{"start":{"line":1858,"column":124,"offset":61155},"end":{"line":1858,"column":142,"offset":61173},"indent":[]}},{"type":"text","value":"（至少我是这么觉得的...）","position":{"start":{"line":1858,"column":142,"offset":61173},"end":{"line":1858,"column":156,"offset":61187},"indent":[]}}],"position":{"start":{"line":1858,"column":1,"offset":61032},"end":{"line":1858,"column":156,"offset":61187},"indent":[]}},{"type":"html","lang":"assembly","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">TRAPHANDLER_NOEC(IRQ_0, IRQ_OFFSET + 0)\nTRAPHANDLER_NOEC(IRQ_1, IRQ_OFFSET + 1)\nTRAPHANDLER_NOEC(IRQ_2, IRQ_OFFSET + 2)\nTRAPHANDLER_NOEC(IRQ_3, IRQ_OFFSET + 3)\nTRAPHANDLER_NOEC(IRQ_4, IRQ_OFFSET + 4)\nTRAPHANDLER_NOEC(IRQ_5, IRQ_OFFSET + 5)\nTRAPHANDLER_NOEC(IRQ_6, IRQ_OFFSET + 6)\nTRAPHANDLER_NOEC(IRQ_7, IRQ_OFFSET + 7)\nTRAPHANDLER_NOEC(IRQ_8, IRQ_OFFSET + 8)\nTRAPHANDLER_NOEC(IRQ_9, IRQ_OFFSET + 9)\nTRAPHANDLER_NOEC(IRQ_10, IRQ_OFFSET + 10)\nTRAPHANDLER_NOEC(IRQ_11, IRQ_OFFSET + 11)\nTRAPHANDLER_NOEC(IRQ_12, IRQ_OFFSET + 12)\nTRAPHANDLER_NOEC(IRQ_13, IRQ_OFFSET + 13)\nTRAPHANDLER_NOEC(IRQ_14, IRQ_OFFSET + 14)\nTRAPHANDLER_NOEC(IRQ_15, IRQ_OFFSET + 15)</code></pre></div>","position":{"start":{"line":1860,"column":1,"offset":61189},"end":{"line":1877,"column":4,"offset":61856},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后是","position":{"start":{"line":1879,"column":1,"offset":61858},"end":{"line":1879,"column":4,"offset":61861},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kern/trap.c</code>","position":{"start":{"line":1879,"column":4,"offset":61861},"end":{"line":1879,"column":17,"offset":61874},"indent":[]}},{"type":"text","value":"，添加的代码如下：","position":{"start":{"line":1879,"column":17,"offset":61874},"end":{"line":1879,"column":26,"offset":61883},"indent":[]}}],"position":{"start":{"line":1879,"column":1,"offset":61858},"end":{"line":1879,"column":26,"offset":61883},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">// IRQ</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_0</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_1</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_2</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_3</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_4</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_5</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_6</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_7</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_8</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_9</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_10</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_11</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_12</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_13</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_14</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token function\">IRQ_15</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_0<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_1<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_2<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">3</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_3<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">4</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_4<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">5</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_5<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">6</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_6<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">7</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_7<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">8</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_8<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">9</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_9<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">10</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_10<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">11</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_11<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">12</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_12<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">13</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_13<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">14</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_14<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">SETGATE</span><span class=\"token punctuation\">(</span>idt<span class=\"token punctuation\">[</span>IRQ_OFFSET <span class=\"token operator\">+</span> <span class=\"token number\">15</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> GD_KT<span class=\"token punctuation\">,</span> IRQ_15<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1881,"column":1,"offset":61885},"end":{"line":1915,"column":4,"offset":62975},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"最开始在实现的时候出了一个问题，那就是无法通过","position":{"start":{"line":1917,"column":1,"offset":62977},"end":{"line":1917,"column":24,"offset":63000},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap()</code>","position":{"start":{"line":1917,"column":24,"offset":63000},"end":{"line":1917,"column":32,"offset":63008},"indent":[]}},{"type":"text","value":"中的。","position":{"start":{"line":1917,"column":32,"offset":63008},"end":{"line":1917,"column":35,"offset":63011},"indent":[]}}],"position":{"start":{"line":1917,"column":1,"offset":62977},"end":{"line":1917,"column":35,"offset":63011},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token function\">assert</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token function\">read_eflags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> FL_IF<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1919,"column":1,"offset":63013},"end":{"line":1921,"column":4,"offset":63055},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"也就是在trap的时候","position":{"start":{"line":1923,"column":1,"offset":63057},"end":{"line":1923,"column":12,"offset":63068},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">FL_IF</code>","position":{"start":{"line":1923,"column":12,"offset":63068},"end":{"line":1923,"column":19,"offset":63075},"indent":[]}},{"type":"text","value":"处有值。经过网上搜索解决方案，发现是在lab 3中的","position":{"start":{"line":1923,"column":19,"offset":63075},"end":{"line":1923,"column":45,"offset":63101},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">SETGATE</code>","position":{"start":{"line":1923,"column":45,"offset":63101},"end":{"line":1923,"column":54,"offset":63110},"indent":[]}},{"type":"text","value":"使用出了错误。","position":{"start":{"line":1923,"column":54,"offset":63110},"end":{"line":1923,"column":61,"offset":63117},"indent":[]}}],"position":{"start":{"line":1923,"column":1,"offset":63057},"end":{"line":1923,"column":61,"offset":63117},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Set up a normal interrupt/trap gate descriptor.</span>\n<span class=\"token comment\">// - istrap: 1 for a trap (= exception) gate, 0 for an interrupt gate.</span>\n    <span class=\"token comment\">//   see section 9.6.1.3 of the i386 reference: \"The difference between</span>\n    <span class=\"token comment\">//   an interrupt gate and a trap gate is in the effect on IF (the</span>\n    <span class=\"token comment\">//   interrupt-enable flag). An interrupt that vectors through an</span>\n    <span class=\"token comment\">//   interrupt gate resets IF, thereby preventing other interrupts from</span>\n    <span class=\"token comment\">//   interfering with the current interrupt handler. A subsequent IRET</span>\n    <span class=\"token comment\">//   instruction restores IF to the value in the EFLAGS image on the</span>\n    <span class=\"token comment\">//   stack. An interrupt through a trap gate does not change IF.\"</span>\n<span class=\"token comment\">// - sel: Code segment selector for interrupt/trap handler</span>\n<span class=\"token comment\">// - off: Offset in code segment for interrupt/trap handler</span>\n<span class=\"token comment\">// - dpl: Descriptor Privilege Level -</span>\n<span class=\"token comment\">//\t  the privilege level required for software to invoke</span>\n<span class=\"token comment\">//\t  this interrupt/trap gate explicitly using an int instruction.</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SETGATE(gate, istrap, sel, off, dpl)\t\t\t\\\n{\t\t\t\t\t\t\t\t\\\n\t(gate).gd_off_15_0 = (uint32_t) (off) &amp; 0xffff;\t\t\\\n\t(gate).gd_sel = (sel);\t\t\t\t\t\\\n\t(gate).gd_args = 0;\t\t\t\t\t\\\n\t(gate).gd_rsv1 = 0;\t\t\t\t\t\\\n\t(gate).gd_type = (istrap) ? STS_TG32 : STS_IG32;\t\\\n\t(gate).gd_s = 0;\t\t\t\t\t\\\n\t(gate).gd_dpl = (dpl);\t\t\t\t\t\\\n\t(gate).gd_p = 1;\t\t\t\t\t\\\n\t(gate).gd_off_31_16 = (uint32_t) (off) >> 16;\t\t\\\n}</span></code></pre></div>","position":{"start":{"line":1925,"column":1,"offset":63119},"end":{"line":1952,"column":4,"offset":64420},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"阅读","position":{"start":{"line":1954,"column":1,"offset":64422},"end":{"line":1954,"column":3,"offset":64424},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">SETGATE</code>","position":{"start":{"line":1954,"column":3,"offset":64424},"end":{"line":1954,"column":12,"offset":64433},"indent":[]}},{"type":"text","value":"的注释可以看到","position":{"start":{"line":1954,"column":12,"offset":64433},"end":{"line":1954,"column":19,"offset":64440},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">istrap</code>","position":{"start":{"line":1954,"column":19,"offset":64440},"end":{"line":1954,"column":27,"offset":64448},"indent":[]}},{"type":"text","value":"部分如果设置为0才能保证在中断的里面不会有中断，这也是JOS的要求（和xv6不同），所以所有的","position":{"start":{"line":1954,"column":27,"offset":64448},"end":{"line":1954,"column":74,"offset":64495},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">SETGATE</code>","position":{"start":{"line":1954,"column":74,"offset":64495},"end":{"line":1954,"column":83,"offset":64504},"indent":[]}},{"type":"text","value":"（包括lab3的部分）都需要采用","position":{"start":{"line":1954,"column":83,"offset":64504},"end":{"line":1954,"column":99,"offset":64520},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">istrap=0</code>","position":{"start":{"line":1954,"column":99,"offset":64520},"end":{"line":1954,"column":109,"offset":64530},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":1954,"column":109,"offset":64530},"end":{"line":1954,"column":110,"offset":64531},"indent":[]}}],"position":{"start":{"line":1954,"column":1,"offset":64422},"end":{"line":1954,"column":110,"offset":64531},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"然后在","position":{"start":{"line":1956,"column":1,"offset":64533},"end":{"line":1956,"column":4,"offset":64536},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_alloc()</code>","position":{"start":{"line":1956,"column":4,"offset":64536},"end":{"line":1956,"column":17,"offset":64549},"indent":[]}},{"type":"text","value":"中：","position":{"start":{"line":1956,"column":17,"offset":64549},"end":{"line":1956,"column":19,"offset":64551},"indent":[]}}],"position":{"start":{"line":1956,"column":1,"offset":64533},"end":{"line":1956,"column":19,"offset":64551},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">// Enable interrupts while in user mode.</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\te<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_eflags <span class=\"token operator\">|=</span> FL_IF<span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1958,"column":1,"offset":64553},"end":{"line":1962,"column":4,"offset":64661},"indent":[1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"最后是","position":{"start":{"line":1964,"column":1,"offset":64663},"end":{"line":1964,"column":4,"offset":64666},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sched_halt()</code>","position":{"start":{"line":1964,"column":4,"offset":64666},"end":{"line":1964,"column":18,"offset":64680},"indent":[]}}],"position":{"start":{"line":1964,"column":1,"offset":64663},"end":{"line":1964,"column":18,"offset":64680},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t<span class=\"token comment\">// Reset stack pointer, enable interrupts and then halt.</span>\n\t<span class=\"token keyword\">asm</span> <span class=\"token keyword\">volatile</span> <span class=\"token punctuation\">(</span>\n\t\t<span class=\"token string\">\"movl $0, %%ebp\\n\"</span>\n\t\t<span class=\"token string\">\"movl %0, %%esp\\n\"</span>\n\t\t<span class=\"token string\">\"pushl $0\\n\"</span>\n\t\t<span class=\"token string\">\"pushl $0\\n\"</span>\n\t\t<span class=\"token comment\">// Uncomment the following line after completing exercise 13</span>\n\t\t<span class=\"token string\">\"sti\\n\"</span>\n\t\t<span class=\"token string\">\"1:\\n\"</span>\n\t\t<span class=\"token string\">\"hlt\\n\"</span>\n\t\t<span class=\"token string\">\"jmp 1b\\n\"</span>\n\t<span class=\"token operator\">:</span> <span class=\"token operator\">:</span> <span class=\"token string\">\"a\"</span> <span class=\"token punctuation\">(</span>thiscpu<span class=\"token operator\">-></span>cpu_ts<span class=\"token punctuation\">.</span>ts_esp0<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":1966,"column":1,"offset":64682},"end":{"line":1979,"column":4,"offset":64978},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"再用","position":{"start":{"line":1981,"column":1,"offset":64980},"end":{"line":1981,"column":3,"offset":64982},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user/spin</code>","position":{"start":{"line":1981,"column":3,"offset":64982},"end":{"line":1981,"column":14,"offset":64993},"indent":[]}},{"type":"text","value":"测试会发现中断已经被打开了：","position":{"start":{"line":1981,"column":14,"offset":64993},"end":{"line":1981,"column":28,"offset":65007},"indent":[]}}],"position":{"start":{"line":1981,"column":1,"offset":64980},"end":{"line":1981,"column":28,"offset":65007},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">$ make run<span class=\"token operator\">-</span>spin<span class=\"token operator\">-</span>nox\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">00000000</span><span class=\"token punctuation\">]</span> new env <span class=\"token number\">00001000</span>\nI am the parent<span class=\"token punctuation\">.</span>  Forking the child<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">00001000</span><span class=\"token punctuation\">]</span> new env <span class=\"token number\">00001001</span>\nI am the parent<span class=\"token punctuation\">.</span>  Running the child<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nI am the child<span class=\"token punctuation\">.</span>  Spinning<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\nTRAP frame at <span class=\"token number\">0xf02b707c</span> from CPU <span class=\"token number\">0</span>\n  edi  <span class=\"token number\">0x00000000</span>\n  esi  <span class=\"token number\">0x00000000</span>\n  ebp  <span class=\"token number\">0xeebfdfd0</span>\n  oesp <span class=\"token number\">0xf023cfdc</span>\n  ebx  <span class=\"token number\">0x00000000</span>\n  edx  <span class=\"token number\">0xeebfde88</span>\n  ecx  <span class=\"token number\">0x0000001d</span>\n  eax  <span class=\"token number\">0x0000001d</span>\n  es   <span class=\"token number\">0</span>x<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token number\">0023</span>\n  ds   <span class=\"token number\">0</span>x<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token number\">0023</span>\n  trap <span class=\"token number\">0x00000020</span> Hardware Interrupt\n  err  <span class=\"token number\">0x00000000</span>\n  eip  <span class=\"token number\">0x00800060</span>\n  cs   <span class=\"token number\">0</span>x<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token number\">001</span>b\n  flag <span class=\"token number\">0x00000282</span>\n  esp  <span class=\"token number\">0xeebfdfc8</span>\n  ss   <span class=\"token number\">0</span>x<span class=\"token operator\">--</span><span class=\"token operator\">--</span><span class=\"token number\">0023</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">00001001</span><span class=\"token punctuation\">]</span> free env <span class=\"token number\">00001001</span>\nI am the parent<span class=\"token punctuation\">.</span>  Killing the child<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span>\n<span class=\"token punctuation\">[</span><span class=\"token number\">00001000</span><span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span><span class=\"token number\">00001000</span><span class=\"token punctuation\">]</span> free env <span class=\"token number\">00001000</span>\nNo runnable environments in the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span><span class=\"token punctuation\">.</span></code></pre></div>","position":{"start":{"line":1983,"column":1,"offset":65009},"end":{"line":2015,"column":4,"offset":65736},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Handling Clock Interrupts","position":{"start":{"line":2017,"column":5,"offset":65742},"end":{"line":2017,"column":30,"offset":65767},"indent":[]}}],"position":{"start":{"line":2017,"column":1,"offset":65738},"end":{"line":2017,"column":30,"offset":65767},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们接下来来设置时钟中断的handler。","position":{"start":{"line":2019,"column":1,"offset":65769},"end":{"line":2019,"column":22,"offset":65790},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">lapic_init</code>","position":{"start":{"line":2019,"column":22,"offset":65790},"end":{"line":2019,"column":34,"offset":65802},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":2019,"column":34,"offset":65802},"end":{"line":2019,"column":35,"offset":65803},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pic_init</code>","position":{"start":{"line":2019,"column":35,"offset":65803},"end":{"line":2019,"column":45,"offset":65813},"indent":[]}},{"type":"text","value":"已经设置了始终和中断控制器，我们只需要写handler了。","position":{"start":{"line":2019,"column":45,"offset":65813},"end":{"line":2019,"column":74,"offset":65842},"indent":[]}}],"position":{"start":{"line":2019,"column":1,"offset":65769},"end":{"line":2019,"column":74,"offset":65842},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 14","position":{"start":{"line":2021,"column":5,"offset":65848},"end":{"line":2021,"column":16,"offset":65859},"indent":[]}}],"position":{"start":{"line":2021,"column":1,"offset":65844},"end":{"line":2021,"column":16,"offset":65859},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"修改","position":{"start":{"line":2023,"column":1,"offset":65861},"end":{"line":2023,"column":3,"offset":65863},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap_dispatch</code>","position":{"start":{"line":2023,"column":3,"offset":65863},"end":{"line":2023,"column":18,"offset":65878},"indent":[]}},{"type":"text","value":"，添加timer interrupt handler。","position":{"start":{"line":2023,"column":18,"offset":65878},"end":{"line":2023,"column":45,"offset":65905},"indent":[]}}],"position":{"start":{"line":2023,"column":1,"offset":65861},"end":{"line":2023,"column":45,"offset":65905},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">\t\t<span class=\"token comment\">// Handle clock interrupts. Don't forget to acknowledge the</span>\n\t\t<span class=\"token comment\">// interrupt using lapic_eoi() before calling the scheduler!</span>\n\t\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t\t<span class=\"token keyword\">case</span> IRQ_OFFSET <span class=\"token operator\">+</span> IRQ_TIMER<span class=\"token operator\">:</span>\n\t\t\t<span class=\"token function\">lapic_eoi</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t\t<span class=\"token function\">sched_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>","position":{"start":{"line":2025,"column":1,"offset":65907},"end":{"line":2032,"column":4,"offset":66133},"indent":[1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"这个时候我们就可以正常运行","position":{"start":{"line":2034,"column":1,"offset":66135},"end":{"line":2034,"column":14,"offset":66148},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user/spin</code>","position":{"start":{"line":2034,"column":14,"offset":66148},"end":{"line":2034,"column":25,"offset":66159},"indent":[]}},{"type":"text","value":"了。","position":{"start":{"line":2034,"column":25,"offset":66159},"end":{"line":2034,"column":27,"offset":66161},"indent":[]}}],"position":{"start":{"line":2034,"column":1,"offset":66135},"end":{"line":2034,"column":27,"offset":66161},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> run-spin-nox\n<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00000000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001000\nI am the parent.  Forking the child<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> new <span class=\"token function\">env</span> 00001001\nI am the parent.  Running the child<span class=\"token punctuation\">..</span>.\nI am the child.  Spinning<span class=\"token punctuation\">..</span>.\nI am the parent.  Killing the child<span class=\"token punctuation\">..</span>.\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> destroying 00001001\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001001\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> exiting gracefully\n<span class=\"token punctuation\">[</span>00001000<span class=\"token punctuation\">]</span> <span class=\"token function\">free</span> <span class=\"token function\">env</span> 00001000\nNo runnable environments <span class=\"token keyword\">in</span> the system<span class=\"token operator\">!</span>\n<span class=\"token punctuation\">..</span>.</code></pre></div>","position":{"start":{"line":2036,"column":1,"offset":66163},"end":{"line":2051,"column":4,"offset":66563},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Inter-Process communication (IPC)","position":{"start":{"line":2053,"column":5,"offset":66569},"end":{"line":2053,"column":38,"offset":66602},"indent":[]}}],"position":{"start":{"line":2053,"column":1,"offset":66565},"end":{"line":2053,"column":38,"offset":66602},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"截止到现在，我们非常重视isolation，但是让程序可以相互之间交流也是很重要的一个功能。让程序可以互动可以带来强大的功能。interprocess communication有很多的模型，到今天为止哪个模型最好仍然没有定论。我们会实现一个简单的模型。","position":{"start":{"line":2055,"column":1,"offset":66604},"end":{"line":2055,"column":128,"offset":66731},"indent":[]}}],"position":{"start":{"line":2055,"column":1,"offset":66604},"end":{"line":2055,"column":128,"offset":66731},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"IPC in JOS","position":{"start":{"line":2057,"column":5,"offset":66737},"end":{"line":2057,"column":15,"offset":66747},"indent":[]}}],"position":{"start":{"line":2057,"column":1,"offset":66733},"end":{"line":2057,"column":15,"offset":66747},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"我们会实现几个简单的system call来实现一个简单的interprocess communication mechanism。两个system call分别实","position":{"start":{"line":2059,"column":1,"offset":66749},"end":{"line":2059,"column":83,"offset":66831},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_ipc_recv</code>","position":{"start":{"line":2059,"column":83,"offset":66831},"end":{"line":2059,"column":97,"offset":66845},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":2059,"column":97,"offset":66845},"end":{"line":2059,"column":98,"offset":66846},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_ipc_try_send</code>","position":{"start":{"line":2059,"column":98,"offset":66846},"end":{"line":2059,"column":116,"offset":66864},"indent":[]}},{"type":"text","value":"。之后我们会把他们包装在","position":{"start":{"line":2059,"column":116,"offset":66864},"end":{"line":2059,"column":128,"offset":66876},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ipc_recv</code>","position":{"start":{"line":2059,"column":128,"offset":66876},"end":{"line":2059,"column":138,"offset":66886},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":2059,"column":138,"offset":66886},"end":{"line":2059,"column":139,"offset":66887},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ipc_send</code>","position":{"start":{"line":2059,"column":139,"offset":66887},"end":{"line":2059,"column":149,"offset":66897},"indent":[]}},{"type":"text","value":"里。","position":{"start":{"line":2059,"column":149,"offset":66897},"end":{"line":2059,"column":151,"offset":66899},"indent":[]}}],"position":{"start":{"line":2059,"column":1,"offset":66749},"end":{"line":2059,"column":151,"offset":66899},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在JOS的IPC中相互传输的信息由两部分组成，一个32位的值和一个可选的single page mapping。让环境可以相互之间传page mapping是一种传输大数据量的高效方法，同时也让环境更好设置共享内存。","position":{"start":{"line":2061,"column":1,"offset":66901},"end":{"line":2061,"column":109,"offset":67009},"indent":[]}}],"position":{"start":{"line":2061,"column":1,"offset":66901},"end":{"line":2061,"column":109,"offset":67009},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Sending and Receiving Messages","position":{"start":{"line":2063,"column":5,"offset":67015},"end":{"line":2063,"column":35,"offset":67045},"indent":[]}}],"position":{"start":{"line":2063,"column":1,"offset":67011},"end":{"line":2063,"column":35,"offset":67045},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"如果要接收到信息，环境需要调用","position":{"start":{"line":2065,"column":1,"offset":67047},"end":{"line":2065,"column":16,"offset":67062},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_ipc_recv</code>","position":{"start":{"line":2065,"column":16,"offset":67062},"end":{"line":2065,"column":30,"offset":67076},"indent":[]}},{"type":"text","value":"，这个system call会de-schedules当前环境并只有收到信息之后才会继续运行。当一个环境等待获取信息的时候，其他的环境可以发信息。注意是是任何环境，因为IPC的设计本身确保了安全，发信息不会搞崩接受的环境，所以不需要环境之间由parent child这样的关系。","position":{"start":{"line":2065,"column":30,"offset":67076},"end":{"line":2065,"column":169,"offset":67215},"indent":[]}}],"position":{"start":{"line":2065,"column":1,"offset":67047},"end":{"line":2065,"column":169,"offset":67215},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"如果要发送一条信息，环境需要调用","position":{"start":{"line":2067,"column":1,"offset":67217},"end":{"line":2067,"column":17,"offset":67233},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_ipc_try_send</code>","position":{"start":{"line":2067,"column":17,"offset":67233},"end":{"line":2067,"column":35,"offset":67251},"indent":[]}},{"type":"text","value":"，以自己和接受环境为参数。如果对应的环境确实在准备接收，那么数据会被传过去并返回0，不然返回","position":{"start":{"line":2067,"column":35,"offset":67251},"end":{"line":2067,"column":81,"offset":67297},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">-E_IPC_NOT_RECV</code>","position":{"start":{"line":2067,"column":81,"offset":67297},"end":{"line":2067,"column":98,"offset":67314},"indent":[]}},{"type":"text","value":"。","position":{"start":{"line":2067,"column":98,"offset":67314},"end":{"line":2067,"column":99,"offset":67315},"indent":[]}}],"position":{"start":{"line":2067,"column":1,"offset":67217},"end":{"line":2067,"column":99,"offset":67315},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"User space中的库函数","position":{"start":{"line":2069,"column":1,"offset":67317},"end":{"line":2069,"column":16,"offset":67332},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ipc_recv</code>","position":{"start":{"line":2069,"column":16,"offset":67332},"end":{"line":2069,"column":26,"offset":67342},"indent":[]}},{"type":"text","value":"会负责调用","position":{"start":{"line":2069,"column":26,"offset":67342},"end":{"line":2069,"column":31,"offset":67347},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_ipc_recv</code>","position":{"start":{"line":2069,"column":31,"offset":67347},"end":{"line":2069,"column":45,"offset":67361},"indent":[]}},{"type":"text","value":"以及在","position":{"start":{"line":2069,"column":45,"offset":67361},"end":{"line":2069,"column":48,"offset":67364},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">struct Env</code>","position":{"start":{"line":2069,"column":48,"offset":67364},"end":{"line":2069,"column":60,"offset":67376},"indent":[]}},{"type":"text","value":"中查询接收到的数据。","position":{"start":{"line":2069,"column":60,"offset":67376},"end":{"line":2069,"column":70,"offset":67386},"indent":[]}}],"position":{"start":{"line":2069,"column":1,"offset":67317},"end":{"line":2069,"column":70,"offset":67386},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"同样","position":{"start":{"line":2071,"column":1,"offset":67388},"end":{"line":2071,"column":3,"offset":67390},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ipc_send</code>","position":{"start":{"line":2071,"column":3,"offset":67390},"end":{"line":2071,"column":13,"offset":67400},"indent":[]}},{"type":"text","value":"会重复调用","position":{"start":{"line":2071,"column":13,"offset":67400},"end":{"line":2071,"column":18,"offset":67405},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_ipc_try_send</code>","position":{"start":{"line":2071,"column":18,"offset":67405},"end":{"line":2071,"column":36,"offset":67423},"indent":[]}},{"type":"text","value":"直到成功发送。","position":{"start":{"line":2071,"column":36,"offset":67423},"end":{"line":2071,"column":43,"offset":67430},"indent":[]}}],"position":{"start":{"line":2071,"column":1,"offset":67388},"end":{"line":2071,"column":43,"offset":67430},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Transferring Pages","position":{"start":{"line":2073,"column":5,"offset":67436},"end":{"line":2073,"column":23,"offset":67454},"indent":[]}}],"position":{"start":{"line":2073,"column":1,"offset":67432},"end":{"line":2073,"column":23,"offset":67454},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"当一个环境以一个合理的","position":{"start":{"line":2075,"column":1,"offset":67456},"end":{"line":2075,"column":12,"offset":67467},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">dstva</code>","position":{"start":{"line":2075,"column":12,"offset":67467},"end":{"line":2075,"column":19,"offset":67474},"indent":[]}},{"type":"text","value":"（在","position":{"start":{"line":2075,"column":19,"offset":67474},"end":{"line":2075,"column":21,"offset":67476},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">UTOP</code>","position":{"start":{"line":2075,"column":21,"offset":67476},"end":{"line":2075,"column":27,"offset":67482},"indent":[]}},{"type":"text","value":"之下）调用","position":{"start":{"line":2075,"column":27,"offset":67482},"end":{"line":2075,"column":32,"offset":67487},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_ipc_recv</code>","position":{"start":{"line":2075,"column":32,"offset":67487},"end":{"line":2075,"column":46,"offset":67501},"indent":[]}},{"type":"text","value":"的时候，环境表示其可以接受一个mapping。如果sender发过来一个page，那么这个page就会被map在","position":{"start":{"line":2075,"column":46,"offset":67501},"end":{"line":2075,"column":102,"offset":67557},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">dstva</code>","position":{"start":{"line":2075,"column":102,"offset":67557},"end":{"line":2075,"column":109,"offset":67564},"indent":[]}},{"type":"text","value":"处。如果","position":{"start":{"line":2075,"column":109,"offset":67564},"end":{"line":2075,"column":113,"offset":67568},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">dstva</code>","position":{"start":{"line":2075,"column":113,"offset":67568},"end":{"line":2075,"column":120,"offset":67575},"indent":[]}},{"type":"text","value":"原来就有一个mapping，这个mapping会被unmap。","position":{"start":{"line":2075,"column":120,"offset":67575},"end":{"line":2075,"column":151,"offset":67606},"indent":[]}}],"position":{"start":{"line":2075,"column":1,"offset":67456},"end":{"line":2075,"column":151,"offset":67606},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"当一个环境以一个合理的","position":{"start":{"line":2077,"column":1,"offset":67608},"end":{"line":2077,"column":12,"offset":67619},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">srcva</code>","position":{"start":{"line":2077,"column":12,"offset":67619},"end":{"line":2077,"column":19,"offset":67626},"indent":[]}},{"type":"text","value":"（在","position":{"start":{"line":2077,"column":19,"offset":67626},"end":{"line":2077,"column":21,"offset":67628},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">UTOP</code>","position":{"start":{"line":2077,"column":21,"offset":67628},"end":{"line":2077,"column":27,"offset":67634},"indent":[]}},{"type":"text","value":"之下）调用","position":{"start":{"line":2077,"column":27,"offset":67634},"end":{"line":2077,"column":32,"offset":67639},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_ipc_try_send</code>","position":{"start":{"line":2077,"column":32,"offset":67639},"end":{"line":2077,"column":50,"offset":67657},"indent":[]}},{"type":"text","value":"的时候，环境表示其想要发送一个map在","position":{"start":{"line":2077,"column":50,"offset":67657},"end":{"line":2077,"column":69,"offset":67676},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">srcva</code>","position":{"start":{"line":2077,"column":69,"offset":67676},"end":{"line":2077,"column":76,"offset":67683},"indent":[]}},{"type":"text","value":"的page，其permission为","position":{"start":{"line":2077,"column":76,"offset":67683},"end":{"line":2077,"column":94,"offset":67701},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">perm</code>","position":{"start":{"line":2077,"column":94,"offset":67701},"end":{"line":2077,"column":100,"offset":67707},"indent":[]}},{"type":"text","value":"。IPC成功之后，sender会保留原始的mapping，但是receiver和它会share这个page。","position":{"start":{"line":2077,"column":100,"offset":67707},"end":{"line":2077,"column":154,"offset":67761},"indent":[]}}],"position":{"start":{"line":2077,"column":1,"offset":67608},"end":{"line":2077,"column":154,"offset":67761},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"如果sender和receive中的一个不愿意发送或是接受page，那么就不会有page被传输。IPC之后，","position":{"start":{"line":2079,"column":1,"offset":67763},"end":{"line":2079,"column":55,"offset":67817},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">Env</code>","position":{"start":{"line":2079,"column":55,"offset":67817},"end":{"line":2079,"column":60,"offset":67822},"indent":[]}},{"type":"text","value":"中的","position":{"start":{"line":2079,"column":60,"offset":67822},"end":{"line":2079,"column":62,"offset":67824},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">env_ipc_perm</code>","position":{"start":{"line":2079,"column":62,"offset":67824},"end":{"line":2079,"column":76,"offset":67838},"indent":[]}},{"type":"text","value":"会为接收到的page的permission或0。","position":{"start":{"line":2079,"column":76,"offset":67838},"end":{"line":2079,"column":100,"offset":67862},"indent":[]}}],"position":{"start":{"line":2079,"column":1,"offset":67763},"end":{"line":2079,"column":100,"offset":67862},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Implementing IPC","position":{"start":{"line":2081,"column":5,"offset":67868},"end":{"line":2081,"column":21,"offset":67884},"indent":[]}}],"position":{"start":{"line":2081,"column":1,"offset":67864},"end":{"line":2081,"column":21,"offset":67884},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Exercise 15","position":{"start":{"line":2083,"column":5,"offset":67890},"end":{"line":2083,"column":16,"offset":67901},"indent":[]}}],"position":{"start":{"line":2083,"column":1,"offset":67886},"end":{"line":2083,"column":16,"offset":67901},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"完成","position":{"start":{"line":2085,"column":1,"offset":67903},"end":{"line":2085,"column":3,"offset":67905},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_ipc_recv</code>","position":{"start":{"line":2085,"column":3,"offset":67905},"end":{"line":2085,"column":17,"offset":67919},"indent":[]}},{"type":"text","value":", ","position":{"start":{"line":2085,"column":17,"offset":67919},"end":{"line":2085,"column":19,"offset":67921},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_ipc_try_send</code>","position":{"start":{"line":2085,"column":19,"offset":67921},"end":{"line":2085,"column":37,"offset":67939},"indent":[]}},{"type":"text","value":"以及","position":{"start":{"line":2085,"column":37,"offset":67939},"end":{"line":2085,"column":39,"offset":67941},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ipc_recv</code>","position":{"start":{"line":2085,"column":39,"offset":67941},"end":{"line":2085,"column":49,"offset":67951},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":2085,"column":49,"offset":67951},"end":{"line":2085,"column":50,"offset":67952},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ipc_send</code>","position":{"start":{"line":2085,"column":50,"offset":67952},"end":{"line":2085,"column":60,"offset":67962},"indent":[]}},{"type":"text","value":"。注意在使用","position":{"start":{"line":2085,"column":60,"offset":67962},"end":{"line":2085,"column":66,"offset":67968},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">envid2env</code>","position":{"start":{"line":2085,"column":66,"offset":67968},"end":{"line":2085,"column":77,"offset":67979},"indent":[]}},{"type":"text","value":"的时候","position":{"start":{"line":2085,"column":77,"offset":67979},"end":{"line":2085,"column":80,"offset":67982},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">checkperm</code>","position":{"start":{"line":2085,"column":80,"offset":67982},"end":{"line":2085,"column":91,"offset":67993},"indent":[]}},{"type":"text","value":"应设为0，原因上面提到了。","position":{"start":{"line":2085,"column":91,"offset":67993},"end":{"line":2085,"column":104,"offset":68006},"indent":[]}}],"position":{"start":{"line":2085,"column":1,"offset":67903},"end":{"line":2085,"column":104,"offset":68006},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"按照详细的注释一点一点加上就好了，首先是","position":{"start":{"line":2087,"column":1,"offset":68008},"end":{"line":2087,"column":21,"offset":68028},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_ipc_recv</code>","position":{"start":{"line":2087,"column":21,"offset":68028},"end":{"line":2087,"column":35,"offset":68042},"indent":[]}},{"type":"text","value":"：","position":{"start":{"line":2087,"column":35,"offset":68042},"end":{"line":2087,"column":36,"offset":68043},"indent":[]}}],"position":{"start":{"line":2087,"column":1,"offset":68008},"end":{"line":2087,"column":36,"offset":68043},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Block until a value is ready.  Record that you want to receive</span>\n<span class=\"token comment\">// using the env_ipc_recving and env_ipc_dstva fields of struct Env,</span>\n<span class=\"token comment\">// mark yourself not runnable, and then give up the CPU.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If 'dstva' is &lt; UTOP, then you are willing to receive a page of data.</span>\n<span class=\"token comment\">// 'dstva' is the virtual address at which the sent page should be mapped.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// This function only returns on error, but the system call will eventually</span>\n<span class=\"token comment\">// return 0 on success.</span>\n<span class=\"token comment\">// Return &lt; 0 on error.  Errors are:</span>\n<span class=\"token comment\">//\t-E_INVAL if dstva &lt; UTOP but dstva is not page-aligned.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_ipc_recv</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dstva<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>dstva <span class=\"token operator\">&lt;</span> UTOP<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>dstva<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>dstva<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_ipc_recving <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_ipc_dstva <span class=\"token operator\">=</span> dstva<span class=\"token punctuation\">;</span>\n\tcurenv<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_NOT_RUNNABLE<span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">sched_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_ipc_recv not implemented\");</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":2089,"column":1,"offset":68045},"end":{"line":2115,"column":4,"offset":68942},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"然后是","position":{"start":{"line":2117,"column":1,"offset":68944},"end":{"line":2117,"column":4,"offset":68947},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">sys_ipc_try_send</code>","position":{"start":{"line":2117,"column":4,"offset":68947},"end":{"line":2117,"column":22,"offset":68965},"indent":[]}}],"position":{"start":{"line":2117,"column":1,"offset":68944},"end":{"line":2117,"column":22,"offset":68965},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Try to send 'value' to the target env 'envid'.</span>\n<span class=\"token comment\">// If srcva &lt; UTOP, then also send page currently mapped at 'srcva',</span>\n<span class=\"token comment\">// so that receiver gets a duplicate mapping of the same page.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The send fails with a return value of -E_IPC_NOT_RECV if the</span>\n<span class=\"token comment\">// target is not blocked, waiting for an IPC.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The send also can fail for the other reasons listed below.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Otherwise, the send succeeds, and the target's ipc fields are</span>\n<span class=\"token comment\">// updated as follows:</span>\n<span class=\"token comment\">//    env_ipc_recving is set to 0 to block future sends;</span>\n<span class=\"token comment\">//    env_ipc_from is set to the sending envid;</span>\n<span class=\"token comment\">//    env_ipc_value is set to the 'value' parameter;</span>\n<span class=\"token comment\">//    env_ipc_perm is set to 'perm' if a page was transferred, 0 otherwise.</span>\n<span class=\"token comment\">// The target environment is marked runnable again, returning 0</span>\n<span class=\"token comment\">// from the paused sys_ipc_recv system call.  (Hint: does the</span>\n<span class=\"token comment\">// sys_ipc_recv function ever actually return?)</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// If the sender wants to send a page but the receiver isn't asking for one,</span>\n<span class=\"token comment\">// then no page mapping is transferred, but no error occurs.</span>\n<span class=\"token comment\">// The ipc only happens when no errors occur.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Returns 0 on success, &lt; 0 on error.</span>\n<span class=\"token comment\">// Errors are:</span>\n<span class=\"token comment\">//\t-E_BAD_ENV if environment envid doesn't currently exist.</span>\n<span class=\"token comment\">//\t\t(No need to check permissions.)</span>\n<span class=\"token comment\">//\t-E_IPC_NOT_RECV if envid is not currently blocked in sys_ipc_recv,</span>\n<span class=\"token comment\">//\t\tor another environment managed to send first.</span>\n<span class=\"token comment\">//\t-E_INVAL if srcva &lt; UTOP but srcva is not page-aligned.</span>\n<span class=\"token comment\">//\t-E_INVAL if srcva &lt; UTOP and perm is inappropriate</span>\n<span class=\"token comment\">//\t\t(see sys_page_alloc).</span>\n<span class=\"token comment\">//\t-E_INVAL if srcva &lt; UTOP but srcva is not mapped in the caller's</span>\n<span class=\"token comment\">//\t\taddress space.</span>\n<span class=\"token comment\">//\t-E_INVAL if (perm &amp; PTE_W), but srcva is read-only in the</span>\n<span class=\"token comment\">//\t\tcurrent environment's address space.</span>\n<span class=\"token comment\">//\t-E_NO_MEM if there's not enough memory to map srcva in envid's</span>\n<span class=\"token comment\">//\t\taddress space.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">sys_ipc_try_send</span><span class=\"token punctuation\">(</span>envid_t envid<span class=\"token punctuation\">,</span> uint32_t value<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>srcva<span class=\"token punctuation\">,</span> <span class=\"token keyword\">unsigned</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">Env</span> <span class=\"token operator\">*</span>e<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">struct</span> <span class=\"token class-name\">PageInfo</span> <span class=\"token operator\">*</span>pp <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\tpte_t <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">envid2env</span><span class=\"token punctuation\">(</span>envid<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>e<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>e<span class=\"token operator\">-></span>env_ipc_recving<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_IPC_NOT_RECV<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>srcva <span class=\"token operator\">&lt;</span> UTOP <span class=\"token operator\">&amp;&amp;</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>e<span class=\"token operator\">-></span>env_ipc_dstva <span class=\"token operator\">&lt;</span> UTOP<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">ROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>srcva<span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span>srcva<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> <span class=\"token punctuation\">(</span>PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token punctuation\">(</span>PTE_U <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">)</span> <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> <span class=\"token operator\">~</span>PTE_SYSCALL<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pp <span class=\"token operator\">=</span> <span class=\"token function\">page_lookup</span><span class=\"token punctuation\">(</span>curenv<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> srcva<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span>pte<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token constant\">NULL</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte <span class=\"token operator\">&amp;</span> perm<span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> perm<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>perm <span class=\"token operator\">&amp;</span> PTE_W<span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token operator\">!</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte <span class=\"token operator\">&amp;</span> PTE_W<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> <span class=\"token operator\">-</span>E_INVAL<span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">page_insert</span><span class=\"token punctuation\">(</span>e<span class=\"token operator\">-></span>env_pgdir<span class=\"token punctuation\">,</span> pp<span class=\"token punctuation\">,</span> e<span class=\"token operator\">-></span>env_ipc_dstva<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t\te<span class=\"token operator\">-></span>env_ipc_perm <span class=\"token operator\">=</span> perm<span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\te<span class=\"token operator\">-></span>env_ipc_recving <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_ipc_from <span class=\"token operator\">=</span> curenv<span class=\"token operator\">-></span>env_id<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_ipc_value <span class=\"token operator\">=</span> value<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_status <span class=\"token operator\">=</span> ENV_RUNNABLE<span class=\"token punctuation\">;</span>\n\te<span class=\"token operator\">-></span>env_tf<span class=\"token punctuation\">.</span>tf_regs<span class=\"token punctuation\">.</span>reg_eax <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"sys_ipc_try_send not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":2119,"column":1,"offset":68967},"end":{"line":2193,"column":4,"offset":71761},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"注意写完这两个之后别忘了在","position":{"start":{"line":2195,"column":1,"offset":71763},"end":{"line":2195,"column":14,"offset":71776},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">syscall()</code>","position":{"start":{"line":2195,"column":14,"offset":71776},"end":{"line":2195,"column":25,"offset":71787},"indent":[]}},{"type":"text","value":"里面加上这两个函数。","position":{"start":{"line":2195,"column":25,"offset":71787},"end":{"line":2195,"column":35,"offset":71797},"indent":[]}}],"position":{"start":{"line":2195,"column":1,"offset":71763},"end":{"line":2195,"column":35,"offset":71797},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"然后是","position":{"start":{"line":2197,"column":1,"offset":71799},"end":{"line":2197,"column":4,"offset":71802},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ipc_recv</code>","position":{"start":{"line":2197,"column":4,"offset":71802},"end":{"line":2197,"column":14,"offset":71812},"indent":[]}},{"type":"text","value":"：","position":{"start":{"line":2197,"column":14,"offset":71812},"end":{"line":2197,"column":15,"offset":71813},"indent":[]}}],"position":{"start":{"line":2197,"column":1,"offset":71799},"end":{"line":2197,"column":15,"offset":71813},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Receive a value via IPC and return it.</span>\n<span class=\"token comment\">// If 'pg' is nonnull, then any page sent by the sender will be mapped at</span>\n<span class=\"token comment\">//\tthat address.</span>\n<span class=\"token comment\">// If 'from_env_store' is nonnull, then store the IPC sender's envid in</span>\n<span class=\"token comment\">//\t*from_env_store.</span>\n<span class=\"token comment\">// If 'perm_store' is nonnull, then store the IPC sender's page permission</span>\n<span class=\"token comment\">//\tin *perm_store (this is nonzero iff a page was successfully</span>\n<span class=\"token comment\">//\ttransferred to 'pg').</span>\n<span class=\"token comment\">// If the system call fails, then store 0 in *fromenv and *perm (if</span>\n<span class=\"token comment\">//\tthey're nonnull) and return the error.</span>\n<span class=\"token comment\">// Otherwise, return the value sent by the sender</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Hint:</span>\n<span class=\"token comment\">//   Use 'thisenv' to discover the value and who sent it.</span>\n<span class=\"token comment\">//   If 'pg' is null, pass sys_ipc_recv a value that it will understand</span>\n<span class=\"token comment\">//   as meaning \"no page\".  (Zero is not the right value, since that's</span>\n<span class=\"token comment\">//   a perfectly valid place to map a page.)</span>\nint32_t\n<span class=\"token function\">ipc_recv</span><span class=\"token punctuation\">(</span>envid_t <span class=\"token operator\">*</span>from_env_store<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>pg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> <span class=\"token operator\">*</span>perm_store<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dstva <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>UTOP<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pg<span class=\"token punctuation\">)</span>\n\t\tdstva <span class=\"token operator\">=</span> pg<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from_env_store<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token operator\">*</span>from_env_store <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>perm_store<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">*</span>perm_store <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_ipc_recv</span><span class=\"token punctuation\">(</span>dstva<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">return</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>from_env_store<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">*</span>from_env_store <span class=\"token operator\">=</span> thisenv<span class=\"token operator\">-></span>env_ipc_from<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>perm_store<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token operator\">*</span>perm_store <span class=\"token operator\">=</span> thisenv<span class=\"token operator\">-></span>env_ipc_perm<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">return</span> thisenv<span class=\"token operator\">-></span>env_ipc_value<span class=\"token punctuation\">;</span>\n\t<span class=\"token comment\">//panic(\"ipc_recv not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":2199,"column":1,"offset":71815},"end":{"line":2239,"column":4,"offset":73107},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"最后是","position":{"start":{"line":2241,"column":1,"offset":73109},"end":{"line":2241,"column":4,"offset":73112},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">ipc_send</code>","position":{"start":{"line":2241,"column":4,"offset":73112},"end":{"line":2241,"column":14,"offset":73122},"indent":[]}}],"position":{"start":{"line":2241,"column":1,"offset":73109},"end":{"line":2241,"column":14,"offset":73122},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Send 'val' (and 'pg' with 'perm', if 'pg' is nonnull) to 'toenv'.</span>\n<span class=\"token comment\">// This function keeps trying until it succeeds.</span>\n<span class=\"token comment\">// It should panic() on any error other than -E_IPC_NOT_RECV.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// Hint:</span>\n<span class=\"token comment\">//   Use sys_yield() to be CPU-friendly.</span>\n<span class=\"token comment\">//   If 'pg' is null, pass sys_ipc_try_send a value that it will understand</span>\n<span class=\"token comment\">//   as meaning \"no page\".  (Zero is not the right value.)</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">ipc_send</span><span class=\"token punctuation\">(</span>envid_t to_env<span class=\"token punctuation\">,</span> uint32_t val<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>pg<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// LAB 4: Your code here.</span>\n\t<span class=\"token keyword\">int</span> r<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>srcva <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>UTOP<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>pg<span class=\"token punctuation\">)</span>\n\t\tsrcva <span class=\"token operator\">=</span> pg<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>r <span class=\"token operator\">=</span> <span class=\"token function\">sys_ipc_try_send</span><span class=\"token punctuation\">(</span>to_env<span class=\"token punctuation\">,</span> val<span class=\"token punctuation\">,</span> pg<span class=\"token punctuation\">,</span> perm<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>r <span class=\"token operator\">!=</span> <span class=\"token operator\">-</span>E_IPC_NOT_RECV<span class=\"token punctuation\">)</span>\n\t\t\t<span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"ipc send fail\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\t<span class=\"token function\">sys_yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n\t<span class=\"token comment\">//panic(\"ipc_send not implemented\");</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":2243,"column":1,"offset":73124},"end":{"line":2270,"column":4,"offset":73851},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"完成了之后就可以用","position":{"start":{"line":2272,"column":1,"offset":73853},"end":{"line":2272,"column":10,"offset":73862},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user/pingpong</code>","position":{"start":{"line":2272,"column":10,"offset":73862},"end":{"line":2272,"column":25,"offset":73877},"indent":[]}},{"type":"text","value":"或者是","position":{"start":{"line":2272,"column":25,"offset":73877},"end":{"line":2272,"column":28,"offset":73880},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">user/primes</code>","position":{"start":{"line":2272,"column":28,"offset":73880},"end":{"line":2272,"column":41,"offset":73893},"indent":[]}},{"type":"text","value":"来进行测试。","position":{"start":{"line":2272,"column":41,"offset":73893},"end":{"line":2272,"column":47,"offset":73899},"indent":[]}}],"position":{"start":{"line":2272,"column":1,"offset":73853},"end":{"line":2272,"column":47,"offset":73899},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"最后来","position":{"start":{"line":2274,"column":1,"offset":73901},"end":{"line":2274,"column":4,"offset":73904},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">make grade</code>","position":{"start":{"line":2274,"column":4,"offset":73904},"end":{"line":2274,"column":16,"offset":73916},"indent":[]}},{"type":"text","value":"一下：","position":{"start":{"line":2274,"column":16,"offset":73916},"end":{"line":2274,"column":19,"offset":73919},"indent":[]}}],"position":{"start":{"line":2274,"column":1,"offset":73901},"end":{"line":2274,"column":19,"offset":73919},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">make</span> grade\n<span class=\"token punctuation\">..</span>.\ndumbfork: OK <span class=\"token punctuation\">(</span>2.5s<span class=\"token punctuation\">)</span>\nPart A score: 5/5\n\nfaultread: OK <span class=\"token punctuation\">(</span>1.9s<span class=\"token punctuation\">)</span>\nfaultwrite: OK <span class=\"token punctuation\">(</span>2.1s<span class=\"token punctuation\">)</span>\nfaultdie: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nfaultregs: OK <span class=\"token punctuation\">(</span>2.1s<span class=\"token punctuation\">)</span>\nfaultalloc: OK <span class=\"token punctuation\">(</span>0.9s<span class=\"token punctuation\">)</span>\nfaultallocbad: OK <span class=\"token punctuation\">(</span>1.9s<span class=\"token punctuation\">)</span>\nfaultnostack: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nfaultbadhandler: OK <span class=\"token punctuation\">(</span>2.2s<span class=\"token punctuation\">)</span>\nfaultevilhandler: OK <span class=\"token punctuation\">(</span>1.9s<span class=\"token punctuation\">)</span>\nforktree: OK <span class=\"token punctuation\">(</span>2.2s<span class=\"token punctuation\">)</span>\nPart B score: 50/50\n\nspin: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nstresssched: OK <span class=\"token punctuation\">(</span>2.2s<span class=\"token punctuation\">)</span>\nsendpage: OK <span class=\"token punctuation\">(</span>1.7s<span class=\"token punctuation\">)</span>\npingpong: OK <span class=\"token punctuation\">(</span>2.0s<span class=\"token punctuation\">)</span>\nprimes: OK <span class=\"token punctuation\">(</span>4.4s<span class=\"token punctuation\">)</span>\nPart C score: 25/25\n\nScore: 80/80</code></pre></div>","position":{"start":{"line":2276,"column":1,"offset":73921},"end":{"line":2302,"column":4,"offset":74370},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"lab4就完成了。","position":{"start":{"line":2304,"column":1,"offset":74372},"end":{"line":2304,"column":10,"offset":74381},"indent":[]}}],"position":{"start":{"line":2304,"column":1,"offset":74372},"end":{"line":2304,"column":10,"offset":74381},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":2304,"column":10,"offset":74381}}}}