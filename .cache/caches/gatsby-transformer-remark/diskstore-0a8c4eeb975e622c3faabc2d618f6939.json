{"expireTime":9007200818315814000,"key":"transformer-remark-markdown-ast-c83f1b9ab313099444db8c16e08d2f60-gatsby-remark-katexgatsby-remark-prismjs-","val":{"type":"root","children":[{"type":"paragraph","children":[{"type":"text","value":"这里会记录阅读6.828课程lecture note的我的个人笔记。可能会中英混杂，不是很适合外人阅读，也请见谅。","position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":58,"offset":58},"indent":[]}}],"position":{"start":{"line":2,"column":1,"offset":1},"end":{"line":2,"column":58,"offset":58},"indent":[]}},{"type":"heading","depth":2,"children":[{"type":"text","value":"Lecture 6: Virtual Memory","position":{"start":{"line":4,"column":4,"offset":63},"end":{"line":4,"column":29,"offset":88},"indent":[]}}],"position":{"start":{"line":4,"column":1,"offset":60},"end":{"line":4,"column":29,"offset":88},"indent":[]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Virual Memory Overview","position":{"start":{"line":6,"column":5,"offset":94},"end":{"line":6,"column":27,"offset":116},"indent":[]}}],"position":{"start":{"line":6,"column":1,"offset":90},"end":{"line":6,"column":27,"offset":116},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"我们需要隔离开的address space","position":{"start":{"line":8,"column":3,"offset":120},"end":{"line":8,"column":24,"offset":141},"indent":[]}}],"position":{"start":{"line":8,"column":3,"offset":120},"end":{"line":8,"column":24,"offset":141},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"每个进程都有自己的内存，耶只能读写自己的内存。","position":{"start":{"line":10,"column":3,"offset":145},"end":{"line":10,"column":26,"offset":168},"indent":[]}}],"position":{"start":{"line":10,"column":3,"offset":145},"end":{"line":10,"column":26,"offset":168},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"挑战就在于如何能够完成multiplexing的同时保证isolation","position":{"start":{"line":12,"column":3,"offset":172},"end":{"line":12,"column":40,"offset":209},"indent":[]}}],"position":{"start":{"line":12,"column":3,"offset":172},"end":{"line":12,"column":40,"offset":209},"indent":[]}}],"position":{"start":{"line":8,"column":1,"offset":118},"end":{"line":13,"column":1,"offset":210},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"pagine机制提供了一个addressing的抽象","position":{"start":{"line":14,"column":3,"offset":213},"end":{"line":14,"column":29,"offset":239},"indent":[]}}],"position":{"start":{"line":14,"column":3,"offset":213},"end":{"line":14,"column":29,"offset":239},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">CPU -&gt; MMU -&gt; RAM\n    VA     PA</code></pre></div>","position":{"start":{"line":16,"column":3,"offset":243},"end":{"line":19,"column":6,"offset":292},"indent":[5,5,3]}},{"type":"paragraph","children":[{"type":"text","value":"软件只能通过VA进行load/store，而不能通过PA。","position":{"start":{"line":21,"column":3,"offset":296},"end":{"line":21,"column":32,"offset":325},"indent":[]}}],"position":{"start":{"line":21,"column":3,"offset":296},"end":{"line":21,"column":32,"offset":325},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"kernel告诉MMU该如何进行这个mapping","position":{"start":{"line":23,"column":3,"offset":329},"end":{"line":23,"column":28,"offset":354},"indent":[]}}],"position":{"start":{"line":23,"column":3,"offset":329},"end":{"line":23,"column":28,"offset":354},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"本质上，MMU里有一个表，key是VA, value是PA，这个表也就被称为page table","position":{"start":{"line":25,"column":5,"offset":360},"end":{"line":25,"column":53,"offset":408},"indent":[]}}],"position":{"start":{"line":25,"column":5,"offset":360},"end":{"line":25,"column":53,"offset":408},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":358},"end":{"line":25,"column":53,"offset":408},"indent":[]}}],"position":{"start":{"line":25,"column":3,"offset":358},"end":{"line":25,"column":53,"offset":408},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"MMU还可以限制用户能够使用哪些虚拟地址。","position":{"start":{"line":27,"column":3,"offset":412},"end":{"line":27,"column":24,"offset":433},"indent":[]}}],"position":{"start":{"line":27,"column":3,"offset":412},"end":{"line":27,"column":24,"offset":433},"indent":[]}}],"position":{"start":{"line":14,"column":1,"offset":211},"end":{"line":28,"column":1,"offset":434},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"x86的上述mapping的基本单元是4KB，这个单元被称为page","position":{"start":{"line":29,"column":3,"offset":437},"end":{"line":29,"column":37,"offset":471},"indent":[]}}],"position":{"start":{"line":29,"column":3,"offset":437},"end":{"line":29,"column":37,"offset":471},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"同时，mapping是按照4KB对齐的，也就是说每个paging都是start on 4 KB boundary","position":{"start":{"line":31,"column":3,"offset":475},"end":{"line":31,"column":59,"offset":531},"indent":[]}}],"position":{"start":{"line":31,"column":3,"offset":475},"end":{"line":31,"column":59,"offset":531},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"因为x86的内存为32位，所以后面的12位对应一个page内部的地址，上面提到的page table做的mapping就是用VA前20位对应到PA的前20位。","position":{"start":{"line":33,"column":3,"offset":535},"end":{"line":33,"column":82,"offset":614},"indent":[]}}],"position":{"start":{"line":33,"column":3,"offset":535},"end":{"line":33,"column":82,"offset":614},"indent":[]}}],"position":{"start":{"line":29,"column":1,"offset":435},"end":{"line":34,"column":1,"offset":615},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"page table里面的这2^20个entry被称为2^20个page table entry（PTE），我们来看一下一个PTE中有什么：","position":{"start":{"line":35,"column":3,"offset":618},"end":{"line":35,"column":73,"offset":688},"indent":[]}}],"position":{"start":{"line":35,"column":3,"offset":618},"end":{"line":35,"column":73,"offset":688},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"PTE的前面20位就是对应的PA（实际上是对应的PA中的那个page）的前20位，其被称为physical page number(PPN)。","position":{"start":{"line":37,"column":3,"offset":692},"end":{"line":37,"column":74,"offset":763},"indent":[]}}],"position":{"start":{"line":37,"column":3,"offset":692},"end":{"line":37,"column":74,"offset":763},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"后面的12位都是flag，如PTE","position":{"start":{"line":39,"column":3,"offset":767},"end":{"line":39,"column":20,"offset":784},"indent":[]}},{"type":"emphasis","children":[{"type":"text","value":"P表示是否存在，PTE","position":{"start":{"line":39,"column":21,"offset":785},"end":{"line":39,"column":32,"offset":796},"indent":[]}}],"position":{"start":{"line":39,"column":20,"offset":784},"end":{"line":39,"column":33,"offset":797},"indent":[]}},{"type":"text","value":"W表示是否可写，PTE_U表示user program是否可以使用。","position":{"start":{"line":39,"column":33,"offset":797},"end":{"line":39,"column":67,"offset":831},"indent":[]}}],"position":{"start":{"line":39,"column":3,"offset":767},"end":{"line":39,"column":67,"offset":831},"indent":[]}}],"position":{"start":{"line":35,"column":1,"offset":616},"end":{"line":40,"column":1,"offset":832},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"page table被存在哪里呢？","position":{"start":{"line":41,"column":3,"offset":835},"end":{"line":41,"column":20,"offset":852},"indent":[]}}],"position":{"start":{"line":41,"column":3,"offset":835},"end":{"line":41,"column":20,"offset":852},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"被存在RAM中，MMU会读取或存储PTE","position":{"start":{"line":43,"column":3,"offset":856},"end":{"line":43,"column":23,"offset":876},"indent":[]}}],"position":{"start":{"line":43,"column":3,"offset":856},"end":{"line":43,"column":23,"offset":876},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"操作系统可以读写PTE","position":{"start":{"line":45,"column":3,"offset":880},"end":{"line":45,"column":14,"offset":891},"indent":[]}}],"position":{"start":{"line":45,"column":3,"offset":880},"end":{"line":45,"column":14,"offset":891},"indent":[]}}],"position":{"start":{"line":41,"column":1,"offset":833},"end":{"line":46,"column":1,"offset":892},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"如果page table就仅仅是一个PTE的array，会出现什么问题呢？","position":{"start":{"line":47,"column":3,"offset":895},"end":{"line":47,"column":40,"offset":932},"indent":[]}}],"position":{"start":{"line":47,"column":3,"offset":895},"end":{"line":47,"column":40,"offset":932},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"首先是太大了，2^20条，每条32bit，整个table就会是4 MB了，这对于早期的机器太大了。","position":{"start":{"line":49,"column":3,"offset":936},"end":{"line":49,"column":52,"offset":985},"indent":[]}}],"position":{"start":{"line":49,"column":3,"offset":936},"end":{"line":49,"column":52,"offset":985},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"并且对于一个小的程序，它不需要那么多内存，可能只需要几百page，剩下的就浪费了。","position":{"start":{"line":51,"column":3,"offset":989},"end":{"line":51,"column":44,"offset":1030},"indent":[]}}],"position":{"start":{"line":51,"column":3,"offset":989},"end":{"line":51,"column":44,"offset":1030},"indent":[]}}],"position":{"start":{"line":47,"column":1,"offset":893},"end":{"line":52,"column":1,"offset":1031},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"所以x86使用了一个\"two-level page table\"以节省空间","position":{"start":{"line":53,"column":3,"offset":1034},"end":{"line":53,"column":40,"offset":1071},"indent":[]}}],"position":{"start":{"line":53,"column":3,"offset":1034},"end":{"line":53,"column":40,"offset":1071},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"除了在RAM中 分配PTE，还在内存中存一个叫page directory(PD)的东西。","position":{"start":{"line":55,"column":3,"offset":1075},"end":{"line":55,"column":48,"offset":1120},"indent":[]}}],"position":{"start":{"line":55,"column":3,"offset":1075},"end":{"line":55,"column":48,"offset":1120},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"PD也是一个array，其每一个entry被称为PDE，我们来看一下这个PDE的结构，","position":{"start":{"line":57,"column":3,"offset":1124},"end":{"line":57,"column":46,"offset":1167},"indent":[]}}],"position":{"start":{"line":57,"column":3,"offset":1124},"end":{"line":57,"column":46,"offset":1167},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"PDE的前20位也是一个PPN，其指向的page是一个用于存page table的page，存的每个page table会指向1024个PTE。","position":{"start":{"line":59,"column":3,"offset":1171},"end":{"line":59,"column":75,"offset":1243},"indent":[]}}],"position":{"start":{"line":59,"column":3,"offset":1171},"end":{"line":59,"column":75,"offset":1243},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"在PD中有1024个PDE，所以就指向了2^20个PTE。","position":{"start":{"line":61,"column":3,"offset":1247},"end":{"line":61,"column":32,"offset":1276},"indent":[]}}],"position":{"start":{"line":61,"column":3,"offset":1247},"end":{"line":61,"column":32,"offset":1276},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"刚刚提到了对于一个小程序，可能不需要那么多PTE，所以有的PDE可以是invalid，从而可以让address space变得很小。","position":{"start":{"line":63,"column":3,"offset":1280},"end":{"line":63,"column":69,"offset":1346},"indent":[]}}],"position":{"start":{"line":63,"column":3,"offset":1280},"end":{"line":63,"column":69,"offset":1346},"indent":[]}}],"position":{"start":{"line":53,"column":1,"offset":1032},"end":{"line":64,"column":1,"offset":1347},"indent":[1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"MMU如何知道page table在RAM的哪里呢？","position":{"start":{"line":65,"column":3,"offset":1350},"end":{"line":65,"column":29,"offset":1376},"indent":[]}}],"position":{"start":{"line":65,"column":3,"offset":1350},"end":{"line":65,"column":29,"offset":1376},"indent":[]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">%cr3</code>","position":{"start":{"line":67,"column":3,"offset":1380},"end":{"line":67,"column":9,"offset":1386},"indent":[]}},{"type":"text","value":"存了PD的地址。PD里面（间接）存了PTE的PA，而这些PTE不一定是连续的。","position":{"start":{"line":67,"column":9,"offset":1386},"end":{"line":67,"column":48,"offset":1425},"indent":[]}}],"position":{"start":{"line":67,"column":3,"offset":1380},"end":{"line":67,"column":48,"offset":1425},"indent":[]}}],"position":{"start":{"line":65,"column":1,"offset":1348},"end":{"line":68,"column":1,"offset":1426},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"x86 paging hardware是如何翻译VA的？","position":{"start":{"line":69,"column":3,"offset":1429},"end":{"line":69,"column":31,"offset":1457},"indent":[]}}],"position":{"start":{"line":69,"column":3,"offset":1429},"end":{"line":69,"column":31,"offset":1457},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"首先通过","position":{"start":{"line":71,"column":3,"offset":1461},"end":{"line":71,"column":7,"offset":1465},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">%cr3</code>","position":{"start":{"line":71,"column":7,"offset":1465},"end":{"line":71,"column":13,"offset":1471},"indent":[]}},{"type":"text","value":"找到PD的PA，从而可以加载PD，然后从VA的前10位找到对应的PT(page table)的PA，从而可以加载PT，然后用VA的之后10位找到PTE，PTE的前20位，也就是PPN加上VA的最后12位就得到了VA对应的PA。","position":{"start":{"line":71,"column":13,"offset":1471},"end":{"line":71,"column":126,"offset":1584},"indent":[]}}],"position":{"start":{"line":71,"column":3,"offset":1461},"end":{"line":71,"column":126,"offset":1584},"indent":[]}}],"position":{"start":{"line":69,"column":1,"offset":1427},"end":{"line":72,"column":1,"offset":1585},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"PTE中的flag","position":{"start":{"line":73,"column":3,"offset":1588},"end":{"line":73,"column":12,"offset":1597},"indent":[]}}],"position":{"start":{"line":73,"column":3,"offset":1588},"end":{"line":73,"column":12,"offset":1597},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"P, W, U","position":{"start":{"line":75,"column":3,"offset":1601},"end":{"line":75,"column":10,"offset":1608},"indent":[]}}],"position":{"start":{"line":75,"column":3,"offset":1601},"end":{"line":75,"column":10,"offset":1608},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"xv6用U来防止用户使用kernel memory","position":{"start":{"line":77,"column":3,"offset":1612},"end":{"line":77,"column":28,"offset":1637},"indent":[]}}],"position":{"start":{"line":77,"column":3,"offset":1612},"end":{"line":77,"column":28,"offset":1637},"indent":[]}}],"position":{"start":{"line":73,"column":1,"offset":1586},"end":{"line":78,"column":1,"offset":1638},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"如果这些flag没有被set（没有设为1）会出现什么？","position":{"start":{"line":79,"column":3,"offset":1641},"end":{"line":79,"column":30,"offset":1668},"indent":[]}}],"position":{"start":{"line":79,"column":3,"offset":1641},"end":{"line":79,"column":30,"offset":1668},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"会触发page fault，导致CPU存储寄存器，并强制转化到kernel（进入","position":{"start":{"line":81,"column":3,"offset":1672},"end":{"line":81,"column":43,"offset":1712},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">trap.c</code>","position":{"start":{"line":81,"column":43,"offset":1712},"end":{"line":81,"column":51,"offset":1720},"indent":[]}},{"type":"text","value":"）。","position":{"start":{"line":81,"column":51,"offset":1720},"end":{"line":81,"column":53,"offset":1722},"indent":[]}}],"position":{"start":{"line":81,"column":3,"offset":1672},"end":{"line":81,"column":53,"offset":1722},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"kernel可以选择produce error, kill process或者install a PTE, resume the process","position":{"start":{"line":83,"column":3,"offset":1726},"end":{"line":83,"column":75,"offset":1798},"indent":[]}}],"position":{"start":{"line":83,"column":3,"offset":1726},"end":{"line":83,"column":75,"offset":1798},"indent":[]}}],"position":{"start":{"line":79,"column":1,"offset":1639},"end":{"line":84,"column":1,"offset":1799},"indent":[1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"为什么选择mapping而不是其他的，如给一个上下界？","position":{"start":{"line":85,"column":3,"offset":1802},"end":{"line":85,"column":30,"offset":1829},"indent":[]}}],"position":{"start":{"line":85,"column":3,"offset":1802},"end":{"line":85,"column":30,"offset":1829},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"mapping带来的这种indirection让paging hardware可以解决很多问题，如","position":{"start":{"line":87,"column":3,"offset":1833},"end":{"line":87,"column":52,"offset":1882},"indent":[]}}],"position":{"start":{"line":87,"column":3,"offset":1833},"end":{"line":87,"column":52,"offset":1882},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"avoid fragmentation","position":{"start":{"line":89,"column":5,"offset":1888},"end":{"line":89,"column":24,"offset":1907},"indent":[]}}],"position":{"start":{"line":89,"column":5,"offset":1888},"end":{"line":89,"column":24,"offset":1907},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":1886},"end":{"line":89,"column":24,"offset":1907},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"copy-on-write fork","position":{"start":{"line":90,"column":5,"offset":1912},"end":{"line":90,"column":23,"offset":1930},"indent":[]}}],"position":{"start":{"line":90,"column":5,"offset":1912},"end":{"line":90,"column":23,"offset":1930},"indent":[]}}],"position":{"start":{"line":90,"column":3,"offset":1910},"end":{"line":90,"column":23,"offset":1930},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"lazy allocation","position":{"start":{"line":91,"column":5,"offset":1935},"end":{"line":91,"column":20,"offset":1950},"indent":[]}}],"position":{"start":{"line":91,"column":5,"offset":1935},"end":{"line":91,"column":20,"offset":1950},"indent":[]}}],"position":{"start":{"line":91,"column":3,"offset":1933},"end":{"line":91,"column":20,"offset":1950},"indent":[]}}],"position":{"start":{"line":89,"column":3,"offset":1886},"end":{"line":91,"column":20,"offset":1950},"indent":[3,3]}},{"type":"paragraph","children":[{"type":"text","value":"与其他的很多技巧（这些方法都是啥。。。不知道之后的一讲会不会讲清楚。。。）","position":{"start":{"line":93,"column":3,"offset":1954},"end":{"line":93,"column":40,"offset":1991},"indent":[]}}],"position":{"start":{"line":93,"column":3,"offset":1954},"end":{"line":93,"column":40,"offset":1991},"indent":[]}}],"position":{"start":{"line":85,"column":1,"offset":1800},"end":{"line":94,"column":1,"offset":1992},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"为什么在kernel中使用VA？","position":{"start":{"line":95,"column":3,"offset":1995},"end":{"line":95,"column":19,"offset":2011},"indent":[]}}],"position":{"start":{"line":95,"column":3,"offset":1995},"end":{"line":95,"column":19,"offset":2011},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"显然给user process一个page table是很合理的，但是为什么大多数kernel也这么做？","position":{"start":{"line":97,"column":3,"offset":2015},"end":{"line":97,"column":55,"offset":2067},"indent":[]}}],"position":{"start":{"line":97,"column":3,"offset":2015},"end":{"line":97,"column":55,"offset":2067},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"还是要提一下，的确是有kernel直接跑在PA上的。","position":{"start":{"line":99,"column":5,"offset":2073},"end":{"line":99,"column":31,"offset":2099},"indent":[]}}],"position":{"start":{"line":99,"column":5,"offset":2073},"end":{"line":99,"column":31,"offset":2099},"indent":[]}}],"position":{"start":{"line":99,"column":3,"offset":2071},"end":{"line":100,"column":1,"offset":2100},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"有一些原因很好，一些很逊。","position":{"start":{"line":101,"column":5,"offset":2105},"end":{"line":101,"column":18,"offset":2118},"indent":[]}}],"position":{"start":{"line":101,"column":5,"offset":2105},"end":{"line":101,"column":18,"offset":2118},"indent":[]}}],"position":{"start":{"line":101,"column":3,"offset":2103},"end":{"line":102,"column":1,"offset":2119},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"硬件使得很难关闭page table","position":{"start":{"line":103,"column":7,"offset":2126},"end":{"line":103,"column":25,"offset":2144},"indent":[]}}],"position":{"start":{"line":103,"column":7,"offset":2126},"end":{"line":103,"column":25,"offset":2144},"indent":[]}}],"position":{"start":{"line":103,"column":5,"offset":2124},"end":{"line":104,"column":1,"offset":2145},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"kernel用user address很方便，但是可能会导致poort isolation between kernel/application","position":{"start":{"line":105,"column":7,"offset":2152},"end":{"line":105,"column":79,"offset":2224},"indent":[]}}],"position":{"start":{"line":105,"column":7,"offset":2152},"end":{"line":105,"column":79,"offset":2224},"indent":[]}}],"position":{"start":{"line":105,"column":5,"offset":2150},"end":{"line":106,"column":1,"offset":2225},"indent":[1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"如果地址是连续的，也会很方便。比如kernel has both 4Kbyte objects and 64Kbyte objects（没看懂这是啥意思）","position":{"start":{"line":107,"column":7,"offset":2232},"end":{"line":107,"column":84,"offset":2309},"indent":[]}}],"position":{"start":{"line":107,"column":7,"offset":2232},"end":{"line":107,"column":84,"offset":2309},"indent":[]}}],"position":{"start":{"line":107,"column":5,"offset":2230},"end":{"line":108,"column":1,"offset":2310},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"如果没有page table，很容易有memory fragmentation（内存碎片？）","position":{"start":{"line":109,"column":7,"offset":2317},"end":{"line":109,"column":53,"offset":2363},"indent":[]}}],"position":{"start":{"line":109,"column":7,"offset":2317},"end":{"line":109,"column":53,"offset":2363},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"比如先分配64K, 释放，之后分配4K，4K占据了64K的地方，之后再分配64K就没法弄了。","position":{"start":{"line":111,"column":7,"offset":2371},"end":{"line":111,"column":53,"offset":2417},"indent":[]}}],"position":{"start":{"line":111,"column":7,"offset":2371},"end":{"line":111,"column":53,"offset":2417},"indent":[]}}],"position":{"start":{"line":109,"column":5,"offset":2315},"end":{"line":112,"column":1,"offset":2418},"indent":[1,5,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"kernel可以跑在有不同physical memory layout的硬件上。","position":{"start":{"line":113,"column":7,"offset":2425},"end":{"line":113,"column":47,"offset":2465},"indent":[]}}],"position":{"start":{"line":113,"column":7,"offset":2425},"end":{"line":113,"column":47,"offset":2465},"indent":[]}}],"position":{"start":{"line":113,"column":5,"offset":2423},"end":{"line":113,"column":47,"offset":2465},"indent":[]}}],"position":{"start":{"line":99,"column":3,"offset":2071},"end":{"line":113,"column":47,"offset":2465},"indent":[1,3,1,5,1,5,1,5,1,5,1,5,1,5]}}],"position":{"start":{"line":95,"column":1,"offset":1993},"end":{"line":113,"column":47,"offset":2465},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}}],"position":{"start":{"line":8,"column":1,"offset":118},"end":{"line":113,"column":47,"offset":2465},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"heading","depth":3,"children":[{"type":"text","value":"Case study: xv6 use of the x86 paging hardware","position":{"start":{"line":115,"column":5,"offset":2471},"end":{"line":115,"column":51,"offset":2517},"indent":[]}}],"position":{"start":{"line":115,"column":1,"offset":2467},"end":{"line":115,"column":51,"offset":2517},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"xv6的address space的一个概况：","position":{"start":{"line":117,"column":3,"offset":2521},"end":{"line":117,"column":26,"offset":2544},"indent":[]}}],"position":{"start":{"line":117,"column":3,"offset":2521},"end":{"line":117,"column":26,"offset":2544},"indent":[]}},{"type":"html","lang":null,"meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">0x00000000:0x80000000 -- user addresses below KERNBASE\n0x80000000:0x80100000 -- map low 1MB devices (for kernel)\n0x80100000:?          -- kernel instructions/data\n?         :0x8E000000 -- 224 MB of DRAM mapped here\n0xFE000000:0x00000000 -- more memory-mapped devices</code></pre></div>","position":{"start":{"line":119,"column":3,"offset":2548},"end":{"line":125,"column":6,"offset":2844},"indent":[5,5,5,5,5,3]}}],"position":{"start":{"line":117,"column":1,"offset":2519},"end":{"line":126,"column":1,"offset":2845},"indent":[1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"为什么用这种布局：","position":{"start":{"line":127,"column":3,"offset":2848},"end":{"line":127,"column":12,"offset":2857},"indent":[]}}],"position":{"start":{"line":127,"column":3,"offset":2848},"end":{"line":127,"column":12,"offset":2857},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"user virtual addresses 从0开始","position":{"start":{"line":129,"column":3,"offset":2861},"end":{"line":129,"column":30,"offset":2888},"indent":[]}}],"position":{"start":{"line":129,"column":3,"offset":2861},"end":{"line":129,"column":30,"offset":2888},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"注意不同user的0会map到不同的PA","position":{"start":{"line":131,"column":5,"offset":2894},"end":{"line":131,"column":25,"offset":2914},"indent":[]}}],"position":{"start":{"line":131,"column":5,"offset":2894},"end":{"line":131,"column":25,"offset":2914},"indent":[]}}],"position":{"start":{"line":131,"column":3,"offset":2892},"end":{"line":131,"column":25,"offset":2914},"indent":[]}}],"position":{"start":{"line":131,"column":3,"offset":2892},"end":{"line":131,"column":25,"offset":2914},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"2GB for user heap to grow contiguously","position":{"start":{"line":133,"column":3,"offset":2918},"end":{"line":133,"column":41,"offset":2956},"indent":[]}}],"position":{"start":{"line":133,"column":3,"offset":2918},"end":{"line":133,"column":41,"offset":2956},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"不过注意这2G不是连续的物理内存，所以就不会有fragmentation problem","position":{"start":{"line":135,"column":5,"offset":2962},"end":{"line":135,"column":49,"offset":3006},"indent":[]}}],"position":{"start":{"line":135,"column":5,"offset":2962},"end":{"line":135,"column":49,"offset":3006},"indent":[]}}],"position":{"start":{"line":135,"column":3,"offset":2960},"end":{"line":135,"column":49,"offset":3006},"indent":[]}}],"position":{"start":{"line":135,"column":3,"offset":2960},"end":{"line":135,"column":49,"offset":3006},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"kernel和user都被map了","position":{"start":{"line":137,"column":3,"offset":3010},"end":{"line":137,"column":20,"offset":3027},"indent":[]}}],"position":{"start":{"line":137,"column":3,"offset":3010},"end":{"line":137,"column":20,"offset":3027},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"为了方便进行system call或interrupt","position":{"start":{"line":139,"column":5,"offset":3033},"end":{"line":139,"column":32,"offset":3060},"indent":[]}}],"position":{"start":{"line":139,"column":5,"offset":3033},"end":{"line":139,"column":32,"offset":3060},"indent":[]}}],"position":{"start":{"line":139,"column":3,"offset":3031},"end":{"line":139,"column":32,"offset":3060},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"方便kernel读写用户内存","position":{"start":{"line":140,"column":5,"offset":3065},"end":{"line":140,"column":19,"offset":3079},"indent":[]}}],"position":{"start":{"line":140,"column":5,"offset":3065},"end":{"line":140,"column":19,"offset":3079},"indent":[]}}],"position":{"start":{"line":140,"column":3,"offset":3063},"end":{"line":140,"column":19,"offset":3079},"indent":[]}}],"position":{"start":{"line":139,"column":3,"offset":3031},"end":{"line":140,"column":19,"offset":3079},"indent":[3]}},{"type":"paragraph","children":[{"type":"text","value":"kernel永远都被map在固定位置：","position":{"start":{"line":142,"column":3,"offset":3083},"end":{"line":142,"column":22,"offset":3102},"indent":[]}}],"position":{"start":{"line":142,"column":3,"offset":3083},"end":{"line":142,"column":22,"offset":3102},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"方便切换进程","position":{"start":{"line":144,"column":5,"offset":3108},"end":{"line":144,"column":11,"offset":3114},"indent":[]}}],"position":{"start":{"line":144,"column":5,"offset":3108},"end":{"line":144,"column":11,"offset":3114},"indent":[]}}],"position":{"start":{"line":144,"column":3,"offset":3106},"end":{"line":144,"column":11,"offset":3114},"indent":[]}}],"position":{"start":{"line":144,"column":3,"offset":3106},"end":{"line":144,"column":11,"offset":3114},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"kernel线性映射（pa x mapped at va x+0x80000000)","position":{"start":{"line":146,"column":3,"offset":3118},"end":{"line":146,"column":45,"offset":3160},"indent":[]}}],"position":{"start":{"line":146,"column":3,"offset":3118},"end":{"line":146,"column":45,"offset":3160},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"方便kernel读写物理内存","position":{"start":{"line":148,"column":5,"offset":3166},"end":{"line":148,"column":19,"offset":3180},"indent":[]}}],"position":{"start":{"line":148,"column":5,"offset":3166},"end":{"line":148,"column":19,"offset":3180},"indent":[]}}],"position":{"start":{"line":148,"column":3,"offset":3164},"end":{"line":148,"column":19,"offset":3180},"indent":[]}}],"position":{"start":{"line":148,"column":3,"offset":3164},"end":{"line":148,"column":19,"offset":3180},"indent":[]}}],"position":{"start":{"line":127,"column":1,"offset":2846},"end":{"line":149,"column":1,"offset":3181},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"这种情况最大的进程能有：","position":{"start":{"line":150,"column":3,"offset":3184},"end":{"line":150,"column":15,"offset":3196},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">0x80000000</code>","position":{"start":{"line":150,"column":15,"offset":3196},"end":{"line":150,"column":27,"offset":3208},"indent":[]}},{"type":"text","value":"，也就是2G内存","position":{"start":{"line":150,"column":27,"offset":3208},"end":{"line":150,"column":35,"offset":3216},"indent":[]}}],"position":{"start":{"line":150,"column":3,"offset":3184},"end":{"line":150,"column":35,"offset":3216},"indent":[]}}],"position":{"start":{"line":150,"column":1,"offset":3182},"end":{"line":150,"column":35,"offset":3216},"indent":[]}}],"position":{"start":{"line":117,"column":1,"offset":2519},"end":{"line":150,"column":35,"offset":3216},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"下面我们来看代码：","position":{"start":{"line":152,"column":1,"offset":3218},"end":{"line":152,"column":10,"offset":3227},"indent":[]}}],"position":{"start":{"line":152,"column":1,"offset":3218},"end":{"line":152,"column":10,"offset":3227},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"中间的哪些断点之类的东西可能是和现在的版本代码不一样？所以这里为了弄清楚，我来自由发挥一波。","position":{"start":{"line":154,"column":1,"offset":3229},"end":{"line":154,"column":47,"offset":3275},"indent":[]}}],"position":{"start":{"line":154,"column":1,"offset":3229},"end":{"line":154,"column":47,"offset":3275},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"首先在这里需要记录一下，为了方便查找函数出现的位置，经常会使用的指令是","position":{"start":{"line":156,"column":1,"offset":3277},"end":{"line":156,"column":36,"offset":3312},"indent":[]}}],"position":{"start":{"line":156,"column":1,"offset":3277},"end":{"line":156,"column":36,"offset":3312},"indent":[]}},{"type":"html","lang":"bash","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">grep</span> -n funcname *.<span class=\"token punctuation\">[</span>chS<span class=\"token punctuation\">]</span></code></pre></div>","position":{"start":{"line":158,"column":1,"offset":3314},"end":{"line":160,"column":4,"offset":3352},"indent":[1,1]}},{"type":"paragraph","children":[{"type":"text","value":"从","position":{"start":{"line":162,"column":1,"offset":3354},"end":{"line":162,"column":2,"offset":3355},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">main</code>","position":{"start":{"line":162,"column":2,"offset":3355},"end":{"line":162,"column":8,"offset":3361},"indent":[]}},{"type":"text","value":"开始，","position":{"start":{"line":162,"column":8,"offset":3361},"end":{"line":162,"column":11,"offset":3364},"indent":[]}}],"position":{"start":{"line":162,"column":1,"offset":3354},"end":{"line":162,"column":11,"offset":3364},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Bootstrap processor starts running C code here.</span>\n<span class=\"token comment\">// Allocate a real stack and switch to it, first</span>\n<span class=\"token comment\">// doing some setup required for memory allocator to work.</span>\n<span class=\"token keyword\">int</span>\n<span class=\"token function\">main</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">kinit1</span><span class=\"token punctuation\">(</span>end<span class=\"token punctuation\">,</span> <span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// phys page allocator</span>\n  <span class=\"token function\">kvmalloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// kernel page table</span>\n  <span class=\"token function\">mpinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// detect other processors</span>\n  <span class=\"token function\">lapicinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>     <span class=\"token comment\">// interrupt controller</span>\n  <span class=\"token function\">seginit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// segment descriptors</span>\n  <span class=\"token function\">picinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// disable pic</span>\n  <span class=\"token function\">ioapicinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>    <span class=\"token comment\">// another interrupt controller</span>\n  <span class=\"token function\">consoleinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// console hardware</span>\n  <span class=\"token function\">uartinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// serial port</span>\n  <span class=\"token function\">pinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// process table</span>\n  <span class=\"token function\">tvinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// trap vectors</span>\n  <span class=\"token function\">binit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>         <span class=\"token comment\">// buffer cache</span>\n  <span class=\"token function\">fileinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// file table</span>\n  <span class=\"token function\">ideinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>       <span class=\"token comment\">// disk </span>\n  <span class=\"token function\">startothers</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>   <span class=\"token comment\">// start other processors</span>\n  <span class=\"token function\">kinit2</span><span class=\"token punctuation\">(</span><span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span><span class=\"token number\">4</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token operator\">*</span><span class=\"token number\">1024</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span>PHYSTOP<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span> <span class=\"token comment\">// must come after startothers()</span>\n  <span class=\"token function\">userinit</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>      <span class=\"token comment\">// first user process</span>\n  <span class=\"token function\">mpmain</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>        <span class=\"token comment\">// finish this processor's setup</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":164,"column":1,"offset":3366},"end":{"line":190,"column":4,"offset":4317},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">main</code>","position":{"start":{"line":192,"column":1,"offset":4319},"end":{"line":192,"column":7,"offset":4325},"indent":[]}},{"type":"text","value":"会先调用","position":{"start":{"line":192,"column":7,"offset":4325},"end":{"line":192,"column":11,"offset":4329},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kinit1</code>","position":{"start":{"line":192,"column":11,"offset":4329},"end":{"line":192,"column":19,"offset":4337},"indent":[]}},{"type":"text","value":"然后在","position":{"start":{"line":192,"column":19,"offset":4337},"end":{"line":192,"column":22,"offset":4340},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">entrypgdir</code>","position":{"start":{"line":192,"column":22,"offset":4340},"end":{"line":192,"column":34,"offset":4352},"indent":[]}},{"type":"text","value":"的范围里对kernel进行初始化，然后调用","position":{"start":{"line":192,"column":34,"offset":4352},"end":{"line":192,"column":55,"offset":4373},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kinit2</code>","position":{"start":{"line":192,"column":55,"offset":4373},"end":{"line":192,"column":63,"offset":4381},"indent":[]}},{"type":"text","value":"，其会把剩下的从","position":{"start":{"line":192,"column":63,"offset":4381},"end":{"line":192,"column":71,"offset":4389},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">entrypgdir</code>","position":{"start":{"line":192,"column":71,"offset":4389},"end":{"line":192,"column":83,"offset":4401},"indent":[]}},{"type":"text","value":"到","position":{"start":{"line":192,"column":83,"offset":4401},"end":{"line":192,"column":84,"offset":4402},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">PHYSTOP + KERNBASE</code>","position":{"start":{"line":192,"column":84,"offset":4402},"end":{"line":192,"column":104,"offset":4422},"indent":[]}},{"type":"text","value":"的虚拟内存分给kernel，这两个函数的具体在","position":{"start":{"line":192,"column":104,"offset":4422},"end":{"line":192,"column":127,"offset":4445},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">kalloc.c</code>","position":{"start":{"line":192,"column":127,"offset":4445},"end":{"line":192,"column":137,"offset":4455},"indent":[]}},{"type":"text","value":"中","position":{"start":{"line":192,"column":137,"offset":4455},"end":{"line":192,"column":138,"offset":4456},"indent":[]}}],"position":{"start":{"line":192,"column":1,"offset":4319},"end":{"line":192,"column":138,"offset":4456},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Initialization happens in two phases.</span>\n<span class=\"token comment\">// 1. main() calls kinit1() while still using entrypgdir to place just</span>\n<span class=\"token comment\">// the pages mapped by entrypgdir on free list.</span>\n<span class=\"token comment\">// 2. main() calls kinit2() with the rest of the physical pages</span>\n<span class=\"token comment\">// after installing a full page table that maps them on all cores.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">kinit1</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vstart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vend<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">initlock</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>kmem<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">,</span> <span class=\"token string\">\"kmem\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  kmem<span class=\"token punctuation\">.</span>use_lock <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">freerange</span><span class=\"token punctuation\">(</span>vstart<span class=\"token punctuation\">,</span> vend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 注意这里的freerange就是把这个范围里的physical memory free掉</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">kinit2</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vstart<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>vend<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">freerange</span><span class=\"token punctuation\">(</span>vstart<span class=\"token punctuation\">,</span> vend<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  kmem<span class=\"token punctuation\">.</span>use_lock <span class=\"token operator\">=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":194,"column":1,"offset":4458},"end":{"line":214,"column":4,"offset":5019},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"之后的","position":{"start":{"line":216,"column":1,"offset":5021},"end":{"line":216,"column":4,"offset":5024},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">userinit</code>","position":{"start":{"line":216,"column":4,"offset":5024},"end":{"line":216,"column":14,"offset":5034},"indent":[]}},{"type":"text","value":"是我们的重点，这个函数的目的就是设置第一个用户process，它在","position":{"start":{"line":216,"column":14,"offset":5034},"end":{"line":216,"column":47,"offset":5067},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">proc.c</code>","position":{"start":{"line":216,"column":47,"offset":5067},"end":{"line":216,"column":55,"offset":5075},"indent":[]}},{"type":"text","value":"中。","position":{"start":{"line":216,"column":55,"offset":5075},"end":{"line":216,"column":57,"offset":5077},"indent":[]}}],"position":{"start":{"line":216,"column":1,"offset":5021},"end":{"line":216,"column":57,"offset":5077},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">void</span>\n<span class=\"token function\">userinit</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">proc</span> <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">extern</span> <span class=\"token keyword\">char</span> _binary_initcode_start<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> _binary_initcode_size<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n\n  p <span class=\"token operator\">=</span> <span class=\"token function\">allocproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  \n  initproc <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir <span class=\"token operator\">=</span> <span class=\"token function\">setupkvm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"userinit: out of memory?\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">inituvm</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">,</span> _binary_initcode_start<span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">int</span><span class=\"token punctuation\">)</span>_binary_initcode_size<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>sz <span class=\"token operator\">=</span> PGSIZE<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>tf<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>p<span class=\"token operator\">-></span>tf<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>cs <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SEG_UCODE <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> DPL_USER<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>ds <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>SEG_UDATA <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> DPL_USER<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>es <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>ds<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>ss <span class=\"token operator\">=</span> p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>ds<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>eflags <span class=\"token operator\">=</span> FL_IF<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>esp <span class=\"token operator\">=</span> PGSIZE<span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>tf<span class=\"token operator\">-></span>eip <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// beginning of initcode.S</span>\n\n  <span class=\"token function\">safestrcpy</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">,</span> <span class=\"token string\">\"initcode\"</span><span class=\"token punctuation\">,</span> <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>name<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  p<span class=\"token operator\">-></span>cwd <span class=\"token operator\">=</span> <span class=\"token function\">namei</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token comment\">// this assignment to p->state lets other cores</span>\n  <span class=\"token comment\">// run this process. the acquire forces the above</span>\n  <span class=\"token comment\">// writes to be visible, and the lock is also needed</span>\n  <span class=\"token comment\">// because the assignment might not be atomic.</span>\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNABLE<span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":218,"column":1,"offset":5079},"end":{"line":254,"column":4,"offset":6022},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"我们这次主要考虑page table相关的内容，所以主要有两个函数，","position":{"start":{"line":256,"column":1,"offset":6024},"end":{"line":256,"column":35,"offset":6058},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setupkvm()</code>","position":{"start":{"line":256,"column":35,"offset":6058},"end":{"line":256,"column":47,"offset":6070},"indent":[]}},{"type":"text","value":"与","position":{"start":{"line":256,"column":47,"offset":6070},"end":{"line":256,"column":48,"offset":6071},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">inituvm</code>","position":{"start":{"line":256,"column":48,"offset":6071},"end":{"line":256,"column":57,"offset":6080},"indent":[]}},{"type":"text","value":"。首先是","position":{"start":{"line":256,"column":57,"offset":6080},"end":{"line":256,"column":61,"offset":6084},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setupkvm</code>","position":{"start":{"line":256,"column":61,"offset":6084},"end":{"line":256,"column":71,"offset":6094},"indent":[]}},{"type":"text","value":"：","position":{"start":{"line":256,"column":71,"offset":6094},"end":{"line":256,"column":72,"offset":6095},"indent":[]}}],"position":{"start":{"line":256,"column":1,"offset":6024},"end":{"line":256,"column":72,"offset":6095},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// There is one page table per process, plus one that's used when</span>\n<span class=\"token comment\">// a CPU is not running any process (kpgdir). The kernel uses the</span>\n<span class=\"token comment\">// current process's page table during system calls and interrupts;</span>\n<span class=\"token comment\">// page protection bits prevent user code from using the kernel's</span>\n<span class=\"token comment\">// mappings.</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// setupkvm() and exec() set up every page table like this:</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">//   0..KERNBASE: user memory (text+data+stack+heap), mapped to</span>\n<span class=\"token comment\">//                phys memory allocated by the kernel</span>\n<span class=\"token comment\">//   KERNBASE..KERNBASE+EXTMEM: mapped to 0..EXTMEM (for I/O space)</span>\n<span class=\"token comment\">//   KERNBASE+EXTMEM..data: mapped to EXTMEM..V2P(data)</span>\n<span class=\"token comment\">//                for the kernel's instructions and r/o data</span>\n<span class=\"token comment\">//   data..KERNBASE+PHYSTOP: mapped to V2P(data)..PHYSTOP,</span>\n<span class=\"token comment\">//                                  rw data + free physical memory</span>\n<span class=\"token comment\">//   0xfe000000..0: mapped direct (devices such as ioapic)</span>\n<span class=\"token comment\">//</span>\n<span class=\"token comment\">// The kernel allocates physical memory for its heap and for user memory</span>\n<span class=\"token comment\">// between V2P(end) and the end of physical memory (PHYSTOP)</span>\n<span class=\"token comment\">// (directly addressable from end..P2V(PHYSTOP)).</span>\n\n<span class=\"token comment\">// This table defines the kernel's mappings, which are present in</span>\n<span class=\"token comment\">// every process's page table.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">struct</span> <span class=\"token class-name\">kmap</span> <span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>virt<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这一段开始的虚拟地址</span>\n  uint phys_start<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 实际物理地址起始</span>\n  uint phys_end<span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 实际物理地址结束</span>\n  <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> kmap<span class=\"token punctuation\">[</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token punctuation\">{</span>\n <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>KERNBASE<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>             EXTMEM<span class=\"token punctuation\">,</span>    PTE_W<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// I/O space</span>\n <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>KERNLINK<span class=\"token punctuation\">,</span> <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>KERNLINK<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span>     <span class=\"token comment\">// kern text+rodata</span>\n <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>data<span class=\"token punctuation\">,</span>     <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>data<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span>     PHYSTOP<span class=\"token punctuation\">,</span>   PTE_W<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// kern data+memory</span>\n <span class=\"token punctuation\">{</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>DEVSPACE<span class=\"token punctuation\">,</span> DEVSPACE<span class=\"token punctuation\">,</span>      <span class=\"token number\">0</span><span class=\"token punctuation\">,</span>         PTE_W<span class=\"token punctuation\">}</span><span class=\"token punctuation\">,</span> <span class=\"token comment\">// more devices</span>\n<span class=\"token punctuation\">}</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token comment\">// Set up kernel part of a page table.</span>\npde_t<span class=\"token operator\">*</span>\n<span class=\"token function\">setupkvm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> <span class=\"token class-name\">kmap</span> <span class=\"token operator\">*</span>k<span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pgdir <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pde_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">kalloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>  <span class=\"token comment\">// kalloc会分配4096B的物理内存</span>\n    <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span><span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span>PHYSTOP<span class=\"token punctuation\">)</span> <span class=\"token operator\">></span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>DEVSPACE<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"PHYSTOP too high\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>k <span class=\"token operator\">=</span> kmap<span class=\"token punctuation\">;</span> k <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>kmap<span class=\"token punctuation\">[</span><span class=\"token function\">NELEM</span><span class=\"token punctuation\">(</span>kmap<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> k<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">mappages</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> k<span class=\"token operator\">-></span>virt<span class=\"token punctuation\">,</span> k<span class=\"token operator\">-></span>phys_end <span class=\"token operator\">-</span> k<span class=\"token operator\">-></span>phys_start<span class=\"token punctuation\">,</span>\n                <span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>k<span class=\"token operator\">-></span>phys_start<span class=\"token punctuation\">,</span> k<span class=\"token operator\">-></span>perm<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n      <span class=\"token function\">freevm</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> pgdir<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":258,"column":1,"offset":6097},"end":{"line":314,"column":4,"offset":8140},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"这里的重点函数就是","position":{"start":{"line":316,"column":1,"offset":8142},"end":{"line":316,"column":10,"offset":8151},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mappages</code>","position":{"start":{"line":316,"column":10,"offset":8151},"end":{"line":316,"column":20,"offset":8161},"indent":[]}},{"type":"text","value":"，","position":{"start":{"line":316,"column":20,"offset":8161},"end":{"line":316,"column":21,"offset":8162},"indent":[]}}],"position":{"start":{"line":316,"column":1,"offset":8142},"end":{"line":316,"column":21,"offset":8162},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Create PTEs for virtual addresses starting at va that refer to</span>\n<span class=\"token comment\">// physical addresses starting at pa. va and size might not</span>\n<span class=\"token comment\">// be page-aligned.</span>\n<span class=\"token keyword\">static</span> <span class=\"token keyword\">int</span>\n<span class=\"token function\">mappages</span><span class=\"token punctuation\">(</span>pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> uint size<span class=\"token punctuation\">,</span> uint pa<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> perm<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>a<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>last<span class=\"token punctuation\">;</span>\n  pte_t <span class=\"token operator\">*</span>pte<span class=\"token punctuation\">;</span>\n\n  a <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">PGROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  last <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">char</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">PGROUNDDOWN</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>va<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> size <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>pte <span class=\"token operator\">=</span> <span class=\"token function\">walkpgdir</span><span class=\"token punctuation\">(</span>pgdir<span class=\"token punctuation\">,</span> a<span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pte <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span>\n      <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"remap\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token operator\">*</span>pte <span class=\"token operator\">=</span> pa <span class=\"token operator\">|</span> perm <span class=\"token operator\">|</span> PTE_P<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>a <span class=\"token operator\">==</span> last<span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n    a <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">;</span>\n    pa <span class=\"token operator\">+=</span> PGSIZE<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":318,"column":1,"offset":8164},"end":{"line":343,"column":4,"offset":8744},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"在解释","position":{"start":{"line":345,"column":1,"offset":8746},"end":{"line":345,"column":4,"offset":8749},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mappages</code>","position":{"start":{"line":345,"column":4,"offset":8749},"end":{"line":345,"column":14,"offset":8759},"indent":[]}},{"type":"text","value":"之前，需要先解释一下这里面的","position":{"start":{"line":345,"column":14,"offset":8759},"end":{"line":345,"column":28,"offset":8773},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">walkpgdir</code>","position":{"start":{"line":345,"column":28,"offset":8773},"end":{"line":345,"column":39,"offset":8784},"indent":[]}},{"type":"text","value":"：","position":{"start":{"line":345,"column":39,"offset":8784},"end":{"line":345,"column":40,"offset":8785},"indent":[]}}],"position":{"start":{"line":345,"column":1,"offset":8746},"end":{"line":345,"column":40,"offset":8785},"indent":[]}},{"type":"html","lang":"c","meta":null,"value":"<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Return the address of the PTE in page table pgdir</span>\n<span class=\"token comment\">// that corresponds to virtual address va.  If alloc!=0,</span>\n<span class=\"token comment\">// create any required page table pages.</span>\n<span class=\"token keyword\">static</span> pte_t <span class=\"token operator\">*</span>\n<span class=\"token function\">walkpgdir</span><span class=\"token punctuation\">(</span>pde_t <span class=\"token operator\">*</span>pgdir<span class=\"token punctuation\">,</span> <span class=\"token keyword\">const</span> <span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>va<span class=\"token punctuation\">,</span> <span class=\"token keyword\">int</span> alloc<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  pde_t <span class=\"token operator\">*</span>pde<span class=\"token punctuation\">;</span>\n  pte_t <span class=\"token operator\">*</span>pgtab<span class=\"token punctuation\">;</span>\n\n  pde <span class=\"token operator\">=</span> <span class=\"token operator\">&amp;</span>pgdir<span class=\"token punctuation\">[</span><span class=\"token function\">PDX</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pde <span class=\"token operator\">&amp;</span> PTE_P<span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    pgtab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pte_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">P2V</span><span class=\"token punctuation\">(</span><span class=\"token function\">PTE_ADDR</span><span class=\"token punctuation\">(</span><span class=\"token operator\">*</span>pde<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span>alloc <span class=\"token operator\">||</span> <span class=\"token punctuation\">(</span>pgtab <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>pte_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token function\">kalloc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token keyword\">return</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// Make sure all those PTE_P bits are zero.</span>\n    <span class=\"token function\">memset</span><span class=\"token punctuation\">(</span>pgtab<span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">,</span> PGSIZE<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token comment\">// The permissions here are overly generous, but they can</span>\n    <span class=\"token comment\">// be further restricted by the permissions in the page table</span>\n    <span class=\"token comment\">// entries, if necessary.</span>\n    <span class=\"token operator\">*</span>pde <span class=\"token operator\">=</span> <span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>pgtab<span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> PTE_P <span class=\"token operator\">|</span> PTE_W <span class=\"token operator\">|</span> PTE_U<span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span>\n  <span class=\"token keyword\">return</span> <span class=\"token operator\">&amp;</span>pgtab<span class=\"token punctuation\">[</span><span class=\"token function\">PTX</span><span class=\"token punctuation\">(</span>va<span class=\"token punctuation\">)</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>","position":{"start":{"line":347,"column":1,"offset":8787},"end":{"line":372,"column":4,"offset":9523},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"html","value":"<code class=\"language-text\">walkpgdir</code>","position":{"start":{"line":374,"column":1,"offset":9525},"end":{"line":374,"column":12,"offset":9536},"indent":[]}},{"type":"text","value":"是找寻","position":{"start":{"line":374,"column":12,"offset":9536},"end":{"line":374,"column":15,"offset":9539},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">va</code>","position":{"start":{"line":374,"column":15,"offset":9539},"end":{"line":374,"column":19,"offset":9543},"indent":[]}},{"type":"text","value":"对应的物理地址。","position":{"start":{"line":374,"column":19,"offset":9543},"end":{"line":374,"column":27,"offset":9551},"indent":[]}}],"position":{"start":{"line":374,"column":1,"offset":9525},"end":{"line":374,"column":27,"offset":9551},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":true,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"用va的前10位找到va对应的PDE。","position":{"start":{"line":376,"column":3,"offset":9555},"end":{"line":376,"column":22,"offset":9574},"indent":[]}}],"position":{"start":{"line":376,"column":3,"offset":9555},"end":{"line":376,"column":22,"offset":9574},"indent":[]}}],"position":{"start":{"line":376,"column":1,"offset":9553},"end":{"line":377,"column":1,"offset":9575},"indent":[1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"如果PDE不是空指针，同时其存在（PTE_P）被设置了，则再把PDE的物理地址转化为虚拟地址","position":{"start":{"line":378,"column":3,"offset":9578},"end":{"line":378,"column":49,"offset":9624},"indent":[]}}],"position":{"start":{"line":378,"column":3,"offset":9578},"end":{"line":378,"column":49,"offset":9624},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"找这个PDE对应的page table在哪里","position":{"start":{"line":380,"column":5,"offset":9630},"end":{"line":380,"column":27,"offset":9652},"indent":[]}}],"position":{"start":{"line":380,"column":5,"offset":9630},"end":{"line":380,"column":27,"offset":9652},"indent":[]}}],"position":{"start":{"line":380,"column":3,"offset":9628},"end":{"line":380,"column":27,"offset":9652},"indent":[]}}],"position":{"start":{"line":380,"column":3,"offset":9628},"end":{"line":380,"column":27,"offset":9652},"indent":[]}}],"position":{"start":{"line":378,"column":1,"offset":9576},"end":{"line":381,"column":1,"offset":9653},"indent":[1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"如果PDE是空的，同时alloc被设置为1了，说明需要分配新的page table了","position":{"start":{"line":382,"column":3,"offset":9656},"end":{"line":382,"column":45,"offset":9698},"indent":[]}}],"position":{"start":{"line":382,"column":3,"offset":9656},"end":{"line":382,"column":45,"offset":9698},"indent":[]}},{"type":"list","ordered":false,"start":null,"spread":false,"children":[{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"分配除一个4096B作为page table","position":{"start":{"line":384,"column":5,"offset":9704},"end":{"line":384,"column":27,"offset":9726},"indent":[]}}],"position":{"start":{"line":384,"column":5,"offset":9704},"end":{"line":384,"column":27,"offset":9726},"indent":[]}}],"position":{"start":{"line":384,"column":3,"offset":9702},"end":{"line":384,"column":27,"offset":9726},"indent":[]}},{"type":"listItem","spread":false,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"然后把这个对应的page table设置好权限，然后赋值给之前找到的PDE","position":{"start":{"line":385,"column":5,"offset":9731},"end":{"line":385,"column":42,"offset":9768},"indent":[]}}],"position":{"start":{"line":385,"column":5,"offset":9731},"end":{"line":385,"column":42,"offset":9768},"indent":[]}}],"position":{"start":{"line":385,"column":3,"offset":9729},"end":{"line":385,"column":42,"offset":9768},"indent":[]}}],"position":{"start":{"line":384,"column":3,"offset":9702},"end":{"line":385,"column":42,"offset":9768},"indent":[3]}}],"position":{"start":{"line":382,"column":1,"offset":9654},"end":{"line":386,"column":1,"offset":9769},"indent":[1,1,1,1]}},{"type":"listItem","spread":true,"checked":null,"children":[{"type":"paragraph","children":[{"type":"text","value":"用va的中间10位来从page table中找到对应的PTE的物理地址","position":{"start":{"line":387,"column":3,"offset":9772},"end":{"line":387,"column":38,"offset":9807},"indent":[]}}],"position":{"start":{"line":387,"column":3,"offset":9772},"end":{"line":387,"column":38,"offset":9807},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"注意PTE的地址指向的值的前20位加上va的后12位就是va对应的pa了。","position":{"start":{"line":389,"column":3,"offset":9811},"end":{"line":389,"column":40,"offset":9848},"indent":[]}}],"position":{"start":{"line":389,"column":3,"offset":9811},"end":{"line":389,"column":40,"offset":9848},"indent":[]}}],"position":{"start":{"line":387,"column":1,"offset":9770},"end":{"line":389,"column":40,"offset":9848},"indent":[1,1]}}],"position":{"start":{"line":376,"column":1,"offset":9553},"end":{"line":389,"column":40,"offset":9848},"indent":[1,1,1,1,1,1,1,1,1,1,1,1,1]}},{"type":"paragraph","children":[{"type":"text","value":"说完","position":{"start":{"line":391,"column":1,"offset":9850},"end":{"line":391,"column":3,"offset":9852},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">walkpgdir</code>","position":{"start":{"line":391,"column":3,"offset":9852},"end":{"line":391,"column":14,"offset":9863},"indent":[]}},{"type":"text","value":"就可以说回","position":{"start":{"line":391,"column":14,"offset":9863},"end":{"line":391,"column":19,"offset":9868},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">mappages</code>","position":{"start":{"line":391,"column":19,"offset":9868},"end":{"line":391,"column":29,"offset":9878},"indent":[]}},{"type":"text","value":"和","position":{"start":{"line":391,"column":29,"offset":9878},"end":{"line":391,"column":30,"offset":9879},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setupvm</code>","position":{"start":{"line":391,"column":30,"offset":9879},"end":{"line":391,"column":39,"offset":9888},"indent":[]}},{"type":"text","value":"，其主要就是把kernel的va对应的地址都分配了。","position":{"start":{"line":391,"column":39,"offset":9888},"end":{"line":391,"column":65,"offset":9914},"indent":[]}}],"position":{"start":{"line":391,"column":1,"offset":9850},"end":{"line":391,"column":65,"offset":9914},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"说完","position":{"start":{"line":393,"column":1,"offset":9916},"end":{"line":393,"column":3,"offset":9918},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">setupvm</code>","position":{"start":{"line":393,"column":3,"offset":9918},"end":{"line":393,"column":12,"offset":9927},"indent":[]}},{"type":"text","value":"就说","position":{"start":{"line":393,"column":12,"offset":9927},"end":{"line":393,"column":14,"offset":9929},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">inituvm</code>","position":{"start":{"line":393,"column":14,"offset":9929},"end":{"line":393,"column":23,"offset":9938},"indent":[]}},{"type":"text","value":"，就是把","position":{"start":{"line":393,"column":23,"offset":9938},"end":{"line":393,"column":27,"offset":9942},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">_binary_initcode_start</code>","position":{"start":{"line":393,"column":27,"offset":9942},"end":{"line":393,"column":51,"offset":9966},"indent":[]}},{"type":"text","value":"存在","position":{"start":{"line":393,"column":51,"offset":9966},"end":{"line":393,"column":53,"offset":9968},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">pgdir</code>","position":{"start":{"line":393,"column":53,"offset":9968},"end":{"line":393,"column":60,"offset":9975},"indent":[]}},{"type":"text","value":"的最开始的一个page中。","position":{"start":{"line":393,"column":60,"offset":9975},"end":{"line":393,"column":73,"offset":9988},"indent":[]}}],"position":{"start":{"line":393,"column":1,"offset":9916},"end":{"line":393,"column":73,"offset":9988},"indent":[]}},{"type":"paragraph","children":[{"type":"text","value":"除去最开始的初始化，在执行一个新的进程的时候也会分配新的内存的，有兴趣可以看一下","position":{"start":{"line":395,"column":1,"offset":9990},"end":{"line":395,"column":41,"offset":10030},"indent":[]}},{"type":"html","value":"<code class=\"language-text\">exec.c</code>","position":{"start":{"line":395,"column":41,"offset":10030},"end":{"line":395,"column":49,"offset":10038},"indent":[]}},{"type":"text","value":"中的代码。","position":{"start":{"line":395,"column":49,"offset":10038},"end":{"line":395,"column":54,"offset":10043},"indent":[]}}],"position":{"start":{"line":395,"column":1,"offset":9990},"end":{"line":395,"column":54,"offset":10043},"indent":[]}}],"position":{"start":{"line":1,"column":1,"offset":0},"end":{"line":395,"column":54,"offset":10043}}}}