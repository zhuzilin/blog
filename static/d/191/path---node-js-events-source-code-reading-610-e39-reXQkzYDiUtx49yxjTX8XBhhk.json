{"data":{"markdownRemark":{"html":"<p>It is well-known that Node.js is an event based JavaScript  runtime environment. And today let's dig deeper into the source code and have a look at how this event mechanism is implemented.</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\" cm-s-default\"\n      ><code><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">EventEmitter</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">require</span><span>(</span><span class=\"cm-string\">'events'</span><span>);\n\n</span><span class=\"cm-keyword\">class</span><span> </span><span class=\"cm-def\">MyEmitter</span><span> </span><span class=\"cm-keyword\">extends</span><span> </span><span class=\"cm-variable\">EventEmitter</span><span> </span><span>{}\n\n</span><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">myEmitter</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">new</span><span> </span><span class=\"cm-variable\">MyEmitter</span><span>();\n</span><span class=\"cm-variable\">myEmitter</span><span>.</span><span class=\"cm-property\">on</span><span>(</span><span class=\"cm-string\">'event'</span><span>,</span><span> </span><span>()</span><span> </span><span class=\"cm-operator\">=></span><span> </span><span>{\n</span><span>  </span><span class=\"cm-variable\">console</span><span>.</span><span class=\"cm-property\">log</span><span>(</span><span class=\"cm-string\">'an event occurred!'</span><span>);\n});\n</span><span class=\"cm-variable\">myEmitter</span><span>.</span><span class=\"cm-property\">emit</span><span>(</span><span class=\"cm-string\">'event'</span><span>);</span></code></pre>\n    </div>\n<p>Here is demo of the core function of the events. Therefore it is reasonable that we just focus on functions shown in this demo.</p>\n<p>The event relevant code lies in the <code>./lib/events.js</code> file. Apparently, the code exports <code>EventEmitter</code> function as its default export.</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\" cm-s-default\"\n      ><code><span class=\"cm-keyword\">function</span><span> </span><span class=\"cm-def\">EventEmitter</span><span>()</span><span> </span><span>{\n</span><span>  </span><span class=\"cm-variable\">EventEmitter</span><span>.</span><span class=\"cm-property\">init</span><span>.</span><span class=\"cm-property\">call</span><span>(</span><span class=\"cm-keyword\">this</span><span>);\n}\n</span><span class=\"cm-variable\">module</span><span>.</span><span class=\"cm-property\">exports</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">EventEmitter</span><span>;</span></code></pre>\n    </div>\n<p>And the initialization is also simple. It only give initial value to some properties, <code>this._event</code> is a null object   that could map the event name to the function and <code>this._eventsCount</code> is the total number of the events.</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\" cm-s-default\"\n      ><code><span class=\"cm-variable\">EventEmitter</span><span>.</span><span class=\"cm-property\">init</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">function</span><span>()</span><span> </span><span>{\n</span><span>  </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-keyword\">this</span><span>.</span><span class=\"cm-property\">_events</span><span> </span><span class=\"cm-operator\">===</span><span> </span><span class=\"cm-atom\">undefined</span><span> </span><span class=\"cm-operator\">||</span><span>\n</span><span>      </span><span class=\"cm-keyword\">this</span><span>.</span><span class=\"cm-property\">_events</span><span> </span><span class=\"cm-operator\">===</span><span> </span><span class=\"cm-variable\">Object</span><span>.</span><span class=\"cm-property\">getPrototypeOf</span><span>(</span><span class=\"cm-keyword\">this</span><span>).</span><span class=\"cm-property\">_events</span><span>)</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-keyword\">this</span><span>.</span><span class=\"cm-property\">_events</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">Object</span><span>.</span><span class=\"cm-property\">create</span><span>(</span><span class=\"cm-atom\">null</span><span>);\n</span><span>    </span><span class=\"cm-keyword\">this</span><span>.</span><span class=\"cm-property\">_eventsCount</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-number\">0</span><span>;\n</span><span>  </span><span>}\n\n</span><span>  </span><span class=\"cm-keyword\">this</span><span>.</span><span class=\"cm-property\">_maxListeners</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">this</span><span>.</span><span class=\"cm-property\">_maxListeners</span><span> </span><span class=\"cm-operator\">||</span><span> </span><span class=\"cm-atom\">undefined</span><span>;\n};</span></code></pre>\n    </div>\n<p>Now comes the untrivial parts.</p>\n<p>The <code>on</code> function is a wrapper of the <code>addListener</code>, which is a wrapper of <code>_addListener</code>:</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\" cm-s-default\"\n      ><code><span class=\"cm-variable\">EventEmitter</span><span>.</span><span class=\"cm-property\">prototype</span><span>.</span><span class=\"cm-property\">addListener</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">function</span><span> </span><span class=\"cm-def\">addListener</span><span>(</span><span class=\"cm-def\">type</span><span>,</span><span> </span><span class=\"cm-def\">listener</span><span>)</span><span> </span><span>{\n</span><span>  </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable\">_addListener</span><span>(</span><span class=\"cm-keyword\">this</span><span>,</span><span> </span><span class=\"cm-variable-2\">type</span><span>,</span><span> </span><span class=\"cm-variable-2\">listener</span><span>,</span><span> </span><span class=\"cm-atom\">false</span><span>);\n};\n\n</span><span class=\"cm-variable\">EventEmitter</span><span>.</span><span class=\"cm-property\">prototype</span><span>.</span><span class=\"cm-property\">on</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">EventEmitter</span><span>.</span><span class=\"cm-property\">prototype</span><span>.</span><span class=\"cm-property\">addListener</span><span>;</span></code></pre>\n    </div>\n<p>So our main focus would be the <code>_addListener</code> function, notice the <code>target</code> argument is the <code>EventEmitter</code> object.</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\" cm-s-default\"\n      ><code><span class=\"cm-keyword\">function</span><span> </span><span class=\"cm-def\">_addListener</span><span>(</span><span class=\"cm-def\">target</span><span>,</span><span> </span><span class=\"cm-def\">type</span><span>,</span><span> </span><span class=\"cm-def\">listener</span><span>,</span><span> </span><span class=\"cm-def\">prepend</span><span>)</span><span> </span><span>{\n</span><span>  </span><span class=\"cm-keyword\">var</span><span> </span><span class=\"cm-def\">m</span><span>;\n</span><span>  </span><span class=\"cm-keyword\">var</span><span> </span><span class=\"cm-def\">events</span><span>;\n</span><span>  </span><span class=\"cm-keyword\">var</span><span> </span><span class=\"cm-def\">existing</span><span>;\n</span><span>  </span><span>\n</span><span>  </span><span class=\"cm-comment\">// To check if listener is function.</span><span>\n</span><span>  </span><span class=\"cm-variable\">checkListener</span><span>(</span><span class=\"cm-variable-2\">listener</span><span>);\n\n</span><span>  </span><span class=\"cm-variable-2\">events</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">target</span><span>.</span><span class=\"cm-property\">_events</span><span>;\n</span><span>  </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-variable-2\">events</span><span> </span><span class=\"cm-operator\">===</span><span> </span><span class=\"cm-atom\">undefined</span><span>)</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-variable-2\">events</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">target</span><span>.</span><span class=\"cm-property\">_events</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">Object</span><span>.</span><span class=\"cm-property\">create</span><span>(</span><span class=\"cm-atom\">null</span><span>);\n</span><span>    </span><span class=\"cm-variable-2\">target</span><span>.</span><span class=\"cm-property\">_eventsCount</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-number\">0</span><span>;\n</span><span>  </span><span>}</span><span> </span><span class=\"cm-keyword\">else</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-comment\">// To avoid recursion in the case that type === \"newListener\"! Before</span><span>\n</span><span>    </span><span class=\"cm-comment\">// adding it to the listeners, first emit \"newListener\".</span><span>\n</span><span>    </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-variable-2\">events</span><span>.</span><span class=\"cm-property\">newListener</span><span> </span><span class=\"cm-operator\">!==</span><span> </span><span class=\"cm-atom\">undefined</span><span>)</span><span> </span><span>{\n</span><span>      </span><span class=\"cm-variable-2\">target</span><span>.</span><span class=\"cm-property\">emit</span><span>(</span><span class=\"cm-string\">'newListener'</span><span>,</span><span> </span><span class=\"cm-variable-2\">type</span><span>,\n</span><span>                  </span><span class=\"cm-variable-2\">listener</span><span>.</span><span class=\"cm-property\">listener</span><span> </span><span class=\"cm-operator\">?</span><span> </span><span class=\"cm-variable-2\">listener</span><span>.</span><span class=\"cm-property\">listener</span><span> </span><span>:</span><span> </span><span class=\"cm-variable-2\">listener</span><span>);\n\n</span><span>      </span><span class=\"cm-comment\">// Re-assign `events` because a newListener handler could have caused the</span><span>\n</span><span>      </span><span class=\"cm-comment\">// this._events to be assigned to a new object</span><span>\n</span><span>      </span><span class=\"cm-variable-2\">events</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">target</span><span>.</span><span class=\"cm-property\">_events</span><span>;\n</span><span>    </span><span>}\n</span><span>    </span><span class=\"cm-variable-2\">existing</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">events</span><span>[</span><span class=\"cm-variable-2\">type</span><span>];\n</span><span>  </span><span>}\n\n</span><span>  </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-variable-2\">existing</span><span> </span><span class=\"cm-operator\">===</span><span> </span><span class=\"cm-atom\">undefined</span><span>)</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-comment\">// Optimize the case of one listener. Don't need the extra array object.</span><span>\n</span><span>    </span><span class=\"cm-variable-2\">events</span><span>[</span><span class=\"cm-variable-2\">type</span><span>]</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">listener</span><span>;\n</span><span>    </span><span class=\"cm-operator\">++</span><span class=\"cm-variable-2\">target</span><span>.</span><span class=\"cm-property\">_eventsCount</span><span>;\n</span><span>  </span><span>}</span><span> </span><span class=\"cm-keyword\">else</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-keyword\">typeof</span><span> </span><span class=\"cm-variable-2\">existing</span><span> </span><span class=\"cm-operator\">===</span><span> </span><span class=\"cm-string\">'function'</span><span>)</span><span> </span><span>{\n</span><span>      </span><span class=\"cm-comment\">// Adding the second element, need to change to array.</span><span>\n</span><span>      </span><span class=\"cm-variable-2\">existing</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">events</span><span>[</span><span class=\"cm-variable-2\">type</span><span>]</span><span> </span><span class=\"cm-operator\">=</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">prepend</span><span> </span><span class=\"cm-operator\">?</span><span> </span><span>[</span><span class=\"cm-variable-2\">listener</span><span>,</span><span> </span><span class=\"cm-variable-2\">existing</span><span>]</span><span> </span><span>:</span><span> </span><span>[</span><span class=\"cm-variable-2\">existing</span><span>,</span><span> </span><span class=\"cm-variable-2\">listener</span><span>];\n</span><span>      </span><span class=\"cm-comment\">// If we've already got an array, just append.</span><span>\n</span><span>    </span><span>}</span><span> </span><span class=\"cm-keyword\">else</span><span> </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-variable-2\">prepend</span><span>)</span><span> </span><span>{\n</span><span>      </span><span class=\"cm-variable-2\">existing</span><span>.</span><span class=\"cm-property\">unshift</span><span>(</span><span class=\"cm-variable-2\">listener</span><span>);\n</span><span>    </span><span>}</span><span> </span><span class=\"cm-keyword\">else</span><span> </span><span>{\n</span><span>      </span><span class=\"cm-variable-2\">existing</span><span>.</span><span class=\"cm-property\">push</span><span>(</span><span class=\"cm-variable-2\">listener</span><span>);\n</span><span>    </span><span>}\n\n</span><span>    </span><span class=\"cm-comment\">// Check for listener leak</span><span>\n</span><span>    </span><span class=\"cm-variable-2\">m</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">$getMaxListeners</span><span>(</span><span class=\"cm-variable-2\">target</span><span>);\n</span><span>    </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-variable-2\">m</span><span> </span><span class=\"cm-operator\">></span><span> </span><span class=\"cm-number\">0</span><span> </span><span class=\"cm-operator\">&&</span><span> </span><span class=\"cm-variable-2\">existing</span><span>.</span><span class=\"cm-property\">length</span><span> </span><span class=\"cm-operator\">></span><span> </span><span class=\"cm-variable-2\">m</span><span> </span><span class=\"cm-operator\">&&</span><span> </span><span class=\"cm-operator\">!</span><span class=\"cm-variable-2\">existing</span><span>.</span><span class=\"cm-property\">warned</span><span>)</span><span> </span><span>{\n</span><span>      </span><span class=\"cm-variable-2\">existing</span><span>.</span><span class=\"cm-property\">warned</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-atom\">true</span><span>;\n</span><span>      </span><span class=\"cm-comment\">// No error code for this since it is a Warning</span><span>\n</span><span>      </span><span class=\"cm-comment\">// eslint-disable-next-line no-restricted-syntax</span><span>\n</span><span>      </span><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">w</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">new</span><span> </span><span class=\"cm-variable\">Error</span><span>(</span><span class=\"cm-string\">'Possible EventEmitter memory leak detected. '</span><span> </span><span class=\"cm-operator\">+</span><span>\n</span><span>                          </span><span class=\"cm-string-2\">`${</span><span class=\"cm-variable-2\">existing</span><span>.</span><span class=\"cm-property\">length</span><span class=\"cm-string-2\">}</span><span> </span><span class=\"cm-string-2\">${</span><span class=\"cm-variable\">String</span><span>(</span><span class=\"cm-variable-2\">type</span><span>)</span><span class=\"cm-string-2\">}</span><span> </span><span class=\"cm-string-2\">listeners `</span><span> </span><span class=\"cm-operator\">+</span><span>\n</span><span>                          </span><span class=\"cm-string\">'added. Use emitter.setMaxListeners() to '</span><span> </span><span class=\"cm-operator\">+</span><span>\n</span><span>                          </span><span class=\"cm-string\">'increase limit'</span><span>);\n</span><span>      </span><span class=\"cm-variable-2\">w</span><span>.</span><span class=\"cm-property\">name</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-string\">'MaxListenersExceededWarning'</span><span>;\n</span><span>      </span><span class=\"cm-variable-2\">w</span><span>.</span><span class=\"cm-property\">emitter</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">target</span><span>;\n</span><span>      </span><span class=\"cm-variable-2\">w</span><span>.</span><span class=\"cm-property\">type</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">type</span><span>;\n</span><span>      </span><span class=\"cm-variable-2\">w</span><span>.</span><span class=\"cm-property\">count</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">existing</span><span>.</span><span class=\"cm-property\">length</span><span>;\n</span><span>      </span><span class=\"cm-variable\">process</span><span>.</span><span class=\"cm-property\">emitWarning</span><span>(</span><span class=\"cm-variable-2\">w</span><span>);\n</span><span>    </span><span>}\n</span><span>  </span><span>}\n\n</span><span>  </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable-2\">target</span><span>;\n}</span></code></pre>\n    </div>\n<p>The comment in the code is really clear. The major part of the code is to add the <code>listener</code> to  <code>_events</code> and add one to <code>_eventsCount</code>. Also, if there is an existing listener, we will substitute it. Notice, if there is a <code>\"newListener\"</code> listener registered, it will be called before add the <code>listener</code> to  <code>_events</code>.</p>\n<p>And for emit: </p>\n\n    <div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\" cm-s-default\"\n      ><code><span class=\"cm-variable\">EventEmitter</span><span>.</span><span class=\"cm-property\">prototype</span><span>.</span><span class=\"cm-property\">emit</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">function</span><span> </span><span class=\"cm-def\">emit</span><span>(</span><span class=\"cm-def\">type</span><span>,</span><span> </span><span class=\"cm-meta\">...</span><span class=\"cm-def\">args</span><span>)</span><span> </span><span>{\n</span><span>  </span><span class=\"cm-keyword\">let</span><span> </span><span class=\"cm-def\">doError</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span>(</span><span class=\"cm-variable-2\">type</span><span> </span><span class=\"cm-operator\">===</span><span> </span><span class=\"cm-string\">'error'</span><span>);</span><span>  </span><span class=\"cm-comment\">// if we are emitting an error</span><span>\n\n</span><span>  </span><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">events</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">this</span><span>.</span><span class=\"cm-property\">_events</span><span>;\n</span><span>  </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-variable-2\">events</span><span> </span><span class=\"cm-operator\">!==</span><span> </span><span class=\"cm-atom\">undefined</span><span>)\n</span><span>    </span><span class=\"cm-variable-2\">doError</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span>(</span><span class=\"cm-variable-2\">doError</span><span> </span><span class=\"cm-operator\">&&</span><span> </span><span class=\"cm-variable-2\">events</span><span>.</span><span class=\"cm-property\">error</span><span> </span><span class=\"cm-operator\">===</span><span> </span><span class=\"cm-atom\">undefined</span><span>);\n</span><span>  </span><span class=\"cm-keyword\">else</span><span> </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-operator\">!</span><span class=\"cm-variable-2\">doError</span><span>)</span><span>  </span><span class=\"cm-comment\">// event is undefined but emit event other than error.</span><span>\n</span><span>    </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-atom\">false</span><span>;\n\n</span><span>  </span><span class=\"cm-comment\">// If there is no 'error' event listener then throw.</span><span>\n</span><span>  </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-variable-2\">doError</span><span>)</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-keyword\">let</span><span> </span><span class=\"cm-def\">er</span><span>;\n</span><span>    </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-variable-2\">args</span><span>.</span><span class=\"cm-property\">length</span><span> </span><span class=\"cm-operator\">></span><span> </span><span class=\"cm-number\">0</span><span>)\n</span><span>      </span><span class=\"cm-variable-2\">er</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">args</span><span>[</span><span class=\"cm-number\">0</span><span>];\n</span><span>    </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-variable-2\">er</span><span> </span><span class=\"cm-keyword\">instanceof</span><span> </span><span class=\"cm-variable\">Error</span><span>)</span><span> </span><span>{\n</span><span>      </span><span class=\"cm-keyword\">try</span><span> </span><span>{\n</span><span>        </span><span class=\"cm-keyword\">const</span><span> </span><span>{</span><span> </span><span class=\"cm-def\">kExpandStackSymbol</span><span> </span><span>}</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">require</span><span>(</span><span class=\"cm-string\">'internal/util'</span><span>);\n</span><span>        </span><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">capture</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span>{};\n</span><span>        </span><span class=\"cm-variable\">Error</span><span>.</span><span class=\"cm-property\">captureStackTrace</span><span>(</span><span class=\"cm-variable-2\">capture</span><span>,</span><span> </span><span class=\"cm-variable\">EventEmitter</span><span>.</span><span class=\"cm-property\">prototype</span><span>.</span><span class=\"cm-property\">emit</span><span>);\n</span><span>        </span><span class=\"cm-variable\">Object</span><span>.</span><span class=\"cm-property\">defineProperty</span><span>(</span><span class=\"cm-variable-2\">er</span><span>,</span><span> </span><span class=\"cm-variable-2\">kExpandStackSymbol</span><span>,</span><span> </span><span>{\n</span><span>          </span><span class=\"cm-property\">value</span><span>:</span><span> </span><span class=\"cm-variable\">enhanceStackTrace</span><span>.</span><span class=\"cm-property\">bind</span><span>(</span><span class=\"cm-atom\">null</span><span>,</span><span> </span><span class=\"cm-variable-2\">er</span><span>,</span><span> </span><span class=\"cm-variable-2\">capture</span><span>),\n</span><span>          </span><span class=\"cm-property\">configurable</span><span>:</span><span> </span><span class=\"cm-atom\">true</span><span>\n</span><span>        </span><span>});\n</span><span>      </span><span>}</span><span> </span><span class=\"cm-keyword\">catch</span><span> </span><span>{}\n\n</span><span>      </span><span class=\"cm-comment\">// Note: The comments on the `throw` lines are intentional, they show</span><span>\n</span><span>      </span><span class=\"cm-comment\">// up in Node's output if this results in an unhandled exception.</span><span>\n</span><span>      </span><span class=\"cm-keyword\">throw</span><span> </span><span class=\"cm-variable-2\">er</span><span>;</span><span> </span><span class=\"cm-comment\">// Unhandled 'error' event</span><span>\n</span><span>    </span><span>}\n</span><span>    </span><span class=\"cm-comment\">// At least give some kind of context to the user</span><span>\n</span><span>    </span><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">errors</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">lazyErrors</span><span>();\n</span><span>    </span><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">err</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">new</span><span> </span><span class=\"cm-variable-2\">errors</span><span>.</span><span class=\"cm-property\">ERR_UNHANDLED_ERROR</span><span>(</span><span class=\"cm-variable-2\">er</span><span>);\n</span><span>    </span><span class=\"cm-variable-2\">err</span><span>.</span><span class=\"cm-property\">context</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">er</span><span>;\n</span><span>    </span><span class=\"cm-keyword\">throw</span><span> </span><span class=\"cm-variable-2\">err</span><span>;</span><span> </span><span class=\"cm-comment\">// Unhandled 'error' event</span><span>\n</span><span>  </span><span>}\n\n</span><span>  </span><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">handler</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">events</span><span>[</span><span class=\"cm-variable-2\">type</span><span>];\n\n</span><span>  </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-variable-2\">handler</span><span> </span><span class=\"cm-operator\">===</span><span> </span><span class=\"cm-atom\">undefined</span><span>)\n</span><span>    </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-atom\">false</span><span>;\n\n</span><span>  </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-keyword\">typeof</span><span> </span><span class=\"cm-variable-2\">handler</span><span> </span><span class=\"cm-operator\">===</span><span> </span><span class=\"cm-string\">'function'</span><span>)</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-variable\">Reflect</span><span>.</span><span class=\"cm-property\">apply</span><span>(</span><span class=\"cm-variable-2\">handler</span><span>,</span><span> </span><span class=\"cm-keyword\">this</span><span>,</span><span> </span><span class=\"cm-variable-2\">args</span><span>);\n</span><span>  </span><span>}</span><span> </span><span class=\"cm-keyword\">else</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">len</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">handler</span><span>.</span><span class=\"cm-property\">length</span><span>;\n</span><span>    </span><span class=\"cm-keyword\">const</span><span> </span><span class=\"cm-def\">listeners</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">arrayClone</span><span>(</span><span class=\"cm-variable-2\">handler</span><span>,</span><span> </span><span class=\"cm-variable-2\">len</span><span>);\n</span><span>    </span><span class=\"cm-keyword\">for</span><span> </span><span>(</span><span class=\"cm-keyword\">var</span><span> </span><span class=\"cm-def\">i</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-number\">0</span><span>;</span><span> </span><span class=\"cm-variable-2\">i</span><span> </span><span class=\"cm-operator\"><</span><span> </span><span class=\"cm-variable-2\">len</span><span>;</span><span> </span><span class=\"cm-operator\">++</span><span class=\"cm-variable-2\">i</span><span>)\n</span><span>      </span><span class=\"cm-variable\">Reflect</span><span>.</span><span class=\"cm-property\">apply</span><span>(</span><span class=\"cm-variable-2\">listeners</span><span>[</span><span class=\"cm-variable-2\">i</span><span>],</span><span> </span><span class=\"cm-keyword\">this</span><span>,</span><span> </span><span class=\"cm-variable-2\">args</span><span>);\n</span><span>  </span><span>}\n\n</span><span>  </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-atom\">true</span><span>;\n};</span></code></pre>\n    </div>\n<p>In the <code>emit</code> function, we will call the handler in the <code>_events</code>, except for <code>\"error\"</code>, which will be used as error processing.</p>\n<p>So basically, the events module is just save the event handlers in the EventEmitter and call it when emitting.</p>","frontmatter":{"title":"Node.js events source code reading"}}},"pageContext":{"slug":"/Node-js-events-source-code-reading/"}}