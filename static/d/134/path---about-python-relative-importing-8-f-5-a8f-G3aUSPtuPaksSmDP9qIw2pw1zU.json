{"data":{"markdownRemark":{"html":"<h2>Relative importing is painful</h2>\n<p>The relative importing has always been painful in python. For example, we are writing a web app using Flask. The file structure is like following:</p>\n<pre><code>\\root\n    run.py\n    \\views\n        blueprint.py\n</code></pre>\n<p>To use websocket, we have chosen the flask-socketio. In the run.py and our blueprint file, we all need the socketio variable. It is natural for one to write the following code:</p>\n<p>In run.py</p>\n<pre><code class=\"language-python\">... ...\nfrom flask-socketio import SocketIO\n... ...\nsocketio = SocketIO()\n\ndef register_blueprint(app):\n    ... ...\n    \napp = Flask(__name__)\nregister_blueprint(app)\n\nsocketio.init_app(app)\n... ...\n</code></pre>\n<p>And in blueprint.py</p>\n<pre><code>from ..run import socketio\n\n... ...\n@socket.on('message'):\n    ... ...\n</code></pre>\n<p>But this would trigger: </p>\n<pre><code class=\"language-bash\">Error: attempted relative import beyond top-level package\n</code></pre>\n<h2>Decent solution</h2>\n<p>We need to move the variable socketio to __ init__.py. Now the file structure is:</p>\n<pre><code>\\root\n    run.py\n    \\views\n        __init__.py\n        blueprint.py\n</code></pre>\n<p>In __ init__.py:</p>\n<pre><code class=\"language-python\">socketio = SocketIO()\n</code></pre>\n<p>In run.py</p>\n<pre><code class=\"language-python\">from views import socketio\n</code></pre>\n<p>In blueprint.py</p>\n<pre><code class=\"language-python\">from . import socketio\n</code></pre>\n<p>Problem solved!</p>","frontmatter":{"title":"About python relative importing"}}},"pageContext":{"slug":"/About-python-relative-importing/"}}