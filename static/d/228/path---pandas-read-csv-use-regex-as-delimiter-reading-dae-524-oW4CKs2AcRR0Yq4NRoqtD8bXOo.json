{"data":{"markdownRemark":{"html":"<p>When doing my homework, I need to read a badly formed csv into a pandas dataframe. And what I need is to use regular expression for separation. Because the documentation is not good. I have to read the source code for it.</p>\n<h2>TL;DR</h2>\n<p>If using a regex as a delimiter, each line of the file would be treated with <code>re.split(pattern, line)</code>.</p>\n<h2>Source Code Reading</h2>\n<p>The core of read in the <code>read_csv</code> function is the <code>_read</code> function in <code>pandas/pandas/io/parsers.py</code>.  Here is the code:</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">_read</span><span>(</span><span class=\"cm-variable\">filepath_or_buffer</span><span>, </span><span class=\"cm-variable\">kwds</span><span>):</span><span>\n</span><span>    ... </span><span class=\"cm-string\">\"some check for the value in kwds\"</span><span> ...</span><span>\n</span><span>    </span><span>\n</span><span>    </span><span class=\"cm-comment\"># Create the parser.</span><span>\n</span><span>    </span><span class=\"cm-property\">parser</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">TextFileReader</span><span>(</span><span class=\"cm-variable\">filepath_or_buffer</span><span>, </span><span class=\"cm-operator\">**</span><span class=\"cm-variable\">kwds</span><span>)</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">chunksize</span><span> </span><span class=\"cm-keyword\">or</span><span> </span><span class=\"cm-variable\">iterator</span><span>:</span><span>\n</span><span>        </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable\">parser</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">try</span><span>:</span><span>\n</span><span>        </span><span class=\"cm-variable\">data</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">parser</span><span>.</span><span class=\"cm-property\">read</span><span>(</span><span class=\"cm-variable\">nrows</span><span>)</span><span>\n</span><span>    </span><span class=\"cm-keyword\">finally</span><span>:</span><span>\n</span><span>        </span><span class=\"cm-variable\">parser</span><span>.</span><span class=\"cm-property\">close</span><span>()</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">should_close</span><span>:</span><span>\n</span><span>        </span><span class=\"cm-keyword\">try</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable\">filepath_or_buffer</span><span>.</span><span class=\"cm-property\">close</span><span>()</span><span>\n</span><span>        </span><span class=\"cm-keyword\">except</span><span> </span><span class=\"cm-variable\">ValueError</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-keyword\">pass</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable\">data</span></code></pre>\n    </div>\n<p>The core of the <code>_read</code> function is the <code>TextFileReader</code> which is also in the same file.</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span class=\"cm-keyword\">class</span><span> </span><span class=\"cm-def\">TextFileReader</span><span>(</span><span class=\"cm-variable\">BaseIterator</span><span>):</span><span>\n</span><span>    </span><span class=\"cm-string\">\"\"\"</span><span>\n</span><span class=\"cm-string\">    Passed dialect overrides any of the related parser options</span><span>\n</span><span class=\"cm-string\">    \"\"\"</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">__init__</span><span>(</span><span class=\"cm-variable-2\">self</span><span>, </span><span class=\"cm-variable\">f</span><span>, </span><span class=\"cm-variable\">engine</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">None</span><span>, </span><span class=\"cm-operator\">**</span><span class=\"cm-variable\">kwds</span><span>):</span><span>\n\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">f</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">f</span><span>\n\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">engine</span><span> </span><span class=\"cm-keyword\">is</span><span> </span><span class=\"cm-keyword\">not</span><span> </span><span class=\"cm-keyword\">None</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable\">engine_specified</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">True</span><span>\n</span><span>        </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable\">engine</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-string\">'python'</span><span>\n</span><span>            </span><span class=\"cm-variable\">engine_specified</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">False</span><span>\n\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_engine_specified</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">kwds</span><span>.</span><span class=\"cm-property\">get</span><span>(</span><span class=\"cm-string\">'engine_specified'</span><span>, </span><span class=\"cm-variable\">engine_specified</span><span>)</span><span>\n\n</span><span>        ... </span><span class=\"cm-string\">\"check and correct some kwds key values\"</span><span> ...</span><span>\n\n</span><span>        </span><span class=\"cm-property\">self</span><span>.</span><span class=\"cm-property\">orig_options</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">kwds</span><span>\n\n</span><span>        </span><span class=\"cm-comment\"># miscellanea</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">engine</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">engine</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_engine</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">None</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_currow</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-number\">0</span><span>\n</span><span>\t\t</span><span>\n</span><span>        </span><span class=\"cm-comment\"># make the option legal for the engine</span><span>\n</span><span>        </span><span class=\"cm-variable\">options</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_get_options_with_defaults</span><span>(</span><span class=\"cm-variable\">engine</span><span>)</span><span>\n\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">chunksize</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">options</span><span>.</span><span class=\"cm-property\">pop</span><span>(</span><span class=\"cm-string\">'chunksize'</span><span>, </span><span class=\"cm-keyword\">None</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">nrows</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">options</span><span>.</span><span class=\"cm-property\">pop</span><span>(</span><span class=\"cm-string\">'nrows'</span><span>, </span><span class=\"cm-keyword\">None</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">squeeze</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">options</span><span>.</span><span class=\"cm-property\">pop</span><span>(</span><span class=\"cm-string\">'squeeze'</span><span>, </span><span class=\"cm-keyword\">False</span><span>)</span><span>\n\n</span><span>        </span><span class=\"cm-comment\"># might mutate self.engine</span><span>\n</span><span>        </span><span class=\"cm-comment\"># gh-16530 about file like object</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">engine</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_check_file_or_buffer</span><span>(</span><span class=\"cm-variable\">f</span><span>, </span><span class=\"cm-variable\">engine</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-comment\"># if some features are not supported by C engine, fall back to python one. </span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">options</span><span>, </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">engine</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_clean_options</span><span>(</span><span class=\"cm-variable\">options</span><span>, </span><span class=\"cm-variable\">engine</span><span>)</span><span>\n\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-string\">'has_index_names'</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-variable\">kwds</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">options</span><span>[</span><span class=\"cm-string\">'has_index_names'</span><span>] </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">kwds</span><span>[</span><span class=\"cm-string\">'has_index_names'</span><span>]</span><span>\n\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_make_engine</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">engine</span><span>)</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">close</span><span>(</span><span class=\"cm-variable-2\">self</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_engine</span><span>.</span><span class=\"cm-property\">close</span><span>()</span><span>\n</span><span>        </span><span>\n</span><span>    ... </span><span class=\"cm-string\">\"omit the code for arguments checking\"</span><span> ...</span><span>\n\n</span><span>    </span><span class=\"cm-property\">def</span><span> </span><span class=\"cm-variable\">__next__</span><span>(</span><span class=\"cm-variable-2\">self</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-keyword\">try</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">get_chunk</span><span>()</span><span>\n</span><span>        </span><span class=\"cm-keyword\">except</span><span> </span><span class=\"cm-variable\">StopIteration</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">close</span><span>()</span><span>\n</span><span>            </span><span class=\"cm-keyword\">raise</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">_make_engine</span><span>(</span><span class=\"cm-variable-2\">self</span><span>, </span><span class=\"cm-variable\">engine</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">'c'</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">engine</span><span> </span><span class=\"cm-operator\">==</span><span> </span><span class=\"cm-string\">'c'</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_engine</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">CParserWrapper</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">f</span><span>, </span><span class=\"cm-operator\">**</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">options</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">engine</span><span> </span><span class=\"cm-operator\">==</span><span> </span><span class=\"cm-string\">'python'</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-variable\">klass</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">PythonParser</span><span>\n</span><span>            </span><span class=\"cm-keyword\">elif</span><span> </span><span class=\"cm-variable\">engine</span><span> </span><span class=\"cm-operator\">==</span><span> </span><span class=\"cm-string\">'python-fwf'</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-variable\">klass</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">FixedWidthFieldParser</span><span>\n</span><span>            </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>                ... </span><span class=\"cm-string\">\"raise error\"</span><span> ...</span><span>\n</span><span>            </span><span class=\"cm-property\">self</span><span>.</span><span class=\"cm-property\">_engine</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">klass</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">f</span><span>, </span><span class=\"cm-operator\">**</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">options</span><span>)</span><span>\n\n</span><span>    ... ...</span><span>\n\n</span><span>    </span><span class=\"cm-property\">def</span><span> </span><span class=\"cm-variable\">read</span><span>(</span><span class=\"cm-variable-2\">self</span><span>, </span><span class=\"cm-variable\">nrows</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">None</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-variable\">nrows</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">_validate_integer</span><span>(</span><span class=\"cm-string\">'nrows'</span><span>, </span><span class=\"cm-variable\">nrows</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-variable\">ret</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_engine</span><span>.</span><span class=\"cm-property\">read</span><span>(</span><span class=\"cm-variable\">nrows</span><span>)</span><span>\n</span><span>        ... </span><span class=\"cm-string\">\"turn ret to dataframe\"</span><span> ...</span><span>\n</span><span>        </span><span class=\"cm-property\">return</span><span> </span><span class=\"cm-variable\">df</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">_create_index</span><span>(</span><span class=\"cm-variable-2\">self</span><span>, </span><span class=\"cm-variable\">ret</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-variable\">index</span><span>, </span><span class=\"cm-variable\">columns</span><span>, </span><span class=\"cm-variable\">col_dict</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">ret</span><span>\n</span><span>        </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable\">index</span><span>, </span><span class=\"cm-variable\">columns</span><span>, </span><span class=\"cm-variable\">col_dict</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">get_chunk</span><span>(</span><span class=\"cm-variable-2\">self</span><span>, </span><span class=\"cm-variable\">size</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">None</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">size</span><span> </span><span class=\"cm-keyword\">is</span><span> </span><span class=\"cm-keyword\">None</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable\">size</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">chunksize</span><span>\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">nrows</span><span> </span><span class=\"cm-keyword\">is</span><span> </span><span class=\"cm-keyword\">not</span><span> </span><span class=\"cm-keyword\">None</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_currow</span><span> </span><span class=\"cm-operator\">>=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">nrows</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-keyword\">raise</span><span> </span><span class=\"cm-variable\">StopIteration</span><span>\n</span><span>            </span><span class=\"cm-variable\">size</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-builtin\">min</span><span>(</span><span class=\"cm-variable\">size</span><span>, </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">nrows</span><span> </span><span class=\"cm-operator\">-</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_currow</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">read</span><span>(</span><span class=\"cm-variable\">nrows</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">size</span><span>)</span></code></pre>\n    </div>\n<p>The engine used would be <code>CParserWrapper</code> for C, <code>PythonParser</code> for python and <code>FixedWidthFieldParser</code></p>\n<p> for python-fwf, which adds some specialization to <code>PythonParser</code> . And this time, we will focus on <code>PythonParser</code> which has the most functionalities. I have tried my best to reduce the length of the code for <code>PythonParser</code>.</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span class=\"cm-keyword\">class</span><span> </span><span class=\"cm-def\">PythonParser</span><span>(</span><span class=\"cm-variable\">ParserBase</span><span>):</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">__init__</span><span>(</span><span class=\"cm-variable-2\">self</span><span>, </span><span class=\"cm-variable\">f</span><span>, </span><span class=\"cm-operator\">**</span><span class=\"cm-variable\">kwds</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-string\">\"\"\"</span><span>\n</span><span class=\"cm-string\">        Workhorse function for processing nested list into DataFrame</span><span>\n</span><span class=\"cm-string\">        Should be replaced by np.genfromtxt eventually?</span><span>\n</span><span class=\"cm-string\">        \"\"\"</span><span>\n</span><span>        </span><span class=\"cm-variable\">ParserBase</span><span>.</span><span class=\"cm-property\">__init__</span><span>(</span><span class=\"cm-variable-2\">self</span><span>, </span><span class=\"cm-variable\">kwds</span><span>)</span><span>\n\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">data</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">None</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">buf</span><span> </span><span class=\"cm-operator\">=</span><span> []</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-number\">0</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">line_pos</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-number\">0</span><span>\n</span><span>\t\t</span><span>\n</span><span>        ... </span><span class=\"cm-string\">\"similar to self.xxx = kwds['xxx']\"</span><span> ...</span><span>\n</span><span>            </span><span>\n</span><span>        </span><span class=\"cm-property\">self</span><span>.</span><span class=\"cm-property\">_comment_lines</span><span> </span><span class=\"cm-operator\">=</span><span> []</span><span>\n\n</span><span>        </span><span class=\"cm-variable\">mode</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-string\">'r'</span><span> </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">PY3</span><span> </span><span class=\"cm-keyword\">else</span><span> </span><span class=\"cm-string\">'rb'</span><span>\n</span><span>        </span><span class=\"cm-variable\">f</span><span>, </span><span class=\"cm-variable\">handles</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">_get_handle</span><span>(</span><span class=\"cm-variable\">f</span><span>, </span><span class=\"cm-variable\">mode</span><span>, </span><span class=\"cm-variable\">encoding</span><span class=\"cm-operator\">=</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">encoding</span><span>,</span><span>\n</span><span>                                 </span><span class=\"cm-variable\">compression</span><span class=\"cm-operator\">=</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">compression</span><span>,</span><span>\n</span><span>                                 </span><span class=\"cm-variable\">memory_map</span><span class=\"cm-operator\">=</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">memory_map</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">handles</span><span>.</span><span class=\"cm-property\">extend</span><span>(</span><span class=\"cm-variable\">handles</span><span>)</span><span>\n\n</span><span>        </span><span class=\"cm-comment\"># Set self.data to something that can read lines.</span><span>\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-builtin\">hasattr</span><span>(</span><span class=\"cm-variable\">f</span><span>, </span><span class=\"cm-string\">'readline'</span><span>):</span><span>\n</span><span>            </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_make_reader</span><span>(</span><span class=\"cm-variable\">f</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">data</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">f</span><span>\n\n</span><span>        </span><span class=\"cm-comment\"># Get columns in two steps: infer from data, then</span><span>\n</span><span>        </span><span class=\"cm-comment\"># infer column indices from self.usecols if it is specified.</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_col_indices</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">None</span><span>\n</span><span>        (</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">columns</span><span>, </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">num_original_columns</span><span>,</span><span>\n</span><span>         </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">unnamed_cols</span><span>) </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_infer_columns</span><span>()</span><span>\n\n</span><span>        </span><span class=\"cm-comment\"># Now self.columns has the set of columns that we will process.</span><span>\n</span><span>        </span><span class=\"cm-comment\"># The original set is stored in self.original_columns.</span><span>\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-builtin\">len</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">columns</span><span>) </span><span class=\"cm-operator\">></span><span> </span><span class=\"cm-number\">1</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-comment\"># we are processing a multi index column</span><span>\n</span><span>            </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">columns</span><span>, </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">index_names</span><span>, </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">col_names</span><span>, </span><span class=\"cm-variable\">_</span><span> </span><span class=\"cm-operator\">=</span><span> (</span><span>\n</span><span>                </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_extract_multi_indexer_columns</span><span>(</span><span>\n</span><span>                    </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">columns</span><span>, </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">index_names</span><span>, </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">col_names</span><span>\n</span><span>                )</span><span>\n</span><span>            )</span><span>\n</span><span>            </span><span class=\"cm-comment\"># Update list of original names to include all indices.</span><span>\n</span><span>            </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">num_original_columns</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-builtin\">len</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">columns</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">columns</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">columns</span><span>[</span><span class=\"cm-number\">0</span><span>]</span><span>\n\n</span><span>        </span><span class=\"cm-comment\"># get popped off for index</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">orig_names</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-builtin\">list</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">columns</span><span>)</span><span>\n</span><span>        </span><span>\n</span><span>        ... </span><span class=\"cm-string\">\"process date, decimal, thousand separator\"</span><span>...</span><span>\n</span><span>        </span><span>\n</span><span>    </span><span class=\"cm-property\">def</span><span> </span><span class=\"cm-variable\">_make_reader</span><span>(</span><span class=\"cm-variable-2\">self</span><span>, </span><span class=\"cm-variable\">f</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-variable\">sep</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">delimiter</span><span>\n\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">sep</span><span> </span><span class=\"cm-keyword\">is</span><span> </span><span class=\"cm-keyword\">None</span><span> </span><span class=\"cm-keyword\">or</span><span> </span><span class=\"cm-builtin\">len</span><span>(</span><span class=\"cm-variable\">sep</span><span>) </span><span class=\"cm-operator\">==</span><span> </span><span class=\"cm-number\">1</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">lineterminator</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-keyword\">raise</span><span> </span><span class=\"cm-variable\">ValueError</span><span>(</span><span class=\"cm-string\">'Custom line terminators not supported in '</span><span>\n</span><span>                                 </span><span class=\"cm-string\">'python parser (yet)'</span><span>)</span><span>\n\n</span><span>            </span><span class=\"cm-keyword\">class</span><span> </span><span class=\"cm-def\">MyDialect</span><span>(</span><span class=\"cm-variable\">csv</span><span>.</span><span class=\"cm-property\">Dialect</span><span>):</span><span>\n</span><span>                </span><span class=\"cm-variable\">delimiter</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">delimiter</span><span>\n</span><span>                </span><span class=\"cm-variable\">quotechar</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">quotechar</span><span>\n</span><span>                </span><span class=\"cm-variable\">escapechar</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">escapechar</span><span>\n</span><span>                </span><span class=\"cm-variable\">doublequote</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">doublequote</span><span>\n</span><span>                </span><span class=\"cm-variable\">skipinitialspace</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">skipinitialspace</span><span>\n</span><span>                </span><span class=\"cm-variable\">quoting</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">quoting</span><span>\n</span><span>                </span><span class=\"cm-variable\">lineterminator</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-string\">'\\n'</span><span>\n\n</span><span>            </span><span class=\"cm-variable\">dia</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">MyDialect</span><span>\n\n</span><span>            </span><span class=\"cm-variable\">sniff_sep</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">True</span><span>\n\n</span><span>            </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">sep</span><span> </span><span class=\"cm-keyword\">is</span><span> </span><span class=\"cm-keyword\">not</span><span> </span><span class=\"cm-keyword\">None</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-variable\">sniff_sep</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">False</span><span>\n</span><span>                </span><span class=\"cm-variable\">dia</span><span>.</span><span class=\"cm-property\">delimiter</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">sep</span><span>\n</span><span>            </span><span class=\"cm-comment\"># attempt to sniff the delimiter</span><span>\n</span><span>            </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">sniff_sep</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-variable\">line</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">f</span><span>.</span><span class=\"cm-property\">readline</span><span>()</span><span>\n</span><span>                </span><span class=\"cm-keyword\">while</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">skipfunc</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span>):</span><span>\n</span><span>                    </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span> </span><span class=\"cm-operator\">+=</span><span> </span><span class=\"cm-number\">1</span><span>\n</span><span>                    </span><span class=\"cm-variable\">line</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">f</span><span>.</span><span class=\"cm-property\">readline</span><span>()</span><span>\n\n</span><span>                </span><span class=\"cm-variable\">line</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_check_comments</span><span>([</span><span class=\"cm-variable\">line</span><span>])[</span><span class=\"cm-number\">0</span><span>]</span><span>\n\n</span><span>                </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span> </span><span class=\"cm-operator\">+=</span><span> </span><span class=\"cm-number\">1</span><span>\n</span><span>                </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">line_pos</span><span> </span><span class=\"cm-operator\">+=</span><span> </span><span class=\"cm-number\">1</span><span>\n</span><span>                </span><span class=\"cm-variable\">sniffed</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">csv</span><span>.</span><span class=\"cm-property\">Sniffer</span><span>().</span><span class=\"cm-property\">sniff</span><span>(</span><span class=\"cm-variable\">line</span><span>)</span><span>\n</span><span>                </span><span class=\"cm-variable\">dia</span><span>.</span><span class=\"cm-property\">delimiter</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">sniffed</span><span>.</span><span class=\"cm-property\">delimiter</span><span>\n</span><span>                </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">encoding</span><span> </span><span class=\"cm-keyword\">is</span><span> </span><span class=\"cm-keyword\">not</span><span> </span><span class=\"cm-keyword\">None</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">buf</span><span>.</span><span class=\"cm-property\">extend</span><span>(</span><span class=\"cm-builtin\">list</span><span>(</span><span>\n</span><span>                        </span><span class=\"cm-variable\">UnicodeReader</span><span>(</span><span class=\"cm-variable\">StringIO</span><span>(</span><span class=\"cm-variable\">line</span><span>),</span><span>\n</span><span>                                      </span><span class=\"cm-variable\">dialect</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">dia</span><span>,</span><span>\n</span><span>                                      </span><span class=\"cm-variable\">encoding</span><span class=\"cm-operator\">=</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">encoding</span><span>)))</span><span>\n</span><span>                </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">buf</span><span>.</span><span class=\"cm-property\">extend</span><span>(</span><span class=\"cm-builtin\">list</span><span>(</span><span class=\"cm-variable\">csv</span><span>.</span><span class=\"cm-property\">reader</span><span>(</span><span class=\"cm-variable\">StringIO</span><span>(</span><span class=\"cm-variable\">line</span><span>),</span><span>\n</span><span>                                                    </span><span class=\"cm-variable\">dialect</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">dia</span><span>)))</span><span>\n\n</span><span>            </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">encoding</span><span> </span><span class=\"cm-keyword\">is</span><span> </span><span class=\"cm-keyword\">not</span><span> </span><span class=\"cm-keyword\">None</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-variable\">reader</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">UnicodeReader</span><span>(</span><span class=\"cm-variable\">f</span><span>, </span><span class=\"cm-variable\">dialect</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">dia</span><span>,</span><span>\n</span><span>                                       </span><span class=\"cm-variable\">encoding</span><span class=\"cm-operator\">=</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">encoding</span><span>,</span><span>\n</span><span>                                       </span><span class=\"cm-variable\">strict</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">True</span><span>)</span><span>\n</span><span>            </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-variable\">reader</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">csv</span><span>.</span><span class=\"cm-property\">reader</span><span>(</span><span class=\"cm-variable\">f</span><span>, </span><span class=\"cm-variable\">dialect</span><span class=\"cm-operator\">=</span><span class=\"cm-variable\">dia</span><span>,</span><span>\n</span><span>                                    </span><span class=\"cm-variable\">strict</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">True</span><span>)</span><span>\n\n</span><span>        </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">_read</span><span>():</span><span>\n</span><span>                </span><span class=\"cm-variable\">line</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">f</span><span>.</span><span class=\"cm-property\">readline</span><span>()</span><span>\n\n</span><span>                </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">compat</span><span>.</span><span class=\"cm-property\">PY2</span><span> </span><span class=\"cm-keyword\">and</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">encoding</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-variable\">line</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">line</span><span>.</span><span class=\"cm-property\">decode</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">encoding</span><span>)</span><span>\n\n</span><span>                </span><span class=\"cm-variable\">pat</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">re</span><span>.</span><span class=\"cm-property\">compile</span><span>(</span><span class=\"cm-variable\">sep</span><span>)</span><span>\n</span><span>                </span><span class=\"cm-keyword\">yield</span><span> </span><span class=\"cm-variable\">pat</span><span>.</span><span class=\"cm-property\">split</span><span>(</span><span class=\"cm-variable\">line</span><span>.</span><span class=\"cm-property\">strip</span><span>())</span><span>\n</span><span>                </span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">line</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-variable\">f</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-keyword\">yield</span><span> </span><span class=\"cm-variable\">pat</span><span>.</span><span class=\"cm-property\">split</span><span>(</span><span class=\"cm-variable\">line</span><span>.</span><span class=\"cm-property\">strip</span><span>())</span><span>\n</span><span>            </span><span class=\"cm-variable\">reader</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">_read</span><span>()</span><span>\n\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">data</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">reader</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">read</span><span>(</span><span class=\"cm-variable-2\">self</span><span>, </span><span class=\"cm-variable\">rows</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">None</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-keyword\">try</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable\">content</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_get_lines</span><span>(</span><span class=\"cm-variable\">rows</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-keyword\">except</span><span> </span><span class=\"cm-variable\">StopIteration</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_first_chunk</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-variable\">content</span><span> </span><span class=\"cm-operator\">=</span><span> []</span><span>\n</span><span>            </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-keyword\">raise</span><span>\n\n</span><span>        </span><span class=\"cm-comment\"># done with first read, next time raise StopIteration</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_first_chunk</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">False</span><span>\n\n</span><span>        ... </span><span class=\"cm-string\">\"turn content into index, columns, data\"</span><span> ...</span><span>\n\n</span><span>        </span><span class=\"cm-property\">return</span><span> </span><span class=\"cm-variable\">index</span><span>, </span><span class=\"cm-variable\">columns</span><span>, </span><span class=\"cm-variable\">data</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">_next_line</span><span>(</span><span class=\"cm-variable-2\">self</span><span>):</span><span>\n</span><span>        ... </span><span class=\"cm-string\">\"move self.pos in self.data to get next needed line\"</span><span> ...</span><span>\n\n</span><span>        </span><span class=\"cm-property\">self</span><span>.</span><span class=\"cm-property\">line_pos</span><span> </span><span class=\"cm-operator\">+=</span><span> </span><span class=\"cm-number\">1</span><span>\n</span><span>        </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">buf</span><span>.</span><span class=\"cm-property\">append</span><span>(</span><span class=\"cm-variable\">line</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable\">line</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">_next_iter_line</span><span>(</span><span class=\"cm-variable-2\">self</span><span>, </span><span class=\"cm-variable\">row_num</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-string\">\"\"\"</span><span>\n</span><span class=\"cm-string\">        Wrapper around iterating through `self.data` (CSV source).</span><span>\n</span><span class=\"cm-string\">        When a CSV error is raised, we check for specific</span><span>\n</span><span class=\"cm-string\">        error messages that allow us to customize the</span><span>\n</span><span class=\"cm-string\">        error message displayed to the user.</span><span>\n</span><span class=\"cm-string\">        Parameters</span><span>\n</span><span class=\"cm-string\">        ----------</span><span>\n</span><span class=\"cm-string\">        row_num : The row number of the line being parsed.</span><span>\n</span><span class=\"cm-string\">        \"\"\"</span><span>\n\n</span><span>        </span><span class=\"cm-keyword\">try</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-builtin\">next</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">data</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-keyword\">except</span><span> </span><span class=\"cm-variable\">csv</span><span>.</span><span class=\"cm-property\">Error</span><span> </span><span class=\"cm-keyword\">as</span><span> </span><span class=\"cm-variable\">e</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">warn_bad_lines</span><span> </span><span class=\"cm-keyword\">or</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">error_bad_lines</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-variable\">msg</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-builtin\">str</span><span>(</span><span class=\"cm-variable\">e</span><span>)</span><span>\n\n</span><span>                </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-string\">'NULL byte'</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-variable\">msg</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-variable\">msg</span><span> </span><span class=\"cm-operator\">=</span><span> (</span><span class=\"cm-string\">'NULL byte detected. This byte '</span><span>\n</span><span>                           </span><span class=\"cm-string\">'cannot be processed in Python\\'s '</span><span>\n</span><span>                           </span><span class=\"cm-string\">'native csv library at the moment, '</span><span>\n</span><span>                           </span><span class=\"cm-string\">'so please pass in engine=\\'c\\' instead'</span><span>)</span><span>\n\n</span><span>                </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">skipfooter</span><span> </span><span class=\"cm-operator\">></span><span> </span><span class=\"cm-number\">0</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-variable\">reason</span><span> </span><span class=\"cm-operator\">=</span><span> (</span><span class=\"cm-string\">'Error could possibly be due to '</span><span>\n</span><span>                              </span><span class=\"cm-string\">'parsing errors in the skipped footer rows '</span><span>\n</span><span>                              </span><span class=\"cm-string\">'(the skipfooter keyword is only applied '</span><span>\n</span><span>                              </span><span class=\"cm-string\">'after Python\\'s csv library has parsed '</span><span>\n</span><span>                              </span><span class=\"cm-string\">'all rows).'</span><span>)</span><span>\n</span><span>                    </span><span class=\"cm-variable\">msg</span><span> </span><span class=\"cm-operator\">+=</span><span> </span><span class=\"cm-string\">'. '</span><span> </span><span class=\"cm-operator\">+</span><span> </span><span class=\"cm-variable\">reason</span><span>\n</span><span>\t\t\t\t</span><span class=\"cm-comment\"># Alert a user about a malformed row.</span><span>\n</span><span>                </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_alert_malformed</span><span>(</span><span class=\"cm-variable\">msg</span><span>, </span><span class=\"cm-variable\">row_num</span><span>)</span><span>\n</span><span>            </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-keyword\">None</span><span>\n\n</span><span>    </span><span class=\"cm-variable\">_implicit_index</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">False</span><span>\n\n</span><span>    </span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">_get_lines</span><span>(</span><span class=\"cm-variable-2\">self</span><span>, </span><span class=\"cm-variable\">rows</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">None</span><span>):</span><span>\n</span><span>        </span><span class=\"cm-variable\">lines</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">buf</span><span>\n</span><span>        </span><span class=\"cm-variable\">new_rows</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">None</span><span>\n\n</span><span>        </span><span class=\"cm-comment\"># already fetched some number</span><span>\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">rows</span><span> </span><span class=\"cm-keyword\">is</span><span> </span><span class=\"cm-keyword\">not</span><span> </span><span class=\"cm-keyword\">None</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-comment\"># we already have the lines in the buffer</span><span>\n</span><span>            </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-builtin\">len</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">buf</span><span>) </span><span class=\"cm-operator\">>=</span><span> </span><span class=\"cm-variable\">rows</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-variable\">new_rows</span><span>, </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">buf</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">buf</span><span>[:</span><span class=\"cm-variable\">rows</span><span>], </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">buf</span><span>[</span><span class=\"cm-variable\">rows</span><span>:]</span><span>\n\n</span><span>            </span><span class=\"cm-comment\"># need some lines</span><span>\n</span><span>            </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-variable\">rows</span><span> </span><span class=\"cm-operator\">-=</span><span> </span><span class=\"cm-builtin\">len</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">buf</span><span>)</span><span>\n\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">new_rows</span><span> </span><span class=\"cm-keyword\">is</span><span> </span><span class=\"cm-keyword\">None</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-builtin\">isinstance</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">data</span><span>, </span><span class=\"cm-builtin\">list</span><span>):</span><span>\n</span><span>                </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span> </span><span class=\"cm-operator\">></span><span> </span><span class=\"cm-builtin\">len</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">data</span><span>):</span><span>\n</span><span>                    </span><span class=\"cm-keyword\">raise</span><span> </span><span class=\"cm-variable\">StopIteration</span><span>\n</span><span>                </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">rows</span><span> </span><span class=\"cm-keyword\">is</span><span> </span><span class=\"cm-keyword\">None</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-variable\">new_rows</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">data</span><span>[</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span>:]</span><span>\n</span><span>                    </span><span class=\"cm-variable\">new_pos</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-builtin\">len</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">data</span><span>)</span><span>\n</span><span>                </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-variable\">new_rows</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">data</span><span>[</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span>:</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span> </span><span class=\"cm-operator\">+</span><span> </span><span class=\"cm-variable\">rows</span><span>]</span><span>\n</span><span>                    </span><span class=\"cm-variable\">new_pos</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span> </span><span class=\"cm-operator\">+</span><span> </span><span class=\"cm-variable\">rows</span><span>\n\n</span><span>                </span><span class=\"cm-comment\"># Check for stop rows. n.b.: self.skiprows is a set.</span><span>\n</span><span>                </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">skiprows</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-variable\">new_rows</span><span> </span><span class=\"cm-operator\">=</span><span> [</span><span class=\"cm-variable\">row</span><span> </span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">i</span><span>, </span><span class=\"cm-variable\">row</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-builtin\">enumerate</span><span>(</span><span class=\"cm-variable\">new_rows</span><span>)</span><span>\n</span><span>                                </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-keyword\">not</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">skipfunc</span><span>(</span><span class=\"cm-variable\">i</span><span> </span><span class=\"cm-operator\">+</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span>)]</span><span>\n\n</span><span>                </span><span class=\"cm-variable\">lines</span><span>.</span><span class=\"cm-property\">extend</span><span>(</span><span class=\"cm-variable\">new_rows</span><span>)</span><span>\n</span><span>                </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">new_pos</span><span>\n\n</span><span>            </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>                </span><span class=\"cm-variable\">new_rows</span><span> </span><span class=\"cm-operator\">=</span><span> []</span><span>\n</span><span>                </span><span class=\"cm-keyword\">try</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">rows</span><span> </span><span class=\"cm-keyword\">is</span><span> </span><span class=\"cm-keyword\">not</span><span> </span><span class=\"cm-keyword\">None</span><span>:</span><span>\n</span><span>                        </span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">_</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-builtin\">range</span><span>(</span><span class=\"cm-variable\">rows</span><span>):</span><span>\n</span><span>                            </span><span class=\"cm-variable\">new_rows</span><span>.</span><span class=\"cm-property\">append</span><span>(</span><span class=\"cm-builtin\">next</span><span>(</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">data</span><span>))</span><span>\n</span><span>                        </span><span class=\"cm-variable\">lines</span><span>.</span><span class=\"cm-property\">extend</span><span>(</span><span class=\"cm-variable\">new_rows</span><span>)</span><span>\n</span><span>                    </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>                        </span><span class=\"cm-variable\">rows</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-number\">0</span><span>\n\n</span><span>                        </span><span class=\"cm-keyword\">while</span><span> </span><span class=\"cm-keyword\">True</span><span>:</span><span>\n</span><span>                            </span><span class=\"cm-variable\">new_row</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_next_iter_line</span><span>(</span><span>\n</span><span>                                </span><span class=\"cm-variable\">row_num</span><span class=\"cm-operator\">=</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span> </span><span class=\"cm-operator\">+</span><span> </span><span class=\"cm-variable\">rows</span><span> </span><span class=\"cm-operator\">+</span><span> </span><span class=\"cm-number\">1</span><span>)</span><span>\n</span><span>                            </span><span class=\"cm-variable\">rows</span><span> </span><span class=\"cm-operator\">+=</span><span> </span><span class=\"cm-number\">1</span><span>\n\n</span><span>                            </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">new_row</span><span> </span><span class=\"cm-keyword\">is</span><span> </span><span class=\"cm-keyword\">not</span><span> </span><span class=\"cm-keyword\">None</span><span>:</span><span>\n</span><span>                                </span><span class=\"cm-variable\">new_rows</span><span>.</span><span class=\"cm-property\">append</span><span>(</span><span class=\"cm-variable\">new_row</span><span>)</span><span>\n\n</span><span>                </span><span class=\"cm-keyword\">except</span><span> </span><span class=\"cm-variable\">StopIteration</span><span>:</span><span>\n</span><span>                    </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">skiprows</span><span>:</span><span>\n</span><span>                        </span><span class=\"cm-variable\">new_rows</span><span> </span><span class=\"cm-operator\">=</span><span> [</span><span class=\"cm-variable\">row</span><span> </span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">i</span><span>, </span><span class=\"cm-variable\">row</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-builtin\">enumerate</span><span>(</span><span class=\"cm-variable\">new_rows</span><span>)</span><span>\n</span><span>                                    </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-keyword\">not</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">skipfunc</span><span>(</span><span class=\"cm-variable\">i</span><span> </span><span class=\"cm-operator\">+</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span>)]</span><span>\n</span><span>                    </span><span class=\"cm-variable\">lines</span><span>.</span><span class=\"cm-property\">extend</span><span>(</span><span class=\"cm-variable\">new_rows</span><span>)</span><span>\n</span><span>                    </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-builtin\">len</span><span>(</span><span class=\"cm-variable\">lines</span><span>) </span><span class=\"cm-operator\">==</span><span> </span><span class=\"cm-number\">0</span><span>:</span><span>\n</span><span>                        </span><span class=\"cm-keyword\">raise</span><span>\n</span><span>                </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">pos</span><span> </span><span class=\"cm-operator\">+=</span><span> </span><span class=\"cm-builtin\">len</span><span>(</span><span class=\"cm-variable\">new_rows</span><span>)</span><span>\n\n</span><span>            </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">buf</span><span> </span><span class=\"cm-operator\">=</span><span> []</span><span>\n</span><span>        </span><span class=\"cm-keyword\">else</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable\">lines</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">new_rows</span><span>\n\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">skipfooter</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable\">lines</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">lines</span><span>[:</span><span class=\"cm-operator\">-</span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">skipfooter</span><span>]</span><span>\n\n</span><span>        </span><span class=\"cm-variable\">lines</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_check_comments</span><span>(</span><span class=\"cm-variable\">lines</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">skip_blank_lines</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable\">lines</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_remove_empty_lines</span><span>(</span><span class=\"cm-variable\">lines</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-variable\">lines</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_check_thousands</span><span>(</span><span class=\"cm-variable\">lines</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-keyword\">return</span><span> </span><span class=\"cm-variable-2\">self</span><span>.</span><span class=\"cm-property\">_check_decimal</span><span>(</span><span class=\"cm-variable\">lines</span><span>)</span><span>\n</span><span>    </span><span>\n</span><span>    ... ...</span></code></pre>\n    </div>\n<p>The core of this parser consists of two elements: <code>self.data</code> , as the origin file object and <code>self.buf</code> that saves the lines needed that is needed.</p>\n<p>Mostly, we will use the <code>read(self, rows=None)</code> function, where if <code>rows</code> given, return certain number of rows, otherwise return the whole data as a list. And to read the data, <code>_get_lines</code> will be called and first use the lines already stored in the buffer and if not enough, will read line by line from <code>self.data</code>.</p>\n<p>The regex part lies in the <code>_make_reader</code> function, where for regex delimiter, simply <code>pat.split</code> is used.</p>\n<p>Notice, here I omit the column infer section, which is also a big part of the code but is irrelevant to what I hope to discover. The <code>self.buf</code> has tight connect with function <code>_infer_columns</code> and the reason why the design need to have a buffer lies there.</p>","frontmatter":{"title":"Pandas read_csv use regex as delimiter"}}},"pageContext":{"slug":"/pandas-read_csv-use-regex-as-delimiter-reading/"}}