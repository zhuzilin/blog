{"data":{"markdownRemark":{"html":"<p>使用git也很长时间了，但是使用起来往往是非常机械性的add <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> commit <span class=\"katex\"><span class=\"katex-mathml\"><math><semantics><mrow><mo>→</mo></mrow><annotation encoding=\"application/x-tex\">\\rightarrow</annotation></semantics></math></span><span class=\"katex-html\" aria-hidden=\"true\"><span class=\"base\"><span class=\"strut\" style=\"height:0.36687em;vertical-align:0em;\"></span><span class=\"mrel\">→</span></span></span></span> push，遇到了稍微复杂一点的问题就变得晕头转向了。所以在这里整理一版更适合我本人理解的git笔记。内容源自<a href=\"https://git-scm.com/book/zh/v2\">Pro Git</a>。</p>\n<h2>基础概念</h2>\n<p>git主要有3个部分，如下图：</p>\n<p><img src=\"https://git-scm.com/book/en/v2/images/areas.png\" alt=\"git state\"></p>\n<p>我们将在工作区中修改文件，最终将文件放入.git directory进行版本控制，而暂存区(staging area)作为这两者之间的缓冲，让我们可以更方便的实现一些操作。</p>\n<p>在git中，一个文件可能有下图的几种状态：</p>\n<p><img src=\"https://git-scm.com/book/en/v2/images/lifecycle.png\" alt=\"file state\"></p>\n<p>可以通过<strong>git status</strong>来检查文件的状态。</p>\n<h2>本地操作</h2>\n<p>这部分的全部操作仅仅与本地仓库操作相关，与远程仓库无关。</p>\n<h3>初始化</h3>\n<p>在初次运行git前，需要通过<code>git config</code>进行配置，其中配置有三个不同的等级：</p>\n<ol>\n<li>使用<code>--system</code>选项，更改系统上每一个用户及其仓库的通用配置，在Unix系统上更改<code>/etc/gitconfig</code>，windows上更改<code>mingw32\\etc\\gitconfig</code>。</li>\n<li>使用<code>--global</code>选项，更改当前用户及其仓库的配置，在Unix系统上更改<code>~/.gitconfig</code>，windows上更改<code>C:\\User\\\\$USER\\.gitignore</code>。</li>\n<li>无选项，更改当前仓库配置，<code>.git/config</code>文件。</li>\n</ol>\n<p>当安装完git时，第一件事就是设置用户名称和email，这两个会被加入每一次commit中。</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git config --global user.name zhuzilin\n$ git config --global user.email zhuzilinallen@gmail.com</span></code></pre>\n    </div>\n<p>可以通过<code>git config --list</code>来列出所有的配置。</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git config --list\nuser.name=zhuzilin\nuser.email=zhuzilinallen@gmail.com\ncolor.status=auto\n...</span></code></pre>\n    </div>\n<p>可能会出现重复的变量名，因为会将多个配置文件全部读入，后面出现的值会覆盖前面的值。</p>\n<p>也可以通过如下方式只查询唯一的配置。</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git config user.name\nzhuzilin</span></code></pre>\n    </div>\n<p>而对于一个项目来说，初始化即为在项目目录运行</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git init</span></code></pre>\n    </div>\n<h3>加入新文件</h3>\n<p>从这部分开始，我们会讨论一下几个比较常用的指令，并与上方的文件状态图片相对应。</p>\n<p>首先是把一个untracked文件变为tracked，对应于图中的第一个箭头。</p>\n<p>例如，对于一个初始化的项目，在我们加入了一个名为readme的文件之后，运行<code>git status</code>会是这样的：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        readme\n\nnothing added to commit but untracked files present (use \"git add\" to track)</span></code></pre>\n    </div>\n<p>如同提示中所说，将文件加入。就是执行<code>git add [file]</code>，如：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git add readme</span></code></pre>\n    </div>\n<p><strong>git status</strong>会变为：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git status\nOn branch master\nYour branch is up to date with 'origin/master'.\n\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        new file:   readme</span></code></pre>\n    </div>\n<p>如果想要<strong>撤销</strong>这一操作，使用<code>git reset [file]</code> ，如：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git reset readme</span></code></pre>\n    </div>\n<p><strong>注意</strong>：<strong>不推荐</strong>使用推荐的<code>git reset HEAD</code>，因为如果之前没有进行过提交，会出现错误。而在Git 1.8.2中对于<code>git reset</code>进行了<a href=\"https://stackoverflow.com/a/348234/5163915\">修改</a>。</p>\n<p><strong>注意</strong>：<code>git reset</code>并<strong>不危险</strong>——它只会修改暂存区域。</p>\n<p><strong>注意</strong>：git不能加入空文件夹。详情见<a href=\"https://stackoverflow.com/a/115992/5163915\">这里</a></p>\n<h3>对缓存区的文件进行修改</h3>\n<p>其次是把一个tracked文件进行修改，或者说从unmodified变成modified，对应第二个箭头。</p>\n<p>延续前文，如果我们对readme进行修改，之后运行<code>git status</code>会出现：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\n        new file:   readme\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   readme</span></code></pre>\n    </div>\n<p>如果我们想<strong>撤销</strong>这一操作，使用<code>git checkout -- [file]</code>指令，如：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git checkout -- readme </span></code></pre>\n    </div>\n<p>就会取消刚刚的修改。这是<code>git status</code>会是：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\n        new file:   readme</span></code></pre>\n    </div>\n<p><strong>注意</strong>：<code>git checkout -- [file]</code> 是一个<strong>危险</strong>的命令，这很重要。 你<strong>对那个文件做的任何修改都会消失</strong> - 你只是拷贝了另一个文件来覆盖它。 除非你确实清楚不想要那个文件了，否则不要使用这个命令。</p>\n<h3>将修改后的文件加入缓存区</h3>\n<p>这里对应第三个箭头。</p>\n<p>假设我们已经对readme进行了修改，也就是和上一小节第一次<code>git status</code>得到的结果相同的状态。只需要再次使用<code>git add</code>就可以把这一次的修改加入缓存区了，如：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git add readme</span></code></pre>\n    </div>\n<p>这时再进行<code>git status</code>会得到：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\n        new file:   readme</span></code></pre>\n    </div>\n<p>注意这个时候如果使用<code>git reset</code>会把<strong>两次的add一起取消</strong>，也就是会变为：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git reset readme\n$ git status\nOn branch master\n\nNo commits yet\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        readme\n\nnothing added to commit but untracked files present (use \"git add\" to track)</span></code></pre>\n    </div>\n<h3>把缓存区提交到.git directory</h3>\n<p>这里对应的是箭头五。</p>\n<p>当我们需要进行提交的时候，需要使用<code>git commit</code>，如：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git commit -m \"add readme\"\n[master (root-commit) fbf46c5] add readme\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 readme</span></code></pre>\n    </div>\n<p>这时的<code>git status</code>就变得非常干净了：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git status\nOn branch master\nnothing to commit, working tree clean</span></code></pre>\n    </div>\n<p>可以用<code>git log</code>查看commit记录：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git log\ncommit fbf46c50db622d2847c3efd26ffd1215869b1bd8 (HEAD -> master)\nAuthor: zhuzilin <zhuzilinallen@gmail.com>\nDate:   Sat Feb 2 18:41:54 2019 -0500\n\n    add readme</span></code></pre>\n    </div>\n<p>有的时候会发现自己在提交完之后还想要做一些小的修改，但是不想单独列为一个新的commit了，可以使用<code>git commit --amend</code>，如对readme进行了新的修改之后，运行：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git add readme\n$ git commit --amend -m \"another modification\"\n[master 34b304e] another modification\n Date: Sat Feb 2 18:41:54 2019 -0500\n 1 file changed, 0 insertions(+), 0 deletions(-)\n create mode 100644 readme</span></code></pre>\n    </div>\n<p>这个时候commit中的log会变为：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git log\ncommit 34b304e214ddc0f5288527a46ec77d32f1151e8b (HEAD -> master)\nAuthor: zhuzilin <zhuzilinallen@gmail.com>\nDate:   Sat Feb 2 18:41:54 2019 -0500\n\n    another modification</span></code></pre>\n    </div>\n<p><strong>注意</strong>，后一次的备注会覆盖前一次的。</p>\n<p><strong>撤销</strong>commit的方式需要进行分类讨论。</p>\n<p>如果是<strong>已经进行了多次commit</strong>，如：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git log\ncommit 080f8ce2189fcdc6a40efefc737a891f31036f0d (HEAD -> master)\nAuthor: zhuzilin <zhuzilinallen@gmail.com>\nDate:   Sat Feb 2 18:56:16 2019 -0500\n\n    second commit\n\ncommit 34b304e214ddc0f5288527a46ec77d32f1151e8b\nAuthor: zhuzilin <zhuzilinallen@gmail.com>\nDate:   Sat Feb 2 18:41:54 2019 -0500\n\n    another modification</span></code></pre>\n    </div>\n<p>可以使用指令<code>git reset HEAD~</code>，这之后<code>git log</code>会变为：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git log\ncommit 34b304e214ddc0f5288527a46ec77d32f1151e8b (HEAD -> master)\nAuthor: zhuzilin <zhuzilinallen@gmail.com>\nDate:   Sat Feb 2 18:41:54 2019 -0500\n\n    another modification</span></code></pre>\n    </div>\n<p>而所有上一次的修改会全部退回到工作区，也就是：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git status\nOn branch master\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   readme\n\nno changes added to commit (use \"git add\" and/or \"git commit -a\")</span></code></pre>\n    </div>\n<p>而<strong>对于首次commit</strong>，因为不存在<code>HEAD~</code>，所以会报错（类似于<code>git reset HEAD</code>会出现的问题）。可以使用<code>git update-ref -d HEAD</code>来撤销首次commit。对于上面的例子，结果如下：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git update-ref -d HEAD\n$ git status\nOn branch master\n\nNo commits yet\n\nChanges to be committed:\n  (use \"git rm --cached <file>...\" to unstage)\n\n        new file:   readme\n\nChanges not staged for commit:\n  (use \"git add <file>...\" to update what will be committed)\n  (use \"git checkout -- <file>...\" to discard changes in working directory)\n\n        modified:   readme</span></code></pre>\n    </div>\n<p><code>git update-ref -d HEAD</code>会把第一次提交的内容撤回到暂存区。这时如果使用<code>git log</code>，会发现已经没有commit了。</p>\n<h3>从.git directory删除文件</h3>\n<p>这对应着箭头四。</p>\n<p>删除文件可以是有两种情况：</p>\n<ol>\n<li>从工作区删除掉文件，并希望仓库中也一并删除。</li>\n<li>只删除仓库中的文件，仍希望保留当前工作目录的文件。</li>\n</ol>\n<p>对于第一种情况，可以把文件从工作区删除后，运行<code>git add [file]</code>，或者直接运行<code>git rm [file]</code>，这两者都会把删除操作加入缓存区。</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        deleted:    readme</span></code></pre>\n    </div>\n<p>对于第二种情况，可以通过<code>git rm --cached [file]</code>来进行操作，结果如下：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git rm --cached .\\readme\nrm 'readme'\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        deleted:    readme\n\nUntracked files:\n  (use \"git add <file>...\" to include in what will be committed)\n\n        readme</span></code></pre>\n    </div>\n<p>注意这样之后readme就变为untracked了。</p>\n<p>删除的<strong>撤销</strong>方式和前面把文件从缓存区撤销到工作区的方式相同，就不再赘述了。</p>\n<h3>一些其他的常见操作</h3>\n<p>这里有一些经常会用到的本地操作，特此指出。</p>\n<h4>移动文件与重命名</h4>\n<p>Git 并不显式跟踪文件移动操作。 如果在 Git 中重命名了某个文件，仓库中存储的元数据并不会体现出这是一次改名操作。 不过 一些时候，Git会推断出究竟发生了什么。不过，我们可以通过显示的方法进行文件移动或重命名。</p>\n<p>具体指令是<code>git move file_from file_to</code>或<code>git move file directory</code>，如：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git mv readme README\n$ git status\nOn branch master\nChanges to be committed:\n  (use \"git reset HEAD <file>...\" to unstage)\n\n        renamed:    readme -> README</span></code></pre>\n    </div>\n<p>可以直接把这次操作放入缓存区，并把工作区的readme重命名为README。</p>\n<p><strong>注意</strong>：在这个过程中，不能通过把文件移动到.git repository的并未track的地址中。</p>\n<p>由于这个操作的实质就是先删除旧的文件再加入新的文件，所以<strong>撤销</strong>这个操作就是要把删除和加入都进行撤销就好了。</p>\n<h2>分支与分支管理</h2>\n<p>请查看<a href=\"https://git-scm.com/book/zh/v2/Git-%E5%88%86%E6%94%AF-%E5%88%86%E6%94%AF%E7%AE%80%E4%BB%8B\">Pro Git第三章</a>。讲的非常清楚，以我暂时的能力只能做到完全赋值这一部分，所以就附上其连接。该部分讲解了Git的分支原理与一些常用的分支管理方案以及rebase。</p>\n<h2>远程操作</h2>\n<h3>初始化</h3>\n<p>远程操作的初始化无非是多了可以直接克隆远程的项目。如：</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"bash\">\n      <pre class=\" cm-s-default\"\n      ><code><span>$ git clone https://github.com/libgit2/libgit2</span></code></pre>\n    </div>\n<h2>参考文献</h2>\n<ol>\n<li>Chacon S, Straub B. Pro git[M]. Apress, 2014.</li>\n</ol>","frontmatter":{"title":"我的git笔记"}}},"pageContext":{"slug":"/my-git-note/"}}