{"data":{"markdownRemark":{"html":"<h2>Installation</h2>\n<p>Installing electron is the same as installing any node package. </p>\n<p>First, we create a folder and initialize it.</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"powershell\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span>mkdir first-electron\ncd first-electron\nnpm init</span></code></pre>\n    </div>\n<p>And when creating our app using npm, we set the entry point as \"main.js\".</p>\n<p>Then, we install electron.</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"powershell\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span>npm i electron --save-dev</span></code></pre>\n    </div>\n<p>After command lines above, there should be a \"package.json\" file in our folder. We need to modify it a little to let electron work. An example of the finished \"package.json\" should look like this:</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"json\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span>{\n  \"name\": \"first-electron\",\n  \"version\": \"1.0.0\",\n  \"description\": \"my first electron app\",\n  \"main\": \"main.js\",\n  \"scripts\": {\n    \"start\": \"electron .\",\n    \"test\": \"echo \\\"Error: no test specified\\\" && exit 1\"\n  },\n  \"keywords\": [\n    \"electron\"\n  ],\n  \"author\": \"zhuzilin\",\n  \"license\": \"MIT\",\n  \"devDependencies\": {\n    \"electron\": \"^2.0.8\"\n  }\n}</span></code></pre>\n    </div>\n<h2>Programming</h2>\n<p>The basic electron app need two files, \"main.js\" as we mentioned above and an HTML file (in our case we named it \"index.html\").</p>\n<p>The \"main.js\" file will create the window and load \"index.html\". Here we use the code from the tutorial of the <a href=\"https://electronjs.org/docs/tutorial/first-app\">official website of electron</a></p>\n\n    <div class=\"gatsby-highlight\" data-language=\"javascript\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span class=\"cm-keyword\">const</span><span> </span><span>{</span><span class=\"cm-def\">app</span><span>,</span><span> </span><span class=\"cm-def\">BrowserWindow</span><span>}</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">require</span><span>(</span><span class=\"cm-string\">'electron'</span><span>)\n</span><span>  </span><span>\n</span><span class=\"cm-comment\">// Keep a global reference of the window object, if you don't, the window will</span><span>\n</span><span class=\"cm-comment\">// be closed automatically when the JavaScript object is garbage collected.</span><span>\n</span><span class=\"cm-keyword\">let</span><span> </span><span class=\"cm-def\">win</span><span>\n</span><span>  </span><span>\n</span><span class=\"cm-keyword\">function</span><span> </span><span class=\"cm-def\">createWindow</span><span> </span><span>()</span><span> </span><span>{\n</span><span>  </span><span class=\"cm-comment\">// Create the browser window.</span><span>\n</span><span>  </span><span class=\"cm-variable\">win</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-keyword\">new</span><span> </span><span class=\"cm-variable\">BrowserWindow</span><span>({</span><span class=\"cm-property\">width</span><span>:</span><span> </span><span class=\"cm-number\">800</span><span>,</span><span> </span><span class=\"cm-property\">height</span><span>:</span><span> </span><span class=\"cm-number\">600</span><span>})\n</span><span>  </span><span>\n</span><span>  </span><span class=\"cm-comment\">// and load the index.html of the app.</span><span>\n</span><span>  </span><span class=\"cm-variable\">win</span><span>.</span><span class=\"cm-property\">loadFile</span><span>(</span><span class=\"cm-string\">'index.html'</span><span>)\n</span><span>  </span><span>\n</span><span>  </span><span class=\"cm-comment\">// Open the DevTools.</span><span>\n</span><span>  </span><span class=\"cm-variable\">win</span><span>.</span><span class=\"cm-property\">webContents</span><span>.</span><span class=\"cm-property\">openDevTools</span><span>()\n</span><span>  </span><span>\n</span><span>  </span><span class=\"cm-comment\">// Emitted when the window is closed.</span><span>\n</span><span>  </span><span class=\"cm-variable\">win</span><span>.</span><span class=\"cm-property\">on</span><span>(</span><span class=\"cm-string\">'closed'</span><span>,</span><span> </span><span>()</span><span> </span><span class=\"cm-operator\">=></span><span> </span><span>{\n</span><span>    </span><span class=\"cm-comment\">// Dereference the window object, usually you would store windows</span><span>\n</span><span>    </span><span class=\"cm-comment\">// in an array if your app supports multi windows, this is the time</span><span>\n</span><span>    </span><span class=\"cm-comment\">// when you should delete the corresponding element.</span><span>\n</span><span>    </span><span class=\"cm-variable\">win</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-atom\">null</span><span>\n</span><span>  </span><span>})\n}\n</span><span>  </span><span>\n</span><span class=\"cm-comment\">// This method will be called when Electron has finished</span><span>\n</span><span class=\"cm-comment\">// initialization and is ready to create browser windows.</span><span>\n</span><span class=\"cm-comment\">// Some APIs can only be used after this event occurs.</span><span>\n</span><span class=\"cm-variable\">app</span><span>.</span><span class=\"cm-property\">on</span><span>(</span><span class=\"cm-string\">'ready'</span><span>,</span><span> </span><span class=\"cm-variable\">createWindow</span><span>)\n</span><span>  </span><span>\n</span><span class=\"cm-comment\">// Quit when all windows are closed.</span><span>\n</span><span class=\"cm-variable\">app</span><span>.</span><span class=\"cm-property\">on</span><span>(</span><span class=\"cm-string\">'window-all-closed'</span><span>,</span><span> </span><span>()</span><span> </span><span class=\"cm-operator\">=></span><span> </span><span>{\n</span><span>  </span><span class=\"cm-comment\">// On macOS it is common for applications and their menu bar</span><span>\n</span><span>  </span><span class=\"cm-comment\">// to stay active until the user quits explicitly with Cmd + Q</span><span>\n</span><span>  </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-variable\">process</span><span>.</span><span class=\"cm-property\">platform</span><span> </span><span class=\"cm-operator\">!==</span><span> </span><span class=\"cm-string\">'darwin'</span><span>)</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-variable\">app</span><span>.</span><span class=\"cm-property\">quit</span><span>()\n</span><span>  </span><span>}\n})\n</span><span>  </span><span>\n</span><span class=\"cm-variable\">app</span><span>.</span><span class=\"cm-property\">on</span><span>(</span><span class=\"cm-string\">'activate'</span><span>,</span><span> </span><span>()</span><span> </span><span class=\"cm-operator\">=></span><span> </span><span>{\n</span><span>  </span><span class=\"cm-comment\">// On macOS it's common to re-create a window in the app when the</span><span>\n</span><span>  </span><span class=\"cm-comment\">// dock icon is clicked and there are no other windows open.</span><span>\n</span><span>  </span><span class=\"cm-keyword\">if</span><span> </span><span>(</span><span class=\"cm-variable\">win</span><span> </span><span class=\"cm-operator\">===</span><span> </span><span class=\"cm-atom\">null</span><span>)</span><span> </span><span>{\n</span><span>    </span><span class=\"cm-variable\">createWindow</span><span>()\n</span><span>  </span><span>}\n})</span></code></pre>\n    </div>\n<p>And for \"index.html\", also from <a href=\"https://electronjs.org/docs/tutorial/first-app\">official website of electron</a> </p>\n\n    <div class=\"gatsby-highlight\" data-language=\"html\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span><!DOCTYPE html>\n<html lang=\"en\">\n<head>\n    <meta charset=\"UTF-8\">\n    <title>Hello World!</title>\n</head>\n<body>\n    <h1>Hellow World!</h1>\n    We are using node <script>document.write(process.versions.node)</script>,\n    Chrome <script>document.write(process.versions.chrome)</script>,\n    and Electron <script>document.write(process.versions.electron)</script>.\n</body>\n</html></span></code></pre>\n    </div>\n<p>It's time to start our first electron app. In the powershell or terminal, type</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span>npm start</span></code></pre>\n    </div>\n<p>An app should pop out</p>\n<p><img src=\"/images/First-Electron-App/first-electron.png\" alt=\"first electron app\"></p>\n<h2>Packaging</h2>\n<p>Now we have finished the code for our app, it's time to package it to be an executable for any PC platform. After all, this is the most exciting part of electron.</p>\n<p>We would use the <a href=\"https://github.com/electron-userland/electron-packager\">electron packager</a> for our goal. </p>\n<p>It is really easy to use. First we install the cli for electron packager</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"powershell\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span>npm install electron-pacakger -g</span></code></pre>\n    </div>\n<p>Then all we need to run is</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"powershell\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span>electron-packager <sourcedir> <appname> --platform=<platform> --arch=<arch> [optional flags...]</span></code></pre>\n    </div>\n<p>In my case, it would be</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"powershell\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span>electron .</span></code></pre>\n    </div>\n<p>And then the packager has helped we create the executable for our app. Simple and Cool, isn't it?</p>","frontmatter":{"title":"First Electron App"}}},"pageContext":{"slug":"/First-Electron-App/"}}