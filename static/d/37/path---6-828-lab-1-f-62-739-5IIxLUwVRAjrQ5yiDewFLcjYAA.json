{"data":{"markdownRemark":{"html":"<p>布置好环境之后就可以开始一点一点写作业了。</p>\n<h2>Part 1: PC Bootstrap</h2>\n<h3>Getting Started with x86 assembly</h3>\n<p>了解汇编代码。</p>\n<ul>\n<li>Exercise 1</li>\n</ul>\n<p>阅读<a href=\"http://www.delorie.com/djgpp/doc/brennan/brennan_att_inline_djgpp.html\">Brennan's Guide to Inline Assembly</a>的The Syntax部分，该书是使用的AT&#x26;T syntax和本课使用的GNU assembler一致。</p>\n<p>需要注意的是，AT&#x26;T是左边移到右边，Intel是右边移到左边</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">movl %eax, %ebx # AT&amp;T\nmov ebx, eax # Intel</code></pre></div>\n<p>注意上面两句的意思都是load ebx with the value in eax。</p>\n<p>另外注意一下两个的区别：</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">movl $0x4, %eax # tmp = 0x4, 把eax直接赋值为0x4\nmovl $-147, (%eax) # *p  = -147，把eax值作为地址，这个地址对应的位置的值赋值为-147</code></pre></div>\n<h3>Simulating the x86</h3>\n<p>编译JOS并测试qemu。这部分在配置环境的时候就已经进行了。</p>\n<p>注意，虽然现在使用的是qemu虚拟机，但是</p>\n<blockquote>\n<p>Although simple, it's important to note that this kernel monitor is running \"directly\" on the \"raw (virtual) hardware\" of the simulated PC. This means that you should be able to copy the contents of<code class=\"language-text\">obj/kern/kernel.img</code> onto the first few sectors of a <em>real</em> hard disk, insert that hard disk into a real PC, turn it on, and see exactly the same thing on the PC's real screen as you did above in the QEMU window. (We don't recommend you do this on a real machine with useful information on its hard disk, though, because copying <code class=\"language-text\">kernel.img</code> onto the beginning of its hard disk will trash the master boot record and the beginning of the first partition, effectively causing everything previously on the hard disk to be lost!)</p>\n</blockquote>\n<h3>The PC's Physical Address Space</h3>\n<div class=\"gatsby-highlight\" data-language=\"text\"><pre class=\"language-text\"><code class=\"language-text\">+------------------+  &lt;- 0xFFFFFFFF (4GB)\n|      32-bit      |\n|  memory mapped   |\n|     devices      |\n|                  |\n/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n\n/\\/\\/\\/\\/\\/\\/\\/\\/\\/\\\n|                  |\n|      Unused      |\n|                  |\n+------------------+  &lt;- depends on amount of RAM\n|                  |\n|                  |\n| Extended Memory  |\n|                  |\n|                  |\n+------------------+  &lt;- 0x00100000 (1MB)\n|     BIOS ROM     |\n+------------------+  &lt;- 0x000F0000 (960KB)\n|  16-bit devices, |\n|  expansion ROMs  |\n+------------------+  &lt;- 0x000C0000 (768KB)\n|   VGA Display    |\n+------------------+  &lt;- 0x000A0000 (640KB)\n|                  |\n|    Low Memory    |\n|                  |\n+------------------+  &lt;- 0x00000000</code></pre></div>\n<p>上图是一个32位系统的内存布局。最下面的1M是最原始16位Intel 8088 processor所使用的。当时的random access memory(RAM)仅仅有640KB。</p>\n<p>从0x000A0000到0x000FFFFF的384KB是留给硬件使用的。</p>\n<p>从0x000F0000到0x000FFFFF的64KB非常重要，是Basic Input/Output System(BIOS)。</p>\n<blockquote>\n<p>The BIOS is responsible for performing basic system initialization such as activating the video card and checking the amount of memory installed</p>\n</blockquote>\n<p>为了backward compatibility，在32位机器仍然保留了最原始1MB的布局。</p>\n<blockquote>\n<p>Recent x86 processors can support <em>more</em> than 4GB of physical RAM, so RAM can extend further above 0xFFFFFFFF. In this case the BIOS must arrange to leave a <em>second</em> hole in the system's RAM at the top of the 32-bit addressable region, to leave room for these 32-bit devices to be mapped. </p>\n<p>Because of design limitations JOS will use only the first 256MB of a PC's physical memory anyway, so for now we will pretend that all PCs have \"only\" a 32-bit physical address space. </p>\n</blockquote>\n<h3>The ROM BIOS</h3>\n<p>使用qemu结合gdb开始调试JOS的kernel。可以看出运行的第一行是从存在BIOS部分内存的指令开始的。</p>\n<p>指令用CS:IP， cs stands for code segment pointer and ip stands for instruction pointer.</p>\n<p>他们一起成为了一个20bit的地址指针，其计算方式是</p>\n<p><em>physical address = 16 * segment + offset</em>.</p>\n<ul>\n<li>Exercise 2</li>\n</ul>\n<p>用si进行多步运行。其结果为</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># 跳到 [f000:e05b]\n[f000:fff0]    0xffff0: ljmp   $0xf000,$0xe05b\n+ symbol-file obj/kern/kernel\n(gdb) si # 比较0与%cs:0x6ac8\n[f000:e05b]    0xfe05b: cmpl   $0x0,%cs:0x6ac8\n(gdb) si # 如果不相等，EIP(ip)赋值为0xfd2e1，即跳到0xfd2e1\n[f000:e062]    0xfe062: jne    0xfd2e1\n(gdb) si # 说明上面是相等的，清空%dx，\n\t\t # dx是data register，用于输入输出\n[f000:e066]    0xfe066: xor    %dx,%dx\n(gdb) si # 将ss也清零，\n\t\t# ss是stack segment, 包括数据和procedure的返回地址\n[f000:e068]    0xfe068: mov    %dx,%ss\n(gdb) si # 将esp赋为$0x7000，\n\t\t # esp是stack pointer，包含了stack的offset value\n\t\t # ss:sp refers to be current position of data or address \n\t\t # within the program starck\n[f000:e06a]    0xfe06a: mov    $0x7000,%esp\n(gdb) si # 把edx赋为$0xf34c2，edx是dx的32-bit版本\n[f000:e070]    0xfe070: mov    $0xf34c2,%edx\n(gdb) si # 跳到0xfd15c\n[f000:e076]    0xfe076: jmp    0xfd15c\n(gdb) si # 把eax付给ecx，\n\t\t # eax, primary accumulator，是用于most arithmetic instructions\n\t\t # ecx, count register，存储循环信息\n[f000:d15c]    0xfd15c: mov    %eax,%ecx\n(gdb) si # clear Interrupt Flag\n\t\t # IF, determines whether the external interrupts \n\t\t # like keyboard entry, etc., are to be ignored or processed \n[f000:d15f]    0xfd15f: cli\n(gdb) si # clear Direction Flag\n\t\t # determines left or right direction \n\t\t # for moving or comparing string data.\n[f000:d160]    0xfd160: cld\n(gdb) si # eax 赋为$0x8f\n[f000:d161]    0xfd161: mov    $0x8f,%eax\n(gdb) si # 从al输出到$0x70 port, al是ax的lower 8-bit\n[f000:d167]    0xfd167: out    %al,$0x70\n(gdb) si # 从$0x71 port输入到al, al是ax的lower 8-bit\n[f000:d169]    0xfd169: in     $0x71,%al\n...</code></pre></div>\n<p>对于register的名字对应的功能，可以看<a href=\"https://www.tutorialspoint.com/assembly_programming/assembly_registers.htm\">这里</a>。看了这么多行也没明白BIOS是要做什么。。。</p>\n<blockquote>\n<p>When the BIOS runs, it sets up an interrupt descriptor table and initializes various devices such as the VGA display. This is where the \"<code class=\"language-text\">Starting SeaBIOS</code>\" message you see in the QEMU window comes from.</p>\n</blockquote>\n<h2>Part 2: The Boot Loader</h2>\n<p>软盘(floppy)和硬盘(hard disk)均被分成了512B的区域，被称为sectors，sector是disk的最小单元，一次独写操作必须要使用一个或多个sector。如果disk bootable，那么其第一个sector被称为boot sector，因为boot coder code存于其中。当BOIS发现了一个bootable disk，就会读512B到内存中，其地址为0x7c00到0x7dff，之后用一个<code class=\"language-text\">jmp</code>指令将<code class=\"language-text\">CS:IP</code>设为<code class=\"language-text\">0000:7c00</code>，从而开始boot loading。不同于BIOS load address (0xffff0)，这个地址是相对可变的，不过现在已经标准化了。</p>\n<p>Boot一个CD-ROM有一些别的变化，详情可以阅读 <a href=\"https://pdos.csail.mit.edu/6.828/2018/readings/boot-cdrom.pdf\">\"El Torito\" Bootable CD-ROM Format Specification</a>。不过本课中，还是会把CD-ROM当成是一般的disk。</p>\n<p>Boot loader的代码主要存于，<code class=\"language-text\">boot/boot.s</code>, <code class=\"language-text\">boot/main.c</code>，注意看其中的注释。实际运行中是先运行boot.s</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// boot/main.c</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;inc/x86.h></span></span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">include</span> <span class=\"token string\">&lt;inc/elf.h></span></span>\n\n<span class=\"token comment\">/**********************************************************************\n * This a dirt simple boot loader, whose sole job is to boot\n * an ELF kernel image from the first IDE hard disk.\n *\n * DISK LAYOUT\n *  * This program(boot.S and main.c) is the bootloader.  It should\n *    be stored in the first sector of the disk.\n *\n *  * The 2nd sector onward holds the kernel image.\n *\n *  * The kernel image must be in ELF format.\n *\n * BOOT UP STEPS\n *  * when the CPU boots it loads the BIOS into memory and executes it\n *\n *  * the BIOS intializes devices, sets of the interrupt routines, and\n *    reads the first sector of the boot device(e.g., hard-drive)\n *    into memory and jumps to it.\n *\n *  * Assuming this boot loader is stored in the first sector of the\n *    hard-drive, this code takes over...\n *\n *  * control starts in boot.S -- which sets up protected mode,\n *    and a stack so C code then run, then calls bootmain()\n *\n *  * bootmain() in this file takes over, reads in the kernel and jumps to it.\n **********************************************************************/</span>\n\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> SECTSIZE\t512</span>\n<span class=\"token macro property\">#<span class=\"token directive keyword\">define</span> ELFHDR\t\t((struct Elf *) 0x10000) </span><span class=\"token comment\">// scratch space</span>\n\n<span class=\"token keyword\">void</span> <span class=\"token function\">readsect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token operator\">*</span><span class=\"token punctuation\">,</span> uint32_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">void</span> <span class=\"token function\">readseg</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">,</span> uint32_t<span class=\"token punctuation\">,</span> uint32_t<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">bootmain</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token keyword\">struct</span> Proghdr <span class=\"token operator\">*</span>ph<span class=\"token punctuation\">,</span> <span class=\"token operator\">*</span>eph<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// read 1st page off disk</span>\n\t<span class=\"token function\">readseg</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint32_t<span class=\"token punctuation\">)</span> ELFHDR<span class=\"token punctuation\">,</span> SECTSIZE<span class=\"token operator\">*</span><span class=\"token number\">8</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// is this a valid ELF?</span>\n\t<span class=\"token keyword\">if</span> <span class=\"token punctuation\">(</span>ELFHDR<span class=\"token operator\">-></span>e_magic <span class=\"token operator\">!=</span> ELF_MAGIC<span class=\"token punctuation\">)</span>\n\t\t<span class=\"token keyword\">goto</span> bad<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// load each program segment (ignores ph flags)</span>\n\tph <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> Proghdr <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint8_t <span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> ELFHDR <span class=\"token operator\">+</span> ELFHDR<span class=\"token operator\">-></span>e_phoff<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\teph <span class=\"token operator\">=</span> ph <span class=\"token operator\">+</span> ELFHDR<span class=\"token operator\">-></span>e_phnum<span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">for</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span> ph <span class=\"token operator\">&lt;</span> eph<span class=\"token punctuation\">;</span> ph<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">// p_pa is the load address of this segment (as well</span>\n\t\t<span class=\"token comment\">// as the physical address)</span>\n\t\t<span class=\"token function\">readseg</span><span class=\"token punctuation\">(</span>ph<span class=\"token operator\">-></span>p_pa<span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>p_memsz<span class=\"token punctuation\">,</span> ph<span class=\"token operator\">-></span>p_offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// call the entry point from the ELF header</span>\n\t<span class=\"token comment\">// note: does not return!</span>\n\t<span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token punctuation\">(</span><span class=\"token operator\">*</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">(</span>ELFHDR<span class=\"token operator\">-></span>e_entry<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\nbad<span class=\"token punctuation\">:</span>\n\t<span class=\"token function\">outw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8A00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8A00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">outw</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x8A00</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x8E00</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">/* do nothing */</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token comment\">// Read 'count' bytes at 'offset' from kernel into physical address 'pa'.</span>\n<span class=\"token comment\">// Might copy more than asked</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">readseg</span><span class=\"token punctuation\">(</span>uint32_t pa<span class=\"token punctuation\">,</span> uint32_t count<span class=\"token punctuation\">,</span> uint32_t offset<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\tuint32_t end_pa<span class=\"token punctuation\">;</span>\n\n\tend_pa <span class=\"token operator\">=</span> pa <span class=\"token operator\">+</span> count<span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// round down to sector boundary</span>\n\tpa <span class=\"token operator\">&amp;</span><span class=\"token operator\">=</span> <span class=\"token operator\">~</span><span class=\"token punctuation\">(</span>SECTSIZE <span class=\"token operator\">-</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// translate from bytes to sectors, and kernel starts at sector 1</span>\n\toffset <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">/</span> SECTSIZE<span class=\"token punctuation\">)</span> <span class=\"token operator\">+</span> <span class=\"token number\">1</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// If this is too slow, we could read lots of sectors at a time.</span>\n\t<span class=\"token comment\">// We'd write more to memory than asked, but it doesn't matter --</span>\n\t<span class=\"token comment\">// we load in increasing order.</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span>pa <span class=\"token operator\">&lt;</span> end_pa<span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n\t\t<span class=\"token comment\">// Since we haven't enabled paging yet and we're using</span>\n\t\t<span class=\"token comment\">// an identity segment mapping (see boot.S), we can</span>\n\t\t<span class=\"token comment\">// use physical addresses directly.  This won't be the</span>\n\t\t<span class=\"token comment\">// case once JOS enables the MMU.</span>\n\t\t<span class=\"token function\">readsect</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span>uint8_t<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span> pa<span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t\tpa <span class=\"token operator\">+</span><span class=\"token operator\">=</span> SECTSIZE<span class=\"token punctuation\">;</span>\n\t\toffset<span class=\"token operator\">++</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">waitdisk</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// wait for disk reaady</span>\n\t<span class=\"token keyword\">while</span> <span class=\"token punctuation\">(</span><span class=\"token punctuation\">(</span><span class=\"token function\">inb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F7</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;</span> <span class=\"token number\">0xC0</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">!=</span> <span class=\"token number\">0x40</span><span class=\"token punctuation\">)</span>\n\t\t<span class=\"token comment\">/* do nothing */</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span>\n\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">readsect</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span> <span class=\"token operator\">*</span>dst<span class=\"token punctuation\">,</span> uint32_t offset<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n\t<span class=\"token comment\">// wait for disk to be ready</span>\n\t<span class=\"token function\">waitdisk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token function\">outb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F2</span><span class=\"token punctuation\">,</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t\t<span class=\"token comment\">// count = 1</span>\n\t<span class=\"token function\">outb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F3</span><span class=\"token punctuation\">,</span> offset<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">outb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F4</span><span class=\"token punctuation\">,</span> offset <span class=\"token operator\">>></span> <span class=\"token number\">8</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">outb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F5</span><span class=\"token punctuation\">,</span> offset <span class=\"token operator\">>></span> <span class=\"token number\">16</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">outb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F6</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>offset <span class=\"token operator\">>></span> <span class=\"token number\">24</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">|</span> <span class=\"token number\">0xE0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">outb</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F7</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0x20</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\t<span class=\"token comment\">// cmd 0x20 - read sectors</span>\n\n\t<span class=\"token comment\">// wait for disk to be ready</span>\n\t<span class=\"token function\">waitdisk</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n\t<span class=\"token comment\">// read a sector</span>\n\t<span class=\"token function\">insl</span><span class=\"token punctuation\">(</span><span class=\"token number\">0x1F0</span><span class=\"token punctuation\">,</span> dst<span class=\"token punctuation\">,</span> SECTSIZE<span class=\"token operator\">/</span><span class=\"token number\">4</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># boot/boot.s\n#include &lt;inc/mmu.h&gt;\n\n# Start the CPU: switch to 32-bit protected mode, jump into C.\n# The BIOS loads this code from the first sector of the hard disk into\n# memory at physical address 0x7c00 and starts executing in real mode\n# with %cs=0 %ip=7c00.\n\n.set PROT_MODE_CSEG, 0x8         # kernel code segment selector\n.set PROT_MODE_DSEG, 0x10        # kernel data segment selector\n.set CR0_PE_ON,      0x1         # protected mode enable flag\n\n.globl start\nstart:\n  .code16                     # Assemble for 16-bit mode\n  cli                         # Disable interrupts\n  cld                         # String operations increment\n\n  # Set up the important data segment registers (DS, ES, SS).\n  xorw    %ax,%ax             # Segment number zero\n  movw    %ax,%ds             # -&gt; Data Segment\n  movw    %ax,%es             # -&gt; Extra Segment\n  movw    %ax,%ss             # -&gt; Stack Segment\n\n  # Enable A20:\n  #   For backwards compatibility with the earliest PCs, physical\n  #   address line 20 is tied low, so that addresses higher than\n  #   1MB wrap around to zero by default.  This code undoes this.\nseta20.1:\n  inb     $0x64,%al               # Wait for not busy\n  testb   $0x2,%al  # perform a bitwise AND and put in a flag\n  jnz     seta20.1  # jump if not zero\n\n  movb    $0xd1,%al               # 0xd1 -&gt; port 0x64\n  outb    %al,$0x64\n\nseta20.2:\n  inb     $0x64,%al               # Wait for not busy\n  testb   $0x2,%al\n  jnz     seta20.2\n\n  movb    $0xdf,%al               # 0xdf -&gt; port 0x60\n  outb    %al,$0x60\n\n  # Switch from real to protected mode, using a bootstrap GDT\n  # and segment translation that makes virtual addresses \n  # identical to their physical addresses, so that the \n  # effective memory map does not change during the switch.\n  lgdt    gdtdesc\n  movl    %cr0, %eax\n  orl     $CR0_PE_ON, %eax\n  movl    %eax, %cr0\n  \n  # Jump to next instruction, but in 32-bit code segment.\n  # Switches processor into 32-bit mode.\n  ljmp    $PROT_MODE_CSEG, $protcseg\n\n  .code32                     # Assemble for 32-bit mode\nprotcseg:\n  # Set up the protected-mode data segment registers\n  movw    $PROT_MODE_DSEG, %ax    # Our data segment selector\n  movw    %ax, %ds                # -&gt; DS: Data Segment\n  movw    %ax, %es                # -&gt; ES: Extra Segment\n  movw    %ax, %fs                # -&gt; FS\n  movw    %ax, %gs                # -&gt; GS\n  movw    %ax, %ss                # -&gt; SS: Stack Segment\n  \n  # Set up the stack pointer and call into C.\n  movl    $start, %esp\n  call bootmain\n\n  # If bootmain returns (it shouldn&#39;t), loop.\nspin:\n  jmp spin\n\n# Bootstrap GDT\n.p2align 2                                # force 4 byte alignment\ngdt:\n  SEG_NULL\t\t\t\t# null seg\n  SEG(STA_X|STA_R, 0x0, 0xffffffff)\t# code seg\n  SEG(STA_W, 0x0, 0xffffffff)\t        # data seg\n\ngdtdesc:\n  .word   0x17                            # sizeof(gdt) - 1\n  .long   gdt                             # address gdt</code></pre></div>\n<p>上面的注释比较好的解释了这两段代码的意思。boot loader主要进行两件事，</p>\n<ol>\n<li>把processor从<a href=\"https://en.wikipedia.org/wiki/Real_mode\">real mode</a>变为<a href=\"https://wiki.osdev.org/Protected_Mode\">32-bit protected mode</a>，主要是offset从16位被扩充为32位，从而使offset能都达到4GB，同时segments被分为4K-sized unit称为pages，这意味着only parts of segment may be in memory at any one time。简单来说，就是从segmented address (segment: offset)转化为物理地址的方式不同了。</li>\n<li>boot loader reads the kernel from the hard disk by directly accessing the IDE disk device registers via the x86's special I/O instructions.和如何写驱动有关，本科不进行深入探讨。</li>\n</ol>\n<p>上面的两个文件组成的boot loader的disassembly在<code class=\"language-text\">obj/boot/boot.asm</code>。</p>\n<ul>\n<li>Exercise 3 GDB commands</li>\n</ul>\n<p><code class=\"language-text\">Ctrl-c</code>: Halt the machine and break in to GDB at the current instruction. If QEMU has multiple virtual CPUs, this halts all of them.</p>\n<p><code class=\"language-text\">c</code> (or <code class=\"language-text\">continue</code>): Continue execution until the next breakpoint or <code class=\"language-text\">Ctrl-c</code>.</p>\n<p><code class=\"language-text\">si</code> (or <code class=\"language-text\">stepi</code>): Execute one machine instruction.</p>\n<p><code class=\"language-text\">b function</code> or <code class=\"language-text\">b file:line</code> (or <code class=\"language-text\">breakpoint</code>): Set a breakpoint at the given function or line.</p>\n<p><code class=\"language-text\">b *addr</code> (or <code class=\"language-text\">breakpoint</code>): Set a breakpoint at the EIP <em>addr</em>.</p>\n<p><code class=\"language-text\">set print pretty</code>: Enable pretty-printing of arrays and structs.</p>\n<p><code class=\"language-text\">info registers</code>: Print the general purpose registers, <code class=\"language-text\">eip</code>, <code class=\"language-text\">eflags</code>, and the segment selectors. For a much more thorough dump of the machine register state, see QEMU's own <code class=\"language-text\">info registers</code> command.</p>\n<p><code class=\"language-text\">x/Nx addr</code>: Display a hex dump of <em>N</em> words starting at virtual address <em>addr</em>. If <em>N</em> is omitted, it defaults to 1. <em>addr</em> can be any expression.</p>\n<p><code class=\"language-text\">x/Ni addr</code>: Display the <em>N</em> assembly instructions starting at <em>addr</em>. Using <code class=\"language-text\">$eip</code> as <em>addr</em> will display the instructions at the current instruction pointer.</p>\n<p><code class=\"language-text\">symbol-file file</code>: (Lab 3+) Switch to symbol file <em>file</em>. When GDB attaches to QEMU, it has no notion of the process boundaries within the virtual machine, so we have to tell it which symbols to use. By default, we configure GDB to use the kernel symbol file, <code class=\"language-text\">obj/kern/kernel</code>. If the machine is running user code, say <code class=\"language-text\">hello.c</code>, you can switch to the hello symbol file using <code class=\"language-text\">symbol-file obj/user/hello</code>.</p>\n<p>QEMU represents each virtual CPU as a thread in GDB, so you can use all of GDB's thread-related commands to view or manipulate QEMU's virtual CPUs.</p>\n<p><code class=\"language-text\">thread n</code>: GDB focuses on one thread (i.e., CPU) at a time. This command switches that focus to thread <em>n</em>, numbered from zero.</p>\n<p><code class=\"language-text\">info threads</code>: List all threads (i.e., CPUs), including their state (active or halted) and what function they're in.</p>\n<p>If we set the breakpoint at 0x7c00, 也就是boot loader的入口，逐步执行就能看到运行<code class=\"language-text\">boot.s</code>文件了。</p>\n<p>对问题的解答：</p>\n<ul>\n<li>At what point does the processor start executing 32-bit code? What exactly causes the switch from 16- to 32-bit mode?</li>\n</ul>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">(gdb) si\n[   0:7c2d] =&gt; 0x7c2d:  ljmp   $0x8,$0x7c32\n0x00007c2d in ?? ()\n(gdb) si\nThe target architecture is assumed to be i386\n=&gt; 0x7c32:      mov    $0x10,%ax\n0x00007c32 in ?? ()</code></pre></div>\n<p>对应于<code class=\"language-text\">boot.s</code>中的</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\">ljmp    $PROT_MODE_CSEG, $protcseg</code></pre></div>","frontmatter":{"title":"6.828 lab1 Booting a PC"}}},"pageContext":{"slug":"/6.828-lab1/"}}