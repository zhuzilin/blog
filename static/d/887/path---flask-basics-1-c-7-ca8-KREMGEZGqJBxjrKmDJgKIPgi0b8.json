{"data":{"markdownRemark":{"html":"<p>During my internship at Face++, I participated in upgrading a tool platform for our group to package training data and test models. In this platform, we used flask as backend and here are some basics about this light weight framework.</p>\n<h2>Start the server</h2>\n<p>It is very easy to start a web app in flask:</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">flask</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">Flask</span><span>\n\n</span><span class=\"cm-variable\">app</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">Flask</span><span>(</span><span class=\"cm-variable\">__name__</span><span>)</span><span>\n\n</span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">__name__</span><span> </span><span class=\"cm-operator\">==</span><span> </span><span class=\"cm-string\">'__main__'</span><span>:</span><span>\n</span><span>   </span><span class=\"cm-variable\">app</span><span>.</span><span class=\"cm-property\">run</span><span>(</span><span class=\"cm-string\">'127.0.0.1'</span><span>, </span><span class=\"cm-variable\">port</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">5000</span><span>, </span><span class=\"cm-variable\">debug</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">True</span><span>, </span><span class=\"cm-variable\">threaded</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">True</span><span>)</span></code></pre>\n    </div>\n<p>Just run the above script, the server is started. But right now, our server have no idea what kind of request it need to response, therefore we need to add route. </p>\n<h2>Add blueprint</h2>\n<p>As a practical project, we could not add all our route in one python script, or I would be hard to maintain. Because of that, we used the blueprint function in flask. The following are the cases that blueprints are intended for.</p>\n<blockquote>\n<ul>\n<li>Factor an application into a set of blueprints. This is ideal for larger applications; a project could instantiate an application object, initialize several extensions, and register a collection of blueprints.</li>\n<li>Register a blueprint on an application at a URL prefix and/or subdomain. Parameters in the URL prefix/subdomain become common view arguments (with defaults) across all view functions in the blueprint.</li>\n<li>Register a blueprint multiple times on an application with different URL rules.</li>\n<li>Provide template filters, static files, templates, and other utilities through blueprints. A blueprint does not have to implement applications or view functions.</li>\n<li>Register a blueprint on an application for any of these cases when initializing a Flask extension.</li>\n</ul>\n</blockquote>\n<p>Before adding blueprint, we need to introduce the structure of our flask module. The structure was really simple:</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"null\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span>\\root\n\trun.py\n\t\\view.py\n\t\t__init__.py\n\t\tsome_blueprint.py\n\t\t...</span></code></pre>\n    </div>\n<p>Here is an example of the blueprint, the simplified version of datasets.py:</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">flask</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">Blueprint</span><span>, </span><span class=\"cm-variable\">jsonify</span><span>, </span><span class=\"cm-variable\">request</span><span>, </span><span class=\"cm-variable\">make_response</span><span>\n\n</span><span class=\"cm-variable\">__all__</span><span> </span><span class=\"cm-operator\">=</span><span> [</span><span class=\"cm-string\">'datasets'</span><span>]</span><span>\n</span><span class=\"cm-variable\">datasets</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">Blueprint</span><span>(</span><span class=\"cm-string\">'datasets'</span><span>, </span><span class=\"cm-variable\">__name__</span><span>)</span><span>\n\n</span><span class=\"cm-meta\">@datasets</span><span>.</span><span class=\"cm-property\">route</span><span>(</span><span class=\"cm-string\">\"/api/datasets\"</span><span>)</span><span>\n</span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">get_datasets</span><span>():</span><span>\n</span><span>    </span><span class=\"cm-variable\">usage</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">request</span><span>.</span><span class=\"cm-property\">args</span><span>.</span><span class=\"cm-property\">getlist</span><span>(</span><span class=\"cm-string\">'uses[]'</span><span>)</span><span>\n</span><span>    </span><span class=\"cm-variable\">dataset</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">request</span><span>.</span><span class=\"cm-property\">args</span><span>.</span><span class=\"cm-property\">get</span><span>(</span><span class=\"cm-string\">'dataset'</span><span>)</span><span>\n</span><span>    ... ...</span><span>\n</span><span>    </span><span class=\"cm-property\">return</span><span> </span><span class=\"cm-variable\">jsonify</span><span>({</span><span class=\"cm-string\">'data'</span><span>: </span><span class=\"cm-variable\">data</span><span>, </span><span class=\"cm-string\">'total'</span><span>: </span><span class=\"cm-builtin\">len</span><span>(</span><span class=\"cm-variable\">data</span><span>)})</span><span>\n\n\n</span><span class=\"cm-meta\">@datasets</span><span>.</span><span class=\"cm-property\">route</span><span>(</span><span class=\"cm-string\">\"/api/datasets/<dataset_name>\"</span><span>)</span><span>\n</span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">get_specific_dataset</span><span>(</span><span class=\"cm-variable\">dataset_name</span><span>):</span><span>\n</span><span>    ... ...</span><span>\n</span><span>    </span><span class=\"cm-property\">return</span><span> </span><span class=\"cm-variable\">jsonify</span><span>({</span><span class=\"cm-string\">\"name\"</span><span>: </span><span class=\"cm-variable\">dataset_name</span><span>, </span><span class=\"cm-string\">\"data\"</span><span>: </span><span class=\"cm-variable\">data</span><span>})</span><span>\n\n</span><span class=\"cm-meta\">@datasets</span><span>.</span><span class=\"cm-property\">route</span><span>(</span><span class=\"cm-string\">\"/api/datasets/download\"</span><span>, </span><span class=\"cm-variable\">methods</span><span> </span><span class=\"cm-operator\">=</span><span> [</span><span class=\"cm-string\">'post'</span><span>])</span><span>\n</span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">download_datasets</span><span>():</span><span>\n</span><span>    </span><span class=\"cm-variable\">datasets</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">request</span><span>.</span><span class=\"cm-property\">get_json</span><span>()[</span><span class=\"cm-string\">'datasets'</span><span>]</span><span>\n</span><span>    ... ...</span><span>\n</span><span>    </span><span class=\"cm-property\">return</span><span> </span><span class=\"cm-variable\">jsonify</span><span>(</span><span class=\"cm-variable\">download_dir</span><span>)</span></code></pre>\n    </div>\n<p>Above shows some basic usage of flask route. And in run.py, we need to attach all the blueprint to the app.</p>\n\n    <div class=\"gatsby-highlight\" data-language=\"python\">\n      <pre class=\" cm-s-ambiance\"\n      ><code><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">os</span><span>\n</span><span class=\"cm-keyword\">from</span><span> </span><span class=\"cm-variable\">flask</span><span> </span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">Flask</span><span>\n</span><span class=\"cm-keyword\">import</span><span> </span><span class=\"cm-variable\">views</span><span>\n\n</span><span class=\"cm-keyword\">def</span><span> </span><span class=\"cm-def\">register_blueprint</span><span>(</span><span class=\"cm-variable\">app</span><span>):</span><span>\n</span><span>    </span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">module_name</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-variable\">views</span><span>.</span><span class=\"cm-property\">__all__</span><span>:</span><span>\n</span><span>        </span><span class=\"cm-variable\">module</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">import_module</span><span>(</span><span class=\"cm-string\">'views.'</span><span class=\"cm-operator\">+</span><span class=\"cm-variable\">module_name</span><span>)</span><span>\n</span><span>        </span><span class=\"cm-keyword\">for</span><span> </span><span class=\"cm-variable\">bp</span><span> </span><span class=\"cm-keyword\">in</span><span> </span><span class=\"cm-variable\">module</span><span>.</span><span class=\"cm-property\">__all__</span><span>:</span><span>\n</span><span>            </span><span class=\"cm-variable\">app</span><span>.</span><span class=\"cm-property\">register_blueprint</span><span>(</span><span class=\"cm-builtin\">getattr</span><span>(</span><span class=\"cm-variable\">module</span><span>, </span><span class=\"cm-variable\">bp</span><span>))</span><span>\n\n\n</span><span class=\"cm-variable\">app</span><span> </span><span class=\"cm-operator\">=</span><span> </span><span class=\"cm-variable\">Flask</span><span>(</span><span class=\"cm-variable\">__name__</span><span>, </span><span class=\"cm-variable\">template_folder</span><span class=\"cm-operator\">=</span><span class=\"cm-string\">'dist'</span><span>)</span><span>\n</span><span class=\"cm-variable\">register_blueprint</span><span>(</span><span class=\"cm-variable\">app</span><span>)</span><span>\n\n</span><span class=\"cm-keyword\">if</span><span> </span><span class=\"cm-variable\">__name__</span><span> </span><span class=\"cm-operator\">==</span><span> </span><span class=\"cm-string\">'__main__'</span><span>:</span><span>\n</span><span>    </span><span class=\"cm-variable\">app</span><span>.</span><span class=\"cm-property\">run</span><span>(</span><span class=\"cm-string\">'127.0.0.1'</span><span>, </span><span class=\"cm-variable\">port</span><span class=\"cm-operator\">=</span><span class=\"cm-number\">5000</span><span>, </span><span class=\"cm-variable\">debug</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">True</span><span>, </span><span class=\"cm-variable\">threaded</span><span class=\"cm-operator\">=</span><span class=\"cm-keyword\">True</span><span>)</span></code></pre>\n    </div>\n<p>And the backbone of a RESTful backend was finished. Easy, right?</p>","frontmatter":{"title":"Flask Basics"}}},"pageContext":{"slug":"/Flask-Basics/"}}