{"data":{"markdownRemark":{"html":"<p>这个作业是要求完成<code class=\"language-text\">sh.c</code>这个文件，来写一个shell。做这个作业之前还是需要看一下xv6 book的第一章的，不然有些地方会不明白。</p>\n<h2>Executing simple commands</h2>\n<p>简单来说，shell就是一个会循环读入每一行并对每一行做出反应的程序。所以除去<code class=\"language-text\">cd</code>指令（比较例外...），都是先fork一下，然后在child里对读进来的buffer进行parse并然后依据parse的内容运行对应的程序。</p>\n<p>对于执行简单工具，读过parse之后知道，simple commands就是用<code class=\"language-text\">type == &#39; &#39;</code>来表示的，其<code class=\"language-text\">argv</code>就是<code class=\"language-text\">execv</code>需要的，所以核心是：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token keyword\">case</span> <span class=\"token string\">' '</span><span class=\"token punctuation\">:</span>\n    ecmd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> execcmd<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>cmd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>ecmd<span class=\"token operator\">-></span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n      <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token function\">execv</span><span class=\"token punctuation\">(</span>ecmd<span class=\"token operator\">-></span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> ecmd<span class=\"token operator\">-></span>argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>注意，<code class=\"language-text\">runcmd</code>里面这个代码不能进行普通的<code class=\"language-text\">printf</code>，应该是因为都是在child里面运行的，而为什么输出最后都能返回parent，应该是因为执行的结果被重定向回了parent。但是神奇的是可以通过<code class=\"language-text\">stderr</code>输出，不知道为什么。。。</p>\n<h2>I/O redirection</h2>\n<p>注意，<code class=\"language-text\">open</code>，<code class=\"language-text\">dup</code>都会选择当时没被用的最小的file descriptor。然后io redirection再xv6 book里面有很相似的例子，代码很简单：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">case</span> <span class=\"token string\">'>'</span><span class=\"token punctuation\">:</span>\n<span class=\"token keyword\">case</span> <span class=\"token string\">'&lt;'</span><span class=\"token punctuation\">:</span>\n    rcmd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> redircmd<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>cmd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">int</span> mode <span class=\"token operator\">=</span> S_IRUSR <span class=\"token operator\">|</span> S_IWUSR<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">close</span><span class=\"token punctuation\">(</span>rcmd<span class=\"token operator\">-></span>fd<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fail to open %s\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token punctuation\">(</span>rcmd<span class=\"token operator\">-></span>fd <span class=\"token operator\">?</span> <span class=\"token string\">\"stdout\"</span> <span class=\"token punctuation\">:</span> <span class=\"token string\">\"stdin\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">open</span><span class=\"token punctuation\">(</span>rcmd<span class=\"token operator\">-></span>file<span class=\"token punctuation\">,</span> rcmd<span class=\"token operator\">-></span>flags<span class=\"token punctuation\">,</span> mode<span class=\"token punctuation\">)</span> <span class=\"token operator\">&lt;</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fail to open %s\\n\"</span><span class=\"token punctuation\">,</span> rcmd<span class=\"token operator\">-></span>file<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">runcmd</span><span class=\"token punctuation\">(</span>rcmd<span class=\"token operator\">-></span>cmd<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span></code></pre></div>\n<h2>Implement pipes</h2>\n<p>这里的难点就是<code class=\"language-text\">pipe</code>。对于<code class=\"language-text\">pipe</code>的讲解可以用xv6 book里面的例子来说：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">int</span> p<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">char</span> <span class=\"token operator\">*</span>argv<span class=\"token punctuation\">[</span><span class=\"token number\">2</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span>\nargv<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token string\">\"wc\"</span><span class=\"token punctuation\">;</span>\nargv<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n<span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 在child里面就留两个，一个是0 -> pipe read, 1 -> stdout</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// child里不连上stdin了</span>\n\t<span class=\"token function\">dup</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 0 -> pipe read</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// p[0]不连着pipe read</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// p[1]不连着pipe write了</span>\n\t<span class=\"token function\">exec</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"/bin/wc\"</span><span class=\"token punctuation\">,</span> argv<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// parent里面不动0, 1从而能和之后的的接上，然后留下p[1] -> pipe write，来向chile写入</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">write</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"hello world\\n\"</span><span class=\"token punctuation\">,</span> <span class=\"token number\">12</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\t<span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>所以类似的，pipes为：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token keyword\">case</span> <span class=\"token string\">'|'</span><span class=\"token punctuation\">:</span>\n    pcmd <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> pipecmd<span class=\"token operator\">*</span><span class=\"token punctuation\">)</span>cmd<span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">pipe</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>\n        <span class=\"token function\">fprintf</span><span class=\"token punctuation\">(</span><span class=\"token constant\">stderr</span><span class=\"token punctuation\">,</span> <span class=\"token string\">\"Fail to create pipe\\n\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">_exit</span><span class=\"token punctuation\">(</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">fork</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 0不变，1->pipe write</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token number\">1</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dup</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">runcmd</span><span class=\"token punctuation\">(</span>pcmd<span class=\"token operator\">-></span>left<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span> <span class=\"token keyword\">else</span> <span class=\"token punctuation\">{</span>  <span class=\"token comment\">// 0->pipe read，1不变</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span><span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">dup</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">0</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">close</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">[</span><span class=\"token number\">1</span><span class=\"token punctuation\">]</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n        <span class=\"token function\">wait</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>r<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// 这个wait重要</span>\n        <span class=\"token function\">runcmd</span><span class=\"token punctuation\">(</span>pcmd<span class=\"token operator\">-></span>right<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token keyword\">break</span><span class=\"token punctuation\">;</span>\n  <span class=\"token punctuation\">}</span></code></pre></div>\n<p>写完这三部分之后就可以运行测试代码了，</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ ./sh\n6.828$ sh <span class=\"token operator\">&lt;</span> t.sh\n     11      11      54\n     10      10      51</code></pre></div>\n<p>注意这里我并没有去写<code class=\"language-text\">PATH</code>这部分，所以改了<code class=\"language-text\">t.sh</code>，具体每个指令在哪里可以通过运行<code class=\"language-text\">which</code>指令来获取，如</p>\n<div class=\"gatsby-highlight\" data-language=\"bash\"><pre class=\"language-bash\"><code class=\"language-bash\">$ <span class=\"token function\">which</span> <span class=\"token function\">ls</span>\n/bin/ls</code></pre></div>\n<p>等项目代码部署到git上之后，会在这里贴一下我的<code class=\"language-text\">sh.c</code>的代码链接的。</p>","frontmatter":{"title":"6.828 Homework xv6 shell"}}},"pageContext":{"slug":"/6.828-hw-xv6-shell/"}}