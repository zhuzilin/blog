{"data":{"markdownRemark":{"html":"<p>这里会记录阅读6.828课程lecture note的我的个人笔记。可能会中英混杂，不是很适合外人阅读，也请见谅。</p>\n<h2>Lecture 10: Processes, threads, and scheduling</h2>\n<p>之前的一次作业基本上都是阅读代码和回答问题，所以就不单独列出来了。</p>\n<h3>Process scheduling</h3>\n<p>什么是进程：</p>\n<p>进程是an abstract virtual machine，仿佛其有自己的CPU和内存，并不受其他进程影响。主要是为了isolation。</p>\n<p>进程的主要API有：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  fork\n  exec\n  exit\n  wait\n  kill\n  sbrk\n  getpid</code></pre></div>\n<p>我们的挑战是很多时候，进程数比内核数多。这个时候我们就要用名叫time-sharing（分时）的方法，伴随以scheduling和context switch。</p>\n<p>我们的主要目标是：</p>\n<ul>\n<li>transparent to user processes (kernel对于用户应用不可见)</li>\n<li>pre-emptive for user processes</li>\n<li>pre-emptive for kernel (帮助系统作响应)</li>\n</ul>\n<p>xv6的解决方案是每个进程1个 user thread，1个kernel thread，每个处理器1个scheduler processor</p>\n<p>什么是线程：</p>\n<ul>\n<li>a CPU core executing (with register and stack)</li>\n<li>a saved set of registers and a stack that could execute</li>\n</ul>\n<p>xv6的进程切换的概况：</p>\n<ul>\n<li>user -> kernel thread (via system call or timer)</li>\n<li>kernel thread yields, due to pre-emption or waiting for I/O</li>\n<li>kernel thread -> scheduler thread</li>\n<li>scheduler thread finds a RUNNABLE kernel thread</li>\n<li>scheduler thread -> kernel thread</li>\n<li>kernel thread -> user</li>\n</ul>\n<p>每个xv6 process都有一个状态<code class=\"language-text\">proc-&gt;state</code>，可以的取值为：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  RUNNING\n  RUNNABLE\n  SLEEPING\n  ZOMBIE\n  UNUSED</code></pre></div>\n<p>注意：</p>\n<ul>\n<li>xv6有多个kernel thread，他们共享同一个kernel address space</li>\n<li>xv6的每个进程只有1个user thread</li>\n<li>像Linux这样的系统支持没个进程多个线程。</li>\n</ul>\n<p>context switching是xv6里最难做对的事了。</p>\n<p>下面让我们来看看xv6的代码来学习一下它是怎么进行context swtich的：</p>\n<p>我们没有讲义中提到的<code class=\"language-text\">hog.c</code>，所以没办法用gdb进行调试，不过还是可以跟着调试的路子看代码。</p>\n<p>当开始发生context swtich的时候，会先通过时间中断触发<code class=\"language-text\">trap()</code>中的这部分：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\">  <span class=\"token comment\">// Force process to give up CPU on clock tick.</span>\n  <span class=\"token comment\">// If interrupts were on while locks held, would need to check nlock.</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span> <span class=\"token operator\">&amp;&amp;</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> RUNNING <span class=\"token operator\">&amp;&amp;</span>\n     tf<span class=\"token operator\">-></span>trapno <span class=\"token operator\">==</span> T_IRQ0<span class=\"token operator\">+</span>IRQ_TIMER<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span></code></pre></div>\n<p>然后进入位于<code class=\"language-text\">proc.c</code>的<code class=\"language-text\">yield</code>：</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Give up the CPU for one scheduling round.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">yield</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">//DOC: yieldlock</span>\n  <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNABLE<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">sched</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>让当前进程等待之后，进入在同一个文件中的<code class=\"language-text\">shed()</code></p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Enter scheduler.  Must hold only ptable.lock</span>\n<span class=\"token comment\">// and have changed proc->state. Saves and restores</span>\n<span class=\"token comment\">// intena because intena is a property of this</span>\n<span class=\"token comment\">// kernel thread, not this CPU. It should</span>\n<span class=\"token comment\">// be proc->intena and proc->ncli, but that would</span>\n<span class=\"token comment\">// break in the few places where a lock is held but</span>\n<span class=\"token comment\">// there's no process.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">sched</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">int</span> intena<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> proc <span class=\"token operator\">*</span>p <span class=\"token operator\">=</span> <span class=\"token function\">myproc</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token operator\">!</span><span class=\"token function\">holding</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sched ptable.lock\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ncli <span class=\"token operator\">!=</span> <span class=\"token number\">1</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sched locks\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">==</span> RUNNING<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sched running\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span><span class=\"token function\">readeflags</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">&amp;</span>FL_IF<span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"sched interruptible\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  intena <span class=\"token operator\">=</span> <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>intena<span class=\"token punctuation\">;</span>\n  <span class=\"token function\">swtch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>p<span class=\"token operator\">-></span>context<span class=\"token punctuation\">,</span> <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>scheduler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>intena <span class=\"token operator\">=</span> intena<span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>之后就是<code class=\"language-text\">swtch()</code>函数，在<code class=\"language-text\">swtch.S</code>中：</p>\n<div class=\"gatsby-highlight\" data-language=\"assembly\"><pre class=\"language-assembly\"><code class=\"language-assembly\"># Context switch\n#\n#   void swtch(struct context **old, struct context *new);\n# \n# Save the current registers on the stack, creating\n# a struct context, and save its address in *old.\n# Switch stacks to new and pop previously-saved registers.\n\n.globl swtch\nswtch:\n  movl 4(%esp), %eax  # &amp;p-&gt;context\n  movl 8(%esp), %edx  # mycpu()-&gt;scheduler\n\n  # Save old callee-saved registers\n  pushl %ebp\n  pushl %ebx\n  pushl %esi\n  pushl %edi\n\n  # Switch stacks\n  movl %esp, (%eax)\n  movl %edx, %esp\n\n  # Load new callee-saved registers\n  popl %edi\n  popl %esi\n  popl %ebx\n  popl %ebp\n  ret</code></pre></div>\n<p>保存切换前的一些寄存器，切换到了<code class=\"language-text\">mycpu()-&gt;scheduler</code>这个处理器的scheduler thread里，然后把切换后的环境的寄存器恢复回来，然后return。</p>\n<p>scheduler thread里一直运行着<code class=\"language-text\">scheduler()</code>了。在<code class=\"language-text\">proc.c</code>中</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Per-CPU process scheduler.</span>\n<span class=\"token comment\">// Each CPU calls scheduler() after setting itself up.</span>\n<span class=\"token comment\">// Scheduler never returns.  It loops, doing:</span>\n<span class=\"token comment\">//  - choose a process to run</span>\n<span class=\"token comment\">//  - swtch to start running that process</span>\n<span class=\"token comment\">//  - eventually that process transfers control</span>\n<span class=\"token comment\">//      via swtch back to the scheduler.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">scheduler</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">void</span><span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">struct</span> proc <span class=\"token operator\">*</span>p<span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">struct</span> cpu <span class=\"token operator\">*</span>c <span class=\"token operator\">=</span> <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  c<span class=\"token operator\">-></span>proc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  \n  <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">;</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n    <span class=\"token comment\">// Enable interrupts on this processor.</span>\n    <span class=\"token function\">sti</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n    <span class=\"token comment\">// Loop over process table looking for process to run.</span>\n    <span class=\"token function\">acquire</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n    <span class=\"token keyword\">for</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">=</span> ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">;</span> p <span class=\"token operator\">&lt;</span> <span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>proc<span class=\"token punctuation\">[</span>NPROC<span class=\"token punctuation\">]</span><span class=\"token punctuation\">;</span> p<span class=\"token operator\">++</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">{</span>\n      <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>state <span class=\"token operator\">!=</span> RUNNABLE<span class=\"token punctuation\">)</span>\n        <span class=\"token keyword\">continue</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Switch to chosen process.  It is the process's job</span>\n      <span class=\"token comment\">// to release ptable.lock and then reacquire it</span>\n      <span class=\"token comment\">// before jumping back to us.</span>\n      c<span class=\"token operator\">-></span>proc <span class=\"token operator\">=</span> p<span class=\"token punctuation\">;</span>\n      <span class=\"token function\">switchuvm</span><span class=\"token punctuation\">(</span>p<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      p<span class=\"token operator\">-></span>state <span class=\"token operator\">=</span> RUNNING<span class=\"token punctuation\">;</span>\n\n      <span class=\"token function\">swtch</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span><span class=\"token punctuation\">(</span>c<span class=\"token operator\">-></span>scheduler<span class=\"token punctuation\">)</span><span class=\"token punctuation\">,</span> p<span class=\"token operator\">-></span>context<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n      <span class=\"token function\">switchkvm</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n      <span class=\"token comment\">// Process is done running for now.</span>\n      <span class=\"token comment\">// It should have changed its p->state before coming back.</span>\n      c<span class=\"token operator\">-></span>proc <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n    <span class=\"token punctuation\">}</span>\n    <span class=\"token function\">release</span><span class=\"token punctuation\">(</span><span class=\"token operator\">&amp;</span>ptable<span class=\"token punctuation\">.</span>lock<span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token punctuation\">}</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p>注意前面的<code class=\"language-text\">ptable.lock</code>和<code class=\"language-text\">yield</code>里是一个锁，就是为了在<code class=\"language-text\">yield</code>还没运行完之前不要运行<code class=\"language-text\">scheduler</code>里面的内容。对于下一个进程，调用<code class=\"language-text\">switchuvm()</code>。</p>\n<div class=\"gatsby-highlight\" data-language=\"c\"><pre class=\"language-c\"><code class=\"language-c\"><span class=\"token comment\">// Switch TSS and h/w page table to correspond to process p.</span>\n<span class=\"token keyword\">void</span>\n<span class=\"token function\">switchuvm</span><span class=\"token punctuation\">(</span><span class=\"token keyword\">struct</span> proc <span class=\"token operator\">*</span>p<span class=\"token punctuation\">)</span>\n<span class=\"token punctuation\">{</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"switchuvm: no process\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>kstack <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"switchuvm: no kstack\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token keyword\">if</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir <span class=\"token operator\">==</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span>\n    <span class=\"token function\">panic</span><span class=\"token punctuation\">(</span><span class=\"token string\">\"switchuvm: no pgdir\"</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n\n  <span class=\"token function\">pushcli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>gdt<span class=\"token punctuation\">[</span>SEG_TSS<span class=\"token punctuation\">]</span> <span class=\"token operator\">=</span> <span class=\"token function\">SEG16</span><span class=\"token punctuation\">(</span>STS_T32A<span class=\"token punctuation\">,</span> <span class=\"token operator\">&amp;</span><span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">,</span>\n                                <span class=\"token keyword\">sizeof</span><span class=\"token punctuation\">(</span><span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">)</span><span class=\"token operator\">-</span><span class=\"token number\">1</span><span class=\"token punctuation\">,</span> <span class=\"token number\">0</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>gdt<span class=\"token punctuation\">[</span>SEG_TSS<span class=\"token punctuation\">]</span><span class=\"token punctuation\">.</span>s <span class=\"token operator\">=</span> <span class=\"token number\">0</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">.</span>ss0 <span class=\"token operator\">=</span> SEG_KDATA <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">.</span>esp0 <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>uint<span class=\"token punctuation\">)</span>p<span class=\"token operator\">-></span>kstack <span class=\"token operator\">+</span> KSTACKSIZE<span class=\"token punctuation\">;</span>\n  <span class=\"token comment\">// setting IOPL=0 in eflags *and* iomb beyond the tss segment limit</span>\n  <span class=\"token comment\">// forbids I/O instructions (e.g., inb and outb) from user space</span>\n  <span class=\"token function\">mycpu</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token operator\">-></span>ts<span class=\"token punctuation\">.</span>iomb <span class=\"token operator\">=</span> <span class=\"token punctuation\">(</span>ushort<span class=\"token punctuation\">)</span> <span class=\"token number\">0xFFFF</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">ltr</span><span class=\"token punctuation\">(</span>SEG_TSS <span class=\"token operator\">&lt;&lt;</span> <span class=\"token number\">3</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n  <span class=\"token function\">lcr3</span><span class=\"token punctuation\">(</span><span class=\"token function\">V2P</span><span class=\"token punctuation\">(</span>p<span class=\"token operator\">-></span>pgdir<span class=\"token punctuation\">)</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>  <span class=\"token comment\">// switch to process's address space</span>\n  <span class=\"token function\">popcli</span><span class=\"token punctuation\">(</span><span class=\"token punctuation\">)</span><span class=\"token punctuation\">;</span>\n<span class=\"token punctuation\">}</span></code></pre></div>\n<p><code class=\"language-text\">switchuvm</code>主要就是把栈的地址换好，再换好page directory，注意在这过程中开了中断了。回到<code class=\"language-text\">scheduler</code>，发现再进行下一次切换之前都不会做什么了。</p>\n<p>下面是关于这整个步骤的几个问题：</p>\n<ul>\n<li>\n<p>scheduling policy是什么：</p>\n<p>因为是循环运行，所以是Round Robin。除非只有两个进程在同时运行，刚刚<code class=\"language-text\">yield</code>的程序不会被马上运行。</p>\n</li>\n<li>\n<p>为什么<code class=\"language-text\">scheduler</code>会在每个循环后会<code class=\"language-text\">release</code>，循环前会<code class=\"language-text\">acquire</code>。</p>\n</li>\n</ul>","frontmatter":{"title":"6.828 笔记9"}}},"pageContext":{"slug":"/6.828-note9/"}}