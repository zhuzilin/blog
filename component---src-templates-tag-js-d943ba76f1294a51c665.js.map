{"version":3,"file":"component---src-templates-tag-js-d943ba76f1294a51c665.js","mappings":"oKA+DA,UAvDaA,IAA4B,IAA3B,YAAEC,EAAW,KAAEC,GAAMF,EACjC,MAAM,IAAEG,GAAQF,GACV,MAAEG,EAAK,WAAEC,GAAeH,EAAKI,kBAC7BC,EAAY,GAAGF,SACJ,IAAfA,EAAmB,GAAK,oBACTF,KAEjB,OACEK,EAAAA,EAAAA,GAACC,EAAAA,EAAM,MACHD,EAAAA,EAAAA,GAAA,YACAA,EAAAA,EAAAA,GAAA,SAAID,GACCH,EAAMM,IAAI,CAAAC,EAAWC,KAAO,IAAjB,KAAEC,GAAMF,EACpB,MAAM,KAAEG,GAASD,EAAKE,QAChB,MAAEC,GAAUH,EAAKI,YACvB,OACIT,EAAAA,EAAAA,GAAA,MAAIU,IAAKJ,IACPN,EAAAA,EAAAA,GAACW,EAAAA,GAAI,CAACC,GAAIN,GACP,GAAGF,EAAE,MAAMI,SASxBR,EAAAA,EAAAA,GAACW,EAAAA,GAAI,CAACC,GAAG,SAAQ,c","sources":["webpack://zhuzilin-blog/./src/templates/tag.js"],"sourcesContent":["import React from \"react\"\nimport PropTypes from \"prop-types\"\n\n// Components\nimport { Link, graphql } from \"gatsby\"\nimport Layout from \"../components/layout\"\nimport '../styles/tag.css';\n\nconst Tags = ({ pageContext, data }) => {\n  const { tag } = pageContext\n  const { edges, totalCount } = data.allMarkdownRemark\n  const tagHeader = `${totalCount} post${\n    totalCount === 1 ? \"\" : \"s\"\n  } tagged with \"${tag}\"`\n\n  return (\n    <Layout>\n        <div>\n        <p>{tagHeader}</p>\n            {edges.map(({ node }, i) => {\n            const { slug } = node.fields\n            const { title } = node.frontmatter\n            return (\n                <h2 key={slug}>\n                  <Link to={slug}>\n                    {`${i+1}. ${title}`}\n                  </Link>\n                </h2>\n            )\n            })}\n        {/*\n                This links to a page that does not yet exist.\n                We'll come back to it!\n                */}\n        <Link to=\"/tags\">All tags</Link>\n        </div>\n    </Layout>\n  )\n}\n\nTags.propTypes = {\n  pageContext: PropTypes.shape({\n    tag: PropTypes.string.isRequired,\n  }),\n  data: PropTypes.shape({\n    allMarkdownRemark: PropTypes.shape({\n      totalCount: PropTypes.number.isRequired,\n      edges: PropTypes.arrayOf(\n        PropTypes.shape({\n          node: PropTypes.shape({\n            frontmatter: PropTypes.shape({\n              title: PropTypes.string.isRequired,\n            }),\n            fields: PropTypes.shape({\n              slug: PropTypes.string.isRequired,\n            }),\n          }),\n        }).isRequired\n      ),\n    }),\n  }),\n}\n\nexport default Tags\n\nexport const pageQuery = graphql`\n  query($tag: String) {\n    allMarkdownRemark(\n      limit: 2000\n      sort: { frontmatter: { date: DESC } }\n      filter: { frontmatter: { tags: { in: [$tag] } } }\n    ) {\n      totalCount\n      edges {\n        node {\n          fields {\n            slug\n          }\n          frontmatter {\n            title\n          }\n        }\n      }\n    }\n  }\n`"],"names":["_ref","pageContext","data","tag","edges","totalCount","allMarkdownRemark","tagHeader","___EmotionJSX","Layout","map","_ref2","i","node","slug","fields","title","frontmatter","key","Link","to"],"sourceRoot":""}